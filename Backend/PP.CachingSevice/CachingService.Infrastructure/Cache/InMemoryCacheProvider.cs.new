using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using CachingService.Core.Configuration;
using CachingService.Core.Events;
using CachingService.Core.Interfaces;
using CachingService.Core.Models;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace CachingService.Infrastructure.Cache;

/// <summary>
/// In-memory implementation of the cache provider interface
/// </summary>
public class InMemoryCacheProvider : ICacheProvider
{
    private readonly ConcurrentDictionary<string, object> _cache = new();
    private readonly CacheOptions _options;
    private readonly ILogger<InMemoryCacheProvider> _logger;
    private readonly ICacheEventPublisher _eventPublisher;
    private readonly CacheStatistics _statistics;
    private readonly SemaphoreSlim _statsLock = new(1, 1);

    public string ProviderId => "InMemory";

    public InMemoryCacheProvider(
        IOptions<CacheOptions> options,
        ILogger<InMemoryCacheProvider> logger,
        ICacheEventPublisher eventPublisher)
    {
        _options = options.Value;
        _logger = logger;
        _eventPublisher = eventPublisher;
        _statistics = new CacheStatistics
        {
            ProviderId = ProviderId,
            MemoryUsage = new MemoryUsage
            {
                AllocatedBytes = _options.InMemory.SizeLimit ?? 0,
                UsedBytes = 0
            }
        };
    }

    /// <inheritdoc />
    public async Task<CacheItem<T>?> GetAsync<T>(string key, string? region = null, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        string fullKey = GetFullKey(key, region);

        if (_cache.TryGetValue(fullKey, out object? value) && value is CacheItem<T> cacheItem)
        {
            if (cacheItem.IsExpired)
            {
                await RemoveAsync(key, region, cancellationToken);

                _eventPublisher.Publish(new CacheItemRemovedEvent
                {
                    Key = key,
                    Region = region,
                    ProviderId = ProviderId,
                    Reason = CacheItemRemovalReason.Expired
                });

                await IncrementStatisticAsync(x => x.Misses++);
                await IncrementRegionStatisticAsync(region, x => x.Misses++);

                return null;
            }

            cacheItem.RecordAccess();

            _eventPublisher.Publish(new CacheItemAccessedEvent
            {
                Key = key,
                Region = region,
                ProviderId = ProviderId,
                IsHit = true
            });

            await IncrementStatisticAsync(x => x.Hits++);
            await IncrementRegionStatisticAsync(region, x => x.Hits++);

            return cacheItem;
        }

        _eventPublisher.Publish(new CacheItemAccessedEvent
        {
            Key = key,
            Region = region,
            ProviderId = ProviderId,
            IsHit = false
        });

        await IncrementStatisticAsync(x => x.Misses++);
        await IncrementRegionStatisticAsync(region, x => x.Misses++);

        return null;
    }

    /// <inheritdoc />
    public Task<bool> SetAsync<T>(CacheItem<T> item, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        if (string.IsNullOrWhiteSpace(item.Key))
        {
            throw new ArgumentException("Cache key cannot be null or empty", nameof(item.Key));
        }

        string fullKey = GetFullKey(item.Key, item.Region);

        // Calculate size if tracking is enabled
        if (_options.TrackSize && !item.SizeInBytes.HasValue)
        {
            try
            {
                string json = JsonSerializer.Serialize(item.Value);
                item.SizeInBytes = json.Length * sizeof(char);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Failed to calculate size for cache item {Key}", item.Key);
            }
        }

        // Check if we need to evict items due to size constraints
        if (_options.InMemory.SizeLimit.HasValue && GetCurrentCacheSize() + (item.SizeInBytes ?? 0) > _options.InMemory.SizeLimit.Value)
        {
            EvictItems();
        }

        bool replaced = _cache.ContainsKey(fullKey);
        _cache[fullKey] = item;

        Task.Run(() =>
        {
            if (replaced)
            {
                _eventPublisher.Publish(new CacheItemRemovedEvent
                {
                    Key = item.Key,
                    Region = item.Region,
                    ProviderId = ProviderId,
                    Reason = CacheItemRemovalReason.Replaced
                });
            }

            _eventPublisher.Publish(new CacheItemAddedEvent
            {
                Key = item.Key,
                Region = item.Region,
                ProviderId = ProviderId,
                ValueType = typeof(T),
                SizeInBytes = item.SizeInBytes,
                ExpiresAt = item.ExpiresAt
            });

            IncrementStatisticAsync(x =>
            {
                if (!replaced) x.ItemCount++;

                if (item.SizeInBytes.HasValue)
                {
                    if (x.MemoryUsage != null)
                    {
                        x.MemoryUsage.UsedBytes += item.SizeInBytes.Value;
                    }

                    if (x.TotalSizeInBytes.HasValue)
                    {
                        x.TotalSizeInBytes += item.SizeInBytes.Value;
                    }
                    else
                    {
                        x.TotalSizeInBytes = item.SizeInBytes.Value;
                    }
                }
            });

            IncrementRegionStatisticAsync(item.Region, x =>
            {
                if (!replaced) x.ItemCount++;

                if (item.SizeInBytes.HasValue)
                {
                    if (x.SizeInBytes.HasValue)
                    {
                        x.SizeInBytes += item.SizeInBytes.Value;
                    }
                    else
                    {
                        x.SizeInBytes = item.SizeInBytes.Value;
                    }
                }
            });
        });

        return Task.FromResult(true);
    }

    /// <inheritdoc />
    public Task<bool> RemoveAsync(string key, string? region = null, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        string fullKey = GetFullKey(key, region);

        bool result = _cache.TryRemove(fullKey, out object? removedItem);

        if (result && removedItem != null)
        {
            Task.Run(() =>
            {
                _eventPublisher.Publish(new CacheItemRemovedEvent
                {
                    Key = key,
                    Region = region,
                    ProviderId = ProviderId,
                    Reason = CacheItemRemovalReason.Removed
                });

                // Update statistics
                UpdateStatisticsForRemovedItem(removedItem, region);
            });
        }

        return Task.FromResult(result);
    }

    /// <inheritdoc />
    public Task<bool> ExistsAsync(string key, string? region = null, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        string fullKey = GetFullKey(key, region);

        if (_cache.TryGetValue(fullKey, out object? value))
        {
            // Check if the item is expired
            if (value is CacheItemBase cacheItem && cacheItem.IsExpired)
            {
                // Remove expired item asynchronously
                Task.Run(() => RemoveAsync(key, region, CancellationToken.None));
                return Task.FromResult(false);
            }

            return Task.FromResult(true);
        }

        return Task.FromResult(false);
    }

    /// <inheritdoc />
    public async Task<bool> ClearAsync(string? region = null, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        int removed = 0;

        if (region == null)
        {
            // Clear all items
            removed = _cache.Count;
            _cache.Clear();

            // Reset statistics
            await ResetStatisticsAsync();
        }
        else
        {
            // Clear only items in the specified region
            string prefix = $"{region}:";

            var keysToRemove = _cache.Keys
                .Where(k => k.StartsWith(prefix))
                .ToList();

            foreach (var key in keysToRemove)
            {
                if (_cache.TryRemove(key, out _))
                {
                    removed++;
                }
            }

            // Reset region statistics
            await ResetRegionStatisticsAsync(region);
        }

        _eventPublisher.Publish(new CacheClearedEvent
        {
            Region = region,
            ProviderId = ProviderId,
            ItemsRemoved = removed
        });

        return true;
    }
}
