    #region Helper Methods
    
    private string GetFullKey(string key, string? region)
    {
        return string.IsNullOrWhiteSpace(region) ? key : $"{region}:{key}";
    }
    
    private long GetCurrentCacheSize()
    {
        long size = 0;
        
        foreach (var item in _cache.Values)
        {
            if (item is CacheItemBase cacheItem && cacheItem.SizeInBytes.HasValue)
            {
                size += cacheItem.SizeInBytes.Value;
            }
        }
        
        return size;
    }
    
    private int EvictItems()
    {
        int evicted = 0;
        long currentSize = GetCurrentCacheSize();
        long targetSize = _options.InMemory.SizeLimit.HasValue
            ? (long)(_options.InMemory.SizeLimit.Value * (1 - _options.InMemory.CompactionPercentage))
            : 0;
        
        if (targetSize <= 0 || currentSize <= targetSize)
        {
            return evicted;
        }
        
        // Get all non-expired items
        var items = _cache.Values
            .OfType<CacheItemBase>()
            .Where(item => !item.IsExpired)
            .ToList();
        
        // Sort items based on eviction policy
        IEnumerable<CacheItemBase> sortedItems;
        
        switch (_options.InMemory.EvictionPolicy.ToUpperInvariant())
        {
            case "LRU":
                // Least Recently Used - evict items that haven't been accessed in the longest time
                sortedItems = items.OrderBy(item => item.LastAccessedAt);
                break;
            
            case "LFU":
                // Least Frequently Used - evict items that have been accessed the least
                sortedItems = items.OrderBy(item => item.AccessCount);
                break;
            
            case "FIFO":
                // First In First Out - evict oldest items first
                sortedItems = items.OrderBy(item => item.CreatedAt);
                break;
            
            default:
                // Default to LRU
                sortedItems = items.OrderBy(item => item.LastAccessedAt);
                break;
        }
        
        // Evict items until we reach the target size
        foreach (var item in sortedItems)
        {
            string fullKey = GetFullKey(item.Key, item.Region);
            
            if (_cache.TryRemove(fullKey, out object? removedItem))
            {
                evicted++;
                
                Task.Run(() => 
                {
                    _eventPublisher.Publish(new CacheItemRemovedEvent
                    {
                        Key = item.Key,
                        Region = item.Region,
                        ProviderId = ProviderId,
                        Reason = CacheItemRemovalReason.Evicted
                    });
                    
                    // Update statistics
                    IncrementStatisticAsync(x => x.Evictions++);
                    UpdateStatisticsForRemovedItem(removedItem, item.Region);
                });
                
                // If item has a size, subtract it from the current size
                if (item.SizeInBytes.HasValue)
                {
                    currentSize -= item.SizeInBytes.Value;
                    
                    // If we've reached the target size, stop evicting
                    if (currentSize <= targetSize)
                    {
                        break;
                    }
                }
            }
        }
        
        return evicted;
    }
    
    private async Task IncrementStatisticAsync(Action<CacheStatistics> action)
    {
        await _statsLock.WaitAsync();
        try
        {
            action(_statistics);
        }
        finally
        {
            _statsLock.Release();
        }
    }
    
    private async Task IncrementRegionStatisticAsync(string? region, Action<RegionStatistics> action)
    {
        if (string.IsNullOrWhiteSpace(region))
        {
            return;
        }
        
        await _statsLock.WaitAsync();
        try
        {
            if (!_statistics.RegionStats.TryGetValue(region, out RegionStatistics? regionStats))
            {
                regionStats = new RegionStatistics { Region = region };
                _statistics.RegionStats[region] = regionStats;
            }
            
            action(regionStats);
        }
        finally
        {
            _statsLock.Release();
        }
    }
    
    private async Task ResetStatisticsAsync()
    {
        await _statsLock.WaitAsync();
        try
        {
            _statistics.ItemCount = 0;
            _statistics.TotalSizeInBytes = 0;
            _statistics.Hits = 0;
            _statistics.Misses = 0;
            _statistics.Evictions = 0;
            _statistics.LastResetTime = DateTimeOffset.UtcNow;
            _statistics.RegionStats.Clear();
            
            if (_statistics.MemoryUsage != null)
            {
                _statistics.MemoryUsage.UsedBytes = 0;
            }
        }
        finally
        {
            _statsLock.Release();
        }
    }
    
    private async Task ResetRegionStatisticsAsync(string region)
    {
        if (string.IsNullOrWhiteSpace(region))
        {
            return;
        }
        
        await _statsLock.WaitAsync();
        try
        {
            if (_statistics.RegionStats.TryGetValue(region, out RegionStatistics? regionStats))
            {
                regionStats.ItemCount = 0;
                regionStats.SizeInBytes = 0;
                regionStats.Hits = 0;
                regionStats.Misses = 0;
            }
        }
        finally
        {
            _statsLock.Release();
        }
    }
    
    private void UpdateStatisticsForRemovedItem(object removedItem, string? region)
    {
        if (removedItem is CacheItemBase cacheItem && cacheItem.SizeInBytes.HasValue)
        {
            IncrementStatisticAsync(x => 
            {
                x.ItemCount--;
                
                if (x.TotalSizeInBytes.HasValue)
                {
                    x.TotalSizeInBytes -= cacheItem.SizeInBytes.Value;
                    if (x.TotalSizeInBytes < 0)
                    {
                        x.TotalSizeInBytes = 0;
                    }
                }
                
                if (x.MemoryUsage != null)
                {
                    x.MemoryUsage.UsedBytes -= cacheItem.SizeInBytes.Value;
                    if (x.MemoryUsage.UsedBytes < 0)
                    {
                        x.MemoryUsage.UsedBytes = 0;
                    }
                }
            });
            
            if (!string.IsNullOrWhiteSpace(region))
            {
                IncrementRegionStatisticAsync(region, x => 
                {
                    x.ItemCount--;
                    
                    if (x.SizeInBytes.HasValue)
                    {
                        x.SizeInBytes -= cacheItem.SizeInBytes.Value;
                        if (x.SizeInBytes < 0)
                        {
                            x.SizeInBytes = 0;
                        }
                    }
                });
            }
        }
    }
    
    #endregion
