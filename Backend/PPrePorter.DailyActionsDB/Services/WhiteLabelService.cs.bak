// This file is renamed to .bak to avoid compilation errors
// The original implementation is preserved for future reference

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using PPrePorter.DailyActionsDB.Data;
using PPrePorter.DailyActionsDB.Interfaces;
using PPrePorter.DailyActionsDB.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace PPrePorter.DailyActionsDB.Services
{
    /// <summary>
    /// Service for white label operations
    /// </summary>
    public class WhiteLabelServiceOriginal : IWhiteLabelService
    {
        private readonly DailyActionsDbContext _dbContext;
        private readonly ILogger<WhiteLabelServiceOriginal> _logger;

        public WhiteLabelServiceOriginal(
            DailyActionsDbContext dbContext,
            ILogger<WhiteLabelServiceOriginal> logger)
        {
            _dbContext = dbContext ?? throw new ArgumentNullException(nameof(dbContext));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<WhiteLabel>> GetAllWhiteLabelsAsync(bool includeInactive = false)
        {
            try
            {
                var query = _dbContext.WhiteLabels.AsQueryable();
                
                if (!includeInactive)
                {
                    query = query.Where(wl => wl.IsActive);
                }
                
                return await query.ToListAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting all white labels");
                throw;
            }
        }

        /// <inheritdoc/>
        public async Task<WhiteLabel?> GetWhiteLabelByIdAsync(int id)
        {
            try
            {
                return await _dbContext.WhiteLabels.FindAsync(id);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting white label with ID {Id}", id);
                throw;
            }
        }

        /// <inheritdoc/>
        public async Task<WhiteLabel> AddWhiteLabelAsync(WhiteLabel whiteLabel)
        {
            try
            {
                _dbContext.WhiteLabels.Add(whiteLabel);
                await _dbContext.SaveChangesAsync();
                return whiteLabel;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error adding white label {Name}", whiteLabel.Name);
                throw;
            }
        }

        /// <inheritdoc/>
        public async Task<WhiteLabel> UpdateWhiteLabelAsync(WhiteLabel whiteLabel)
        {
            try
            {
                _dbContext.Entry(whiteLabel).State = EntityState.Modified;
                await _dbContext.SaveChangesAsync();
                return whiteLabel;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating white label with ID {Id}", whiteLabel.Id);
                throw;
            }
        }

        /// <inheritdoc/>
        public async Task<bool> DeleteWhiteLabelAsync(int id)
        {
            try
            {
                var whiteLabel = await _dbContext.WhiteLabels.FindAsync(id);
                if (whiteLabel == null)
                {
                    return false;
                }

                // Check if there are any daily actions associated with this white label
                var hasAssociatedData = await _dbContext.DailyActions
                    .AnyAsync(da => da.WhiteLabelID == id);
                
                if (hasAssociatedData)
                {
                    // Instead of deleting, mark as inactive
                    whiteLabel.IsActive = false;
                    await _dbContext.SaveChangesAsync();
                    return true;
                }
                
                // If no associated data, delete the white label
                _dbContext.WhiteLabels.Remove(whiteLabel);
                await _dbContext.SaveChangesAsync();
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting white label with ID {Id}", id);
                throw;
            }
        }
    }
}
