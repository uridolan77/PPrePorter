# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pythonml_pb2 as pythonml__pb2


class PythonMLServiceStub(object):
    """Service definition for PythonML operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessData = channel.unary_unary(
                '/pythonml.PythonMLService/ProcessData',
                request_serializer=pythonml__pb2.ProcessRequest.SerializeToString,
                response_deserializer=pythonml__pb2.ProcessResponse.FromString,
                )
        self.ProcessDataStream = channel.unary_stream(
                '/pythonml.PythonMLService/ProcessDataStream',
                request_serializer=pythonml__pb2.ProcessRequest.SerializeToString,
                response_deserializer=pythonml__pb2.ProcessResponseChunk.FromString,
                )
        self.TrainModel = channel.unary_unary(
                '/pythonml.PythonMLService/TrainModel',
                request_serializer=pythonml__pb2.TrainRequest.SerializeToString,
                response_deserializer=pythonml__pb2.TrainResponse.FromString,
                )
        self.TrainModelStream = channel.stream_unary(
                '/pythonml.PythonMLService/TrainModelStream',
                request_serializer=pythonml__pb2.TrainRequestChunk.SerializeToString,
                response_deserializer=pythonml__pb2.TrainResponse.FromString,
                )
        self.GetModelInfo = channel.unary_unary(
                '/pythonml.PythonMLService/GetModelInfo',
                request_serializer=pythonml__pb2.ModelInfoRequest.SerializeToString,
                response_deserializer=pythonml__pb2.ModelInfoResponse.FromString,
                )
        self.ListModels = channel.unary_unary(
                '/pythonml.PythonMLService/ListModels',
                request_serializer=pythonml__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=pythonml__pb2.ListModelsResponse.FromString,
                )
        self.ChangeModelStage = channel.unary_unary(
                '/pythonml.PythonMLService/ChangeModelStage',
                request_serializer=pythonml__pb2.ModelStageRequest.SerializeToString,
                response_deserializer=pythonml__pb2.ModelStageResponse.FromString,
                )
        self.CheckHealth = channel.unary_unary(
                '/pythonml.PythonMLService/CheckHealth',
                request_serializer=pythonml__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=pythonml__pb2.HealthCheckResponse.FromString,
                )


class PythonMLServiceServicer(object):
    """Service definition for PythonML operations
    """

    def ProcessData(self, request, context):
        """Process data using ML model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessDataStream(self, request, context):
        """Process data using ML model with streaming response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainModel(self, request, context):
        """Train ML model with provided data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainModelStream(self, request_iterator, context):
        """Train ML model with streaming data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelInfo(self, request, context):
        """Get model information and capabilities
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """List available models
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeModelStage(self, request, context):
        """Change model stage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Check service health
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PythonMLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessData': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessData,
                    request_deserializer=pythonml__pb2.ProcessRequest.FromString,
                    response_serializer=pythonml__pb2.ProcessResponse.SerializeToString,
            ),
            'ProcessDataStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessDataStream,
                    request_deserializer=pythonml__pb2.ProcessRequest.FromString,
                    response_serializer=pythonml__pb2.ProcessResponseChunk.SerializeToString,
            ),
            'TrainModel': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainModel,
                    request_deserializer=pythonml__pb2.TrainRequest.FromString,
                    response_serializer=pythonml__pb2.TrainResponse.SerializeToString,
            ),
            'TrainModelStream': grpc.stream_unary_rpc_method_handler(
                    servicer.TrainModelStream,
                    request_deserializer=pythonml__pb2.TrainRequestChunk.FromString,
                    response_serializer=pythonml__pb2.TrainResponse.SerializeToString,
            ),
            'GetModelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelInfo,
                    request_deserializer=pythonml__pb2.ModelInfoRequest.FromString,
                    response_serializer=pythonml__pb2.ModelInfoResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=pythonml__pb2.ListModelsRequest.FromString,
                    response_serializer=pythonml__pb2.ListModelsResponse.SerializeToString,
            ),
            'ChangeModelStage': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeModelStage,
                    request_deserializer=pythonml__pb2.ModelStageRequest.FromString,
                    response_serializer=pythonml__pb2.ModelStageResponse.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=pythonml__pb2.HealthCheckRequest.FromString,
                    response_serializer=pythonml__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pythonml.PythonMLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PythonMLService(object):
    """Service definition for PythonML operations
    """

    @staticmethod
    def ProcessData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pythonml.PythonMLService/ProcessData',
            pythonml__pb2.ProcessRequest.SerializeToString,
            pythonml__pb2.ProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessDataStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pythonml.PythonMLService/ProcessDataStream',
            pythonml__pb2.ProcessRequest.SerializeToString,
            pythonml__pb2.ProcessResponseChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pythonml.PythonMLService/TrainModel',
            pythonml__pb2.TrainRequest.SerializeToString,
            pythonml__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainModelStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/pythonml.PythonMLService/TrainModelStream',
            pythonml__pb2.TrainRequestChunk.SerializeToString,
            pythonml__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pythonml.PythonMLService/GetModelInfo',
            pythonml__pb2.ModelInfoRequest.SerializeToString,
            pythonml__pb2.ModelInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pythonml.PythonMLService/ListModels',
            pythonml__pb2.ListModelsRequest.SerializeToString,
            pythonml__pb2.ListModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeModelStage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pythonml.PythonMLService/ChangeModelStage',
            pythonml__pb2.ModelStageRequest.SerializeToString,
            pythonml__pb2.ModelStageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pythonml.PythonMLService/CheckHealth',
            pythonml__pb2.HealthCheckRequest.SerializeToString,
            pythonml__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
