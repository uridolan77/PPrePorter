{"version":3,"file":"static/js/9758.83d0e70b.chunk.js","mappings":"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","sources":["mockData/dashboard/topGames.ts","mockData/dashboard/stats.ts","mockData/dashboard/playerRegistrations.ts","mockData/dashboard/casinoRevenue.ts","mockData/dashboard/playerJourney.ts","mockData/dashboard/kpi.ts","mockData/dashboard/index.ts","mockData/dashboard/recentTransactions.ts"],"sourcesContent":["/**\n * Top Games Mock Data\n */\n\n/**\n * Mock game categories\n */\nconst gameCategories = [\n  'slots',\n  'table',\n  'live',\n  'poker',\n  'sports',\n  'arcade'\n];\n\n/**\n * Mock game providers\n */\nconst gameProviders = [\n  'NetEnt',\n  'Microgaming',\n  'Playtech',\n  'Evolution Gaming',\n  'Pragmatic Play',\n  'Yggdrasil',\n  'Play\\'n GO',\n  'Red Tiger'\n];\n\n/**\n * Mock games data\n */\nconst games = [\n  {\n    id: 'game-1',\n    name: 'Starburst',\n    category: 'slots',\n    provider: 'NetEnt',\n    revenue: 125000,\n    players: 8500,\n    bets: 45000,\n    rtp: 0.96,\n    popularity: 9.8,\n    releaseDate: '2012-01-15',\n    image: 'https://via.placeholder.com/150?text=Starburst'\n  },\n  {\n    id: 'game-2',\n    name: 'Gonzo\\'s Quest',\n    category: 'slots',\n    provider: 'NetEnt',\n    revenue: 110000,\n    players: 7800,\n    bets: 42000,\n    rtp: 0.95,\n    popularity: 9.6,\n    releaseDate: '2013-05-20',\n    image: 'https://via.placeholder.com/150?text=Gonzo'\n  },\n  {\n    id: 'game-3',\n    name: 'Book of Dead',\n    category: 'slots',\n    provider: 'Play\\'n GO',\n    revenue: 95000,\n    players: 7200,\n    bets: 38000,\n    rtp: 0.94,\n    popularity: 9.5,\n    releaseDate: '2014-11-10',\n    image: 'https://via.placeholder.com/150?text=BookOfDead'\n  },\n  {\n    id: 'game-4',\n    name: 'Blackjack VIP',\n    category: 'table',\n    provider: 'Evolution Gaming',\n    revenue: 85000,\n    players: 5500,\n    bets: 32000,\n    rtp: 0.99,\n    popularity: 9.3,\n    releaseDate: '2015-03-25',\n    image: 'https://via.placeholder.com/150?text=BlackjackVIP'\n  },\n  {\n    id: 'game-5',\n    name: 'Lightning Roulette',\n    category: 'live',\n    provider: 'Evolution Gaming',\n    revenue: 78000,\n    players: 6200,\n    bets: 30000,\n    rtp: 0.97,\n    popularity: 9.4,\n    releaseDate: '2018-02-15',\n    image: 'https://via.placeholder.com/150?text=LightningRoulette'\n  },\n  {\n    id: 'game-6',\n    name: 'Mega Moolah',\n    category: 'slots',\n    provider: 'Microgaming',\n    revenue: 72000,\n    players: 5800,\n    bets: 28000,\n    rtp: 0.93,\n    popularity: 9.2,\n    releaseDate: '2008-11-28',\n    image: 'https://via.placeholder.com/150?text=MegaMoolah'\n  },\n  {\n    id: 'game-7',\n    name: 'Texas Hold\\'em',\n    category: 'poker',\n    provider: 'Playtech',\n    revenue: 68000,\n    players: 4900,\n    bets: 25000,\n    rtp: 0.98,\n    popularity: 9.0,\n    releaseDate: '2010-07-12',\n    image: 'https://via.placeholder.com/150?text=TexasHoldem'\n  },\n  {\n    id: 'game-8',\n    name: 'Football Studio',\n    category: 'live',\n    provider: 'Evolution Gaming',\n    revenue: 65000,\n    players: 5100,\n    bets: 24000,\n    rtp: 0.96,\n    popularity: 8.9,\n    releaseDate: '2019-06-05',\n    image: 'https://via.placeholder.com/150?text=FootballStudio'\n  },\n  {\n    id: 'game-9',\n    name: 'Sweet Bonanza',\n    category: 'slots',\n    provider: 'Pragmatic Play',\n    revenue: 62000,\n    players: 5300,\n    bets: 23000,\n    rtp: 0.95,\n    popularity: 9.1,\n    releaseDate: '2019-06-25',\n    image: 'https://via.placeholder.com/150?text=SweetBonanza'\n  },\n  {\n    id: 'game-10',\n    name: 'Immortal Romance',\n    category: 'slots',\n    provider: 'Microgaming',\n    revenue: 58000,\n    players: 4800,\n    bets: 22000,\n    rtp: 0.94,\n    popularity: 8.8,\n    releaseDate: '2011-12-05',\n    image: 'https://via.placeholder.com/150?text=ImmortalRomance'\n  },\n  {\n    id: 'game-11',\n    name: 'Crazy Time',\n    category: 'live',\n    provider: 'Evolution Gaming',\n    revenue: 55000,\n    players: 4600,\n    bets: 21000,\n    rtp: 0.95,\n    popularity: 9.0,\n    releaseDate: '2020-06-10',\n    image: 'https://via.placeholder.com/150?text=CrazyTime'\n  },\n  {\n    id: 'game-12',\n    name: 'Vikings Go Berzerk',\n    category: 'slots',\n    provider: 'Yggdrasil',\n    revenue: 52000,\n    players: 4400,\n    bets: 20000,\n    rtp: 0.96,\n    popularity: 8.7,\n    releaseDate: '2016-11-22',\n    image: 'https://via.placeholder.com/150?text=VikingsGoBerzerk'\n  },\n  {\n    id: 'game-13',\n    name: 'European Roulette',\n    category: 'table',\n    provider: 'Playtech',\n    revenue: 48000,\n    players: 4200,\n    bets: 19000,\n    rtp: 0.97,\n    popularity: 8.6,\n    releaseDate: '2009-03-15',\n    image: 'https://via.placeholder.com/150?text=EuropeanRoulette'\n  },\n  {\n    id: 'game-14',\n    name: 'Reactoonz',\n    category: 'slots',\n    provider: 'Play\\'n GO',\n    revenue: 45000,\n    players: 4000,\n    bets: 18000,\n    rtp: 0.96,\n    popularity: 8.9,\n    releaseDate: '2017-10-12',\n    image: 'https://via.placeholder.com/150?text=Reactoonz'\n  },\n  {\n    id: 'game-15',\n    name: 'Monopoly Live',\n    category: 'live',\n    provider: 'Evolution Gaming',\n    revenue: 42000,\n    players: 3800,\n    bets: 17000,\n    rtp: 0.96,\n    popularity: 8.8,\n    releaseDate: '2019-05-02',\n    image: 'https://via.placeholder.com/150?text=MonopolyLive'\n  }\n];\n\n/**\n * Get top games based on parameters\n * @param params Parameters for filtering and sorting\n * @returns Filtered and sorted top games\n */\nconst getTopGames = (params?: any): any => {\n  const metric = params?.metric || 'revenue';\n  const limit = params?.limit || 10;\n  const gameCategory = params?.gameCategory || null;\n  const minRevenue = params?.minRevenue || 0;\n  const maxRevenue = params?.maxRevenue || Number.MAX_SAFE_INTEGER;\n  \n  // Filter games\n  let filteredGames = [...games];\n  \n  if (gameCategory) {\n    filteredGames = filteredGames.filter(game => game.category === gameCategory);\n  }\n  \n  filteredGames = filteredGames.filter(game => \n    game.revenue >= minRevenue && game.revenue <= maxRevenue\n  );\n  \n  // Sort games based on metric\n  filteredGames.sort((a, b) => {\n    if (metric === 'revenue') {\n      return b.revenue - a.revenue;\n    } else if (metric === 'players') {\n      return b.players - a.players;\n    } else if (metric === 'bets') {\n      return b.bets - a.bets;\n    } else if (metric === 'popularity') {\n      return b.popularity - a.popularity;\n    } else {\n      return b.revenue - a.revenue; // Default to revenue\n    }\n  });\n  \n  // Limit the number of games\n  filteredGames = filteredGames.slice(0, limit);\n  \n  return {\n    data: filteredGames,\n    total: filteredGames.length,\n    metric,\n    category: gameCategory\n  };\n};\n\nexport default {\n  games,\n  getTopGames,\n  gameCategories,\n  gameProviders\n};\n","/**\n * Dashboard Stats Mock Data\n */\n\n/**\n * Mock dashboard stats\n */\nconst stats = {\n  summary: {\n    totalRevenue: 1250000,\n    totalPlayers: 45000,\n    activePlayersToday: 12500,\n    newPlayersToday: 350,\n    depositAmount: 450000,\n    withdrawalAmount: 320000,\n    netGaming: 130000,\n    conversionRate: 0.35,\n    averageSessionTime: 25, // minutes\n    churnRate: 0.08\n  },\n  comparison: {\n    revenue: {\n      current: 1250000,\n      previous: 1150000,\n      change: 0.087, // 8.7% increase\n      trend: 'up'\n    },\n    players: {\n      current: 45000,\n      previous: 42000,\n      change: 0.071, // 7.1% increase\n      trend: 'up'\n    },\n    activePlayers: {\n      current: 12500,\n      previous: 11800,\n      change: 0.059, // 5.9% increase\n      trend: 'up'\n    },\n    newPlayers: {\n      current: 350,\n      previous: 320,\n      change: 0.094, // 9.4% increase\n      trend: 'up'\n    },\n    deposits: {\n      current: 450000,\n      previous: 420000,\n      change: 0.071, // 7.1% increase\n      trend: 'up'\n    },\n    withdrawals: {\n      current: 320000,\n      previous: 290000,\n      change: 0.103, // 10.3% increase\n      trend: 'up'\n    },\n    netGaming: {\n      current: 130000,\n      previous: 130000,\n      change: 0, // 0% change\n      trend: 'stable'\n    },\n    conversionRate: {\n      current: 0.35,\n      previous: 0.33,\n      change: 0.061, // 6.1% increase\n      trend: 'up'\n    },\n    sessionTime: {\n      current: 25,\n      previous: 23,\n      change: 0.087, // 8.7% increase\n      trend: 'up'\n    },\n    churnRate: {\n      current: 0.08,\n      previous: 0.09,\n      change: -0.111, // 11.1% decrease\n      trend: 'down' // Down is good for churn rate\n    }\n  },\n  timeframe: 'month'\n};\n\nexport default {\n  stats\n};\n","/**\n * Player Registrations Mock Data\n */\n\n/**\n * Generate mock player registrations data\n * @param params Optional parameters for customizing the data\n * @returns Mock player registrations data\n */\nconst getRegistrationsData = (params?: any): any => {\n  const period = params?.period || 'month';\n  const startDate = params?.startDate || '2023-01-01';\n  const endDate = params?.endDate || '2023-06-30';\n  \n  // Generate data based on the period\n  switch (period) {\n    case 'day':\n      return generateDailyData(startDate, endDate);\n    case 'week':\n      return generateWeeklyData(startDate, endDate);\n    case 'month':\n    default:\n      return generateMonthlyData(startDate, endDate);\n  }\n};\n\n/**\n * Generate daily player registrations data\n * @param startDate Start date\n * @param endDate End date\n * @returns Daily player registrations data\n */\nconst generateDailyData = (startDate: string, endDate: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each day\n  const currentDate = new Date(start);\n  while (currentDate <= end) {\n    // Generate a random number of registrations between 50 and 500\n    const registrations = Math.floor(Math.random() * 450) + 50;\n    \n    data.push({\n      date: currentDate.toISOString().split('T')[0],\n      registrations\n    });\n    \n    // Move to the next day\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  \n  return {\n    data,\n    period: 'day',\n    startDate: startDate,\n    endDate: endDate,\n    total: data.reduce((sum, item) => sum + item.registrations, 0)\n  };\n};\n\n/**\n * Generate weekly player registrations data\n * @param startDate Start date\n * @param endDate End date\n * @returns Weekly player registrations data\n */\nconst generateWeeklyData = (startDate: string, endDate: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each week\n  const currentDate = new Date(start);\n  let weekNumber = 1;\n  \n  while (currentDate <= end) {\n    // Generate a random number of registrations between 500 and 2500\n    const registrations = Math.floor(Math.random() * 2000) + 500;\n    \n    data.push({\n      week: weekNumber,\n      startDate: currentDate.toISOString().split('T')[0],\n      endDate: new Date(currentDate.getTime() + 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      registrations\n    });\n    \n    // Move to the next week\n    currentDate.setDate(currentDate.getDate() + 7);\n    weekNumber++;\n  }\n  \n  return {\n    data,\n    period: 'week',\n    startDate: startDate,\n    endDate: endDate,\n    total: data.reduce((sum, item) => sum + item.registrations, 0)\n  };\n};\n\n/**\n * Generate monthly player registrations data\n * @param startDate Start date\n * @param endDate End date\n * @returns Monthly player registrations data\n */\nconst generateMonthlyData = (startDate: string, endDate: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each month\n  const currentDate = new Date(start);\n  currentDate.setDate(1); // Start from the first day of the month\n  \n  while (currentDate <= end) {\n    const month = currentDate.toLocaleString('default', { month: 'long' });\n    const year = currentDate.getFullYear();\n    \n    // Generate a random number of registrations between 2000 and 8000\n    const registrations = Math.floor(Math.random() * 6000) + 2000;\n    \n    data.push({\n      month,\n      year,\n      date: `${year}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`,\n      registrations\n    });\n    \n    // Move to the next month\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n  \n  return {\n    data,\n    period: 'month',\n    startDate: startDate,\n    endDate: endDate,\n    total: data.reduce((sum, item) => sum + item.registrations, 0)\n  };\n};\n\n// Sample monthly data\nconst monthlyData = {\n  data: [\n    { month: 'January', year: 2023, date: '2023-01', registrations: 3500 },\n    { month: 'February', year: 2023, date: '2023-02', registrations: 4200 },\n    { month: 'March', year: 2023, date: '2023-03', registrations: 5100 },\n    { month: 'April', year: 2023, date: '2023-04', registrations: 4800 },\n    { month: 'May', year: 2023, date: '2023-05', registrations: 5500 },\n    { month: 'June', year: 2023, date: '2023-06', registrations: 6200 }\n  ],\n  period: 'month',\n  startDate: '2023-01-01',\n  endDate: '2023-06-30',\n  total: 29300\n};\n\nexport default {\n  getRegistrationsData,\n  monthlyData\n};\n","/**\n * Casino Revenue Mock Data\n */\n\n/**\n * Generate mock revenue data\n * @param params Parameters for customizing the data\n * @returns Mock revenue data\n */\nconst getRevenueData = (params?: any): any => {\n  const period = params?.period || 'month';\n  const startDate = params?.startDate || '2023-01-01';\n  const endDate = params?.endDate || '2023-06-30';\n  const gameCategory = params?.gameCategory || null;\n  \n  // Generate data based on the period\n  switch (period) {\n    case 'day':\n      return generateDailyData(startDate, endDate, gameCategory);\n    case 'week':\n      return generateWeeklyData(startDate, endDate, gameCategory);\n    case 'month':\n    default:\n      return generateMonthlyData(startDate, endDate, gameCategory);\n  }\n};\n\n/**\n * Generate daily revenue data\n * @param startDate Start date\n * @param endDate End date\n * @param gameCategory Game category filter\n * @returns Daily revenue data\n */\nconst generateDailyData = (startDate: string, endDate: string, gameCategory?: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each day\n  const currentDate = new Date(start);\n  while (currentDate <= end) {\n    // Generate random revenue between 10000 and 50000\n    const revenue = Math.floor(Math.random() * 40000) + 10000;\n    \n    // Generate random player count between 500 and 2000\n    const players = Math.floor(Math.random() * 1500) + 500;\n    \n    // Generate random bet count between 5000 and 20000\n    const bets = Math.floor(Math.random() * 15000) + 5000;\n    \n    data.push({\n      date: currentDate.toISOString().split('T')[0],\n      revenue,\n      players,\n      bets\n    });\n    \n    // Move to the next day\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  \n  return {\n    data,\n    period: 'day',\n    startDate: startDate,\n    endDate: endDate,\n    category: gameCategory,\n    total: {\n      revenue: data.reduce((sum, item) => sum + item.revenue, 0),\n      players: data.reduce((sum, item) => sum + item.players, 0),\n      bets: data.reduce((sum, item) => sum + item.bets, 0)\n    }\n  };\n};\n\n/**\n * Generate weekly revenue data\n * @param startDate Start date\n * @param endDate End date\n * @param gameCategory Game category filter\n * @returns Weekly revenue data\n */\nconst generateWeeklyData = (startDate: string, endDate: string, gameCategory?: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each week\n  const currentDate = new Date(start);\n  let weekNumber = 1;\n  \n  while (currentDate <= end) {\n    // Generate random revenue between 50000 and 200000\n    const revenue = Math.floor(Math.random() * 150000) + 50000;\n    \n    // Generate random player count between 2000 and 8000\n    const players = Math.floor(Math.random() * 6000) + 2000;\n    \n    // Generate random bet count between 20000 and 80000\n    const bets = Math.floor(Math.random() * 60000) + 20000;\n    \n    data.push({\n      week: weekNumber,\n      startDate: currentDate.toISOString().split('T')[0],\n      endDate: new Date(currentDate.getTime() + 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      revenue,\n      players,\n      bets\n    });\n    \n    // Move to the next week\n    currentDate.setDate(currentDate.getDate() + 7);\n    weekNumber++;\n  }\n  \n  return {\n    data,\n    period: 'week',\n    startDate: startDate,\n    endDate: endDate,\n    category: gameCategory,\n    total: {\n      revenue: data.reduce((sum, item) => sum + item.revenue, 0),\n      players: data.reduce((sum, item) => sum + item.players, 0),\n      bets: data.reduce((sum, item) => sum + item.bets, 0)\n    }\n  };\n};\n\n/**\n * Generate monthly revenue data\n * @param startDate Start date\n * @param endDate End date\n * @param gameCategory Game category filter\n * @returns Monthly revenue data\n */\nconst generateMonthlyData = (startDate: string, endDate: string, gameCategory?: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each month\n  const currentDate = new Date(start);\n  currentDate.setDate(1); // Start from the first day of the month\n  \n  while (currentDate <= end) {\n    const month = currentDate.toLocaleString('default', { month: 'long' });\n    const year = currentDate.getFullYear();\n    \n    // Generate random revenue between 200000 and 800000\n    const revenue = Math.floor(Math.random() * 600000) + 200000;\n    \n    // Generate random player count between 8000 and 25000\n    const players = Math.floor(Math.random() * 17000) + 8000;\n    \n    // Generate random bet count between 80000 and 250000\n    const bets = Math.floor(Math.random() * 170000) + 80000;\n    \n    data.push({\n      month,\n      year,\n      date: `${year}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`,\n      revenue,\n      players,\n      bets\n    });\n    \n    // Move to the next month\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n  \n  return {\n    data,\n    period: 'month',\n    startDate: startDate,\n    endDate: endDate,\n    category: gameCategory,\n    total: {\n      revenue: data.reduce((sum, item) => sum + item.revenue, 0),\n      players: data.reduce((sum, item) => sum + item.players, 0),\n      bets: data.reduce((sum, item) => sum + item.bets, 0)\n    }\n  };\n};\n\n// Sample monthly data\nconst monthlyData = {\n  data: [\n    { month: 'January', year: 2023, date: '2023-01', revenue: 350000, players: 12000, bets: 120000 },\n    { month: 'February', year: 2023, date: '2023-02', revenue: 420000, players: 14500, bets: 145000 },\n    { month: 'March', year: 2023, date: '2023-03', revenue: 510000, players: 16800, bets: 168000 },\n    { month: 'April', year: 2023, date: '2023-04', revenue: 480000, players: 15500, bets: 155000 },\n    { month: 'May', year: 2023, date: '2023-05', revenue: 550000, players: 18200, bets: 182000 },\n    { month: 'June', year: 2023, date: '2023-06', revenue: 620000, players: 20500, bets: 205000 }\n  ],\n  period: 'month',\n  startDate: '2023-01-01',\n  endDate: '2023-06-30',\n  category: null,\n  total: {\n    revenue: 2930000,\n    players: 97500,\n    bets: 975000\n  }\n};\n\nexport default {\n  getRevenueData,\n  monthlyData\n};\n","/**\n * Player Journey Mock Data\n */\n\n/**\n * Mock player journey data\n */\nconst playerJourney = {\n  stages: [\n    {\n      name: 'Acquisition',\n      count: 12500,\n      percentage: 100,\n      conversion: 100,\n      channels: [\n        { name: 'Organic Search', count: 3750, percentage: 30 },\n        { name: 'Paid Search', count: 2500, percentage: 20 },\n        { name: 'Social Media', count: 2000, percentage: 16 },\n        { name: 'Referral', count: 1875, percentage: 15 },\n        { name: 'Direct', count: 1250, percentage: 10 },\n        { name: 'Other', count: 1125, percentage: 9 }\n      ]\n    },\n    {\n      name: 'Registration',\n      count: 5000,\n      percentage: 40,\n      conversion: 40,\n      devices: [\n        { name: 'Desktop', count: 2000, percentage: 40 },\n        { name: 'Mobile', count: 2500, percentage: 50 },\n        { name: 'Tablet', count: 500, percentage: 10 }\n      ],\n      countries: [\n        { name: 'United States', count: 1500, percentage: 30 },\n        { name: 'United Kingdom', count: 1000, percentage: 20 },\n        { name: 'Germany', count: 750, percentage: 15 },\n        { name: 'Canada', count: 500, percentage: 10 },\n        { name: 'Australia', count: 500, percentage: 10 },\n        { name: 'Other', count: 750, percentage: 15 }\n      ]\n    },\n    {\n      name: 'First Deposit',\n      count: 2500,\n      percentage: 20,\n      conversion: 50,\n      methods: [\n        { name: 'Credit Card', count: 1000, percentage: 40 },\n        { name: 'PayPal', count: 625, percentage: 25 },\n        { name: 'Bank Transfer', count: 375, percentage: 15 },\n        { name: 'Skrill', count: 250, percentage: 10 },\n        { name: 'Neteller', count: 125, percentage: 5 },\n        { name: 'Other', count: 125, percentage: 5 }\n      ],\n      amounts: [\n        { range: '0-50', count: 750, percentage: 30 },\n        { range: '51-100', count: 625, percentage: 25 },\n        { range: '101-200', count: 500, percentage: 20 },\n        { range: '201-500', count: 375, percentage: 15 },\n        { range: '501+', count: 250, percentage: 10 }\n      ]\n    },\n    {\n      name: 'First Game',\n      count: 2250,\n      percentage: 18,\n      conversion: 90,\n      categories: [\n        { name: 'Slots', count: 1125, percentage: 50 },\n        { name: 'Table Games', count: 450, percentage: 20 },\n        { name: 'Live Casino', count: 337, percentage: 15 },\n        { name: 'Poker', count: 225, percentage: 10 },\n        { name: 'Other', count: 113, percentage: 5 }\n      ],\n      timeToPlay: [\n        { range: '0-1 hour', count: 1125, percentage: 50 },\n        { range: '1-24 hours', count: 675, percentage: 30 },\n        { range: '1-3 days', count: 337, percentage: 15 },\n        { range: '3+ days', count: 113, percentage: 5 }\n      ]\n    },\n    {\n      name: 'Repeat Deposit',\n      count: 1500,\n      percentage: 12,\n      conversion: 66.7,\n      frequency: [\n        { range: 'Within 24 hours', count: 600, percentage: 40 },\n        { range: '1-3 days', count: 450, percentage: 30 },\n        { range: '4-7 days', count: 300, percentage: 20 },\n        { range: '8+ days', count: 150, percentage: 10 }\n      ],\n      amounts: [\n        { range: '0-50', count: 375, percentage: 25 },\n        { range: '51-100', count: 450, percentage: 30 },\n        { range: '101-200', count: 375, percentage: 25 },\n        { range: '201-500', count: 225, percentage: 15 },\n        { range: '501+', count: 75, percentage: 5 }\n      ]\n    },\n    {\n      name: 'Active Player',\n      count: 1000,\n      percentage: 8,\n      conversion: 66.7,\n      frequency: [\n        { range: 'Daily', count: 200, percentage: 20 },\n        { range: '2-3 times per week', count: 300, percentage: 30 },\n        { range: 'Weekly', count: 300, percentage: 30 },\n        { range: 'Monthly', count: 200, percentage: 20 }\n      ],\n      sessionLength: [\n        { range: '0-15 minutes', count: 200, percentage: 20 },\n        { range: '16-30 minutes', count: 300, percentage: 30 },\n        { range: '31-60 minutes', count: 300, percentage: 30 },\n        { range: '60+ minutes', count: 200, percentage: 20 }\n      ]\n    }\n  ],\n  dropoffs: [\n    {\n      fromStage: 'Acquisition',\n      toStage: 'Registration',\n      count: 7500,\n      percentage: 60,\n      reasons: [\n        { reason: 'Abandoned registration form', percentage: 40 },\n        { reason: 'No account creation intent', percentage: 30 },\n        { reason: 'Technical issues', percentage: 15 },\n        { reason: 'Other', percentage: 15 }\n      ]\n    },\n    {\n      fromStage: 'Registration',\n      toStage: 'First Deposit',\n      count: 2500,\n      percentage: 50,\n      reasons: [\n        { reason: 'Payment method issues', percentage: 35 },\n        { reason: 'Trust concerns', percentage: 25 },\n        { reason: 'Changed mind', percentage: 20 },\n        { reason: 'Other', percentage: 20 }\n      ]\n    },\n    {\n      fromStage: 'First Deposit',\n      toStage: 'First Game',\n      count: 250,\n      percentage: 10,\n      reasons: [\n        { reason: 'Technical issues', percentage: 40 },\n        { reason: 'Game selection issues', percentage: 30 },\n        { reason: 'Changed mind', percentage: 20 },\n        { reason: 'Other', percentage: 10 }\n      ]\n    },\n    {\n      fromStage: 'First Game',\n      toStage: 'Repeat Deposit',\n      count: 750,\n      percentage: 33.3,\n      reasons: [\n        { reason: 'Lost interest', percentage: 40 },\n        { reason: 'Lost money', percentage: 30 },\n        { reason: 'Found another site', percentage: 20 },\n        { reason: 'Other', percentage: 10 }\n      ]\n    },\n    {\n      fromStage: 'Repeat Deposit',\n      toStage: 'Active Player',\n      count: 500,\n      percentage: 33.3,\n      reasons: [\n        { reason: 'Infrequent play', percentage: 45 },\n        { reason: 'Lost interest', percentage: 25 },\n        { reason: 'Found another site', percentage: 20 },\n        { reason: 'Other', percentage: 10 }\n      ]\n    }\n  ],\n  timeframe: 'last 30 days'\n};\n\nexport default {\n  playerJourney\n};\n","/**\n * KPI Mock Data\n */\n\n/**\n * Mock KPI data\n */\nconst kpiData = {\n  revenue: {\n    current: 1250000,\n    previous: 1150000,\n    target: 1300000,\n    change: 0.087, // 8.7% increase\n    trend: 'up',\n    vsTarget: -0.038, // 3.8% below target\n    forecast: 1280000\n  },\n  ggr: {\n    current: 450000,\n    previous: 420000,\n    target: 480000,\n    change: 0.071, // 7.1% increase\n    trend: 'up',\n    vsTarget: -0.063, // 6.3% below target\n    forecast: 460000\n  },\n  ngr: {\n    current: 380000,\n    previous: 350000,\n    target: 400000,\n    change: 0.086, // 8.6% increase\n    trend: 'up',\n    vsTarget: -0.05, // 5% below target\n    forecast: 390000\n  },\n  deposits: {\n    current: 2500000,\n    previous: 2300000,\n    target: 2600000,\n    change: 0.087, // 8.7% increase\n    trend: 'up',\n    vsTarget: -0.038, // 3.8% below target\n    forecast: 2550000\n  },\n  withdrawals: {\n    current: 1800000,\n    previous: 1700000,\n    target: 1850000,\n    change: 0.059, // 5.9% increase\n    trend: 'up',\n    vsTarget: -0.027, // 2.7% below target\n    forecast: 1830000\n  },\n  activePlayers: {\n    current: 45000,\n    previous: 42000,\n    target: 48000,\n    change: 0.071, // 7.1% increase\n    trend: 'up',\n    vsTarget: -0.063, // 6.3% below target\n    forecast: 46500\n  },\n  newPlayers: {\n    current: 12500,\n    previous: 11800,\n    target: 13000,\n    change: 0.059, // 5.9% increase\n    trend: 'up',\n    vsTarget: -0.038, // 3.8% below target\n    forecast: 12800\n  },\n  firstTimeDepositors: {\n    current: 5500,\n    previous: 5200,\n    target: 5800,\n    change: 0.058, // 5.8% increase\n    trend: 'up',\n    vsTarget: -0.052, // 5.2% below target\n    forecast: 5650\n  },\n  conversionRate: {\n    current: 0.35,\n    previous: 0.33,\n    target: 0.38,\n    change: 0.061, // 6.1% increase\n    trend: 'up',\n    vsTarget: -0.079, // 7.9% below target\n    forecast: 0.36\n  },\n  averageDepositAmount: {\n    current: 120,\n    previous: 115,\n    target: 125,\n    change: 0.043, // 4.3% increase\n    trend: 'up',\n    vsTarget: -0.04, // 4% below target\n    forecast: 122\n  },\n  churnRate: {\n    current: 0.08,\n    previous: 0.09,\n    target: 0.07,\n    change: -0.111, // 11.1% decrease\n    trend: 'down', // Down is good for churn rate\n    vsTarget: 0.143, // 14.3% above target (bad)\n    forecast: 0.078\n  },\n  ltv: {\n    current: 850,\n    previous: 820,\n    target: 900,\n    change: 0.037, // 3.7% increase\n    trend: 'up',\n    vsTarget: -0.056, // 5.6% below target\n    forecast: 870\n  },\n  marketingCost: {\n    current: 250000,\n    previous: 240000,\n    target: 230000,\n    change: 0.042, // 4.2% increase\n    trend: 'up', // Up is bad for costs\n    vsTarget: 0.087, // 8.7% above target (bad)\n    forecast: 245000\n  },\n  cpa: {\n    current: 45,\n    previous: 48,\n    target: 42,\n    change: -0.063, // 6.3% decrease\n    trend: 'down', // Down is good for CPA\n    vsTarget: 0.071, // 7.1% above target (bad)\n    forecast: 44\n  },\n  roi: {\n    current: 3.2,\n    previous: 3.1,\n    target: 3.5,\n    change: 0.032, // 3.2% increase\n    trend: 'up',\n    vsTarget: -0.086, // 8.6% below target\n    forecast: 3.3\n  }\n};\n\nexport default {\n  kpiData\n};\n","/**\n * Dashboard Mock Data\n */\nimport statsMockData from './stats';\nimport playerRegistrationsMockData from './playerRegistrations';\nimport recentTransactionsMockData from './recentTransactions';\nimport topGamesMockData from './topGames';\nimport casinoRevenueMockData from './casinoRevenue';\nimport playerJourneyMockData from './playerJourney';\nimport kpiMockData from './kpi';\n\n/**\n * Get mock data for dashboard endpoints\n * @param endpoint The API endpoint\n * @param params Optional parameters for the request\n * @returns Mock data for the endpoint\n */\nconst getMockData = (endpoint: string, params?: any): any => {\n  // Handle different dashboard endpoints\n  if (endpoint.includes('dashboard/stats')) {\n    return statsMockData.stats;\n  } else if (endpoint.includes('dashboard/player-registrations')) {\n    return playerRegistrationsMockData.getRegistrationsData(params);\n  } else if (endpoint.includes('dashboard/recent-transactions')) {\n    return recentTransactionsMockData.transactions;\n  } else if (endpoint.includes('dashboard/top-games')) {\n    return topGamesMockData.getTopGames(params);\n  } else if (endpoint.includes('dashboard/casino-revenue')) {\n    return casinoRevenueMockData.getRevenueData(params);\n  } else if (endpoint.includes('dashboard/player-journey')) {\n    return playerJourneyMockData.playerJourney;\n  } else if (endpoint.includes('dashboard/kpi')) {\n    return kpiMockData.kpiData;\n  } else if (endpoint.includes('dashboard/preferences')) {\n    return { theme: 'light', layout: 'default', favorites: [] };\n  } else if (endpoint.includes('dashboard/query')) {\n    return { results: [], message: 'Query executed successfully' };\n  } else {\n    console.warn(`No mock data available for dashboard endpoint: ${endpoint}`);\n    return null;\n  }\n};\n\nexport default {\n  getMockData,\n  statsMockData,\n  playerRegistrationsMockData,\n  recentTransactionsMockData,\n  topGamesMockData,\n  casinoRevenueMockData,\n  playerJourneyMockData,\n  kpiMockData\n};\n","/**\n * Recent Transactions Mock Data\n */\n\n/**\n * Mock transaction types\n */\nconst transactionTypes = [\n  'deposit',\n  'withdrawal',\n  'bet',\n  'win',\n  'bonus',\n  'refund'\n];\n\n/**\n * Mock payment methods\n */\nconst paymentMethods = [\n  'Credit Card',\n  'PayPal',\n  'Bank Transfer',\n  'Skrill',\n  'Neteller',\n  'Bitcoin',\n  'Apple Pay',\n  'Google Pay'\n];\n\n/**\n * Mock transaction statuses\n */\nconst transactionStatuses = [\n  'completed',\n  'pending',\n  'failed',\n  'cancelled',\n  'processing'\n];\n\n/**\n * Generate a random transaction\n * @param index Index for generating unique ID\n * @returns Random transaction object\n */\nconst generateTransaction = (index: number) => {\n  const type = transactionTypes[Math.floor(Math.random() * transactionTypes.length)];\n  const amount = Math.floor(Math.random() * 1000) + 10;\n  const status = transactionStatuses[Math.floor(Math.random() * transactionStatuses.length)];\n  const paymentMethod = type === 'deposit' || type === 'withdrawal'\n    ? paymentMethods[Math.floor(Math.random() * paymentMethods.length)]\n    : null;\n\n  // Generate a random timestamp within the last 24 hours\n  const timestamp = new Date();\n  timestamp.setHours(timestamp.getHours() - Math.floor(Math.random() * 24));\n\n  return {\n    id: `tx-${Date.now()}-${index}`,\n    playerId: `player-${Math.floor(Math.random() * 1000) + 1}`,\n    playerUsername: `user${Math.floor(Math.random() * 1000) + 1}`,\n    type,\n    amount,\n    currency: 'USD',\n    status,\n    paymentMethod,\n    timestamp: timestamp.toISOString(),\n    gameId: type === 'bet' || type === 'win' ? `game-${Math.floor(Math.random() * 100) + 1}` : null,\n    gameName: type === 'bet' || type === 'win' ? `Game ${Math.floor(Math.random() * 100) + 1}` : null\n  };\n};\n\n/**\n * Generate mock transactions\n * @param count Number of transactions to generate\n * @returns Array of mock transactions\n */\nconst generateTransactions = (count: number) => {\n  const transactions = [];\n\n  for (let i = 0; i < count; i++) {\n    transactions.push(generateTransaction(i));\n  }\n\n  // Sort by timestamp (newest first)\n  return transactions.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n};\n\n/**\n * Mock recent transactions\n */\nconst transactions = {\n  data: generateTransactions(20),\n  total: 20,\n  page: 1,\n  pageSize: 20,\n  totalPages: 1\n};\n\nexport default {\n  transactions,\n  generateTransactions,\n  transactionTypes,\n  paymentMethods,\n  transactionStatuses\n};\n"],"names":["games","id","name","category","provider","revenue","players","bets","rtp","popularity","releaseDate","image","getTopGames","params","metric","limit","gameCategory","minRevenue","maxRevenue","Number","MAX_SAFE_INTEGER","filteredGames","filter","game","sort","a","b","slice","data","total","length","gameCategories","gameProviders","stats","summary","totalRevenue","totalPlayers","activePlayersToday","newPlayersToday","depositAmount","withdrawalAmount","netGaming","conversionRate","averageSessionTime","churnRate","comparison","current","previous","change","trend","activePlayers","newPlayers","deposits","withdrawals","sessionTime","timeframe","generateDailyData","startDate","endDate","start","Date","end","currentDate","registrations","Math","floor","random","push","date","toISOString","split","setDate","getDate","period","reduce","sum","item","generateWeeklyData","weekNumber","week","getTime","generateMonthlyData","month","toLocaleString","year","getFullYear","String","getMonth","padStart","setMonth","getRegistrationsData","monthlyData","getRevenueData","playerJourney","stages","count","percentage","conversion","channels","devices","countries","methods","amounts","range","categories","timeToPlay","frequency","sessionLength","dropoffs","fromStage","toStage","reasons","reason","kpiData","target","vsTarget","forecast","ggr","ngr","firstTimeDepositors","averageDepositAmount","ltv","marketingCost","cpa","roi","getMockData","endpoint","includes","statsMockData","playerRegistrationsMockData","recentTransactionsMockData","transactions","topGamesMockData","casinoRevenueMockData","playerJourneyMockData","kpiMockData","theme","layout","favorites","results","message","console","warn","transactionTypes","paymentMethods","transactionStatuses","generateTransaction","index","type","amount","status","paymentMethod","timestamp","setHours","getHours","now","playerId","playerUsername","currency","gameId","gameName","generateTransactions","i","page","pageSize","totalPages"],"sourceRoot":""}