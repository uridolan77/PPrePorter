{"version":3,"file":"static/js/3482.23a16ae2.chunk.js","mappings":"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","sources":["components/reports/visualizations/NetworkGraph.tsx","components/reports/visualizations/SankeyDiagram.tsx","components/reports/visualizations/Safe3DRenderer.tsx","components/reports/visualizations/Interactive3DChart.tsx","components/reports/visualizations/Surface3DPlot.tsx","components/reports/interactive/CollaborativeAnnotationSystem.tsx","components/reports/interactive/NotificationSystem.tsx","components/reports/interactive/CollaborativeAnnotationDialog.tsx","components/reports/visualizations/AdvancedVisualizationContainer.tsx","components/reports/dashboard/DashboardWidget.tsx","components/reports/dashboard/CustomizableDashboard.tsx","components/reports/dashboard/DashboardDialogs.tsx","services/api/integratedReportsService.ts","store/slices/integratedReportsSlice.ts","pages/reports/IntegratedReportsPage.tsx","components/reports/NaturalLanguageQueryPanel.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  Paper,\n  IconButton,\n  Tooltip,\n  Slider,\n  Select,\n  SelectChangeEvent,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  TextField,\n  Chip,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport ZoomInIcon from '@mui/icons-material/ZoomIn';\nimport ZoomOutIcon from '@mui/icons-material/ZoomOut';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport SearchIcon from '@mui/icons-material/Search';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { useAnnotationContext } from '../interactive/AnnotationSystem';\n\n// Node interface\nexport interface GraphNode {\n  id: string;\n  name: string;\n  group?: string;\n  value?: number;\n  color?: string;\n  [key: string]: any;\n}\n\n// Link interface\nexport interface GraphLink {\n  source: string;\n  target: string;\n  value?: number;\n  label?: string;\n  color?: string;\n  [key: string]: any;\n}\n\n// Graph data interface\nexport interface GraphData {\n  nodes: GraphNode[];\n  links: GraphLink[];\n}\n\n// Network graph props\ninterface NetworkGraphProps {\n  id: string;\n  title: string;\n  description?: string;\n  data: GraphData;\n  height?: number;\n  loading?: boolean;\n  error?: string | null;\n  nodeColorBy?: string;\n  linkColorBy?: string;\n  nodeSizeBy?: string;\n  linkSizeBy?: string;\n  groupBy?: string;\n  enableZoom?: boolean;\n  enableDrag?: boolean;\n  enableNodeSelection?: boolean;\n  enableLinkSelection?: boolean;\n  enableSearch?: boolean;\n  enableFiltering?: boolean;\n  enableAnnotations?: boolean;\n  onNodeClick?: (node: GraphNode) => void;\n  onLinkClick?: (link: GraphLink) => void;\n}\n\n/**\n * NetworkGraph component\n * A force-directed graph visualization\n */\nconst NetworkGraph: React.FC<NetworkGraphProps> = ({\n  id,\n  title,\n  description,\n  data,\n  height = 500,\n  loading = false,\n  error = null,\n  nodeColorBy = 'group',\n  linkColorBy = 'value',\n  nodeSizeBy = 'value',\n  linkSizeBy = 'value',\n  groupBy = 'group',\n  enableZoom = true,\n  enableDrag = true,\n  enableNodeSelection = true,\n  enableLinkSelection = true,\n  enableSearch = true,\n  enableFiltering = true,\n  enableAnnotations = true,\n  onNodeClick,\n  onLinkClick\n}) => {\n  const theme = useTheme();\n  const { addAnnotation, getAnnotationsForDataPoint } = useAnnotationContext();\n\n  // Refs\n  const graphRef = useRef<any>(null);\n\n  // State\n  const [graphData, setGraphData] = useState<GraphData>({ nodes: [], links: [] });\n  const [selectedNode, setSelectedNode] = useState<GraphNode | null>(null);\n  const [selectedLink, setSelectedLink] = useState<GraphLink | null>(null);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [highlightNodes, setHighlightNodes] = useState<Set<string>>(new Set());\n  const [highlightLinks, setHighlightLinks] = useState<Set<string>>(new Set());\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [groups, setGroups] = useState<string[]>([]);\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\n  const [nodeValueRange, setNodeValueRange] = useState<[number, number]>([0, 100]);\n  const [linkValueRange, setLinkValueRange] = useState<[number, number]>([0, 100]);\n\n  // Process data\n  useEffect(() => {\n    if (!data || !data.nodes || !data.links) {\n      setGraphData({ nodes: [], links: [] });\n      return;\n    }\n\n    // Process nodes\n    const processedNodes = data.nodes.map(node => ({\n      ...node,\n      // Add default values if missing\n      value: node.value !== undefined ? node.value : 1,\n      group: node.group || 'default'\n    }));\n\n    // Process links\n    const processedLinks = data.links.map(link => ({\n      ...link,\n      // Add default values if missing\n      value: link.value !== undefined ? link.value : 1,\n      // Generate a unique ID for each link\n      id: `${link.source}-${link.target}-${Math.random().toString(36).substring(2, 9)}`\n    }));\n\n    setGraphData({ nodes: processedNodes, links: processedLinks });\n\n    // Extract groups\n    const uniqueGroups = Array.from(new Set(processedNodes.map(node => node.group || 'default')));\n    setGroups(uniqueGroups);\n    setSelectedGroups(uniqueGroups);\n\n    // Calculate value ranges\n    const nodeValues = processedNodes.map(node => node.value || 0);\n    const linkValues = processedLinks.map(link => link.value || 0);\n\n    setNodeValueRange([\n      Math.min(...nodeValues),\n      Math.max(...nodeValues)\n    ]);\n\n    setLinkValueRange([\n      Math.min(...linkValues),\n      Math.max(...linkValues)\n    ]);\n  }, [data]);\n\n  // Filter data based on search and filters\n  const filteredData = useCallback(() => {\n    if (!graphData.nodes.length) return { nodes: [], links: [] };\n\n    // Filter nodes by search term\n    let filteredNodes = graphData.nodes;\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filteredNodes = filteredNodes.filter(node =>\n        node.name.toLowerCase().includes(term) ||\n        node.id.toLowerCase().includes(term)\n      );\n    }\n\n    // Filter nodes by selected groups\n    if (selectedGroups.length) {\n      filteredNodes = filteredNodes.filter(node =>\n        selectedGroups.includes(node.group || 'default')\n      );\n    }\n\n    // Filter nodes by value range\n    filteredNodes = filteredNodes.filter(node =>\n      (node.value || 0) >= nodeValueRange[0] &&\n      (node.value || 0) <= nodeValueRange[1]\n    );\n\n    // Get filtered node IDs\n    const filteredNodeIds = new Set(filteredNodes.map(node => node.id));\n\n    // Filter links that connect filtered nodes\n    let filteredLinks = graphData.links.filter(link =>\n      filteredNodeIds.has(link.source as string) &&\n      filteredNodeIds.has(link.target as string)\n    );\n\n    // Filter links by value range\n    filteredLinks = filteredLinks.filter(link =>\n      (link.value || 0) >= linkValueRange[0] &&\n      (link.value || 0) <= linkValueRange[1]\n    );\n\n    return { nodes: filteredNodes, links: filteredLinks };\n  }, [graphData, searchTerm, selectedGroups, nodeValueRange, linkValueRange]);\n\n  // Handle node click\n  const handleNodeClick = useCallback((node: GraphNode) => {\n    setSelectedNode(node);\n\n    // Highlight connected nodes and links\n    const connectedLinks = graphData.links.filter(link =>\n      link.source === node.id || link.target === node.id\n    );\n\n    const connectedNodes = new Set<string>();\n    connectedNodes.add(node.id);\n\n    connectedLinks.forEach(link => {\n      connectedNodes.add(link.source as string);\n      connectedNodes.add(link.target as string);\n    });\n\n    setHighlightNodes(connectedNodes);\n    setHighlightLinks(new Set(connectedLinks.map(link => link.id as string)));\n\n    // Call custom handler if provided\n    if (onNodeClick) {\n      onNodeClick(node);\n    }\n  }, [graphData.links, onNodeClick]);\n\n  // Handle link click\n  const handleLinkClick = useCallback((link: GraphLink) => {\n    setSelectedLink(link);\n\n    // Highlight connected nodes\n    const connectedNodes = new Set<string>();\n    connectedNodes.add(link.source as string);\n    connectedNodes.add(link.target as string);\n\n    setHighlightNodes(connectedNodes);\n    setHighlightLinks(new Set([link.id as string]));\n\n    // Call custom handler if provided\n    if (onLinkClick) {\n      onLinkClick(link);\n    }\n  }, [onLinkClick]);\n\n  // Handle zoom in\n  const handleZoomIn = useCallback(() => {\n    if (graphRef.current) {\n      const currentZoom = graphRef.current.zoom();\n      graphRef.current.zoom(currentZoom * 1.2, 400);\n      setZoomLevel(currentZoom * 1.2);\n    }\n  }, []);\n\n  // Handle zoom out\n  const handleZoomOut = useCallback(() => {\n    if (graphRef.current) {\n      const currentZoom = graphRef.current.zoom();\n      graphRef.current.zoom(currentZoom / 1.2, 400);\n      setZoomLevel(currentZoom / 1.2);\n    }\n  }, []);\n\n  // Handle reset view\n  const handleResetView = useCallback(() => {\n    if (graphRef.current) {\n      graphRef.current.zoomToFit(400);\n      setZoomLevel(1);\n      setSelectedNode(null);\n      setSelectedLink(null);\n      setHighlightNodes(new Set());\n      setHighlightLinks(new Set());\n    }\n  }, []);\n\n  // Handle search\n  const handleSearch = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  }, []);\n\n  // Handle group selection\n  const handleGroupSelection = useCallback((event: SelectChangeEvent<string[]>) => {\n    setSelectedGroups(event.target.value as string[]);\n  }, []);\n\n  // Handle node value range change\n  const handleNodeValueRangeChange = useCallback((event: Event, newValue: number | number[]) => {\n    setNodeValueRange(newValue as [number, number]);\n  }, []);\n\n  // Handle link value range change\n  const handleLinkValueRangeChange = useCallback((event: Event, newValue: number | number[]) => {\n    setLinkValueRange(newValue as [number, number]);\n  }, []);\n\n  // Node color accessor\n  const getNodeColor = useCallback((node: GraphNode) => {\n    if (highlightNodes.size && !highlightNodes.has(node.id)) {\n      return alpha(theme.palette.text.disabled, 0.3);\n    }\n\n    if (node.color) return node.color;\n\n    if (nodeColorBy === 'group') {\n      const groupIndex = groups.indexOf(node.group || 'default');\n      const colors = [\n        theme.palette.primary.main,\n        theme.palette.secondary.main,\n        theme.palette.success.main,\n        theme.palette.error.main,\n        theme.palette.warning.main,\n        theme.palette.info.main\n      ];\n      return colors[groupIndex % colors.length];\n    }\n\n    return theme.palette.primary.main;\n  }, [highlightNodes, nodeColorBy, groups, theme]);\n\n  // Link color accessor\n  const getLinkColor = useCallback((link: GraphLink) => {\n    if (highlightLinks.size && !highlightLinks.has(link.id as string)) {\n      return alpha(theme.palette.text.disabled, 0.1);\n    }\n\n    if (link.color) return link.color;\n\n    if (linkColorBy === 'value') {\n      const value = link.value || 1;\n      const min = linkValueRange[0];\n      const max = linkValueRange[1];\n      const normalized = (value - min) / (max - min);\n\n      return `rgba(${Math.round(normalized * 255)}, ${Math.round((1 - normalized) * 255)}, 150, 0.8)`;\n    }\n\n    return theme.palette.text.secondary;\n  }, [highlightLinks, linkColorBy, linkValueRange, theme]);\n\n  // Node size accessor\n  const getNodeSize = useCallback((node: GraphNode) => {\n    if (nodeSizeBy === 'value') {\n      const value = node.value || 1;\n      const min = nodeValueRange[0];\n      const max = nodeValueRange[1];\n      const normalized = (value - min) / (max - min);\n\n      return 4 + normalized * 12;\n    }\n\n    return 6;\n  }, [nodeSizeBy, nodeValueRange]);\n\n  // Link width accessor\n  const getLinkWidth = useCallback((link: GraphLink) => {\n    if (linkSizeBy === 'value') {\n      const value = link.value || 1;\n      const min = linkValueRange[0];\n      const max = linkValueRange[1];\n      const normalized = (value - min) / (max - min);\n\n      return 1 + normalized * 4;\n    }\n\n    return 1.5;\n  }, [linkSizeBy, linkValueRange]);\n\n  // Node label accessor\n  const getNodeLabel = useCallback((node: GraphNode) => {\n    return `${node.name}\\n${node.group ? `Group: ${node.group}` : ''}\\n${node.value ? `Value: ${node.value}` : ''}`;\n  }, []);\n\n  // Link label accessor\n  const getLinkLabel = useCallback((link: GraphLink) => {\n    return `${link.label || 'Link'}\\n${link.value ? `Value: ${link.value}` : ''}`;\n  }, []);\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <Typography color=\"error\">{error}</Typography>\n      </div>\n    );\n  }\n\n  // Render empty state\n  if (!data || !data.nodes || !data.nodes.length) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <Typography color=\"text.secondary\">No data available</Typography>\n      </div>\n    );\n  }\n\n  return (\n    <Paper sx={{ height, display: 'flex', flexDirection: 'column' }}>\n      {/* Controls */}\n      <Box sx={{ padding: 1, display: 'flex', flexWrap: 'wrap', gap: 1, borderBottom: '1px solid rgba(0, 0, 0, 0.12)' }}>\n        {/* Search */}\n        {enableSearch && (\n          <TextField\n            size=\"small\"\n            placeholder=\"Search nodes...\"\n            value={searchTerm}\n            onChange={handleSearch}\n            InputProps={{\n              startAdornment: <SearchIcon fontSize=\"small\" sx={{ mr: 1 }} />\n            }}\n            sx={{ width: 200 }}\n          />\n        )}\n\n        {/* Group filter */}\n        {enableFiltering && groups.length > 0 && (\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel id=\"group-select-label\">Groups</InputLabel>\n            <Select\n              labelId=\"group-select-label\"\n              multiple\n              value={selectedGroups}\n              onChange={handleGroupSelection}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {(selected as string[]).map((value) => (\n                    <Chip key={value} label={value} size=\"small\" />\n                  ))}\n                </Box>\n              )}\n              label=\"Groups\"\n            >\n              {groups.map(group => (\n                <MenuItem key={group} value={group}>\n                  {group}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        )}\n\n        {/* Zoom controls */}\n        {enableZoom && (\n          <Box sx={{ display: 'flex', gap: 0.5 }}>\n            <Tooltip title=\"Zoom In\">\n              <IconButton size=\"small\" onClick={handleZoomIn}>\n                <ZoomInIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Zoom Out\">\n              <IconButton size=\"small\" onClick={handleZoomOut}>\n                <ZoomOutIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Reset View\">\n              <IconButton size=\"small\" onClick={handleResetView}>\n                <RestartAltIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        )}\n      </Box>\n\n      {/* Graph */}\n      <Box sx={{ flex: '1', position: 'relative' }}>\n        <ForceGraph2D\n          ref={graphRef}\n          graphData={filteredData()}\n          nodeId=\"id\"\n          nodeLabel={getNodeLabel}\n          nodeColor={getNodeColor}\n          nodeVal={getNodeSize}\n          linkLabel={getLinkLabel}\n          linkColor={getLinkColor}\n          linkWidth={getLinkWidth}\n          linkDirectionalArrowLength={3}\n          linkDirectionalArrowRelPos={1}\n          linkCurvature={0.25}\n          nodeRelSize={6}\n          onNodeClick={enableNodeSelection ? handleNodeClick : undefined}\n          onLinkClick={enableLinkSelection ? handleLinkClick : undefined}\n          enableNodeDrag={enableDrag}\n          enableZoomInteraction={enableZoom}\n          cooldownTicks={100}\n          onEngineStop={() => graphRef.current?.zoomToFit(400)}\n        />\n      </Box>\n\n      {/* Selected node/link info */}\n      {(selectedNode || selectedLink) && (\n        <div style={{ padding: 16, borderTop: '1px solid rgba(0, 0, 0, 0.12)' }}>\n          {selectedNode && (\n            <div>\n              <Typography variant=\"subtitle2\">Selected Node: {selectedNode.name}</Typography>\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, marginTop: 8 }}>\n                {selectedNode.group && (\n                  <Chip\n                    label={`Group: ${selectedNode.group}`}\n                    size=\"small\"\n                    color=\"primary\"\n                    variant=\"outlined\"\n                  />\n                )}\n                {selectedNode.value !== undefined && (\n                  <Chip\n                    label={`Value: ${selectedNode.value}`}\n                    size=\"small\"\n                    color=\"secondary\"\n                    variant=\"outlined\"\n                  />\n                )}\n                {Object.entries(selectedNode)\n                  .filter(([key]) => !['id', 'name', 'group', 'value', 'color'].includes(key))\n                  .map(([key, value]) => (\n                    <Chip\n                      key={key}\n                      label={`${key}: ${value}`}\n                      size=\"small\"\n                      variant=\"outlined\"\n                    />\n                  ))\n                }\n              </div>\n            </div>\n          )}\n\n          {selectedLink && (\n            <div style={{ marginTop: selectedNode ? 16 : 0 }}>\n              <Typography variant=\"subtitle2\">\n                Selected Link: {selectedLink.label || `${selectedLink.source} → ${selectedLink.target}`}\n              </Typography>\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, marginTop: 8 }}>\n                {selectedLink.value !== undefined && (\n                  <Chip\n                    label={`Value: ${selectedLink.value}`}\n                    size=\"small\"\n                    color=\"secondary\"\n                    variant=\"outlined\"\n                  />\n                )}\n                {Object.entries(selectedLink)\n                  .filter(([key]) => !['id', 'source', 'target', 'label', 'value', 'color'].includes(key))\n                  .map(([key, value]) => (\n                    <Chip\n                      key={key}\n                      label={`${key}: ${value}`}\n                      size=\"small\"\n                      variant=\"outlined\"\n                    />\n                  ))\n                }\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Paper>\n  );\n};\n\nexport default NetworkGraph;\n","import React, { useState, useCallback, useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  Paper,\n  IconButton,\n  Tooltip,\n  TextField,\n  Chip,\n  Slider,\n  FormControl,\n  InputLabel,\n  Select,\n  SelectChangeEvent,\n  MenuItem,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport {\n  ResponsiveContainer\n} from 'recharts';\nimport { Tooltip as RechartsTooltip } from 'recharts';\n\n// Custom Sankey implementation\nconst Sankey = ({ data, nodeWidth, nodePadding, node, link, children }: any) => {\n  // Simple implementation that renders nodes and links\n  return (\n    <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n      {children}\n    </div>\n  );\n};\n\n// Custom Rectangle component\nconst Rectangle = ({ x, y, width, height, fill, fillOpacity, stroke, strokeWidth, onClick, onMouseEnter, onMouseLeave, style }: any) => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: x,\n        top: y,\n        width,\n        height,\n        backgroundColor: fill,\n        opacity: fillOpacity,\n        border: `${strokeWidth}px solid ${stroke}`,\n        cursor: style?.cursor || 'default',\n        ...style\n      }}\n      onClick={onClick}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    />\n  );\n};\n\n// Custom Layer component\nconst Layer = ({ children }: any) => {\n  return <div style={{ position: 'relative' }}>{children}</div>;\n};\n\n\n// Node interface\nexport interface SankeyNode {\n  name: string;\n  value?: number;\n  color?: string;\n  category?: string;\n  [key: string]: any;\n}\n\n// Link interface\nexport interface SankeyLink {\n  source: number;\n  target: number;\n  value: number;\n  color?: string;\n  [key: string]: any;\n}\n\n// Sankey data interface\nexport interface SankeyData {\n  nodes: SankeyNode[];\n  links: SankeyLink[];\n}\n\n// Sankey diagram props\ninterface SankeyDiagramProps {\n  id: string;\n  title: string;\n  description?: string;\n  data: SankeyData;\n  height?: number;\n  loading?: boolean;\n  error?: string | null;\n  nodeWidth?: number;\n  nodePadding?: number;\n  enableSearch?: boolean;\n  enableFiltering?: boolean;\n  enableExport?: boolean;\n  enableAnnotations?: boolean;\n  onNodeClick?: (node: SankeyNode, index: number) => void;\n  onLinkClick?: (link: SankeyLink, index: number) => void;\n}\n\n/**\n * SankeyDiagram component\n * A Sankey diagram for visualizing flow between nodes\n */\nconst SankeyDiagram: React.FC<SankeyDiagramProps> = ({\n  id,\n  title,\n  description,\n  data,\n  height = 500,\n  loading = false,\n  error = null,\n  nodeWidth = 20,\n  nodePadding = 10,\n  enableSearch = true,\n  enableFiltering = true,\n  enableExport = true,\n  enableAnnotations = true,\n  onNodeClick,\n  onLinkClick\n}) => {\n  const theme = useTheme();\n  // No annotation context needed\n\n  // State\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [selectedNode, setSelectedNode] = useState<number | null>(null);\n  const [selectedLink, setSelectedLink] = useState<number | null>(null);\n  const [valueRange, setValueRange] = useState<[number, number]>([0, 100]);\n  const [categories, setCategories] = useState<string[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [tooltipContent, setTooltipContent] = useState<any>(null);\n\n  // Process data\n  const processedData = useMemo(() => {\n    if (!data || !data.nodes || !data.links) {\n      return { nodes: [], links: [] };\n    }\n\n    // Extract categories\n    const uniqueCategories = Array.from(\n      new Set(data.nodes.map(node => node.category || 'default'))\n    );\n    setCategories(uniqueCategories);\n\n    if (selectedCategories.length === 0) {\n      setSelectedCategories(uniqueCategories);\n    }\n\n    // Calculate value range\n    const linkValues = data.links.map(link => link.value);\n    const minValue = Math.min(...linkValues);\n    const maxValue = Math.max(...linkValues);\n\n    if (valueRange[0] === 0 && valueRange[1] === 100) {\n      setValueRange([minValue, maxValue]);\n    }\n\n    return data;\n  }, [data, selectedCategories, valueRange]);\n\n  // Filter data based on search and filters\n  const filteredData = useMemo(() => {\n    if (!processedData.nodes || !processedData.links) {\n      return { nodes: [], links: [] };\n    }\n\n    // Filter nodes by search term\n    let filteredNodes = processedData.nodes;\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filteredNodes = filteredNodes.filter(node =>\n        node.name.toLowerCase().includes(term)\n      );\n    }\n\n    // Filter nodes by selected categories\n    if (selectedCategories.length) {\n      filteredNodes = filteredNodes.filter(node =>\n        selectedCategories.includes(node.category || 'default')\n      );\n    }\n\n    // Get filtered node indices\n    const filteredNodeIndices = new Set(\n      filteredNodes.map((_, index) => index)\n    );\n\n    // Filter links that connect filtered nodes\n    let filteredLinks = processedData.links.filter(link =>\n      filteredNodeIndices.has(link.source) &&\n      filteredNodeIndices.has(link.target)\n    );\n\n    // Filter links by value range\n    filteredLinks = filteredLinks.filter(link =>\n      link.value >= valueRange[0] &&\n      link.value <= valueRange[1]\n    );\n\n    return {\n      nodes: filteredNodes,\n      links: filteredLinks\n    };\n  }, [processedData, searchTerm, selectedCategories, valueRange]);\n\n  // Handle search\n  const handleSearch = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  }, []);\n\n  // Handle category selection\n  const handleCategorySelection = useCallback((event: SelectChangeEvent<string[]>) => {\n    setSelectedCategories(event.target.value as string[]);\n  }, []);\n\n  // Handle value range change\n  const handleValueRangeChange = useCallback((event: Event, newValue: number | number[]) => {\n    setValueRange(newValue as [number, number]);\n  }, []);\n\n  // Handle node click\n  const handleNodeClick = useCallback((nodeData: any) => {\n    setSelectedNode(nodeData.index);\n    setSelectedLink(null);\n\n    if (onNodeClick) {\n      onNodeClick(processedData.nodes[nodeData.index], nodeData.index);\n    }\n  }, [processedData.nodes, onNodeClick]);\n\n  // Handle link click\n  const handleLinkClick = useCallback((linkData: any) => {\n    setSelectedLink(linkData.index);\n    setSelectedNode(null);\n\n    if (onLinkClick) {\n      onLinkClick(processedData.links[linkData.index], linkData.index);\n    }\n  }, [processedData.links, onLinkClick]);\n\n  // Handle export\n  const handleExport = useCallback(() => {\n    // Create CSV content\n    const nodesCsv = [\n      ['Index', 'Name', 'Category', 'Value'].join(','),\n      ...filteredData.nodes.map((node, index) =>\n        [index, node.name, node.category || 'default', node.value || ''].join(',')\n      )\n    ].join('\\n');\n\n    const linksCsv = [\n      ['Source', 'Target', 'Value'].join(','),\n      ...filteredData.links.map(link =>\n        [\n          filteredData.nodes[link.source].name,\n          filteredData.nodes[link.target].name,\n          link.value\n        ].join(',')\n      )\n    ].join('\\n');\n\n    // Create download link\n    const blob = new Blob([\n      'Nodes:\\n',\n      nodesCsv,\n      '\\n\\nLinks:\\n',\n      linksCsv\n    ], { type: 'text/csv' });\n\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `sankey-diagram-${id}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }, [filteredData, id]);\n\n  // Custom node renderer\n  const CustomNode = useCallback(({ x, y, width, height, index, payload }: any) => {\n    const isSelected = selectedNode === index;\n    const node = processedData.nodes[index];\n\n    // Node color\n    let nodeColor = node.color || theme.palette.primary.main;\n    if (node.category) {\n      const categoryIndex = categories.indexOf(node.category);\n      const colors = [\n        theme.palette.primary.main,\n        theme.palette.secondary.main,\n        theme.palette.success.main,\n        theme.palette.error.main,\n        theme.palette.warning.main,\n        theme.palette.info.main\n      ];\n      nodeColor = node.color || colors[categoryIndex % colors.length];\n    }\n\n    return (\n      <Rectangle\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        fill={nodeColor}\n        fillOpacity={isSelected ? 1 : 0.9}\n        stroke={isSelected ? theme.palette.common.white : nodeColor}\n        strokeWidth={isSelected ? 2 : 0}\n        onClick={() => handleNodeClick({ index })}\n        onMouseEnter={() => setTooltipContent({\n          type: 'node',\n          nodeName: node.name,\n          nodeValue: node.value,\n          category: node.category,\n          ...node\n        })}\n        onMouseLeave={() => setTooltipContent(null)}\n        style={{ cursor: 'pointer' }}\n      />\n    );\n  }, [selectedNode, processedData.nodes, categories, theme, handleNodeClick]);\n\n  // Custom link renderer\n  const CustomLink = useCallback(({ sourceX, sourceY, sourceControlX, targetX, targetY, targetControlX, linkWidth, index }: any) => {\n    const isSelected = selectedLink === index;\n    const link = processedData.links[index];\n\n    // Link color\n    let linkColor = link.color || alpha(theme.palette.text.secondary, 0.3);\n\n    return (\n      <Layer>\n        <path\n          d={`\n            M${sourceX},${sourceY}\n            C${sourceControlX},${sourceY} ${targetControlX},${targetY} ${targetX},${targetY}\n          `}\n          fill=\"none\"\n          stroke={linkColor}\n          strokeWidth={linkWidth}\n          strokeOpacity={isSelected ? 1 : 0.5}\n          onClick={() => handleLinkClick({ index })}\n          onMouseEnter={() => setTooltipContent({\n            type: 'link',\n            sourceName: processedData.nodes[link.source].name,\n            targetName: processedData.nodes[link.target].name,\n            linkValue: link.value,\n            ...link\n          })}\n          onMouseLeave={() => setTooltipContent(null)}\n          style={{ cursor: 'pointer' }}\n        />\n      </Layer>\n    );\n  }, [selectedLink, processedData.nodes, processedData.links, theme, handleLinkClick]);\n\n  // Custom tooltip content\n  const CustomTooltipContent = ({ active, payload }: any) => {\n    if (!active || !tooltipContent) {\n      return null;\n    }\n\n    return (\n      <Paper sx={{ p: 1.5, maxWidth: 300 }}>\n        {tooltipContent.type === 'node' ? (\n          <>\n            <Typography variant=\"subtitle2\">{tooltipContent.name}</Typography>\n            {tooltipContent.category && (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Category: {tooltipContent.category}\n              </Typography>\n            )}\n            {tooltipContent.value !== undefined && (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Value: {tooltipContent.value}\n              </Typography>\n            )}\n          </>\n        ) : (\n          <>\n            <Typography variant=\"subtitle2\">\n              {tooltipContent.source} → {tooltipContent.target}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Value: {tooltipContent.value}\n            </Typography>\n          </>\n        )}\n      </Paper>\n    );\n  };\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <Typography color=\"error\">{error}</Typography>\n      </div>\n    );\n  }\n\n  // Render empty state\n  if (!data || !data.nodes || !data.nodes.length || !data.links || !data.links.length) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <Typography color=\"text.secondary\">No data available</Typography>\n      </div>\n    );\n  }\n\n  return (\n    <Paper sx={{ height, display: 'flex', flexDirection: 'column' }}>\n      {/* Controls */}\n      <div style={{ padding: 8, display: 'flex', flexWrap: 'wrap', gap: 8, borderBottom: '1px solid rgba(0, 0, 0, 0.12)' }}>\n        {/* Search */}\n        {enableSearch && (\n          <TextField\n            size=\"small\"\n            placeholder=\"Search nodes...\"\n            value={searchTerm}\n            onChange={handleSearch}\n            InputProps={{\n              startAdornment: <SearchIcon fontSize=\"small\" sx={{ mr: 1 }} />\n            }}\n            sx={{ width: 200 }}\n          />\n        )}\n\n        {/* Category filter */}\n        {enableFiltering && categories.length > 0 && (\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel id=\"category-select-label\">Categories</InputLabel>\n            <Select\n              labelId=\"category-select-label\"\n              multiple\n              value={selectedCategories}\n              onChange={handleCategorySelection}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {(selected as string[]).map((value) => (\n                    <Chip key={value} label={value} size=\"small\" />\n                  ))}\n                </Box>\n              )}\n              label=\"Categories\"\n            >\n              {categories.map(category => (\n                <MenuItem key={category} value={category}>\n                  {category}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        )}\n\n        {/* Value range filter */}\n        {enableFiltering && (\n          <Box sx={{ width: '200px', paddingLeft: '16px', paddingRight: '16px' }}>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Value Range\n            </Typography>\n            <Slider\n              value={valueRange}\n              onChange={handleValueRangeChange}\n              valueLabelDisplay=\"auto\"\n              min={Math.min(...processedData.links.map(link => link.value))}\n              max={Math.max(...processedData.links.map(link => link.value))}\n            />\n          </Box>\n        )}\n\n        {/* Export */}\n        {enableExport && (\n          <Tooltip title=\"Export as CSV\">\n            <IconButton size=\"small\" onClick={handleExport}>\n              <DownloadIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        )}\n      </div>\n\n      {/* Diagram */}\n      <div style={{ flex: 1, position: 'relative' }}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <Sankey\n            data={filteredData}\n            nodeWidth={nodeWidth}\n            nodePadding={nodePadding}\n            linkProps={{ shape: 'path' }}\n            nodeComponent={CustomNode}\n            linkComponent={CustomLink}\n          >\n            <RechartsTooltip content={<CustomTooltipContent />} />\n          </Sankey>\n        </ResponsiveContainer>\n      </div>\n\n      {/* Selected node/link info */}\n      {(selectedNode !== null || selectedLink !== null) && (\n        <div style={{ padding: 16, borderTop: '1px solid rgba(0, 0, 0, 0.12)' }}>\n          {selectedNode !== null && (\n            <div>\n              <Typography variant=\"subtitle2\">\n                Selected Node: {processedData.nodes[selectedNode].name}\n              </Typography>\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, marginTop: 8 }}>\n                {processedData.nodes[selectedNode].category && (\n                  <Chip\n                    label={`Category: ${processedData.nodes[selectedNode].category}`}\n                    size=\"small\"\n                    color=\"primary\"\n                    variant=\"outlined\"\n                  />\n                )}\n                {processedData.nodes[selectedNode].value !== undefined && (\n                  <Chip\n                    label={`Value: ${processedData.nodes[selectedNode].value}`}\n                    size=\"small\"\n                    color=\"secondary\"\n                    variant=\"outlined\"\n                  />\n                )}\n              </div>\n            </div>\n          )}\n\n          {selectedLink !== null && (\n            <div style={{ marginTop: selectedNode !== null ? 16 : 0 }}>\n              <Typography variant=\"subtitle2\">\n                Selected Link: {processedData.nodes[processedData.links[selectedLink].source].name} →\n                {processedData.nodes[processedData.links[selectedLink].target].name}\n              </Typography>\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, marginTop: 8 }}>\n                <Chip\n                  label={`Value: ${processedData.links[selectedLink].value}`}\n                  size=\"small\"\n                  color=\"secondary\"\n                  variant=\"outlined\"\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Paper>\n  );\n};\n\nexport default SankeyDiagram;\n","import React, { useState, useEffect } from 'react';\nimport { Box, Typography, Paper } from '@mui/material';\n\ninterface Safe3DRendererProps {\n  fallback?: React.ReactNode;\n  children: React.ReactNode;\n  height?: number;\n}\n\n/**\n * Safe3DRenderer component\n * Safely renders 3D components with error handling\n */\nconst Safe3DRenderer: React.FC<Safe3DRendererProps> = ({\n  fallback,\n  children,\n  height = 400\n}) => {\n  const [hasError, setHasError] = useState(false);\n  const [isSupported, setIsSupported] = useState(true);\n\n  useEffect(() => {\n    // Check if WebGL is supported\n    try {\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n\n      if (!gl) {\n        setIsSupported(false);\n      }\n    } catch (e) {\n      setIsSupported(false);\n    }\n  }, []);\n\n  // If WebGL is not supported, show a message\n  if (!isSupported) {\n    return (\n      <Paper style={{ height, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <Typography color=\"text.secondary\">\n          3D visualizations are not supported in your browser. Please try a different browser or device.\n        </Typography>\n      </Paper>\n    );\n  }\n\n  // If there was an error rendering the 3D component, show the fallback\n  if (hasError) {\n    return (\n      <Paper style={{ height, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        {fallback || (\n          <Typography color=\"text.secondary\">\n            Unable to render 3D visualization. Please try again later.\n          </Typography>\n        )}\n      </Paper>\n    );\n  }\n\n  // Try to render the 3D component\n  try {\n    return (\n      <div style={{ height }}>\n        {children}\n      </div>\n    );\n  } catch (error) {\n    console.error('Error rendering 3D component:', error);\n    setHasError(true);\n\n    return (\n      <Paper style={{ height, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        {fallback || (\n          <Typography color=\"text.secondary\">\n            Unable to render 3D visualization. Please try again later.\n          </Typography>\n        )}\n      </Paper>\n    );\n  }\n};\n\nexport default Safe3DRenderer;\n","import React, { useState, useRef, useEffect, useCallback, Suspense, lazy } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  Paper,\n  IconButton,\n  Tooltip,\n  Slider,\n  FormControl,\n  InputLabel,\n  Select,\n  SelectChangeEvent,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  useTheme\n} from '@mui/material';\nimport RotateLeftIcon from '@mui/icons-material/RotateLeft';\nimport RotateRightIcon from '@mui/icons-material/RotateRight';\nimport ZoomInIcon from '@mui/icons-material/ZoomIn';\nimport ZoomOutIcon from '@mui/icons-material/ZoomOut';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { useAnnotationContext } from '../interactive/AnnotationSystem';\nimport Safe3DRenderer from './Safe3DRenderer';\n\n// Lazy load Three.js related components to prevent crashes\nconst ThreeComponents = lazy(() => import('./ThreeComponents'));\n\n// Data point interface\nexport interface DataPoint3D {\n  id: string;\n  x: number;\n  y: number;\n  z: number;\n  value?: number;\n  label?: string;\n  color?: string;\n  group?: string;\n  [key: string]: any;\n}\n\n// 3D chart props\ninterface Interactive3DChartProps {\n  id: string;\n  title: string;\n  description?: string;\n  data: DataPoint3D[];\n  xLabel?: string;\n  yLabel?: string;\n  zLabel?: string;\n  height?: number;\n  loading?: boolean;\n  error?: string | null;\n  colorBy?: string;\n  sizeBy?: string;\n  enableRotation?: boolean;\n  enableZoom?: boolean;\n  enableLabels?: boolean;\n  enableGrid?: boolean;\n  enableAxes?: boolean;\n  enableAnnotations?: boolean;\n  chartType?: '3dScatter' | '3dBar' | '3dSurface';\n  onPointClick?: (point: DataPoint3D) => void;\n}\n\n/**\n * Interactive3DChart component\n * A 3D visualization for data exploration\n */\nconst Interactive3DChart: React.FC<Interactive3DChartProps> = ({\n  id,\n  title,\n  description,\n  data,\n  xLabel = 'X Axis',\n  yLabel = 'Y Axis',\n  zLabel = 'Z Axis',\n  height = 500,\n  loading = false,\n  error = null,\n  colorBy = 'group',\n  sizeBy = 'value',\n  enableRotation = true,\n  enableZoom = true,\n  enableLabels = true,\n  enableGrid = true,\n  enableAxes = true,\n  enableAnnotations = true,\n  chartType = '3dScatter',\n  onPointClick\n}) => {\n  const theme = useTheme();\n  const { addAnnotation, getAnnotationsForDataPoint } = useAnnotationContext();\n\n  // State\n  const [autoRotate, setAutoRotate] = useState<boolean>(false);\n  const [rotationSpeed, setRotationSpeed] = useState<number>(1);\n  const [darkMode, setDarkMode] = useState<boolean>(theme.palette.mode === 'dark');\n  const [selectedPoint, setSelectedPoint] = useState<DataPoint3D | null>(null);\n  const [hoveredPoint, setHoveredPoint] = useState<DataPoint3D | null>(null);\n  const [groups, setGroups] = useState<string[]>([]);\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\n\n  // Process data\n  useEffect(() => {\n    if (!data || data.length === 0) return;\n\n    // Extract groups\n    const uniqueGroups = Array.from(new Set(data.map(point => point.group || 'default')));\n    setGroups(uniqueGroups);\n\n    if (selectedGroups.length === 0) {\n      setSelectedGroups(uniqueGroups);\n    }\n  }, [data, selectedGroups.length]);\n\n  // Handle group selection\n  const handleGroupSelection = useCallback((event: SelectChangeEvent<string[]>) => {\n    setSelectedGroups(event.target.value as string[]);\n  }, []);\n\n  // Handle auto-rotate toggle\n  const handleAutoRotateToggle = useCallback(() => {\n    setAutoRotate(prev => !prev);\n  }, []);\n\n  // Handle rotation speed change\n  const handleRotationSpeedChange = useCallback((event: Event, newValue: number | number[]) => {\n    setRotationSpeed(newValue as number);\n  }, []);\n\n  // Handle dark mode toggle\n  const handleDarkModeToggle = useCallback(() => {\n    setDarkMode(prev => !prev);\n  }, []);\n\n  // Handle chart type change\n  const handleChartTypeChange = useCallback((event: SelectChangeEvent) => {\n    // @ts-ignore - Type safety handled by component props\n    const newChartType = event.target.value as '3dScatter' | '3dBar' | '3dSurface';\n    // This would be set via props in a real implementation\n  }, []);\n\n  // Handle color by change\n  const handleColorByChange = useCallback((event: SelectChangeEvent) => {\n    // This would be set via props in a real implementation\n  }, []);\n\n  // Handle size by change\n  const handleSizeByChange = useCallback((event: SelectChangeEvent) => {\n    // This would be set via props in a real implementation\n  }, []);\n\n  // Handle point click\n  const handlePointClick = useCallback((point: DataPoint3D) => {\n    setSelectedPoint(prev => prev?.id === point.id ? null : point);\n\n    if (onPointClick) {\n      onPointClick(point);\n    }\n  }, [onPointClick]);\n\n  // Filter data based on selected groups\n  const filteredData = useCallback(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.filter(point =>\n      selectedGroups.includes(point.group || 'default')\n    );\n  }, [data, selectedGroups]);\n\n  // Normalize data to fit in the scene\n  const normalizedData = useCallback(() => {\n    const filtered = filteredData();\n    if (filtered.length === 0) return [];\n\n    // Find min/max values for each axis\n    const xValues = filtered.map(p => p.x);\n    const yValues = filtered.map(p => p.y);\n    const zValues = filtered.map(p => p.z);\n\n    const xMin = Math.min(...xValues);\n    const xMax = Math.max(...xValues);\n    const yMin = Math.min(...yValues);\n    const yMax = Math.max(...yValues);\n    const zMin = Math.min(...zValues);\n    const zMax = Math.max(...zValues);\n\n    // Normalize to range [-5, 5]\n    return filtered.map(point => ({\n      ...point,\n      normalizedX: ((point.x - xMin) / (xMax - xMin) * 10) - 5,\n      normalizedY: ((point.y - yMin) / (yMax - yMin) * 10) - 5,\n      normalizedZ: ((point.z - zMin) / (zMax - zMin) * 10) - 5\n    }));\n  }, [filteredData]);\n\n  // Get color for a point\n  const getPointColor = useCallback((point: DataPoint3D) => {\n    if (point.color) return point.color;\n\n    if (colorBy === 'group' && point.group) {\n      const groupIndex = groups.indexOf(point.group);\n      const colors = [\n        '#0088FE', '#00C49F', '#FFBB28', '#FF8042',\n        '#A569BD', '#5DADE2', '#48C9B0', '#F4D03F'\n      ];\n      return colors[groupIndex % colors.length];\n    }\n\n    return theme.palette.primary.main;\n  }, [colorBy, groups, theme]);\n\n  // Get size for a point\n  const getPointSize = useCallback((point: DataPoint3D) => {\n    if (sizeBy === 'value' && point.value !== undefined) {\n      // Scale size based on value\n      const minValue = Math.min(...data.map(p => p.value || 0));\n      const maxValue = Math.max(...data.map(p => p.value || 0));\n      const normalizedValue = (point.value - minValue) / (maxValue - minValue);\n\n      return 0.2 + normalizedValue * 0.8;\n    }\n\n    return 0.5;\n  }, [sizeBy, data]);\n\n  // Render 3D content with error handling\n  const render3DContent = () => {\n    const normalized = normalizedData();\n\n    return (\n      <Safe3DRenderer height={height} fallback={\n        <Typography color=\"text.secondary\">\n          3D visualization could not be loaded. Please try again later.\n        </Typography>\n      }>\n        <Suspense fallback={\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n            <CircularProgress />\n          </div>\n        }>\n          <ThreeComponents\n            normalizedData={normalized}\n            autoRotate={autoRotate}\n            rotationSpeed={rotationSpeed}\n            enableZoom={enableZoom}\n            enableRotation={enableRotation}\n            enableGrid={enableGrid}\n            enableAxes={enableAxes}\n            enableLabels={enableLabels}\n            darkMode={darkMode}\n            xLabel={xLabel}\n            yLabel={yLabel}\n            zLabel={zLabel}\n            chartType={chartType}\n            getPointColor={getPointColor}\n            getPointSize={getPointSize}\n            handlePointClick={handlePointClick}\n            selectedPoint={selectedPoint}\n            hoveredPoint={hoveredPoint}\n            setHoveredPoint={setHoveredPoint}\n          />\n        </Suspense>\n      </Safe3DRenderer>\n    );\n  };\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <Typography color=\"error\">{error}</Typography>\n      </div>\n    );\n  }\n\n  // Render empty state\n  if (!data || data.length === 0) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <Typography color=\"text.secondary\">No data available</Typography>\n      </div>\n    );\n  }\n\n  return (\n    <Paper sx={{ height, display: 'flex', flexDirection: 'column' }}>\n      {/* Controls */}\n      <div style={{ padding: 8, display: 'flex', flexWrap: 'wrap', gap: 8, borderBottom: '1px solid rgba(0, 0, 0, 0.12)' }}>\n        {/* Group filter */}\n        {groups.length > 0 && (\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel id=\"group-select-label\">Groups</InputLabel>\n            <Select\n              labelId=\"group-select-label\"\n              multiple\n              value={selectedGroups}\n              onChange={handleGroupSelection}\n              label=\"Groups\"\n            >\n              {groups.map(group => (\n                <MenuItem key={group} value={group}>\n                  {group}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        )}\n\n        {/* Auto-rotate toggle */}\n        {enableRotation && (\n          <FormControlLabel\n            control={\n              <Switch\n                checked={autoRotate}\n                onChange={handleAutoRotateToggle}\n                size=\"small\"\n              />\n            }\n            label=\"Auto-rotate\"\n          />\n        )}\n\n        {/* Rotation speed */}\n        {enableRotation && autoRotate && (\n          <div style={{ width: 120, paddingLeft: 8, paddingRight: 8 }}>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Speed\n            </Typography>\n            <Slider\n              value={rotationSpeed}\n              onChange={handleRotationSpeedChange}\n              min={0.5}\n              max={5}\n              step={0.5}\n              size=\"small\"\n            />\n          </div>\n        )}\n\n        {/* Rotation controls */}\n        {enableRotation && (\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\n            <Tooltip title=\"Rotate Left\">\n              <IconButton size=\"small\" onClick={() => {}}>\n                <RotateLeftIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Rotate Right\">\n              <IconButton size=\"small\" onClick={() => {}}>\n                <RotateRightIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </div>\n        )}\n\n        {/* Zoom controls */}\n        {enableZoom && (\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\n            <Tooltip title=\"Zoom In\">\n              <IconButton size=\"small\" onClick={() => {}}>\n                <ZoomInIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Zoom Out\">\n              <IconButton size=\"small\" onClick={() => {}}>\n                <ZoomOutIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Reset View\">\n              <IconButton size=\"small\" onClick={() => {}}>\n                <RestartAltIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </div>\n        )}\n\n        {/* Dark mode toggle */}\n        <Tooltip title={darkMode ? 'Light Mode' : 'Dark Mode'}>\n          <IconButton size=\"small\" onClick={handleDarkModeToggle}>\n            {darkMode ? <Brightness7Icon fontSize=\"small\" /> : <Brightness4Icon fontSize=\"small\" />}\n          </IconButton>\n        </Tooltip>\n      </div>\n\n      {/* 3D Canvas */}\n      <div style={{ flex: 1, position: 'relative' }}>\n        {render3DContent()}\n      </div>\n\n      {/* Selected point info */}\n      {selectedPoint && (\n        <div style={{ padding: 16, borderTop: '1px solid rgba(0, 0, 0, 0.12)' }}>\n          <Typography variant=\"subtitle2\">\n            Selected Point: {selectedPoint.label || selectedPoint.id}\n          </Typography>\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, marginTop: 8 }}>\n            <Typography variant=\"body2\">\n              X: {selectedPoint.x}, Y: {selectedPoint.y}, Z: {selectedPoint.z}\n            </Typography>\n            {selectedPoint.value !== undefined && (\n              <Typography variant=\"body2\">\n                Value: {selectedPoint.value}\n              </Typography>\n            )}\n            {selectedPoint.group && (\n              <Typography variant=\"body2\">\n                Group: {selectedPoint.group}\n              </Typography>\n            )}\n          </div>\n        </div>\n      )}\n    </Paper>\n  );\n};\n\nexport default Interactive3DChart;\n","import React, { useState, useRef, useEffect, useCallback, useMemo, Suspense, lazy } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  Paper,\n  IconButton,\n  Tooltip,\n  Slider,\n  FormControl,\n  InputLabel,\n  Select,\n  SelectChangeEvent,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  useTheme\n} from '@mui/material';\nimport RotateLeftIcon from '@mui/icons-material/RotateLeft';\nimport RotateRightIcon from '@mui/icons-material/RotateRight';\nimport ZoomInIcon from '@mui/icons-material/ZoomIn';\nimport ZoomOutIcon from '@mui/icons-material/ZoomOut';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { interpolateSurface, SurfaceInterpolationMethod } from '../../../components/utils/interpolationUtils';\nimport Safe3DRenderer from './Safe3DRenderer';\n\n// Lazy load Three.js related components to prevent crashes\nconst ThreeSurfaceComponents = lazy(() => import('./ThreeSurfaceComponents'));\n\n// Data point interface\nexport interface SurfaceDataPoint {\n  x: number;\n  y: number;\n  z: number;\n  [key: string]: any;\n}\n\n// Surface plot props\ninterface Surface3DPlotProps {\n  id: string;\n  title: string;\n  description?: string;\n  data: SurfaceDataPoint[];\n  xLabel?: string;\n  yLabel?: string;\n  zLabel?: string;\n  xRange?: [number, number];\n  yRange?: [number, number];\n  height?: number;\n  loading?: boolean;\n  error?: string | null;\n  resolution?: number;\n  interpolationMethod?: SurfaceInterpolationMethod;\n  colorMap?: 'rainbow' | 'heatmap' | 'terrain' | 'plasma';\n  wireframe?: boolean;\n  enableRotation?: boolean;\n  enableZoom?: boolean;\n  enableGrid?: boolean;\n  enableAxes?: boolean;\n  onPointClick?: (point: SurfaceDataPoint) => void;\n}\n\n/**\n * Surface3DPlot component\n * A 3D surface plot with interpolation\n */\nconst Surface3DPlot: React.FC<Surface3DPlotProps> = ({\n  id,\n  title,\n  description,\n  data,\n  xLabel = 'X Axis',\n  yLabel = 'Y Axis',\n  zLabel = 'Z Axis',\n  xRange,\n  yRange,\n  height = 500,\n  loading = false,\n  error = null,\n  resolution = 50,\n  interpolationMethod = 'bilinear',\n  colorMap = 'rainbow',\n  wireframe = true,\n  enableRotation = true,\n  enableZoom = true,\n  enableGrid = true,\n  enableAxes = true,\n  onPointClick\n}) => {\n  const theme = useTheme();\n\n  // State\n  const [autoRotate, setAutoRotate] = useState<boolean>(false);\n  const [rotationSpeed, setRotationSpeed] = useState<number>(1);\n  const [darkMode, setDarkMode] = useState<boolean>(theme.palette.mode === 'dark');\n  const [surfaceResolution, setSurfaceResolution] = useState<number>(resolution);\n  const [selectedInterpolation, setSelectedInterpolation] = useState<SurfaceInterpolationMethod>(interpolationMethod);\n  const [showWireframe, setShowWireframe] = useState<boolean>(wireframe);\n  const [selectedColorMap, setSelectedColorMap] = useState<string>(colorMap);\n\n  // Handle auto-rotate toggle\n  const handleAutoRotateToggle = useCallback(() => {\n    setAutoRotate(prev => !prev);\n  }, []);\n\n  // Handle rotation speed change\n  const handleRotationSpeedChange = useCallback((event: Event, newValue: number | number[]) => {\n    setRotationSpeed(newValue as number);\n  }, []);\n\n  // Handle dark mode toggle\n  const handleDarkModeToggle = useCallback(() => {\n    setDarkMode(prev => !prev);\n  }, []);\n\n  // Handle resolution change\n  const handleResolutionChange = useCallback((event: Event, newValue: number | number[]) => {\n    setSurfaceResolution(newValue as number);\n  }, []);\n\n  // Handle interpolation method change\n  const handleInterpolationChange = useCallback((event: SelectChangeEvent<SurfaceInterpolationMethod>) => {\n    setSelectedInterpolation(event.target.value as SurfaceInterpolationMethod);\n  }, []);\n\n  // Handle wireframe toggle\n  const handleWireframeToggle = useCallback(() => {\n    setShowWireframe(prev => !prev);\n  }, []);\n\n  // Handle color map change\n  const handleColorMapChange = useCallback((event: SelectChangeEvent<string>) => {\n    setSelectedColorMap(event.target.value as string);\n  }, []);\n\n  // Render 3D content with error handling\n  const render3DContent = () => {\n    return (\n      <Safe3DRenderer height={height} fallback={\n        <Typography color=\"text.secondary\">\n          3D visualization could not be loaded. Please try again later.\n        </Typography>\n      }>\n        <Suspense fallback={\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n            <CircularProgress />\n          </div>\n        }>\n          <ThreeSurfaceComponents\n            data={data}\n            autoRotate={autoRotate}\n            rotationSpeed={rotationSpeed}\n            enableZoom={enableZoom}\n            enableRotation={enableRotation}\n            enableGrid={enableGrid}\n            enableAxes={enableAxes}\n            darkMode={darkMode}\n            xLabel={xLabel}\n            yLabel={yLabel}\n            zLabel={zLabel}\n            surfaceResolution={surfaceResolution}\n            selectedInterpolation={selectedInterpolation}\n            showWireframe={showWireframe}\n            selectedColorMap={selectedColorMap}\n            xRange={xRange}\n            yRange={yRange}\n            onPointClick={onPointClick}\n            theme={theme}\n          />\n        </Suspense>\n      </Safe3DRenderer>\n    );\n  };\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <Typography color=\"error\">{error}</Typography>\n      </div>\n    );\n  }\n\n  // Render empty state\n  if (!data || data.length < 3) {\n    return (\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: height\n      }}>\n        <Typography color=\"text.secondary\">\n          Not enough data points for surface interpolation (minimum 3 required)\n        </Typography>\n      </div>\n    );\n  }\n\n  return (\n    <Paper style={{ height, display: 'flex', flexDirection: 'column' }}>\n      {/* Controls */}\n      <div style={{ padding: 8, display: 'flex', flexWrap: 'wrap', gap: 8, borderBottom: '1px solid rgba(0, 0, 0, 0.12)' }}>\n        {/* Interpolation method */}\n        <FormControl size=\"small\" style={{ minWidth: 150 }}>\n          <InputLabel id=\"interpolation-select-label\">Interpolation</InputLabel>\n          <Select\n            labelId=\"interpolation-select-label\"\n            value={selectedInterpolation}\n            onChange={handleInterpolationChange}\n            label=\"Interpolation\"\n          >\n            <MenuItem value=\"nearest\">Nearest Neighbor</MenuItem>\n            <MenuItem value=\"bilinear\">Bilinear</MenuItem>\n            <MenuItem value=\"bicubic\">Bicubic</MenuItem>\n            <MenuItem value=\"natural\">Natural Neighbor</MenuItem>\n            <MenuItem value=\"kriging\">Kriging</MenuItem>\n          </Select>\n        </FormControl>\n\n        {/* Color map */}\n        <FormControl size=\"small\" style={{ minWidth: 120 }}>\n          <InputLabel id=\"colormap-select-label\">Color Map</InputLabel>\n          <Select\n            labelId=\"colormap-select-label\"\n            value={selectedColorMap}\n            onChange={handleColorMapChange}\n            label=\"Color Map\"\n          >\n            <MenuItem value=\"rainbow\">Rainbow</MenuItem>\n            <MenuItem value=\"heatmap\">Heatmap</MenuItem>\n            <MenuItem value=\"terrain\">Terrain</MenuItem>\n            <MenuItem value=\"plasma\">Plasma</MenuItem>\n          </Select>\n        </FormControl>\n\n        {/* Resolution slider */}\n        <div style={{ width: 150, paddingLeft: 8, paddingRight: 8 }}>\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            Resolution: {surfaceResolution}\n          </Typography>\n          <Slider\n            value={surfaceResolution}\n            onChange={handleResolutionChange}\n            min={10}\n            max={100}\n            step={5}\n            size=\"small\"\n          />\n        </div>\n\n        {/* Wireframe toggle */}\n        <FormControlLabel\n          control={\n            <Switch\n              checked={showWireframe}\n              onChange={handleWireframeToggle}\n              size=\"small\"\n            />\n          }\n          label=\"Wireframe\"\n        />\n\n        {/* Auto-rotate toggle */}\n        {enableRotation && (\n          <FormControlLabel\n            control={\n              <Switch\n                checked={autoRotate}\n                onChange={handleAutoRotateToggle}\n                size=\"small\"\n              />\n            }\n            label=\"Auto-rotate\"\n          />\n        )}\n\n        {/* Rotation speed */}\n        {enableRotation && autoRotate && (\n          <div style={{ width: 120, paddingLeft: 8, paddingRight: 8 }}>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Speed\n            </Typography>\n            <Slider\n              value={rotationSpeed}\n              onChange={handleRotationSpeedChange}\n              min={0.5}\n              max={5}\n              step={0.5}\n              size=\"small\"\n            />\n          </div>\n        )}\n\n        {/* Dark mode toggle */}\n        <Tooltip title={darkMode ? 'Light Mode' : 'Dark Mode'}>\n          <IconButton size=\"small\" onClick={handleDarkModeToggle}>\n            {darkMode ? <Brightness7Icon fontSize=\"small\" /> : <Brightness4Icon fontSize=\"small\" />}\n          </IconButton>\n        </Tooltip>\n      </div>\n\n      {/* 3D Canvas */}\n      <div style={{ flex: 1, position: 'relative' }}>\n        {render3DContent()}\n      </div>\n    </Paper>\n  );\n};\n\nexport default Surface3DPlot;\n","import React, { useState, useCallback, useEffect, createContext, useContext, ReactNode } from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  Popover,\n  Paper,\n  useTheme,\n  Badge,\n  Chip,\n  Avatar,\n  CircularProgress,\n  Snackbar,\n  Alert,\n  Menu,\n  MenuItem,\n  ListItemIcon\n} from '@mui/material';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport AddCommentIcon from '@mui/icons-material/AddComment';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CloseIcon from '@mui/icons-material/Close';\nimport FlagIcon from '@mui/icons-material/Flag';\nimport PersonIcon from '@mui/icons-material/Person';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport NotificationsActiveIcon from '@mui/icons-material/NotificationsActive';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { format as formatDate } from 'date-fns';\n\n// Mock WebSocket for real-time collaboration\nclass MockWebSocket {\n  private callbacks: { [event: string]: ((data: any) => void)[] } = {};\n  private static instance: MockWebSocket | null = null;\n  private connected: boolean = false;\n  private url: string = '';\n\n  private constructor(url: string) {\n    this.url = url;\n    this.connected = true;\n    console.log(`WebSocket connected to ${url}`);\n    \n    // Simulate connection established\n    setTimeout(() => {\n      this.trigger('open', {});\n    }, 500);\n  }\n\n  static getInstance(url: string): MockWebSocket {\n    if (!MockWebSocket.instance) {\n      MockWebSocket.instance = new MockWebSocket(url);\n    }\n    return MockWebSocket.instance;\n  }\n\n  on(event: string, callback: (data: any) => void): void {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = [];\n    }\n    this.callbacks[event].push(callback);\n  }\n\n  off(event: string, callback: (data: any) => void): void {\n    if (!this.callbacks[event]) return;\n    this.callbacks[event] = this.callbacks[event].filter(cb => cb !== callback);\n  }\n\n  trigger(event: string, data: any): void {\n    if (!this.callbacks[event]) return;\n    this.callbacks[event].forEach(callback => callback(data));\n  }\n\n  send(data: any): void {\n    if (!this.connected) {\n      console.error('WebSocket is not connected');\n      return;\n    }\n    \n    console.log('WebSocket sending data:', data);\n    \n    // Simulate server response\n    setTimeout(() => {\n      const parsedData = typeof data === 'string' ? JSON.parse(data) : data;\n      \n      switch (parsedData.type) {\n        case 'add_annotation':\n          this.trigger('message', {\n            type: 'annotation_added',\n            annotation: {\n              ...parsedData.annotation,\n              id: `annotation-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            }\n          });\n          break;\n          \n        case 'update_annotation':\n          this.trigger('message', {\n            type: 'annotation_updated',\n            annotation: {\n              ...parsedData.annotation,\n              updatedAt: new Date().toISOString()\n            }\n          });\n          break;\n          \n        case 'delete_annotation':\n          this.trigger('message', {\n            type: 'annotation_deleted',\n            annotationId: parsedData.annotationId\n          });\n          break;\n          \n        case 'get_annotations':\n          // Simulate fetching annotations\n          const mockAnnotations = [\n            {\n              id: 'annotation-1',\n              chartId: parsedData.chartId,\n              dataPointId: 'point-1',\n              text: 'This is an interesting data point!',\n              author: 'John Doe',\n              createdAt: '2023-01-01T12:00:00Z',\n              updatedAt: '2023-01-01T12:00:00Z',\n              type: 'comment',\n              position: { x: 30, y: 40 },\n              metadata: { label: 'Data Point 1' }\n            },\n            {\n              id: 'annotation-2',\n              chartId: parsedData.chartId,\n              dataPointId: 'point-2',\n              text: 'This value seems abnormal, we should investigate.',\n              author: 'Jane Smith',\n              createdAt: '2023-01-02T14:30:00Z',\n              updatedAt: '2023-01-02T15:45:00Z',\n              type: 'flag',\n              position: { x: 70, y: 60 },\n              metadata: { label: 'Data Point 2' }\n            }\n          ];\n          \n          this.trigger('message', {\n            type: 'annotations_list',\n            annotations: mockAnnotations\n          });\n          break;\n          \n        default:\n          console.log('Unknown message type:', parsedData.type);\n      }\n    }, 300);\n  }\n\n  close(): void {\n    this.connected = false;\n    this.trigger('close', {});\n    MockWebSocket.instance = null;\n    console.log('WebSocket disconnected');\n  }\n}\n\n// User interface\nexport interface User {\n  id: string;\n  name: string;\n  avatar?: string;\n}\n\n// Annotation type\nexport interface CollaborativeAnnotation {\n  id: string;\n  chartId: string;\n  dataPointId: string | number;\n  text: string;\n  author: string;\n  authorId: string;\n  createdAt: string;\n  updatedAt: string;\n  type: 'comment' | 'flag' | 'insight';\n  position?: {\n    x: number;\n    y: number;\n  };\n  mentions?: string[];\n  metadata?: {\n    [key: string]: any;\n  };\n}\n\n// Notification type\nexport interface Notification {\n  id: string;\n  type: 'mention' | 'reply' | 'update' | 'delete';\n  annotationId: string;\n  chartId: string;\n  dataPointId: string | number;\n  fromUser: string;\n  fromUserId: string;\n  message: string;\n  createdAt: string;\n  read: boolean;\n}\n\n// Annotation context state\ninterface CollaborativeAnnotationContextState {\n  annotations: CollaborativeAnnotation[];\n  notifications: Notification[];\n  users: User[];\n  currentUser: User;\n  loading: boolean;\n  error: string | null;\n  addAnnotation: (annotation: Omit<CollaborativeAnnotation, 'id' | 'createdAt' | 'updatedAt' | 'authorId'>) => void;\n  updateAnnotation: (id: string, text: string, type: CollaborativeAnnotation['type'], mentions?: string[]) => void;\n  deleteAnnotation: (id: string) => void;\n  getAnnotationsForChart: (chartId: string) => CollaborativeAnnotation[];\n  getAnnotationsForDataPoint: (chartId: string, dataPointId: string | number) => CollaborativeAnnotation[];\n  markNotificationAsRead: (id: string) => void;\n  markAllNotificationsAsRead: () => void;\n  getUnreadNotificationsCount: () => number;\n}\n\n// Create context\nconst CollaborativeAnnotationContext = createContext<CollaborativeAnnotationContextState | undefined>(undefined);\n\n// Annotation context provider props\ninterface CollaborativeAnnotationContextProviderProps {\n  children: ReactNode;\n  currentUser?: User;\n}\n\n/**\n * CollaborativeAnnotationContextProvider component\n * Provides annotation state and methods for managing annotations with real-time collaboration\n */\nexport const CollaborativeAnnotationContextProvider: React.FC<CollaborativeAnnotationContextProviderProps> = ({ \n  children,\n  currentUser = { id: 'user-1', name: 'Current User' }\n}) => {\n  const [annotations, setAnnotations] = useState<CollaborativeAnnotation[]>([]);\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [users, setUsers] = useState<User[]>([\n    { id: 'user-1', name: 'Current User' },\n    { id: 'user-2', name: 'John Doe' },\n    { id: 'user-3', name: 'Jane Smith' },\n    { id: 'user-4', name: 'Bob Johnson' }\n  ]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [socket, setSocket] = useState<MockWebSocket | null>(null);\n  \n  // Initialize WebSocket connection\n  useEffect(() => {\n    const ws = MockWebSocket.getInstance('wss://api.example.com/annotations');\n    setSocket(ws);\n    \n    // Handle WebSocket events\n    const handleOpen = () => {\n      console.log('WebSocket connection established');\n      // Fetch initial annotations\n      ws.send(JSON.stringify({ type: 'get_annotations', chartId: 'all' }));\n    };\n    \n    const handleMessage = (event: any) => {\n      const data = typeof event === 'string' ? JSON.parse(event) : event;\n      \n      switch (data.type) {\n        case 'annotations_list':\n          setAnnotations(data.annotations);\n          break;\n          \n        case 'annotation_added':\n          setAnnotations(prev => [...prev, data.annotation]);\n          // Add notification if the annotation mentions the current user\n          if (data.annotation.mentions?.includes(currentUser.id) && data.annotation.authorId !== currentUser.id) {\n            addNotification({\n              type: 'mention',\n              annotationId: data.annotation.id,\n              chartId: data.annotation.chartId,\n              dataPointId: data.annotation.dataPointId,\n              fromUser: data.annotation.author,\n              fromUserId: data.annotation.authorId,\n              message: `${data.annotation.author} mentioned you in an annotation`\n            });\n          }\n          break;\n          \n        case 'annotation_updated':\n          setAnnotations(prev => prev.map(annotation => \n            annotation.id === data.annotation.id ? data.annotation : annotation\n          ));\n          // Add notification if the annotation mentions the current user\n          if (data.annotation.mentions?.includes(currentUser.id) && data.annotation.authorId !== currentUser.id) {\n            addNotification({\n              type: 'update',\n              annotationId: data.annotation.id,\n              chartId: data.annotation.chartId,\n              dataPointId: data.annotation.dataPointId,\n              fromUser: data.annotation.author,\n              fromUserId: data.annotation.authorId,\n              message: `${data.annotation.author} updated an annotation that mentions you`\n            });\n          }\n          break;\n          \n        case 'annotation_deleted':\n          setAnnotations(prev => prev.filter(annotation => annotation.id !== data.annotationId));\n          break;\n          \n        default:\n          console.log('Unknown message type:', data.type);\n      }\n    };\n    \n    const handleError = (error: any) => {\n      console.error('WebSocket error:', error);\n      setError('Failed to connect to annotation service');\n    };\n    \n    const handleClose = () => {\n      console.log('WebSocket connection closed');\n    };\n    \n    ws.on('open', handleOpen);\n    ws.on('message', handleMessage);\n    ws.on('error', handleError);\n    ws.on('close', handleClose);\n    \n    // Cleanup\n    return () => {\n      ws.off('open', handleOpen);\n      ws.off('message', handleMessage);\n      ws.off('error', handleError);\n      ws.off('close', handleClose);\n      ws.close();\n    };\n  }, [currentUser.id]);\n  \n  // Add a new annotation\n  const addAnnotation = useCallback((annotation: Omit<CollaborativeAnnotation, 'id' | 'createdAt' | 'updatedAt' | 'authorId'>) => {\n    if (!socket) return;\n    \n    setLoading(true);\n    \n    // Extract mentions from text (format: @username)\n    const mentionRegex = /@(\\w+)/g;\n    const mentions = Array.from(annotation.text.matchAll(mentionRegex))\n      .map(match => match[1])\n      .map(username => {\n        const user = users.find(u => u.name.toLowerCase().replace(/\\s+/g, '') === username.toLowerCase());\n        return user ? user.id : null;\n      })\n      .filter(Boolean) as string[];\n    \n    // Send to server\n    socket.send(JSON.stringify({\n      type: 'add_annotation',\n      annotation: {\n        ...annotation,\n        authorId: currentUser.id,\n        mentions\n      }\n    }));\n    \n    setLoading(false);\n  }, [socket, users, currentUser.id]);\n  \n  // Update an annotation\n  const updateAnnotation = useCallback((id: string, text: string, type: CollaborativeAnnotation['type'], mentions?: string[]) => {\n    if (!socket) return;\n    \n    setLoading(true);\n    \n    // Find the annotation\n    const annotation = annotations.find(a => a.id === id);\n    if (!annotation) {\n      setError('Annotation not found');\n      setLoading(false);\n      return;\n    }\n    \n    // Extract mentions from text if not provided\n    let extractedMentions = mentions;\n    if (!extractedMentions) {\n      const mentionRegex = /@(\\w+)/g;\n      extractedMentions = Array.from(text.matchAll(mentionRegex))\n        .map(match => match[1])\n        .map(username => {\n          const user = users.find(u => u.name.toLowerCase().replace(/\\s+/g, '') === username.toLowerCase());\n          return user ? user.id : null;\n        })\n        .filter(Boolean) as string[];\n    }\n    \n    // Send to server\n    socket.send(JSON.stringify({\n      type: 'update_annotation',\n      annotation: {\n        ...annotation,\n        text,\n        type,\n        mentions: extractedMentions\n      }\n    }));\n    \n    setLoading(false);\n  }, [socket, annotations, users]);\n  \n  // Delete an annotation\n  const deleteAnnotation = useCallback((id: string) => {\n    if (!socket) return;\n    \n    setLoading(true);\n    \n    // Send to server\n    socket.send(JSON.stringify({\n      type: 'delete_annotation',\n      annotationId: id\n    }));\n    \n    setLoading(false);\n  }, [socket]);\n  \n  // Get annotations for a chart\n  const getAnnotationsForChart = useCallback((chartId: string) => {\n    return annotations.filter(annotation => annotation.chartId === chartId);\n  }, [annotations]);\n  \n  // Get annotations for a data point\n  const getAnnotationsForDataPoint = useCallback((chartId: string, dataPointId: string | number) => {\n    return annotations.filter(\n      annotation => annotation.chartId === chartId && annotation.dataPointId === dataPointId\n    );\n  }, [annotations]);\n  \n  // Add a notification\n  const addNotification = useCallback((notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      id: `notification-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      createdAt: new Date().toISOString(),\n      read: false\n    };\n    \n    setNotifications(prev => [newNotification, ...prev]);\n  }, []);\n  \n  // Mark notification as read\n  const markNotificationAsRead = useCallback((id: string) => {\n    setNotifications(prev => prev.map(notification => \n      notification.id === id ? { ...notification, read: true } : notification\n    ));\n  }, []);\n  \n  // Mark all notifications as read\n  const markAllNotificationsAsRead = useCallback(() => {\n    setNotifications(prev => prev.map(notification => ({ ...notification, read: true })));\n  }, []);\n  \n  // Get unread notifications count\n  const getUnreadNotificationsCount = useCallback(() => {\n    return notifications.filter(notification => !notification.read).length;\n  }, [notifications]);\n  \n  // Context value\n  const value: CollaborativeAnnotationContextState = {\n    annotations,\n    notifications,\n    users,\n    currentUser,\n    loading,\n    error,\n    addAnnotation,\n    updateAnnotation,\n    deleteAnnotation,\n    getAnnotationsForChart,\n    getAnnotationsForDataPoint,\n    markNotificationAsRead,\n    markAllNotificationsAsRead,\n    getUnreadNotificationsCount\n  };\n  \n  return (\n    <CollaborativeAnnotationContext.Provider value={value}>\n      {children}\n    </CollaborativeAnnotationContext.Provider>\n  );\n};\n\n// Custom hook to use annotation context\nexport const useCollaborativeAnnotationContext = () => {\n  const context = useContext(CollaborativeAnnotationContext);\n  if (context === undefined) {\n    throw new Error('useCollaborativeAnnotationContext must be used within a CollaborativeAnnotationContextProvider');\n  }\n  return context;\n};\n\nexport default CollaborativeAnnotationContext;\n","import React, { useState, useCallback } from 'react';\nimport {\n  IconButton,\n  Badge,\n  Menu,\n  MenuItem,\n  ListItemText,\n  ListItemIcon,\n  Typography,\n  Box,\n  Divider,\n  Button,\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport NotificationsActiveIcon from '@mui/icons-material/NotificationsActive';\nimport NotificationsNoneIcon from '@mui/icons-material/NotificationsNone';\nimport PersonIcon from '@mui/icons-material/Person';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport { format as formatDate, formatDistanceToNow } from 'date-fns';\nimport { \n  Notification, \n  useCollaborativeAnnotationContext \n} from './CollaborativeAnnotationSystem';\n\n// Notification system props\ninterface NotificationSystemProps {\n  maxNotifications?: number;\n  onNotificationClick?: (notification: Notification) => void;\n}\n\n/**\n * NotificationSystem component\n * Displays notifications for annotations with real-time updates\n */\nconst NotificationSystem: React.FC<NotificationSystemProps> = ({\n  maxNotifications = 10,\n  onNotificationClick\n}) => {\n  const theme = useTheme();\n  const { \n    notifications, \n    markNotificationAsRead, \n    markAllNotificationsAsRead, \n    getUnreadNotificationsCount \n  } = useCollaborativeAnnotationContext();\n  \n  // State\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  \n  // Handle menu open\n  const handleMenuOpen = useCallback((event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  }, []);\n  \n  // Handle menu close\n  const handleMenuClose = useCallback(() => {\n    setAnchorEl(null);\n  }, []);\n  \n  // Handle notification click\n  const handleNotificationClick = useCallback((notification: Notification) => {\n    markNotificationAsRead(notification.id);\n    \n    if (onNotificationClick) {\n      onNotificationClick(notification);\n    }\n    \n    handleMenuClose();\n  }, [markNotificationAsRead, onNotificationClick, handleMenuClose]);\n  \n  // Handle mark all as read\n  const handleMarkAllAsRead = useCallback(() => {\n    markAllNotificationsAsRead();\n  }, [markAllNotificationsAsRead]);\n  \n  // Get notification icon\n  const getNotificationIcon = useCallback((type: Notification['type']) => {\n    switch (type) {\n      case 'mention':\n        return <PersonIcon fontSize=\"small\" color=\"primary\" />;\n      case 'reply':\n        return <CommentIcon fontSize=\"small\" color=\"info\" />;\n      case 'update':\n        return <EditIcon fontSize=\"small\" color=\"warning\" />;\n      case 'delete':\n        return <DeleteIcon fontSize=\"small\" color=\"error\" />;\n      default:\n        return <NotificationsIcon fontSize=\"small\" />;\n    }\n  }, []);\n  \n  // Format notification time\n  const formatNotificationTime = useCallback((date: string) => {\n    const now = new Date();\n    const notificationDate = new Date(date);\n    \n    // If less than 24 hours ago, show relative time\n    if (now.getTime() - notificationDate.getTime() < 24 * 60 * 60 * 1000) {\n      return formatDistanceToNow(notificationDate, { addSuffix: true });\n    }\n    \n    // Otherwise, show date\n    return formatDate(notificationDate, 'MMM dd, yyyy');\n  }, []);\n  \n  // Get unread count\n  const unreadCount = getUnreadNotificationsCount();\n  \n  // Sort notifications by date (newest first)\n  const sortedNotifications = [...notifications]\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, maxNotifications);\n  \n  return (\n    <>\n      <IconButton\n        color=\"inherit\"\n        onClick={handleMenuOpen}\n        aria-label=\"notifications\"\n      >\n        <Badge badgeContent={unreadCount} color=\"error\">\n          {unreadCount > 0 ? (\n            <NotificationsActiveIcon />\n          ) : notifications.length > 0 ? (\n            <NotificationsIcon />\n          ) : (\n            <NotificationsNoneIcon />\n          )}\n        </Badge>\n      </IconButton>\n      \n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n        PaperProps={{\n          sx: {\n            width: 360,\n            maxHeight: 500,\n            overflow: 'auto'\n          }\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <Box sx={{ px: 2, py: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"subtitle1\">Notifications</Typography>\n          {unreadCount > 0 && (\n            <Button\n              size=\"small\"\n              onClick={handleMarkAllAsRead}\n              startIcon={<CheckCircleIcon fontSize=\"small\" />}\n            >\n              Mark all as read\n            </Button>\n          )}\n        </Box>\n        \n        <Divider />\n        \n        {sortedNotifications.length > 0 ? (\n          <List sx={{ p: 0 }}>\n            {sortedNotifications.map((notification) => (\n              <ListItem\n                key={notification.id}\n                onClick={() => handleNotificationClick(notification)}\n                sx={{\n                  cursor: 'pointer',\n                  backgroundColor: notification.read ? 'transparent' : alpha(theme.palette.primary.main, 0.08),\n                  '&:hover': {\n                    backgroundColor: alpha(theme.palette.primary.main, 0.12)\n                  }\n                }}\n              >\n                <ListItemAvatar>\n                  <Avatar sx={{ bgcolor: notification.read ? theme.palette.grey[300] : theme.palette.primary.main }}>\n                    {getNotificationIcon(notification.type)}\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={\n                    <Typography variant=\"body2\" fontWeight={notification.read ? 'normal' : 'bold'}>\n                      {notification.message}\n                    </Typography>\n                  }\n                  secondary={\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {formatNotificationTime(notification.createdAt)}\n                    </Typography>\n                  }\n                />\n                {!notification.read && (\n                  <Box\n                    sx={{\n                      width: 8,\n                      height: 8,\n                      borderRadius: '50%',\n                      bgcolor: theme.palette.primary.main,\n                      ml: 1\n                    }}\n                  />\n                )}\n              </ListItem>\n            ))}\n          </List>\n        ) : (\n          <Box sx={{ p: 3, textAlign: 'center' }}>\n            <NotificationsNoneIcon sx={{ fontSize: 48, color: theme.palette.grey[400], mb: 1 }} />\n            <Typography color=\"text.secondary\">No notifications</Typography>\n          </Box>\n        )}\n        \n        {notifications.length > maxNotifications && (\n          <Box sx={{ p: 2, textAlign: 'center' }}>\n            <Button size=\"small\" variant=\"text\">\n              View all notifications\n            </Button>\n          </Box>\n        )}\n      </Menu>\n    </>\n  );\n};\n\nexport default NotificationSystem;\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  Box,\n  Typography,\n  IconButton,\n  Chip,\n  Avatar,\n  Paper,\n  Popper,\n  ClickAwayListener,\n  Grow,\n  MenuList,\n  MenuItem,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport FlagIcon from '@mui/icons-material/Flag';\nimport AddCommentIcon from '@mui/icons-material/AddComment';\nimport PersonIcon from '@mui/icons-material/Person';\nimport { format as formatDate } from 'date-fns';\nimport { \n  CollaborativeAnnotation, \n  User, \n  useCollaborativeAnnotationContext \n} from './CollaborativeAnnotationSystem';\n\n// Annotation dialog props\ninterface CollaborativeAnnotationDialogProps {\n  open: boolean;\n  onClose: () => void;\n  chartId: string;\n  dataPointId: string | number;\n  dataPointLabel: string;\n}\n\n/**\n * CollaborativeAnnotationDialog component\n * Dialog for adding, editing, and viewing annotations with real-time collaboration\n */\nconst CollaborativeAnnotationDialog: React.FC<CollaborativeAnnotationDialogProps> = ({\n  open,\n  onClose,\n  chartId,\n  dataPointId,\n  dataPointLabel\n}) => {\n  const theme = useTheme();\n  const { \n    annotations, \n    users, \n    currentUser, \n    loading, \n    addAnnotation, \n    updateAnnotation, \n    deleteAnnotation, \n    getAnnotationsForDataPoint \n  } = useCollaborativeAnnotationContext();\n  \n  // Get annotations for this data point\n  const existingAnnotations = getAnnotationsForDataPoint(chartId, dataPointId);\n  \n  // State\n  const [newAnnotationText, setNewAnnotationText] = useState<string>('');\n  const [newAnnotationType, setNewAnnotationType] = useState<CollaborativeAnnotation['type']>('comment');\n  const [editingAnnotation, setEditingAnnotation] = useState<CollaborativeAnnotation | null>(null);\n  const [mentionSearch, setMentionSearch] = useState<string>('');\n  const [mentionAnchorEl, setMentionAnchorEl] = useState<HTMLElement | null>(null);\n  const [mentionPosition, setMentionPosition] = useState<{ start: number; end: number } | null>(null);\n  const textFieldRef = useRef<HTMLDivElement>(null);\n  \n  // Reset form when dialog opens\n  useEffect(() => {\n    if (open) {\n      setNewAnnotationText('');\n      setNewAnnotationType('comment');\n      setEditingAnnotation(null);\n    }\n  }, [open]);\n  \n  // Handle text change and detect mentions\n  const handleTextChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const text = event.target.value;\n    setNewAnnotationText(text);\n    \n    // Check for mention\n    const cursorPosition = event.target.selectionStart || 0;\n    const textBeforeCursor = text.substring(0, cursorPosition);\n    const mentionMatch = textBeforeCursor.match(/@(\\w*)$/);\n    \n    if (mentionMatch) {\n      const mentionText = mentionMatch[1];\n      setMentionSearch(mentionText);\n      setMentionPosition({\n        start: cursorPosition - mentionText.length - 1,\n        end: cursorPosition\n      });\n      \n      // Position the mention dropdown\n      if (textFieldRef.current) {\n        setMentionAnchorEl(textFieldRef.current);\n      }\n    } else {\n      setMentionAnchorEl(null);\n      setMentionPosition(null);\n    }\n  }, []);\n  \n  // Filter users based on mention search\n  const filteredUsers = mentionSearch\n    ? users.filter(user => \n        user.name.toLowerCase().includes(mentionSearch.toLowerCase()) &&\n        user.id !== currentUser.id\n      )\n    : [];\n  \n  // Handle mention selection\n  const handleMentionSelect = useCallback((user: User) => {\n    if (!mentionPosition) return;\n    \n    const beforeMention = newAnnotationText.substring(0, mentionPosition.start);\n    const afterMention = newAnnotationText.substring(mentionPosition.end);\n    \n    // Replace the @mention with the selected user\n    const updatedText = `${beforeMention}@${user.name.replace(/\\s+/g, '')} ${afterMention}`;\n    setNewAnnotationText(updatedText);\n    \n    // Close the mention dropdown\n    setMentionAnchorEl(null);\n    setMentionPosition(null);\n  }, [newAnnotationText, mentionPosition]);\n  \n  // Handle add annotation\n  const handleAddAnnotation = useCallback(() => {\n    if (!newAnnotationText.trim()) return;\n    \n    addAnnotation({\n      chartId,\n      dataPointId,\n      text: newAnnotationText,\n      author: currentUser.name,\n      type: newAnnotationType,\n      position: { x: 50, y: 50 }, // Default position\n      metadata: { label: dataPointLabel }\n    });\n    \n    // Reset form\n    setNewAnnotationText('');\n    setNewAnnotationType('comment');\n  }, [\n    newAnnotationText, \n    newAnnotationType, \n    chartId, \n    dataPointId, \n    dataPointLabel, \n    currentUser.name, \n    addAnnotation\n  ]);\n  \n  // Handle edit annotation\n  const handleEditAnnotation = useCallback((annotation: CollaborativeAnnotation) => {\n    setEditingAnnotation(annotation);\n    setNewAnnotationText(annotation.text);\n    setNewAnnotationType(annotation.type);\n  }, []);\n  \n  // Handle save edit\n  const handleSaveEdit = useCallback(() => {\n    if (!editingAnnotation || !newAnnotationText.trim()) return;\n    \n    updateAnnotation(editingAnnotation.id, newAnnotationText, newAnnotationType);\n    \n    // Reset form\n    setEditingAnnotation(null);\n    setNewAnnotationText('');\n    setNewAnnotationType('comment');\n  }, [editingAnnotation, newAnnotationText, newAnnotationType, updateAnnotation]);\n  \n  // Handle cancel edit\n  const handleCancelEdit = useCallback(() => {\n    setEditingAnnotation(null);\n    setNewAnnotationText('');\n    setNewAnnotationType('comment');\n  }, []);\n  \n  // Handle delete annotation\n  const handleDeleteAnnotation = useCallback((id: string) => {\n    deleteAnnotation(id);\n    \n    // If deleting the annotation being edited, reset form\n    if (editingAnnotation && editingAnnotation.id === id) {\n      handleCancelEdit();\n    }\n  }, [deleteAnnotation, editingAnnotation, handleCancelEdit]);\n  \n  // Get annotation type icon\n  const getAnnotationTypeIcon = useCallback((type: CollaborativeAnnotation['type']) => {\n    switch (type) {\n      case 'comment':\n        return <CommentIcon fontSize=\"small\" />;\n      case 'flag':\n        return <FlagIcon fontSize=\"small\" color=\"error\" />;\n      case 'insight':\n        return <AddCommentIcon fontSize=\"small\" color=\"primary\" />;\n      default:\n        return <CommentIcon fontSize=\"small\" />;\n    }\n  }, []);\n  \n  // Format text with mentions highlighted\n  const formatTextWithMentions = useCallback((text: string) => {\n    const parts = [];\n    let lastIndex = 0;\n    const mentionRegex = /@(\\w+)/g;\n    let match;\n    \n    while ((match = mentionRegex.exec(text)) !== null) {\n      // Add text before the mention\n      if (match.index > lastIndex) {\n        parts.push(text.substring(lastIndex, match.index));\n      }\n      \n      // Add the mention\n      const mentionName = match[1];\n      const user = users.find(u => u.name.toLowerCase().replace(/\\s+/g, '') === mentionName.toLowerCase());\n      \n      if (user) {\n        parts.push(\n          <Chip\n            key={`mention-${match.index}`}\n            size=\"small\"\n            label={user.name}\n            avatar={<Avatar>{user.name.charAt(0)}</Avatar>}\n            sx={{ \n              height: 24, \n              '& .MuiChip-label': { \n                px: 1,\n                fontSize: '0.75rem'\n              }\n            }}\n          />\n        );\n      } else {\n        parts.push(`@${mentionName}`);\n      }\n      \n      lastIndex = match.index + match[0].length;\n    }\n    \n    // Add remaining text\n    if (lastIndex < text.length) {\n      parts.push(text.substring(lastIndex));\n    }\n    \n    return parts;\n  }, [users]);\n  \n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      maxWidth=\"md\" \n      fullWidth\n      PaperProps={{\n        sx: {\n          maxHeight: '80vh'\n        }\n      }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">\n            Annotations for {dataPointLabel}\n          </Typography>\n          <IconButton\n            aria-label=\"close\"\n            onClick={onClose}\n            sx={{ color: theme.palette.grey[500] }}\n          >\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent dividers>\n        {/* Existing annotations */}\n        {existingAnnotations.length > 0 ? (\n          <List>\n            {existingAnnotations.map((annotation) => (\n              <React.Fragment key={annotation.id}>\n                <ListItem alignItems=\"flex-start\">\n                  <Box sx={{ mr: 1, mt: 0.5 }}>\n                    {getAnnotationTypeIcon(annotation.type)}\n                  </Box>\n                  <ListItemText\n                    primary={\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <Avatar\n                            sx={{ width: 24, height: 24, mr: 1, fontSize: '0.75rem' }}\n                          >\n                            {annotation.author.charAt(0)}\n                          </Avatar>\n                          <Typography variant=\"subtitle2\">\n                            {annotation.author}\n                          </Typography>\n                        </Box>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {formatDate(new Date(annotation.createdAt), 'MMM dd, yyyy HH:mm')}\n                        </Typography>\n                      </Box>\n                    }\n                    secondary={\n                      <Box sx={{ mt: 1 }}>\n                        <Typography\n                          variant=\"body2\"\n                          color=\"text.primary\"\n                          component=\"div\"\n                          sx={{ whiteSpace: 'pre-wrap' }}\n                        >\n                          {formatTextWithMentions(annotation.text)}\n                        </Typography>\n                        \n                        {annotation.updatedAt !== annotation.createdAt && (\n                          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n                            Edited {formatDate(new Date(annotation.updatedAt), 'MMM dd, yyyy HH:mm')}\n                          </Typography>\n                        )}\n                      </Box>\n                    }\n                  />\n                  \n                  {annotation.authorId === currentUser.id && (\n                    <ListItemSecondaryAction>\n                      <IconButton\n                        edge=\"end\"\n                        aria-label=\"edit\"\n                        onClick={() => handleEditAnnotation(annotation)}\n                        size=\"small\"\n                      >\n                        <EditIcon fontSize=\"small\" />\n                      </IconButton>\n                      <IconButton\n                        edge=\"end\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteAnnotation(annotation.id)}\n                        size=\"small\"\n                      >\n                        <DeleteIcon fontSize=\"small\" />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  )}\n                </ListItem>\n                <Divider component=\"li\" />\n              </React.Fragment>\n            ))}\n          </List>\n        ) : (\n          <Box sx={{ py: 2, textAlign: 'center' }}>\n            <Typography color=\"text.secondary\">\n              No annotations yet. Add one below.\n            </Typography>\n          </Box>\n        )}\n        \n        {/* Add/Edit annotation form */}\n        <Box sx={{ mt: 2 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            {editingAnnotation ? 'Edit Annotation' : 'Add Annotation'}\n          </Typography>\n          \n          <TextField\n            fullWidth\n            multiline\n            rows={3}\n            placeholder=\"Add your annotation here... Use @ to mention users\"\n            value={newAnnotationText}\n            onChange={handleTextChange}\n            variant=\"outlined\"\n            size=\"small\"\n            ref={textFieldRef}\n            disabled={loading}\n          />\n          \n          {/* Mention dropdown */}\n          <Popper\n            open={Boolean(mentionAnchorEl) && filteredUsers.length > 0}\n            anchorEl={mentionAnchorEl}\n            placement=\"bottom-start\"\n            transition\n          >\n            {({ TransitionProps }) => (\n              <Grow {...TransitionProps}>\n                <Paper elevation={3} sx={{ mt: 1, maxHeight: 200, overflow: 'auto' }}>\n                  <ClickAwayListener onClickAway={() => setMentionAnchorEl(null)}>\n                    <MenuList>\n                      {filteredUsers.map(user => (\n                        <MenuItem key={user.id} onClick={() => handleMentionSelect(user)}>\n                          <Avatar sx={{ width: 24, height: 24, mr: 1, fontSize: '0.75rem' }}>\n                            {user.name.charAt(0)}\n                          </Avatar>\n                          <Typography variant=\"body2\">{user.name}</Typography>\n                        </MenuItem>\n                      ))}\n                    </MenuList>\n                  </ClickAwayListener>\n                </Paper>\n              </Grow>\n            )}\n          </Popper>\n          \n          <Box sx={{ display: 'flex', mt: 1, gap: 1 }}>\n            <Chip\n              icon={<CommentIcon />}\n              label=\"Comment\"\n              onClick={() => setNewAnnotationType('comment')}\n              color={newAnnotationType === 'comment' ? 'primary' : 'default'}\n              variant={newAnnotationType === 'comment' ? 'filled' : 'outlined'}\n            />\n            <Chip\n              icon={<FlagIcon />}\n              label=\"Flag\"\n              onClick={() => setNewAnnotationType('flag')}\n              color={newAnnotationType === 'flag' ? 'primary' : 'default'}\n              variant={newAnnotationType === 'flag' ? 'filled' : 'outlined'}\n            />\n            <Chip\n              icon={<AddCommentIcon />}\n              label=\"Insight\"\n              onClick={() => setNewAnnotationType('insight')}\n              color={newAnnotationType === 'insight' ? 'primary' : 'default'}\n              variant={newAnnotationType === 'insight' ? 'filled' : 'outlined'}\n            />\n          </Box>\n          \n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n            Tip: Use @ to mention users (e.g., @JohnDoe)\n          </Typography>\n        </Box>\n      </DialogContent>\n      \n      <DialogActions>\n        {editingAnnotation ? (\n          <>\n            <Button onClick={handleCancelEdit} disabled={loading}>Cancel</Button>\n            <Button\n              onClick={handleSaveEdit}\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!newAnnotationText.trim() || loading}\n            >\n              Save Changes\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button onClick={onClose} disabled={loading}>Close</Button>\n            <Button\n              onClick={handleAddAnnotation}\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!newAnnotationText.trim() || loading}\n            >\n              Add Annotation\n            </Button>\n          </>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CollaborativeAnnotationDialog;\n","import React, { useState, useCallback } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  IconButton,\n  Tooltip,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Tabs,\n  Tab,\n  useTheme\n} from '@mui/material';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport FullscreenIcon from '@mui/icons-material/Fullscreen';\nimport FullscreenExitIcon from '@mui/icons-material/FullscreenExit';\nimport ShareIcon from '@mui/icons-material/Share';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport NetworkGraph, { GraphData } from './NetworkGraph';\nimport SankeyDiagram, { SankeyData } from './SankeyDiagram';\nimport Interactive3DChart, { DataPoint3D } from './Interactive3DChart';\nimport NotificationSystem from '../interactive/NotificationSystem';\nimport { CollaborativeAnnotationContextProvider } from '../interactive/CollaborativeAnnotationSystem';\nimport CollaborativeAnnotationDialog from '../interactive/CollaborativeAnnotationDialog';\n\n// Visualization types\nexport type AdvancedVisualizationType = 'networkGraph' | 'sankeyDiagram' | '3dScatter' | '3dBar' | '3dSurface';\n\n// Advanced visualization container props\ninterface AdvancedVisualizationContainerProps {\n  id: string;\n  title: string;\n  description?: string;\n  type: AdvancedVisualizationType;\n  data: any;\n  height?: number;\n  loading?: boolean;\n  error?: string | null;\n  enableFullscreen?: boolean;\n  enableExport?: boolean;\n  enableShare?: boolean;\n  enableNotifications?: boolean;\n  enableAnnotations?: boolean;\n  onExport?: (format: string) => void;\n  onShare?: () => void;\n}\n\n/**\n * AdvancedVisualizationContainer component\n * A container for advanced visualizations with interactive features\n */\nconst AdvancedVisualizationContainer: React.FC<AdvancedVisualizationContainerProps> = ({\n  id,\n  title,\n  description,\n  type,\n  data,\n  height = 500,\n  loading = false,\n  error = null,\n  enableFullscreen = true,\n  enableExport = true,\n  enableShare = true,\n  enableNotifications = true,\n  enableAnnotations = true,\n  onExport,\n  onShare\n}) => {\n  const theme = useTheme();\n  \n  // State\n  const [isFullscreen, setIsFullscreen] = useState<boolean>(false);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [annotationDialogOpen, setAnnotationDialogOpen] = useState<boolean>(false);\n  const [selectedDataPoint, setSelectedDataPoint] = useState<any>(null);\n  \n  // Handle menu open\n  const handleMenuOpen = useCallback((event: React.MouseEvent<HTMLElement>) => {\n    setMenuAnchorEl(event.currentTarget);\n  }, []);\n  \n  // Handle menu close\n  const handleMenuClose = useCallback(() => {\n    setMenuAnchorEl(null);\n  }, []);\n  \n  // Handle fullscreen toggle\n  const handleFullscreenToggle = useCallback(() => {\n    setIsFullscreen(prev => !prev);\n  }, []);\n  \n  // Handle export\n  const handleExport = useCallback((format: string) => {\n    if (onExport) {\n      onExport(format);\n    } else {\n      console.log(`Exporting visualization in ${format} format`);\n    }\n    \n    handleMenuClose();\n  }, [onExport, handleMenuClose]);\n  \n  // Handle share\n  const handleShare = useCallback(() => {\n    if (onShare) {\n      onShare();\n    } else {\n      console.log('Sharing visualization');\n    }\n    \n    handleMenuClose();\n  }, [onShare, handleMenuClose]);\n  \n  // Handle tab change\n  const handleTabChange = useCallback((event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  }, []);\n  \n  // Handle data point click\n  const handleDataPointClick = useCallback((dataPoint: any) => {\n    setSelectedDataPoint(dataPoint);\n    \n    if (enableAnnotations) {\n      setAnnotationDialogOpen(true);\n    }\n  }, [enableAnnotations]);\n  \n  // Handle notification click\n  const handleNotificationClick = useCallback((notification: any) => {\n    // Find the data point associated with the notification\n    const dataPointId = notification.dataPointId;\n    \n    // Open annotation dialog for the data point\n    setSelectedDataPoint({ id: dataPointId, label: 'Data Point' });\n    setAnnotationDialogOpen(true);\n  }, []);\n  \n  // Render visualization based on type\n  const renderVisualization = useCallback(() => {\n    switch (type) {\n      case 'networkGraph':\n        return (\n          <NetworkGraph\n            id={`${id}-network`}\n            title={title}\n            description={description}\n            data={data as GraphData}\n            height={height}\n            loading={loading}\n            error={error}\n            enableNodeSelection={true}\n            enableLinkSelection={true}\n            enableSearch={true}\n            enableFiltering={true}\n            enableAnnotations={enableAnnotations}\n            onNodeClick={handleDataPointClick}\n          />\n        );\n        \n      case 'sankeyDiagram':\n        return (\n          <SankeyDiagram\n            id={`${id}-sankey`}\n            title={title}\n            description={description}\n            data={data as SankeyData}\n            height={height}\n            loading={loading}\n            error={error}\n            enableSearch={true}\n            enableFiltering={true}\n            enableExport={true}\n            enableAnnotations={enableAnnotations}\n            onNodeClick={handleDataPointClick}\n            onLinkClick={handleDataPointClick}\n          />\n        );\n        \n      case '3dScatter':\n      case '3dBar':\n      case '3dSurface':\n        return (\n          <Interactive3DChart\n            id={`${id}-3d`}\n            title={title}\n            description={description}\n            data={data as DataPoint3D[]}\n            height={height}\n            loading={loading}\n            error={error}\n            enableRotation={true}\n            enableZoom={true}\n            enableLabels={true}\n            enableGrid={true}\n            enableAxes={true}\n            enableAnnotations={enableAnnotations}\n            chartType={type === '3dScatter' ? '3dScatter' : type === '3dBar' ? '3dBar' : '3dSurface'}\n            onPointClick={handleDataPointClick}\n          />\n        );\n        \n      default:\n        return (\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n            <Typography color=\"text.secondary\">Unsupported visualization type</Typography>\n          </Box>\n        );\n    }\n  }, [type, id, title, description, data, height, loading, error, enableAnnotations, handleDataPointClick]);\n  \n  // Get data point label\n  const getDataPointLabel = useCallback(() => {\n    if (!selectedDataPoint) return 'Data Point';\n    \n    if (selectedDataPoint.label) {\n      return selectedDataPoint.label;\n    }\n    \n    if (selectedDataPoint.name) {\n      return selectedDataPoint.name;\n    }\n    \n    if (type === 'networkGraph') {\n      return `Node ${selectedDataPoint.id}`;\n    }\n    \n    if (type === 'sankeyDiagram') {\n      return `Node ${selectedDataPoint.id}`;\n    }\n    \n    if (type.startsWith('3d')) {\n      return `Point (${selectedDataPoint.x}, ${selectedDataPoint.y}, ${selectedDataPoint.z})`;\n    }\n    \n    return `Data Point ${selectedDataPoint.id}`;\n  }, [selectedDataPoint, type]);\n  \n  return (\n    <CollaborativeAnnotationContextProvider>\n      <Paper\n        sx={{\n          height: isFullscreen ? '100vh' : height,\n          width: isFullscreen ? '100vw' : '100%',\n          position: isFullscreen ? 'fixed' : 'relative',\n          top: isFullscreen ? 0 : 'auto',\n          left: isFullscreen ? 0 : 'auto',\n          zIndex: isFullscreen ? 1300 : 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden'\n        }}\n        elevation={isFullscreen ? 24 : 1}\n      >\n        {/* Header */}\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            p: 2,\n            borderBottom: '1px solid',\n            borderColor: 'divider'\n          }}\n        >\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Typography variant=\"h6\">{title}</Typography>\n            {description && (\n              <Tooltip title={description}>\n                <IconButton size=\"small\" sx={{ ml: 1 }}>\n                  <InfoOutlinedIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Box>\n          \n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            {/* Notifications */}\n            {enableNotifications && (\n              <NotificationSystem onNotificationClick={handleNotificationClick} />\n            )}\n            \n            {/* Fullscreen toggle */}\n            {enableFullscreen && (\n              <Tooltip title={isFullscreen ? \"Exit Fullscreen\" : \"Fullscreen\"}>\n                <IconButton onClick={handleFullscreenToggle}>\n                  {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n                </IconButton>\n              </Tooltip>\n            )}\n            \n            {/* More options */}\n            {(enableExport || enableShare) && (\n              <IconButton onClick={handleMenuOpen}>\n                <MoreVertIcon />\n              </IconButton>\n            )}\n            \n            {/* Options menu */}\n            <Menu\n              anchorEl={menuAnchorEl}\n              open={Boolean(menuAnchorEl)}\n              onClose={handleMenuClose}\n            >\n              {enableExport && (\n                <>\n                  <MenuItem onClick={() => handleExport('png')}>\n                    <ListItemIcon>\n                      <DownloadIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    <ListItemText>Export as PNG</ListItemText>\n                  </MenuItem>\n                  <MenuItem onClick={() => handleExport('svg')}>\n                    <ListItemIcon>\n                      <DownloadIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    <ListItemText>Export as SVG</ListItemText>\n                  </MenuItem>\n                  <MenuItem onClick={() => handleExport('csv')}>\n                    <ListItemIcon>\n                      <DownloadIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    <ListItemText>Export Data as CSV</ListItemText>\n                  </MenuItem>\n                </>\n              )}\n              \n              {enableExport && enableShare && <Divider />}\n              \n              {enableShare && (\n                <MenuItem onClick={handleShare}>\n                  <ListItemIcon>\n                    <ShareIcon fontSize=\"small\" />\n                  </ListItemIcon>\n                  <ListItemText>Share Visualization</ListItemText>\n                </MenuItem>\n              )}\n            </Menu>\n          </Box>\n        </Box>\n        \n        {/* Tabs for different views (if applicable) */}\n        {type.startsWith('3d') && (\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={activeTab} onChange={handleTabChange} aria-label=\"visualization tabs\">\n              <Tab label=\"3D View\" />\n              <Tab label=\"2D Projection\" />\n              <Tab label=\"Data Table\" />\n            </Tabs>\n          </Box>\n        )}\n        \n        {/* Visualization */}\n        <Box sx={{ flex: 1, position: 'relative' }}>\n          {renderVisualization()}\n        </Box>\n        \n        {/* Annotation Dialog */}\n        {selectedDataPoint && (\n          <CollaborativeAnnotationDialog\n            open={annotationDialogOpen}\n            onClose={() => setAnnotationDialogOpen(false)}\n            chartId={id}\n            dataPointId={selectedDataPoint.id}\n            dataPointLabel={getDataPointLabel()}\n          />\n        )}\n      </Paper>\n    </CollaborativeAnnotationContextProvider>\n  );\n};\n\nexport default AdvancedVisualizationContainer;\n","import React, { useState } from 'react';\nimport { Paper, Typography, IconButton, Menu, MenuItem, Divider, useTheme } from '@mui/material';\nimport SimpleBox from '../../common/SimpleBox';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FullscreenIcon from '@mui/icons-material/Fullscreen';\nimport { format as formatDate } from 'date-fns';\nimport { ReportAreaChart, ReportBarChart, ReportPieChart } from '../charts/ReportCharts';\nimport { ReportScatterChart, ReportRadarChart, ReportTreemapChart, ReportGaugeChart, ReportHeatmap } from '../charts/AdvancedCharts';\nimport InteractiveChart from '../interactive/InteractiveChart';\nimport AdvancedInteractiveChart from '../interactive/AdvancedInteractiveChart';\nimport ZoomableTimeSeriesChart from '../interactive/ZoomableTimeSeriesChart';\nimport LassoSelectionScatterChart from '../interactive/LassoSelectionScatterChart';\nimport DrilldownModal, { DrilldownData } from '../interactive/DrilldownModal';\nimport { EnhancedTable } from '../../tables/enhanced';\nimport { ColumnDef } from '../../tables/enhanced/types';\nimport NetworkGraph from '../visualizations/NetworkGraph';\nimport SankeyDiagram from '../visualizations/SankeyDiagram';\nimport Interactive3DChart from '../visualizations/Interactive3DChart';\nimport Surface3DPlot from '../visualizations/Surface3DPlot';\nimport AdvancedVisualizationContainer from '../visualizations/AdvancedVisualizationContainer';\n\n// Chart colors\nconst CHART_COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A569BD', '#5DADE2', '#48C9B0', '#F4D03F'];\n\n// Widget types\nexport type WidgetType = 'table' | 'lineChart' | 'barChart' | 'pieChart' | 'areaChart' | 'summary' |\n                         'scatterChart' | 'radarChart' | 'treemapChart' | 'gaugeChart' | 'heatmap' |\n                         'zoomableTimeSeries' | 'lassoScatter' | 'networkGraph' | 'sankeyDiagram' |\n                         '3dScatter' | '3dBar' | '3dSurface' | 'surfacePlot';\n\n// Widget interface\nexport interface Widget {\n  id: string;\n  type: WidgetType;\n  title: string;\n  dataSource: string;\n  size: 'small' | 'medium' | 'large';\n  position: number;\n  config?: any;\n  data?: any[];\n}\n\ninterface DashboardWidgetProps {\n  widget: Widget;\n  data: any;\n  loading?: boolean;\n  error?: string | null;\n  customizeMode?: boolean;\n  onMenuOpen?: (event: React.MouseEvent<HTMLElement>, widgetId: string) => void;\n  columns?: ColumnDef[];\n  enableInteractivity?: boolean;\n}\n\n/**\n * DashboardWidget component\n * Renders different types of widgets based on the widget type\n */\nconst DashboardWidget: React.FC<DashboardWidgetProps> = ({\n  widget,\n  data,\n  loading = false,\n  error = null,\n  customizeMode = false,\n  onMenuOpen,\n  columns = [],\n  enableInteractivity = true\n}) => {\n  const theme = useTheme();\n  const [drilldownOpen, setDrilldownOpen] = useState<boolean>(false);\n  const [drilldownData, setDrilldownData] = useState<DrilldownData | null>(null);\n\n  // Get widget size styles\n  const getWidgetSizeStyles = () => {\n    switch (widget.size) {\n      case 'small':\n        return { gridColumn: 'span 4', height: 300 };\n      case 'medium':\n        return { gridColumn: 'span 6', height: 350 };\n      case 'large':\n        return { gridColumn: 'span 12', height: 400 };\n      default:\n        return { gridColumn: 'span 6', height: 350 };\n    }\n  };\n\n  // Handle drill-down\n  const handleDrillDown = (data: any, index: number) => {\n    // Generate drilldown data\n    let title = widget.title;\n    let category = '';\n    let value = 0;\n    let detailData: any[] = [];\n\n    if (widget.type === 'pieChart') {\n      category = data.name;\n      value = data.value;\n      title = `${widget.title} - ${category}`;\n    } else if (widget.dataSource === 'dailyActions') {\n      category = formatDate(new Date(data.date), 'MMM dd, yyyy');\n      value = data.deposits || data.bets || data.uniquePlayers || 0;\n      title = `${widget.title} - ${category}`;\n\n      // For daily actions, filter by date\n      if (Array.isArray(widget.data)) {\n        detailData = widget.data.filter(item =>\n          item.date === data.date\n        );\n      }\n    } else if (widget.dataSource === 'games') {\n      category = data.name || '';\n      value = data.totalBets || data.netGamingRevenue || 0;\n      title = `${widget.title} - ${category}`;\n\n      // For games, filter by name\n      if (Array.isArray(widget.data)) {\n        detailData = widget.data.filter(item =>\n          item.name === data.name\n        );\n      }\n    } else if (widget.dataSource === 'players') {\n      category = data.name || '';\n      value = data.totalDeposits || data.netGamingRevenue || 0;\n      title = `${widget.title} - ${category}`;\n\n      // For players, filter by name\n      if (Array.isArray(widget.data)) {\n        detailData = widget.data.filter(item =>\n          item.name === data.name\n        );\n      }\n    }\n\n    // If no detail data found, use the clicked item\n    if (detailData.length === 0) {\n      detailData = [data];\n    }\n\n    const drillData: DrilldownData = {\n      title,\n      description: `Detailed view of ${category}`,\n      category,\n      value,\n      data: detailData\n    };\n\n    setDrilldownData(drillData);\n    setDrilldownOpen(true);\n  };\n\n  // Render widget content based on type\n  const renderWidgetContent = () => {\n    if (!data || (Array.isArray(data) && data.length === 0)) {\n      return (\n        <SimpleBox sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n          <Typography color=\"text.secondary\">No data available</Typography>\n        </SimpleBox>\n      );\n    }\n\n    switch (widget.type) {\n      case 'areaChart':\n        if (enableInteractivity) {\n          return (\n            <AdvancedInteractiveChart\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              type=\"area\"\n              data={Array.isArray(data) ? data : []}\n              xKey={widget.dataSource === 'dailyActions' ? 'date' : 'name'}\n              yKeys={widget.dataSource === 'dailyActions' ? ['uniquePlayers', 'newRegistrations'] :\n                    widget.dataSource === 'games' ? ['totalBets', 'netGamingRevenue'] :\n                    ['totalDeposits', 'netGamingRevenue']}\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n              enableDrilldown={true}\n              enableTooltip={true}\n              enableCrossFiltering={true}\n              enableAnnotations={true}\n              onClick={handleDrillDown}\n            />\n          );\n        } else {\n          return (\n            <ReportAreaChart\n              data={Array.isArray(data) ? data : []}\n              xKey={widget.dataSource === 'dailyActions' ? 'date' : 'name'}\n              yKeys={widget.dataSource === 'dailyActions' ? ['uniquePlayers', 'newRegistrations'] :\n                    widget.dataSource === 'games' ? ['totalBets', 'netGamingRevenue'] :\n                    ['totalDeposits', 'netGamingRevenue']}\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n            />\n          );\n        }\n      case 'barChart':\n        if (enableInteractivity) {\n          return (\n            <AdvancedInteractiveChart\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              type=\"bar\"\n              data={Array.isArray(data) ? data : []}\n              xKey={widget.dataSource === 'dailyActions' ? 'date' : 'name'}\n              yKeys={widget.dataSource === 'dailyActions' ? ['deposits', 'withdrawals'] :\n                    widget.dataSource === 'games' ? ['totalBets', 'totalWins'] :\n                    ['totalDeposits', 'totalBets']}\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n              enableDrilldown={true}\n              enableTooltip={true}\n              enableCrossFiltering={true}\n              enableAnnotations={true}\n              onClick={handleDrillDown}\n            />\n          );\n        } else {\n          return (\n            <ReportBarChart\n              data={Array.isArray(data) ? data : []}\n              xKey={widget.dataSource === 'dailyActions' ? 'date' : 'name'}\n              yKeys={widget.dataSource === 'dailyActions' ? ['deposits', 'withdrawals'] :\n                    widget.dataSource === 'games' ? ['totalBets', 'totalWins'] :\n                    ['totalDeposits', 'totalBets']}\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n            />\n          );\n        }\n      case 'pieChart':\n        // Transform data for pie chart if needed\n        let pieData = Array.isArray(data) ? data : [];\n        if (widget.dataSource === 'dailyActions') {\n          // Create pie data from daily actions\n          pieData = [\n            { name: 'Deposits', value: pieData.reduce((sum, item) => sum + (item.deposits || 0), 0) },\n            { name: 'Withdrawals', value: pieData.reduce((sum, item) => sum + (item.withdrawals || 0), 0) },\n            { name: 'Bets', value: pieData.reduce((sum, item) => sum + (item.bets || 0), 0) },\n            { name: 'Wins', value: pieData.reduce((sum, item) => sum + (item.wins || 0), 0) }\n          ];\n        } else if (widget.dataSource === 'players') {\n          // Create pie data from players by country\n          const countryMap = new Map<string, number>();\n          pieData.forEach((player) => {\n            const country = player.country || 'Unknown';\n            countryMap.set(country, (countryMap.get(country) || 0) + 1);\n          });\n          pieData = Array.from(countryMap.entries()).map(([name, value]) => ({ name, value }));\n        } else if (widget.dataSource === 'games') {\n          // Create pie data from games by category\n          const categoryMap = new Map<string, number>();\n          pieData.forEach((game) => {\n            const category = game.category || 'Unknown';\n            categoryMap.set(category, (categoryMap.get(category) || 0) + 1);\n          });\n          pieData = Array.from(categoryMap.entries()).map(([name, value]) => ({ name, value }));\n        }\n\n        if (enableInteractivity) {\n          return (\n            <AdvancedInteractiveChart\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              type=\"pie\"\n              data={pieData}\n              xKey=\"name\"\n              nameKey=\"name\"\n              valueKey=\"value\"\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n              enableDrilldown={true}\n              enableTooltip={true}\n              enableCrossFiltering={true}\n              enableAnnotations={true}\n              onClick={handleDrillDown}\n            />\n          );\n        } else {\n          return (\n            <ReportPieChart\n              data={pieData}\n              nameKey=\"name\"\n              valueKey=\"value\"\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n            />\n          );\n        }\n\n      case 'scatterChart':\n      case 'lassoScatter':\n        // Transform data for scatter chart if needed\n        const scatterData = Array.isArray(data) ? data.map(item => {\n          let result: any = { id: item.id || `id-${Math.random().toString(36).substring(2, 9)}` };\n\n          if (widget.dataSource === 'dailyActions') {\n            result = {\n              ...result,\n              x: item.deposits || 0,\n              y: item.bets || 0,\n              z: item.uniquePlayers || 0,\n              name: formatDate(new Date(item.date), 'MMM dd'),\n              date: item.date\n            };\n          } else if (widget.dataSource === 'players') {\n            result = {\n              ...result,\n              x: item.totalDeposits || 0,\n              y: item.totalBets || 0,\n              z: item.netGamingRevenue || 0,\n              name: item.name || 'Unknown'\n            };\n          } else if (widget.dataSource === 'games') {\n            result = {\n              ...result,\n              x: item.totalBets || 0,\n              y: item.netGamingRevenue || 0,\n              z: item.uniquePlayers || 0,\n              name: item.name || 'Unknown'\n            };\n          } else {\n            return { ...item, id: result.id };\n          }\n\n          return result;\n        }) : [];\n\n        if (enableInteractivity && widget.type === 'lassoScatter') {\n          return (\n            <LassoSelectionScatterChart\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              data={scatterData}\n              xKey=\"x\"\n              yKey=\"y\"\n              nameKey=\"name\"\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n              enableLassoSelection={true}\n              enableCrossFiltering={true}\n              onClick={handleDrillDown}\n            />\n          );\n        } else if (enableInteractivity) {\n          return (\n            <AdvancedInteractiveChart\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              type=\"scatter\"\n              data={scatterData}\n              xKey=\"x\"\n              yKeys={[\"y\"]}\n              nameKey=\"name\"\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n              enableDrilldown={true}\n              enableTooltip={true}\n              enableCrossFiltering={true}\n              enableAnnotations={true}\n              onClick={handleDrillDown}\n            />\n          );\n        } else {\n          return (\n            <ReportScatterChart\n              data={scatterData}\n              xKey=\"x\"\n              yKey=\"y\"\n              zKey=\"z\"\n              nameKey=\"name\"\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n            />\n          );\n        }\n\n      case 'radarChart':\n        // Transform data for radar chart if needed\n        let radarData = Array.isArray(data) ? data : [];\n        if (widget.dataSource === 'dailyActions') {\n          // Use the most recent 5 days for radar chart\n          radarData = radarData.slice(0, 5).map(item => ({\n            date: formatDate(new Date(item.date), 'MMM dd'),\n            deposits: item.deposits || 0,\n            withdrawals: item.withdrawals || 0,\n            bets: item.bets || 0,\n            wins: item.wins || 0,\n            ggr: item.ggr || 0\n          }));\n        } else if (widget.dataSource === 'games') {\n          // Use the top 5 games for radar chart\n          radarData = radarData.slice(0, 5).map(item => ({\n            name: item.name || 'Unknown',\n            totalBets: item.totalBets || 0,\n            totalWins: item.totalWins || 0,\n            netGamingRevenue: item.netGamingRevenue || 0,\n            uniquePlayers: item.uniquePlayers || 0,\n            popularity: item.popularity || 0\n          }));\n        } else if (widget.dataSource === 'players') {\n          // Use the top 5 players for radar chart\n          radarData = radarData.slice(0, 5).map(item => ({\n            name: item.name || 'Unknown',\n            totalDeposits: item.totalDeposits || 0,\n            totalBets: item.totalBets || 0,\n            totalWins: item.totalWins || 0,\n            netGamingRevenue: item.netGamingRevenue || 0\n          }));\n        }\n\n        return (\n          <ReportRadarChart\n            data={radarData}\n            dataKey={widget.dataSource === 'dailyActions' ? 'deposits' :\n                    widget.dataSource === 'games' ? 'totalBets' : 'totalDeposits'}\n            nameKey={widget.dataSource === 'dailyActions' ? 'date' : 'name'}\n            loading={loading}\n            error={error}\n            height={getWidgetSizeStyles().height - 60}\n          />\n        );\n\n      case 'treemapChart':\n        // Transform data for treemap chart if needed\n        let treemapData = Array.isArray(data) ? data : [];\n        if (widget.dataSource === 'dailyActions') {\n          // Not ideal for treemap, but we can use it for demonstration\n          treemapData = [\n            { name: 'Deposits', value: treemapData.reduce((sum, item) => sum + (item.deposits || 0), 0) },\n            { name: 'Withdrawals', value: treemapData.reduce((sum, item) => sum + (item.withdrawals || 0), 0) },\n            { name: 'Bets', value: treemapData.reduce((sum, item) => sum + (item.bets || 0), 0) },\n            { name: 'Wins', value: treemapData.reduce((sum, item) => sum + (item.wins || 0), 0) },\n            { name: 'GGR', value: treemapData.reduce((sum, item) => sum + (item.ggr || 0), 0) }\n          ];\n        } else if (widget.dataSource === 'games') {\n          // Use games by category for treemap\n          const categoryMap = new Map<string, number>();\n          treemapData.forEach((game) => {\n            const category = game.category || 'Unknown';\n            categoryMap.set(category, (categoryMap.get(category) || 0) + (game.totalBets || 0));\n          });\n          treemapData = Array.from(categoryMap.entries()).map(([name, value]) => ({ name, value }));\n        } else if (widget.dataSource === 'players') {\n          // Use players by country for treemap\n          const countryMap = new Map<string, number>();\n          treemapData.forEach((player) => {\n            const country = player.country || 'Unknown';\n            countryMap.set(country, (countryMap.get(country) || 0) + (player.totalDeposits || 0));\n          });\n          treemapData = Array.from(countryMap.entries()).map(([name, value]) => ({ name, value }));\n        }\n\n        return (\n          <ReportTreemapChart\n            data={treemapData}\n            dataKey=\"value\"\n            nameKey=\"name\"\n            loading={loading}\n            error={error}\n            height={getWidgetSizeStyles().height - 60}\n          />\n        );\n\n      case 'gaugeChart':\n        // Transform data for gauge chart if needed\n        let gaugeData = Array.isArray(data) ? data : [];\n        if (widget.dataSource === 'dailyActions') {\n          // Create gauge data for daily actions\n          const totalDeposits = gaugeData.reduce((sum, item) => sum + (item.deposits || 0), 0);\n          const totalWithdrawals = gaugeData.reduce((sum, item) => sum + (item.withdrawals || 0), 0);\n          const totalBets = gaugeData.reduce((sum, item) => sum + (item.bets || 0), 0);\n          const totalWins = gaugeData.reduce((sum, item) => sum + (item.wins || 0), 0);\n          const totalGGR = gaugeData.reduce((sum, item) => sum + (item.ggr || 0), 0);\n\n          gaugeData = [\n            { name: 'Deposits', value: totalDeposits, fill: '#0088FE' },\n            { name: 'Withdrawals', value: totalWithdrawals, fill: '#00C49F' },\n            { name: 'Bets', value: totalBets, fill: '#FFBB28' },\n            { name: 'Wins', value: totalWins, fill: '#FF8042' },\n            { name: 'GGR', value: totalGGR, fill: '#A569BD' }\n          ];\n        } else if (widget.dataSource === 'games') {\n          // Create gauge data for top 5 games\n          gaugeData = gaugeData.slice(0, 5).map((game, index) => ({\n            name: game.name || 'Unknown',\n            value: game.totalBets || 0,\n            fill: CHART_COLORS[index % CHART_COLORS.length]\n          }));\n        } else if (widget.dataSource === 'players') {\n          // Create gauge data for top 5 players\n          gaugeData = gaugeData.slice(0, 5).map((player, index) => ({\n            name: player.name || 'Unknown',\n            value: player.totalDeposits || 0,\n            fill: CHART_COLORS[index % CHART_COLORS.length]\n          }));\n        }\n\n        return (\n          <ReportGaugeChart\n            data={gaugeData}\n            dataKey=\"value\"\n            nameKey=\"name\"\n            loading={loading}\n            error={error}\n            height={getWidgetSizeStyles().height - 60}\n          />\n        );\n\n      case 'zoomableTimeSeries':\n        // Transform data for time series chart if needed\n        const timeSeriesData = Array.isArray(data) ? data.sort((a, b) => {\n          if (a.date && b.date) {\n            return new Date(a.date).getTime() - new Date(b.date).getTime();\n          }\n          return 0;\n        }) : [];\n\n        if (enableInteractivity) {\n          return (\n            <ZoomableTimeSeriesChart\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              type={widget.dataSource === 'dailyActions' ? 'area' : 'line'}\n              data={timeSeriesData}\n              xKey=\"date\"\n              yKeys={widget.dataSource === 'dailyActions' ? ['deposits', 'withdrawals', 'bets', 'wins'] :\n                    widget.dataSource === 'games' ? ['totalBets', 'totalWins', 'netGamingRevenue'] :\n                    ['totalDeposits', 'totalBets', 'netGamingRevenue']}\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n              enableBrush={true}\n              enableZoom={true}\n              onClick={handleDrillDown}\n            />\n          );\n        } else {\n          return (\n            <ReportAreaChart\n              data={timeSeriesData}\n              xKey=\"date\"\n              yKeys={widget.dataSource === 'dailyActions' ? ['deposits', 'withdrawals'] :\n                    widget.dataSource === 'games' ? ['totalBets', 'totalWins'] :\n                    ['totalDeposits', 'totalBets']}\n              loading={loading}\n              error={error}\n              height={getWidgetSizeStyles().height - 60}\n            />\n          );\n        }\n\n      case 'heatmap':\n        // Transform data for heatmap if needed\n        let heatmapData = Array.isArray(data) ? data : [];\n        if (widget.dataSource === 'dailyActions') {\n          // Create heatmap data from daily actions\n          // For demonstration, we'll create a day/hour heatmap with random values\n          heatmapData = [];\n          const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n          for (let day = 0; day < days.length; day++) {\n            for (let hour = 0; hour < 24; hour++) {\n              heatmapData.push({\n                day: days[day],\n                hour,\n                value: Math.floor(Math.random() * 100)\n              });\n            }\n          }\n        } else if (widget.dataSource === 'games') {\n          // Not ideal for heatmap, but we can create a category/metric heatmap\n          const categories = ['Slots', 'Table Games', 'Live Casino', 'Poker', 'Other'];\n          const metrics = ['Bets', 'Wins', 'GGR', 'Players'];\n          heatmapData = [];\n          for (let category of categories) {\n            for (let metric of metrics) {\n              heatmapData.push({\n                category,\n                metric,\n                value: Math.floor(Math.random() * 1000)\n              });\n            }\n          }\n        } else if (widget.dataSource === 'players') {\n          // Not ideal for heatmap, but we can create a country/metric heatmap\n          const countries = ['USA', 'UK', 'Canada', 'Germany', 'France'];\n          const metrics = ['Deposits', 'Bets', 'Wins', 'GGR'];\n          heatmapData = [];\n          for (let country of countries) {\n            for (let metric of metrics) {\n              heatmapData.push({\n                country,\n                metric,\n                value: Math.floor(Math.random() * 1000)\n              });\n            }\n          }\n        }\n\n        return (\n          <ReportHeatmap\n            data={heatmapData}\n            xKey={widget.dataSource === 'dailyActions' ? 'hour' :\n                 widget.dataSource === 'games' ? 'metric' : 'metric'}\n            yKey={widget.dataSource === 'dailyActions' ? 'day' :\n                 widget.dataSource === 'games' ? 'category' : 'country'}\n            valueKey=\"value\"\n            loading={loading}\n            error={error}\n            height={getWidgetSizeStyles().height - 60}\n            title={widget.title}\n          />\n        );\n\n      case 'networkGraph':\n        // Create network graph data\n        const networkData: { nodes: any[], links: any[] } = {\n          nodes: [],\n          links: []\n        };\n\n        if (widget.dataSource === 'players') {\n          // Create player network based on common games\n          const players = Array.isArray(data) ? data.slice(0, 20) : [];\n\n          // Add nodes for players\n          networkData.nodes = players.map(player => ({\n            id: `player-${player.id}`,\n            name: player.name,\n            group: player.country || 'Unknown',\n            value: player.totalDeposits || 1\n          }));\n\n          // Add links between players (simulated relationships)\n          for (let i = 0; i < players.length; i++) {\n            for (let j = i + 1; j < players.length; j++) {\n              // Create links with 30% probability\n              if (Math.random() < 0.3) {\n                networkData.links.push({\n                  source: `player-${players[i].id}`,\n                  target: `player-${players[j].id}`,\n                  value: Math.floor(Math.random() * 10) + 1\n                });\n              }\n            }\n          }\n        } else if (widget.dataSource === 'games') {\n          // Create game network based on common players\n          const games = Array.isArray(data) ? data.slice(0, 20) : [];\n\n          // Add nodes for games\n          networkData.nodes = games.map(game => ({\n            id: `game-${game.id}`,\n            name: game.name,\n            group: game.category || 'Unknown',\n            value: game.uniquePlayers || 1\n          }));\n\n          // Add links between games (simulated relationships)\n          for (let i = 0; i < games.length; i++) {\n            for (let j = i + 1; j < games.length; j++) {\n              // Create links with 40% probability\n              if (Math.random() < 0.4) {\n                networkData.links.push({\n                  source: `game-${games[i].id}`,\n                  target: `game-${games[j].id}`,\n                  value: Math.floor(Math.random() * 100) + 1\n                });\n              }\n            }\n          }\n        }\n\n        if (enableInteractivity) {\n          return (\n            <AdvancedVisualizationContainer\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              description={`Network visualization for ${widget.title}`}\n              type=\"networkGraph\"\n              data={networkData}\n              height={getWidgetSizeStyles().height - 60}\n              loading={loading}\n              error={error}\n              enableFullscreen={true}\n              enableExport={true}\n              enableShare={false}\n              enableNotifications={true}\n              enableAnnotations={true}\n            />\n          );\n        } else {\n          return (\n            <NetworkGraph\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              data={networkData}\n              height={getWidgetSizeStyles().height - 60}\n              loading={loading}\n              error={error}\n              enableNodeSelection={true}\n              enableLinkSelection={true}\n            />\n          );\n        }\n\n      case 'sankeyDiagram':\n        // Create sankey diagram data\n        const sankeyData: { nodes: any[], links: any[] } = {\n          nodes: [],\n          links: []\n        };\n\n        if (widget.dataSource === 'dailyActions') {\n          // Create flow diagram for player journey\n          sankeyData.nodes = [\n            { name: 'New Users' },\n            { name: 'Registered' },\n            { name: 'Deposited' },\n            { name: 'Played' },\n            { name: 'Won' },\n            { name: 'Lost' },\n            { name: 'Withdrew' },\n            { name: 'Churned' },\n            { name: 'Retained' }\n          ];\n\n          sankeyData.links = [\n            { source: 0, target: 1, value: 1000 },\n            { source: 1, target: 2, value: 800 },\n            { source: 1, target: 7, value: 200 },\n            { source: 2, target: 3, value: 750 },\n            { source: 2, target: 7, value: 50 },\n            { source: 3, target: 4, value: 400 },\n            { source: 3, target: 5, value: 350 },\n            { source: 4, target: 6, value: 300 },\n            { source: 4, target: 8, value: 100 },\n            { source: 5, target: 2, value: 200 },\n            { source: 5, target: 7, value: 150 },\n            { source: 6, target: 8, value: 200 },\n            { source: 6, target: 7, value: 100 }\n          ];\n        } else if (widget.dataSource === 'games') {\n          // Create flow diagram for game categories\n          sankeyData.nodes = [\n            { name: 'All Players' },\n            { name: 'Slots' },\n            { name: 'Table Games' },\n            { name: 'Live Casino' },\n            { name: 'Poker' },\n            { name: 'High Value' },\n            { name: 'Medium Value' },\n            { name: 'Low Value' }\n          ];\n\n          sankeyData.links = [\n            { source: 0, target: 1, value: 5000 },\n            { source: 0, target: 2, value: 3000 },\n            { source: 0, target: 3, value: 2000 },\n            { source: 0, target: 4, value: 1000 },\n            { source: 1, target: 5, value: 1500 },\n            { source: 1, target: 6, value: 2000 },\n            { source: 1, target: 7, value: 1500 },\n            { source: 2, target: 5, value: 1200 },\n            { source: 2, target: 6, value: 1000 },\n            { source: 2, target: 7, value: 800 },\n            { source: 3, target: 5, value: 1000 },\n            { source: 3, target: 6, value: 700 },\n            { source: 3, target: 7, value: 300 },\n            { source: 4, target: 5, value: 500 },\n            { source: 4, target: 6, value: 300 },\n            { source: 4, target: 7, value: 200 }\n          ];\n        }\n\n        if (enableInteractivity) {\n          return (\n            <AdvancedVisualizationContainer\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              description={`Sankey diagram for ${widget.title}`}\n              type=\"sankeyDiagram\"\n              data={sankeyData}\n              height={getWidgetSizeStyles().height - 60}\n              loading={loading}\n              error={error}\n              enableFullscreen={true}\n              enableExport={true}\n              enableShare={false}\n              enableNotifications={true}\n              enableAnnotations={true}\n            />\n          );\n        } else {\n          return (\n            <SankeyDiagram\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              data={sankeyData}\n              height={getWidgetSizeStyles().height - 60}\n              loading={loading}\n              error={error}\n              enableSearch={true}\n              enableFiltering={true}\n            />\n          );\n        }\n\n      case '3dScatter':\n      case '3dBar':\n      case '3dSurface':\n        // Create 3D data\n        const points3D = [];\n\n        if (widget.dataSource === 'dailyActions') {\n          // Create 3D data from daily actions\n          const dailyActions = Array.isArray(data) ? data : [];\n\n          points3D.push(...dailyActions.map((item, index) => ({\n            id: `point-${index}`,\n            x: item.deposits || 0,\n            y: item.withdrawals || 0,\n            z: item.bets || 0,\n            value: item.uniquePlayers || 0,\n            label: formatDate(new Date(item.date), 'MMM dd, yyyy'),\n            group: 'Daily Actions'\n          })));\n        } else if (widget.dataSource === 'games') {\n          // Create 3D data from games\n          const games = Array.isArray(data) ? data : [];\n\n          points3D.push(...games.map((item, index) => ({\n            id: `point-${index}`,\n            x: item.totalBets || 0,\n            y: item.totalWins || 0,\n            z: item.netGamingRevenue || 0,\n            value: item.uniquePlayers || 0,\n            label: item.name,\n            group: item.category || 'Unknown'\n          })));\n        } else if (widget.dataSource === 'players') {\n          // Create 3D data from players\n          const players = Array.isArray(data) ? data : [];\n\n          points3D.push(...players.map((item, index) => ({\n            id: `point-${index}`,\n            x: item.totalDeposits || 0,\n            y: item.totalBets || 0,\n            z: item.netGamingRevenue || 0,\n            value: item.totalWins || 0,\n            label: item.name,\n            group: item.country || 'Unknown'\n          })));\n        }\n\n        if (enableInteractivity) {\n          return (\n            <AdvancedVisualizationContainer\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              description={`3D visualization for ${widget.title}`}\n              type={widget.type as any}\n              data={points3D}\n              height={getWidgetSizeStyles().height - 60}\n              loading={loading}\n              error={error}\n              enableFullscreen={true}\n              enableExport={true}\n              enableShare={false}\n              enableNotifications={true}\n              enableAnnotations={true}\n            />\n          );\n        } else {\n          return (\n            <Interactive3DChart\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              data={points3D}\n              xLabel={widget.dataSource === 'dailyActions' ? 'Deposits' :\n                     widget.dataSource === 'games' ? 'Total Bets' : 'Total Deposits'}\n              yLabel={widget.dataSource === 'dailyActions' ? 'Withdrawals' :\n                     widget.dataSource === 'games' ? 'Total Wins' : 'Total Bets'}\n              zLabel={widget.dataSource === 'dailyActions' ? 'Bets' :\n                     widget.dataSource === 'games' ? 'Net Gaming Revenue' : 'Net Gaming Revenue'}\n              height={getWidgetSizeStyles().height - 60}\n              loading={loading}\n              error={error}\n              chartType={widget.type === '3dScatter' ? '3dScatter' : widget.type === '3dBar' ? '3dBar' : '3dSurface'}\n            />\n          );\n        }\n\n      case 'surfacePlot':\n        // Create surface data\n        interface SurfaceDataPoint {\n          x: number;\n          y: number;\n          z: number;\n          date?: string;\n          metric?: string;\n          category?: string;\n          game?: string;\n          country?: string;\n          player?: string;\n        }\n        const surfaceData: SurfaceDataPoint[] = [];\n\n        if (widget.dataSource === 'dailyActions') {\n          // Create surface data from daily actions\n          const dailyActions = Array.isArray(data) ? data : [];\n\n          // Group by date (x) and metric (y)\n          const metrics = ['deposits', 'withdrawals', 'bets', 'wins', 'uniquePlayers'];\n          const dateMap = new Map();\n\n          // Process each daily action\n          dailyActions.forEach(item => {\n            const date = new Date(item.date);\n            const x = date.getTime(); // Use timestamp as x coordinate\n\n            // Add a data point for each metric\n            metrics.forEach((metric, metricIndex) => {\n              const y = metricIndex; // Use metric index as y coordinate\n              const z = item[metric] || 0; // Use metric value as z coordinate\n\n              surfaceData.push({\n                x,\n                y,\n                z,\n                date: formatDate(date, 'MMM dd, yyyy'),\n                metric\n              });\n            });\n          });\n        } else if (widget.dataSource === 'games') {\n          // Create surface data from games\n          const games = Array.isArray(data) ? data : [];\n\n          // Group by category (x) and metric (y)\n          const metrics = ['totalBets', 'totalWins', 'netGamingRevenue', 'uniquePlayers'];\n          const categories = Array.from(new Set(games.map(game => game.category || 'Unknown')));\n\n          // Process each game\n          games.forEach(game => {\n            const categoryIndex = categories.indexOf(game.category || 'Unknown');\n            const x = categoryIndex; // Use category index as x coordinate\n\n            // Add a data point for each metric\n            metrics.forEach((metric, metricIndex) => {\n              const y = metricIndex; // Use metric index as y coordinate\n              const z = game[metric] || 0; // Use metric value as z coordinate\n\n              surfaceData.push({\n                x,\n                y,\n                z,\n                category: game.category || 'Unknown',\n                metric,\n                game: game.name\n              });\n            });\n          });\n        } else if (widget.dataSource === 'players') {\n          // Create surface data from players\n          const players = Array.isArray(data) ? data : [];\n\n          // Group by country (x) and metric (y)\n          const metrics = ['totalDeposits', 'totalBets', 'totalWins', 'netGamingRevenue'];\n          const countries = Array.from(new Set(players.map(player => player.country || 'Unknown')));\n\n          // Process each player\n          players.forEach(player => {\n            const countryIndex = countries.indexOf(player.country || 'Unknown');\n            const x = countryIndex; // Use country index as x coordinate\n\n            // Add a data point for each metric\n            metrics.forEach((metric, metricIndex) => {\n              const y = metricIndex; // Use metric index as y coordinate\n              const z = player[metric] || 0; // Use metric value as z coordinate\n\n              surfaceData.push({\n                x,\n                y,\n                z,\n                country: player.country || 'Unknown',\n                metric,\n                player: player.name\n              });\n            });\n          });\n        }\n\n        if (enableInteractivity) {\n          return (\n            <Surface3DPlot\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              data={surfaceData}\n              xLabel={widget.dataSource === 'dailyActions' ? 'Date' :\n                     widget.dataSource === 'games' ? 'Game Category' : 'Country'}\n              yLabel={widget.dataSource === 'dailyActions' ? 'Metric' :\n                     widget.dataSource === 'games' ? 'Metric' : 'Metric'}\n              zLabel=\"Value\"\n              height={getWidgetSizeStyles().height - 60}\n              loading={loading}\n              error={error}\n              resolution={50}\n              interpolationMethod=\"bilinear\"\n              colorMap=\"rainbow\"\n              wireframe={true}\n              enableRotation={true}\n              enableZoom={true}\n              enableGrid={true}\n              enableAxes={true}\n              onPointClick={(point) => handleDrillDown(point, 0)}\n            />\n          );\n        } else {\n          return (\n            <Surface3DPlot\n              id={`widget-${widget.id}`}\n              title={widget.title}\n              data={surfaceData}\n              xLabel={widget.dataSource === 'dailyActions' ? 'Date' :\n                     widget.dataSource === 'games' ? 'Game Category' : 'Country'}\n              yLabel={widget.dataSource === 'dailyActions' ? 'Metric' :\n                     widget.dataSource === 'games' ? 'Metric' : 'Metric'}\n              zLabel=\"Value\"\n              height={getWidgetSizeStyles().height - 60}\n              loading={loading}\n              error={error}\n              resolution={30}\n              interpolationMethod=\"bilinear\"\n              colorMap=\"rainbow\"\n              wireframe={true}\n              enableRotation={true}\n              enableZoom={true}\n              enableGrid={true}\n              enableAxes={true}\n            />\n          );\n        }\n      case 'table':\n        return (\n          <SimpleBox sx={{ height: getWidgetSizeStyles().height - 60, overflow: 'auto' }}>\n            <EnhancedTable\n              columns={columns}\n              data={Array.isArray(data) ? data.slice(0, 5) : []}\n              loading={loading}\n              emptyMessage=\"No data available\"\n              idField=\"id\"\n              features={{\n                sorting: true,\n                pagination: {\n                  enabled: true,\n                  defaultPageSize: 5,\n                  pageSizeOptions: [5, 10, 25]\n                }\n              }}\n            />\n          </SimpleBox>\n        );\n      case 'summary':\n        // Create summary cards\n        return (\n          <SimpleBox sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, p: 2 }}>\n            {widget.dataSource === 'dailyActions' && (\n              <>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total Players</Typography>\n                  <Typography variant=\"h5\">\n                    {Array.isArray(data) ? data.reduce((sum, item) => sum + (item.uniquePlayers || 0), 0).toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total Deposits</Typography>\n                  <Typography variant=\"h5\">\n                    ${Array.isArray(data) ? data.reduce((sum, item) => sum + (item.deposits || 0), 0).toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total Bets</Typography>\n                  <Typography variant=\"h5\">\n                    ${Array.isArray(data) ? data.reduce((sum, item) => sum + (item.bets || 0), 0).toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total GGR</Typography>\n                  <Typography variant=\"h5\">\n                    ${Array.isArray(data) ? data.reduce((sum, item) => sum + (item.ggr || 0), 0).toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n              </>\n            )}\n            {widget.dataSource === 'players' && (\n              <>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total Players</Typography>\n                  <Typography variant=\"h5\">\n                    {Array.isArray(data) ? data.length.toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Active Players</Typography>\n                  <Typography variant=\"h5\">\n                    {Array.isArray(data) ? data.filter(player => player.status === 'Active').length.toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total Deposits</Typography>\n                  <Typography variant=\"h5\">\n                    ${Array.isArray(data) ? data.reduce((sum, item) => sum + (item.totalDeposits || 0), 0).toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total NGR</Typography>\n                  <Typography variant=\"h5\">\n                    ${Array.isArray(data) ? data.reduce((sum, item) => sum + (item.netGamingRevenue || 0), 0).toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n              </>\n            )}\n            {widget.dataSource === 'games' && (\n              <>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total Games</Typography>\n                  <Typography variant=\"h5\">\n                    {Array.isArray(data) ? data.length.toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total Bets</Typography>\n                  <Typography variant=\"h5\">\n                    ${Array.isArray(data) ? data.reduce((sum, item) => sum + (item.totalBets || 0), 0).toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total Wins</Typography>\n                  <Typography variant=\"h5\">\n                    ${Array.isArray(data) ? data.reduce((sum, item) => sum + (item.totalWins || 0), 0).toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n                <SimpleBox sx={{ flex: '1 1 calc(50% - 8px)', p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Total NGR</Typography>\n                  <Typography variant=\"h5\">\n                    ${Array.isArray(data) ? data.reduce((sum, item) => sum + (item.netGamingRevenue || 0), 0).toLocaleString() : 0}\n                  </Typography>\n                </SimpleBox>\n              </>\n            )}\n          </SimpleBox>\n        );\n      default:\n        return (\n          <SimpleBox sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n            <Typography color=\"text.secondary\">Unknown widget type</Typography>\n          </SimpleBox>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Paper\n        sx={{\n          ...getWidgetSizeStyles(),\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden',\n          border: customizeMode ? `2px dashed ${theme.palette.primary.main}` : 'none',\n          transition: 'all 0.3s ease'\n        }}\n        elevation={customizeMode ? 0 : 1}\n      >\n        <SimpleBox\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            p: 2,\n            borderBottom: '1px solid',\n            borderColor: 'divider'\n          }}\n        >\n          <Typography variant=\"h6\">{widget.title}</Typography>\n          {customizeMode && (\n            <IconButton\n              size=\"small\"\n              onClick={(e) => onMenuOpen && onMenuOpen(e, widget.id)}\n              aria-label=\"widget options\"\n            >\n              <MoreVertIcon />\n            </IconButton>\n          )}\n        </SimpleBox>\n        <SimpleBox sx={{ flex: 1, overflow: 'auto', p: 1 }}>\n          {renderWidgetContent()}\n        </SimpleBox>\n      </Paper>\n\n      {/* Drilldown Modal */}\n      <DrilldownModal\n        open={drilldownOpen}\n        onClose={() => setDrilldownOpen(false)}\n        drilldownData={drilldownData}\n      />\n    </>\n  );\n};\n\nexport default DashboardWidget;\n","import React, { useState } from 'react';\nimport { Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Typography, Grid, Paper, IconButton, Menu, MenuItem, Tooltip } from '@mui/material';\nimport SimpleBox from '../../common/SimpleBox';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport DragDropWrapper from '../../common/DragDropWrapper';\nimport AddIcon from '@mui/icons-material/Add';\nimport SaveIcon from '@mui/icons-material/Save';\nimport ShareIcon from '@mui/icons-material/Share';\nimport DashboardCustomizeIcon from '@mui/icons-material/DashboardCustomize';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport PieChartIcon from '@mui/icons-material/PieChart';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport DashboardWidget, { Widget, WidgetType } from './DashboardWidget';\nimport { ColumnDef } from '../../tables/enhanced/types';\n\n// Dashboard configuration interface\nexport interface DashboardConfig {\n  id?: string;\n  name: string;\n  description?: string;\n  widgets: Widget[];\n  filters?: any;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface CustomizableDashboardProps {\n  dashboardConfig: DashboardConfig;\n  customizeMode: boolean;\n  playerData: any[];\n  gameData: any[];\n  dailyActionData: any[];\n  loading?: boolean;\n  error?: string | null;\n  playerColumns: ColumnDef[];\n  gameColumns: ColumnDef[];\n  dailyActionColumns: ColumnDef[];\n  onToggleCustomizeMode: () => void;\n  onSaveConfigDialogOpen: () => void;\n  onShareDialogOpen: () => void;\n  onAddWidgetDialogOpen: () => void;\n  onDragEnd: (result: any) => void;\n  onWidgetMenuOpen: (event: React.MouseEvent<HTMLElement>, widgetId: string) => void;\n}\n\n/**\n * CustomizableDashboard component\n * Renders a customizable dashboard with draggable widgets\n */\nconst CustomizableDashboard: React.FC<CustomizableDashboardProps> = ({\n  dashboardConfig,\n  customizeMode,\n  playerData,\n  gameData,\n  dailyActionData,\n  loading = false,\n  error = null,\n  playerColumns,\n  gameColumns,\n  dailyActionColumns,\n  onToggleCustomizeMode,\n  onSaveConfigDialogOpen,\n  onShareDialogOpen,\n  onAddWidgetDialogOpen,\n  onDragEnd,\n  onWidgetMenuOpen\n}) => {\n  // Get data for widget based on data source\n  const getWidgetData = (dataSource: string) => {\n    switch (dataSource) {\n      case 'players':\n        return playerData;\n      case 'games':\n        return gameData;\n      case 'dailyActions':\n        return dailyActionData;\n      default:\n        return [];\n    }\n  };\n\n  // Get columns for widget based on data source\n  const getWidgetColumns = (dataSource: string) => {\n    switch (dataSource) {\n      case 'players':\n        return playerColumns;\n      case 'games':\n        return gameColumns;\n      case 'dailyActions':\n        return dailyActionColumns;\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <SimpleBox sx={{ width: '100%' }}>\n      {/* Dashboard Header */}\n      <SimpleBox sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\">{dashboardConfig.name}</Typography>\n        <SimpleBox sx={{ display: 'flex', gap: 1 }}>\n          <Tooltip title={customizeMode ? \"Exit Customize Mode\" : \"Customize Dashboard\"}>\n            <Button\n              variant={customizeMode ? \"contained\" : \"outlined\"}\n              color={customizeMode ? \"primary\" : \"inherit\"}\n              startIcon={<DashboardCustomizeIcon />}\n              onClick={onToggleCustomizeMode}\n              size=\"small\"\n            >\n              {customizeMode ? \"Done\" : \"Customize\"}\n            </Button>\n          </Tooltip>\n\n          {customizeMode && (\n            <>\n              <Tooltip title=\"Add Widget\">\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<AddIcon />}\n                  onClick={onAddWidgetDialogOpen}\n                  size=\"small\"\n                >\n                  Add Widget\n                </Button>\n              </Tooltip>\n\n              <Tooltip title=\"Save Configuration\">\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<SaveIcon />}\n                  onClick={onSaveConfigDialogOpen}\n                  size=\"small\"\n                >\n                  Save\n                </Button>\n              </Tooltip>\n\n              <Tooltip title=\"Share Dashboard\">\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<ShareIcon />}\n                  onClick={onShareDialogOpen}\n                  size=\"small\"\n                >\n                  Share\n                </Button>\n              </Tooltip>\n            </>\n          )}\n        </SimpleBox>\n      </SimpleBox>\n\n      {/* Dashboard Description */}\n      {dashboardConfig.description && (\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          {dashboardConfig.description}\n        </Typography>\n      )}\n\n      {/* Dashboard Widgets */}\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"dashboard-widgets\" type=\"widget\" direction=\"horizontal\">\n          {(provided) => (\n            <DragDropWrapper\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              sx={{\n                display: 'grid',\n                gridTemplateColumns: 'repeat(12, 1fr)',\n                gap: 2\n              }}\n            >\n              {dashboardConfig.widgets\n                .sort((a, b) => a.position - b.position)\n                .map((widget, index) => (\n                  <Draggable\n                    key={widget.id}\n                    draggableId={widget.id}\n                    index={index}\n                    isDragDisabled={!customizeMode}\n                  >\n                    {(provided) => (\n                      <DragDropWrapper\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        sx={{\n                          gridColumn: widget.size === 'small' ? 'span 4' :\n                                      widget.size === 'medium' ? 'span 6' : 'span 12',\n                          transition: 'all 0.3s ease'\n                        }}\n                      >\n                        <DashboardWidget\n                          widget={widget}\n                          data={getWidgetData(widget.dataSource)}\n                          loading={loading}\n                          error={error}\n                          customizeMode={customizeMode}\n                          onMenuOpen={onWidgetMenuOpen}\n                          columns={getWidgetColumns(widget.dataSource)}\n                          enableInteractivity={!customizeMode}\n                        />\n                      </DragDropWrapper>\n                    )}\n                  </Draggable>\n                ))}\n              {provided.placeholder}\n            </DragDropWrapper>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </SimpleBox>\n  );\n};\n\nexport default CustomizableDashboard;\n","import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  Grid,\n  Paper,\n  Box,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n  Tooltip,\n  Divider,\n  Tabs,\n  Tab\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport PieChartIcon from '@mui/icons-material/PieChart';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport ScatterPlotIcon from '@mui/icons-material/ScatterPlot';\nimport RadarIcon from '@mui/icons-material/Radar';\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\nimport SpeedIcon from '@mui/icons-material/Speed';\nimport GridOnIcon from '@mui/icons-material/GridOn';\nimport ShareIcon from '@mui/icons-material/Share';\nimport BubbleChartIcon from '@mui/icons-material/BubbleChart';\nimport { WidgetType } from './DashboardWidget';\n\n// Save Configuration Dialog Props\ninterface SaveConfigDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onSave: () => void;\n  configName: string;\n  configDescription: string;\n  setConfigName: (name: string) => void;\n  setConfigDescription: (description: string) => void;\n}\n\n// Add Widget Dialog Props\ninterface AddWidgetDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onAddWidget: (type: WidgetType, title: string, dataSource: string) => void;\n}\n\n// Share Dialog Props\ninterface ShareDialogProps {\n  open: boolean;\n  onClose: () => void;\n}\n\n/**\n * SaveConfigDialog component\n * Dialog for saving dashboard configuration\n */\nexport const SaveConfigDialog: React.FC<SaveConfigDialogProps> = ({\n  open,\n  onClose,\n  onSave,\n  configName,\n  configDescription,\n  setConfigName,\n  setConfigDescription\n}) => {\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        Save Dashboard Configuration\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{ position: 'absolute', right: 8, top: 8 }}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <Box sx={{ mt: 2 }}>\n          <TextField\n            label=\"Dashboard Name\"\n            fullWidth\n            value={configName}\n            onChange={(e) => setConfigName(e.target.value)}\n            margin=\"normal\"\n            required\n          />\n          <TextField\n            label=\"Description (Optional)\"\n            fullWidth\n            value={configDescription}\n            onChange={(e) => setConfigDescription(e.target.value)}\n            margin=\"normal\"\n            multiline\n            rows={3}\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          onClick={onSave}\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!configName.trim()}\n        >\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n/**\n * AddWidgetDialog component\n * Dialog for adding a new widget to the dashboard\n */\nexport const AddWidgetDialog: React.FC<AddWidgetDialogProps> = ({\n  open,\n  onClose,\n  onAddWidget\n}) => {\n  const [widgetType, setWidgetType] = useState<WidgetType>('areaChart');\n  const [widgetTitle, setWidgetTitle] = useState<string>('');\n  const [dataSource, setDataSource] = useState<string>('dailyActions');\n  const [activeTab, setActiveTab] = useState<number>(0);\n\n  const handleAddWidget = () => {\n    onAddWidget(widgetType, widgetTitle, dataSource);\n    // Reset form\n    setWidgetType('areaChart');\n    setWidgetTitle('');\n    setDataSource('dailyActions');\n    setActiveTab(0);\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        Add Widget\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{ position: 'absolute', right: 8, top: 8 }}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <Box sx={{ mt: 2 }}>\n          <TextField\n            label=\"Widget Title\"\n            fullWidth\n            value={widgetTitle}\n            onChange={(e) => setWidgetTitle(e.target.value)}\n            margin=\"normal\"\n            required\n          />\n\n          <Grid container spacing={3} sx={{ mt: 1 }}>\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"subtitle1\" gutterBottom>Widget Type</Typography>\n\n              <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n                <Tabs value={activeTab} onChange={handleTabChange} aria-label=\"widget type tabs\">\n                  <Tab label=\"Basic\" />\n                  <Tab label=\"Advanced\" />\n                </Tabs>\n              </Box>\n\n              {activeTab === 0 && (\n                <Grid container spacing={2}>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'areaChart' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'areaChart' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'areaChart' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('areaChart')}\n                    >\n                      <TimelineIcon color={widgetType === 'areaChart' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Area Chart</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'barChart' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'barChart' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'barChart' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('barChart')}\n                    >\n                      <BarChartIcon color={widgetType === 'barChart' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Bar Chart</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'pieChart' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'pieChart' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'pieChart' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('pieChart')}\n                    >\n                      <PieChartIcon color={widgetType === 'pieChart' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Pie Chart</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'table' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'table' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'table' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('table')}\n                    >\n                      <TableChartIcon color={widgetType === 'table' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Table</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'summary' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'summary' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'summary' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('summary')}\n                    >\n                      <DashboardIcon color={widgetType === 'summary' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Summary</Typography>\n                    </Paper>\n                  </Grid>\n                </Grid>\n              )}\n\n              {activeTab === 1 && (\n                <Grid container spacing={2}>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'scatterChart' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'scatterChart' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'scatterChart' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('scatterChart')}\n                    >\n                      <ScatterPlotIcon color={widgetType === 'scatterChart' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Scatter Chart</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'lassoScatter' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'lassoScatter' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'lassoScatter' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('lassoScatter')}\n                    >\n                      <ScatterPlotIcon color={widgetType === 'lassoScatter' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Lasso Scatter</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'radarChart' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'radarChart' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'radarChart' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('radarChart')}\n                    >\n                      <RadarIcon color={widgetType === 'radarChart' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Radar Chart</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'treemapChart' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'treemapChart' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'treemapChart' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('treemapChart')}\n                    >\n                      <AccountTreeIcon color={widgetType === 'treemapChart' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Treemap</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'gaugeChart' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'gaugeChart' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'gaugeChart' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('gaugeChart')}\n                    >\n                      <SpeedIcon color={widgetType === 'gaugeChart' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Gauge Chart</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'heatmap' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'heatmap' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'heatmap' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('heatmap')}\n                    >\n                      <GridOnIcon color={widgetType === 'heatmap' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Heatmap</Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'zoomableTimeSeries' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'zoomableTimeSeries' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'zoomableTimeSeries' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('zoomableTimeSeries')}\n                    >\n                      <TimelineIcon color={widgetType === 'zoomableTimeSeries' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Zoomable Time Series</Typography>\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'networkGraph' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'networkGraph' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'networkGraph' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('networkGraph')}\n                    >\n                      <ShareIcon color={widgetType === 'networkGraph' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Network Graph</Typography>\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'sankeyDiagram' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'sankeyDiagram' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'sankeyDiagram' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('sankeyDiagram')}\n                    >\n                      <AccountTreeIcon color={widgetType === 'sankeyDiagram' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Sankey Diagram</Typography>\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === '3dScatter' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === '3dScatter' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === '3dScatter' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('3dScatter')}\n                    >\n                      <ScatterPlotIcon color={widgetType === '3dScatter' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>3D Scatter</Typography>\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === '3dBar' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === '3dBar' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === '3dBar' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('3dBar')}\n                    >\n                      <BarChartIcon color={widgetType === '3dBar' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>3D Bar Chart</Typography>\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={6} sm={4}>\n                    <Paper\n                      elevation={widgetType === 'surfacePlot' ? 3 : 1}\n                      sx={{\n                        p: 2,\n                        textAlign: 'center',\n                        cursor: 'pointer',\n                        border: widgetType === 'surfacePlot' ? '2px solid' : '1px solid',\n                        borderColor: widgetType === 'surfacePlot' ? 'primary.main' : 'divider',\n                        '&:hover': {\n                          borderColor: 'primary.main'\n                        }\n                      }}\n                      onClick={() => setWidgetType('surfacePlot')}\n                    >\n                      <BubbleChartIcon color={widgetType === 'surfacePlot' ? 'primary' : 'action'} sx={{ fontSize: 40 }} />\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>Surface Plot</Typography>\n                    </Paper>\n                  </Grid>\n                </Grid>\n              )}\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"subtitle1\" gutterBottom>Data Source</Typography>\n              <FormControl fullWidth sx={{ mt: 1 }}>\n                <InputLabel id=\"data-source-label\">Data Source</InputLabel>\n                <Select\n                  labelId=\"data-source-label\"\n                  value={dataSource}\n                  label=\"Data Source\"\n                  onChange={(e) => setDataSource(e.target.value)}\n                >\n                  <MenuItem value=\"dailyActions\">Daily Actions</MenuItem>\n                  <MenuItem value=\"players\">Players</MenuItem>\n                  <MenuItem value=\"games\">Games</MenuItem>\n                </Select>\n              </FormControl>\n\n              <Box sx={{ mt: 3 }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {dataSource === 'dailyActions' ?\n                    'Daily actions data includes player activity, deposits, withdrawals, bets, and revenue metrics over time.' :\n                   dataSource === 'players' ?\n                    'Player data includes player profiles, activity, deposits, bets, and revenue metrics.' :\n                    'Game data includes game performance, popularity, bets, wins, and revenue metrics.'}\n                </Typography>\n              </Box>\n            </Grid>\n          </Grid>\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          onClick={handleAddWidget}\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!widgetTitle.trim()}\n        >\n          Add Widget\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n/**\n * ShareDialog component\n * Dialog for sharing dashboard configuration\n */\nexport const ShareDialog: React.FC<ShareDialogProps> = ({\n  open,\n  onClose\n}) => {\n  const [email, setEmail] = useState<string>('');\n  const [shareLink, setShareLink] = useState<string>(`https://ppreporter.com/share/${Math.random().toString(36).substring(2, 15)}`);\n\n  const handleCopyLink = () => {\n    navigator.clipboard.writeText(shareLink);\n    // Show success message (would be implemented with a snackbar in a real app)\n    console.log('Link copied to clipboard');\n  };\n\n  const handleShare = () => {\n    // Implementation would go here\n    console.log('Sharing dashboard with:', email);\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        Share Dashboard\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{ position: 'absolute', right: 8, top: 8 }}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <Box sx={{ mt: 2 }}>\n          <Typography variant=\"subtitle1\" gutterBottom>Share via Email</Typography>\n          <TextField\n            label=\"Email Address\"\n            fullWidth\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            margin=\"normal\"\n            type=\"email\"\n          />\n\n          <Divider sx={{ my: 3 }} />\n\n          <Typography variant=\"subtitle1\" gutterBottom>Share via Link</Typography>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <TextField\n              fullWidth\n              value={shareLink}\n              margin=\"normal\"\n              InputProps={{\n                readOnly: true,\n              }}\n            />\n            <Button variant=\"outlined\" onClick={handleCopyLink}>\n              Copy\n            </Button>\n          </Box>\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          onClick={handleShare}\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!email.trim()}\n        >\n          Share\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import axios from 'axios';\nimport { format } from 'date-fns';\n\n// Base API URL\nconst API_URL = 'https://localhost:7075/api';\n\n// Date format for API requests\nconst API_DATE_FORMAT = 'yyyy-MM-dd';\n\n/**\n * Format date for API requests\n * @param date Date to format (can be Date object or ISO string)\n * @returns Formatted date string\n */\nconst formatDateForApi = (date: Date | string | null): string => {\n  if (!date) return '';\n\n  // If date is already a string (ISO format), convert it to Date first\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return format(dateObj, API_DATE_FORMAT);\n};\n\n/**\n * Integrated Reports Service\n * Provides methods for fetching data for the integrated reports page\n */\nconst integratedReportsService = {\n  /**\n   * Fetch daily actions data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @param filters Additional filters\n   * @returns Promise with daily actions data\n   */\n  getDailyActionsData: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null,\n    filters: Record<string, any> = {}\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/reports/daily-action-games/data`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate),\n          ...filters\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching daily actions data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch player data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @param filters Additional filters\n   * @returns Promise with player data\n   */\n  getPlayerData: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null,\n    filters: Record<string, any> = {}\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/reports/players/data`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate),\n          ...filters\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching player data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch game data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @param filters Additional filters\n   * @returns Promise with game data\n   */\n  getGameData: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null,\n    filters: Record<string, any> = {}\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/reports/games/data`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate),\n          ...filters\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching game data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch dashboard summary data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @returns Promise with dashboard summary data\n   */\n  getDashboardSummary: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/Dashboard/summary`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate)\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching dashboard summary:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch revenue chart data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @param interval Time interval (daily, weekly, monthly)\n   * @returns Promise with revenue chart data\n   */\n  getRevenueChartData: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null,\n    interval: 'daily' | 'weekly' | 'monthly' = 'daily'\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/Dashboard/revenue-chart`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate),\n          interval\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching revenue chart data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch registrations chart data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @param interval Time interval (daily, weekly, monthly)\n   * @returns Promise with registrations chart data\n   */\n  getRegistrationsChartData: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null,\n    interval: 'daily' | 'weekly' | 'monthly' = 'daily'\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/Dashboard/registrations-chart`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate),\n          interval\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching registrations chart data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch top games data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @param limit Number of games to return\n   * @returns Promise with top games data\n   */\n  getTopGamesData: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null,\n    limit: number = 10\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/Dashboard/top-games`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate),\n          limit\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching top games data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch recent transactions data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @param limit Number of transactions to return\n   * @returns Promise with recent transactions data\n   */\n  getRecentTransactionsData: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null,\n    limit: number = 10\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/Dashboard/recent-transactions`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate),\n          limit\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recent transactions data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch heatmap data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @param metric Metric to display (bets, deposits, etc.)\n   * @returns Promise with heatmap data\n   */\n  getHeatmapData: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null,\n    metric: string = 'bets'\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/Dashboard/heatmap`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate),\n          metric\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching heatmap data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch segment comparison data\n   * @param startDate Start date for filtering\n   * @param endDate End date for filtering\n   * @param segments Segments to compare\n   * @returns Promise with segment comparison data\n   */\n  getSegmentComparisonData: async (\n    startDate: Date | string | null,\n    endDate: Date | string | null,\n    segments: string[] = []\n  ) => {\n    try {\n      const response = await axios.get(`${API_URL}/Dashboard/segment-comparison`, {\n        params: {\n          startDate: formatDateForApi(startDate),\n          endDate: formatDateForApi(endDate),\n          segments: segments.join(',')\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching segment comparison data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Save user dashboard preferences\n   * @param preferences User dashboard preferences\n   * @returns Promise with saved preferences\n   */\n  saveUserPreferences: async (preferences: any) => {\n    try {\n      const response = await axios.post(`${API_URL}/Dashboard/user-preferences`, preferences);\n      return response.data;\n    } catch (error) {\n      console.error('Error saving user preferences:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get user dashboard preferences\n   * @returns Promise with user preferences\n   */\n  getUserPreferences: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/Dashboard/user-preferences`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user preferences:', error);\n      throw error;\n    }\n  }\n};\n\nexport default integratedReportsService;\n","import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport integratedReportsService from '../../services/api/integratedReportsService';\nimport { RootState } from '../store';\n\n// Define types for the state\nexport interface DashboardSummary {\n  totalPlayers: number;\n  totalGames: number;\n  totalDeposits: number;\n  totalWithdrawals: number;\n  totalBets: number;\n  totalWins: number;\n  totalGGR: number;\n  newRegistrations: number;\n}\n\nexport interface ChartDataPoint {\n  date: string;\n  value: number;\n  [key: string]: any;\n}\n\nexport interface TopGame {\n  id: number;\n  name: string;\n  provider: string;\n  category: string;\n  totalBets: number;\n  totalWins: number;\n  netGamingRevenue: number;\n  uniquePlayers: number;\n  popularity: number;\n}\n\nexport interface Transaction {\n  id: number;\n  playerId: number;\n  playerName: string;\n  type: string;\n  amount: number;\n  currency: string;\n  timestamp: string;\n  status: string;\n}\n\nexport interface HeatmapData {\n  day: string;\n  hour: number;\n  value: number;\n}\n\nexport interface SegmentComparisonData {\n  segment: string;\n  deposits: number;\n  withdrawals: number;\n  bets: number;\n  wins: number;\n  ggr: number;\n  players: number;\n}\n\nexport interface UserPreferences {\n  defaultDateRange: string;\n  defaultTab: number;\n  dashboardLayouts: any[];\n  theme: 'light' | 'dark';\n  chartPreferences: {\n    showLegends: boolean;\n    showGridLines: boolean;\n    colorPalette: string;\n  };\n}\n\n// Define the state interface\nexport interface IntegratedReportsState {\n  dailyActions: {\n    data: any[];\n    loading: boolean;\n    error: string | null;\n  };\n  players: {\n    data: any[];\n    loading: boolean;\n    error: string | null;\n  };\n  games: {\n    data: any[];\n    loading: boolean;\n    error: string | null;\n  };\n  dashboardSummary: {\n    data: DashboardSummary | null;\n    loading: boolean;\n    error: string | null;\n  };\n  revenueChart: {\n    data: ChartDataPoint[];\n    loading: boolean;\n    error: string | null;\n  };\n  registrationsChart: {\n    data: ChartDataPoint[];\n    loading: boolean;\n    error: string | null;\n  };\n  topGames: {\n    data: TopGame[];\n    loading: boolean;\n    error: string | null;\n  };\n  recentTransactions: {\n    data: Transaction[];\n    loading: boolean;\n    error: string | null;\n  };\n  heatmap: {\n    data: HeatmapData[];\n    loading: boolean;\n    error: string | null;\n  };\n  segmentComparison: {\n    data: SegmentComparisonData[];\n    loading: boolean;\n    error: string | null;\n  };\n  userPreferences: {\n    data: UserPreferences | null;\n    loading: boolean;\n    error: string | null;\n  };\n}\n\n// Define the initial state\nconst initialState: IntegratedReportsState = {\n  dailyActions: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  players: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  games: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  dashboardSummary: {\n    data: null,\n    loading: false,\n    error: null\n  },\n  revenueChart: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  registrationsChart: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  topGames: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  recentTransactions: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  heatmap: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  segmentComparison: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  userPreferences: {\n    data: null,\n    loading: false,\n    error: null\n  }\n};\n\n// Create async thunks for API calls\nexport const fetchDailyActionsData = createAsyncThunk(\n  'integratedReports/fetchDailyActionsData',\n  async ({ startDate, endDate, filters }: { startDate: Date | string | null; endDate: Date | string | null; filters?: Record<string, any> }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getDailyActionsData(startDate, endDate, filters);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch daily actions data');\n    }\n  }\n);\n\nexport const fetchPlayerData = createAsyncThunk(\n  'integratedReports/fetchPlayerData',\n  async ({ startDate, endDate, filters }: { startDate: Date | string | null; endDate: Date | string | null; filters?: Record<string, any> }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getPlayerData(startDate, endDate, filters);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch player data');\n    }\n  }\n);\n\nexport const fetchGameData = createAsyncThunk(\n  'integratedReports/fetchGameData',\n  async ({ startDate, endDate, filters }: { startDate: Date | string | null; endDate: Date | string | null; filters?: Record<string, any> }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getGameData(startDate, endDate, filters);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch game data');\n    }\n  }\n);\n\nexport const fetchDashboardSummary = createAsyncThunk(\n  'integratedReports/fetchDashboardSummary',\n  async ({ startDate, endDate }: { startDate: Date | string | null; endDate: Date | string | null }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getDashboardSummary(startDate, endDate);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch dashboard summary');\n    }\n  }\n);\n\nexport const fetchRevenueChartData = createAsyncThunk(\n  'integratedReports/fetchRevenueChartData',\n  async ({ startDate, endDate, interval }: { startDate: Date | string | null; endDate: Date | string | null; interval?: 'daily' | 'weekly' | 'monthly' }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getRevenueChartData(startDate, endDate, interval);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch revenue chart data');\n    }\n  }\n);\n\nexport const fetchRegistrationsChartData = createAsyncThunk(\n  'integratedReports/fetchRegistrationsChartData',\n  async ({ startDate, endDate, interval }: { startDate: Date | string | null; endDate: Date | string | null; interval?: 'daily' | 'weekly' | 'monthly' }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getRegistrationsChartData(startDate, endDate, interval);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch registrations chart data');\n    }\n  }\n);\n\nexport const fetchTopGamesData = createAsyncThunk(\n  'integratedReports/fetchTopGamesData',\n  async ({ startDate, endDate, limit }: { startDate: Date | string | null; endDate: Date | string | null; limit?: number }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getTopGamesData(startDate, endDate, limit);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch top games data');\n    }\n  }\n);\n\nexport const fetchRecentTransactionsData = createAsyncThunk(\n  'integratedReports/fetchRecentTransactionsData',\n  async ({ startDate, endDate, limit }: { startDate: Date | string | null; endDate: Date | string | null; limit?: number }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getRecentTransactionsData(startDate, endDate, limit);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch recent transactions data');\n    }\n  }\n);\n\nexport const fetchHeatmapData = createAsyncThunk(\n  'integratedReports/fetchHeatmapData',\n  async ({ startDate, endDate, metric }: { startDate: Date | string | null; endDate: Date | string | null; metric?: string }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getHeatmapData(startDate, endDate, metric);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch heatmap data');\n    }\n  }\n);\n\nexport const fetchSegmentComparisonData = createAsyncThunk(\n  'integratedReports/fetchSegmentComparisonData',\n  async ({ startDate, endDate, segments }: { startDate: Date | string | null; endDate: Date | string | null; segments?: string[] }, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getSegmentComparisonData(startDate, endDate, segments);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch segment comparison data');\n    }\n  }\n);\n\nexport const fetchUserPreferences = createAsyncThunk(\n  'integratedReports/fetchUserPreferences',\n  async (_, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.getUserPreferences();\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch user preferences');\n    }\n  }\n);\n\nexport const saveUserPreferences = createAsyncThunk(\n  'integratedReports/saveUserPreferences',\n  async (preferences: any, { rejectWithValue }) => {\n    try {\n      const data = await integratedReportsService.saveUserPreferences(preferences);\n      return data;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to save user preferences');\n    }\n  }\n);\n\n// Create the slice\nconst integratedReportsSlice = createSlice({\n  name: 'integratedReports',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // Daily Actions\n    builder\n      .addCase(fetchDailyActionsData.pending, (state) => {\n        state.dailyActions.loading = true;\n        state.dailyActions.error = null;\n      })\n      .addCase(fetchDailyActionsData.fulfilled, (state, action: PayloadAction<any[]>) => {\n        state.dailyActions.loading = false;\n        state.dailyActions.data = action.payload;\n      })\n      .addCase(fetchDailyActionsData.rejected, (state, action) => {\n        state.dailyActions.loading = false;\n        state.dailyActions.error = action.payload as string;\n      });\n\n    // Players\n    builder\n      .addCase(fetchPlayerData.pending, (state) => {\n        state.players.loading = true;\n        state.players.error = null;\n      })\n      .addCase(fetchPlayerData.fulfilled, (state, action: PayloadAction<any[]>) => {\n        state.players.loading = false;\n        state.players.data = action.payload;\n      })\n      .addCase(fetchPlayerData.rejected, (state, action) => {\n        state.players.loading = false;\n        state.players.error = action.payload as string;\n      });\n\n    // Games\n    builder\n      .addCase(fetchGameData.pending, (state) => {\n        state.games.loading = true;\n        state.games.error = null;\n      })\n      .addCase(fetchGameData.fulfilled, (state, action: PayloadAction<any[]>) => {\n        state.games.loading = false;\n        state.games.data = action.payload;\n      })\n      .addCase(fetchGameData.rejected, (state, action) => {\n        state.games.loading = false;\n        state.games.error = action.payload as string;\n      });\n\n    // Dashboard Summary\n    builder\n      .addCase(fetchDashboardSummary.pending, (state) => {\n        state.dashboardSummary.loading = true;\n        state.dashboardSummary.error = null;\n      })\n      .addCase(fetchDashboardSummary.fulfilled, (state, action: PayloadAction<DashboardSummary>) => {\n        state.dashboardSummary.loading = false;\n        state.dashboardSummary.data = action.payload;\n      })\n      .addCase(fetchDashboardSummary.rejected, (state, action) => {\n        state.dashboardSummary.loading = false;\n        state.dashboardSummary.error = action.payload as string;\n      });\n\n    // Revenue Chart\n    builder\n      .addCase(fetchRevenueChartData.pending, (state) => {\n        state.revenueChart.loading = true;\n        state.revenueChart.error = null;\n      })\n      .addCase(fetchRevenueChartData.fulfilled, (state, action: PayloadAction<ChartDataPoint[]>) => {\n        state.revenueChart.loading = false;\n        state.revenueChart.data = action.payload;\n      })\n      .addCase(fetchRevenueChartData.rejected, (state, action) => {\n        state.revenueChart.loading = false;\n        state.revenueChart.error = action.payload as string;\n      });\n\n    // Registrations Chart\n    builder\n      .addCase(fetchRegistrationsChartData.pending, (state) => {\n        state.registrationsChart.loading = true;\n        state.registrationsChart.error = null;\n      })\n      .addCase(fetchRegistrationsChartData.fulfilled, (state, action: PayloadAction<ChartDataPoint[]>) => {\n        state.registrationsChart.loading = false;\n        state.registrationsChart.data = action.payload;\n      })\n      .addCase(fetchRegistrationsChartData.rejected, (state, action) => {\n        state.registrationsChart.loading = false;\n        state.registrationsChart.error = action.payload as string;\n      });\n\n    // Top Games\n    builder\n      .addCase(fetchTopGamesData.pending, (state) => {\n        state.topGames.loading = true;\n        state.topGames.error = null;\n      })\n      .addCase(fetchTopGamesData.fulfilled, (state, action: PayloadAction<TopGame[]>) => {\n        state.topGames.loading = false;\n        state.topGames.data = action.payload;\n      })\n      .addCase(fetchTopGamesData.rejected, (state, action) => {\n        state.topGames.loading = false;\n        state.topGames.error = action.payload as string;\n      });\n\n    // Recent Transactions\n    builder\n      .addCase(fetchRecentTransactionsData.pending, (state) => {\n        state.recentTransactions.loading = true;\n        state.recentTransactions.error = null;\n      })\n      .addCase(fetchRecentTransactionsData.fulfilled, (state, action: PayloadAction<Transaction[]>) => {\n        state.recentTransactions.loading = false;\n        state.recentTransactions.data = action.payload;\n      })\n      .addCase(fetchRecentTransactionsData.rejected, (state, action) => {\n        state.recentTransactions.loading = false;\n        state.recentTransactions.error = action.payload as string;\n      });\n\n    // Heatmap\n    builder\n      .addCase(fetchHeatmapData.pending, (state) => {\n        state.heatmap.loading = true;\n        state.heatmap.error = null;\n      })\n      .addCase(fetchHeatmapData.fulfilled, (state, action: PayloadAction<HeatmapData[]>) => {\n        state.heatmap.loading = false;\n        state.heatmap.data = action.payload;\n      })\n      .addCase(fetchHeatmapData.rejected, (state, action) => {\n        state.heatmap.loading = false;\n        state.heatmap.error = action.payload as string;\n      });\n\n    // Segment Comparison\n    builder\n      .addCase(fetchSegmentComparisonData.pending, (state) => {\n        state.segmentComparison.loading = true;\n        state.segmentComparison.error = null;\n      })\n      .addCase(fetchSegmentComparisonData.fulfilled, (state, action: PayloadAction<SegmentComparisonData[]>) => {\n        state.segmentComparison.loading = false;\n        state.segmentComparison.data = action.payload;\n      })\n      .addCase(fetchSegmentComparisonData.rejected, (state, action) => {\n        state.segmentComparison.loading = false;\n        state.segmentComparison.error = action.payload as string;\n      });\n\n    // User Preferences\n    builder\n      .addCase(fetchUserPreferences.pending, (state) => {\n        state.userPreferences.loading = true;\n        state.userPreferences.error = null;\n      })\n      .addCase(fetchUserPreferences.fulfilled, (state, action: PayloadAction<UserPreferences>) => {\n        state.userPreferences.loading = false;\n        state.userPreferences.data = action.payload;\n      })\n      .addCase(fetchUserPreferences.rejected, (state, action) => {\n        state.userPreferences.loading = false;\n        state.userPreferences.error = action.payload as string;\n      });\n\n    // Save User Preferences\n    builder\n      .addCase(saveUserPreferences.pending, (state) => {\n        state.userPreferences.loading = true;\n        state.userPreferences.error = null;\n      })\n      .addCase(saveUserPreferences.fulfilled, (state, action: PayloadAction<UserPreferences>) => {\n        state.userPreferences.loading = false;\n        state.userPreferences.data = action.payload;\n      })\n      .addCase(saveUserPreferences.rejected, (state, action) => {\n        state.userPreferences.loading = false;\n        state.userPreferences.error = action.payload as string;\n      });\n  }\n});\n\n// Export selectors with null checks\nexport const selectDailyActionsData = (state: RootState) => state?.integratedReports?.dailyActions || { data: [], loading: false, error: null };\nexport const selectPlayerData = (state: RootState) => state?.integratedReports?.players || { data: [], loading: false, error: null };\nexport const selectGameData = (state: RootState) => state?.integratedReports?.games || { data: [], loading: false, error: null };\nexport const selectDashboardSummary = (state: RootState) => state?.integratedReports?.dashboardSummary || { data: null, loading: false, error: null };\nexport const selectRevenueChartData = (state: RootState) => state?.integratedReports?.revenueChart || { data: [], loading: false, error: null };\nexport const selectRegistrationsChartData = (state: RootState) => state?.integratedReports?.registrationsChart || { data: [], loading: false, error: null };\nexport const selectTopGamesData = (state: RootState) => state?.integratedReports?.topGames || { data: [], loading: false, error: null };\nexport const selectRecentTransactionsData = (state: RootState) => state?.integratedReports?.recentTransactions || { data: [], loading: false, error: null };\nexport const selectHeatmapData = (state: RootState) => state?.integratedReports?.heatmap || { data: [], loading: false, error: null };\nexport const selectSegmentComparisonData = (state: RootState) => state?.integratedReports?.segmentComparison || { data: [], loading: false, error: null };\nexport const selectUserPreferences = (state: RootState) => state?.integratedReports?.userPreferences || { data: null, loading: false, error: null };\n\nexport default integratedReportsSlice.reducer;\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Button,\n  Alert,\n  Tabs,\n  Tab,\n  IconButton,\n  Tooltip,\n  Menu,\n  MenuItem,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControlLabel,\n  Switch,\n  Chip\n} from '@mui/material';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { format as formatDate, parseISO, subDays } from 'date-fns';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\nimport PeopleIcon from '@mui/icons-material/People';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport CasinoIcon from '@mui/icons-material/Casino';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport SaveIcon from '@mui/icons-material/Save';\nimport ShareIcon from '@mui/icons-material/Share';\nimport DashboardCustomizeIcon from '@mui/icons-material/DashboardCustomize';\nimport ViewColumnIcon from '@mui/icons-material/ViewColumn';\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport PieChartIcon from '@mui/icons-material/PieChart';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport AddIcon from '@mui/icons-material/Add';\nimport CloseIcon from '@mui/icons-material/Close';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n// Import report components\n// import { ReportViewer } from '../../components/reports'; // Commented out as it doesn't exist\nimport NaturalLanguageQueryPanel from '../../components/reports/NaturalLanguageQueryPanel';\nimport { EnhancedTable } from '../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../components/tables/enhanced/types';\nimport CustomizableDashboard from '../../components/reports/dashboard/CustomizableDashboard';\nimport { SaveConfigDialog, AddWidgetDialog, ShareDialog } from '../../components/reports/dashboard/DashboardDialogs';\nimport { Widget as DashboardWidget, WidgetType as DashboardWidgetType } from '../../components/reports/dashboard/DashboardWidget';\nimport { FilterContextProvider } from '../../components/reports/interactive/FilterContext';\nimport { AnnotationContextProvider } from '../../components/reports/interactive/AnnotationSystem';\n\n// Import Redux\nimport { AppDispatch } from '../../store/store';\nimport {\n  fetchDailyActionsData,\n  fetchPlayerData,\n  fetchGameData,\n  fetchDashboardSummary,\n  fetchRevenueChartData,\n  fetchRegistrationsChartData,\n  fetchTopGamesData,\n  fetchRecentTransactionsData,\n  fetchUserPreferences,\n  saveUserPreferences,\n  selectDailyActionsData,\n  selectPlayerData,\n  selectGameData,\n  selectDashboardSummary,\n  selectRevenueChartData,\n  selectRegistrationsChartData,\n  selectTopGamesData,\n  selectRecentTransactionsData,\n  selectUserPreferences\n} from '../../store/slices/integratedReportsSlice';\n\n// Import mock data (will be replaced with real data)\nconst mockSuggestions = [\n  \"Show me player activity for the last 7 days\",\n  \"What are the top performing games this month?\",\n  \"Compare deposit trends between desktop and mobile users\",\n  \"Show me conversion rates by country\",\n  \"Which games have the highest GGR?\"\n];\n\n// Chart colors\nconst CHART_COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A569BD', '#5DADE2', '#48C9B0', '#F4D03F'];\n\n// Widget types\ntype WidgetType = 'table' | 'lineChart' | 'barChart' | 'pieChart' | 'areaChart' | 'summary';\n\n// Widget interface\ninterface Widget {\n  id: string;\n  type: WidgetType;\n  title: string;\n  dataSource: string;\n  size: 'small' | 'medium' | 'large';\n  position: number;\n  config?: any;\n}\n\n// Dashboard configuration interface\ninterface DashboardConfig {\n  id?: string;\n  name: string;\n  description?: string;\n  widgets: Widget[];\n  filters?: any;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\n// User preferences interface\ninterface UserPreferences {\n  defaultDateRange: string;\n  defaultTab: number;\n  dashboardLayouts: DashboardConfig[];\n  theme: 'light' | 'dark';\n  chartPreferences: {\n    showLegends: boolean;\n    showGridLines: boolean;\n    colorPalette: string;\n  };\n}\n\n/**\n * IntegratedReportsPage component\n * Combines various report components into a comprehensive dashboard\n */\nconst IntegratedReportsPage: React.FC = () => {\n  // State for active tab\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [startDate, setStartDate] = useState<Date | null>(\n    new Date(new Date().setDate(new Date().getDate() - 7))\n  );\n  const [endDate, setEndDate] = useState<Date | null>(new Date());\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // State for dashboard customization\n  const [customizeMode, setCustomizeMode] = useState<boolean>(false);\n  const [dashboardConfig, setDashboardConfig] = useState<DashboardConfig>({\n    name: 'Default Dashboard',\n    widgets: [\n      {\n        id: 'widget-1',\n        type: 'areaChart',\n        title: 'Daily Actions Trend',\n        dataSource: 'dailyActions',\n        size: 'large',\n        position: 0\n      },\n      {\n        id: 'widget-2',\n        type: 'barChart',\n        title: 'Top Games',\n        dataSource: 'games',\n        size: 'medium',\n        position: 1\n      },\n      {\n        id: 'widget-3',\n        type: 'pieChart',\n        title: 'Player Distribution',\n        dataSource: 'players',\n        size: 'medium',\n        position: 2\n      },\n      {\n        id: 'widget-4',\n        type: 'table',\n        title: 'Recent Activity',\n        dataSource: 'dailyActions',\n        size: 'large',\n        position: 3\n      }\n    ]\n  });\n\n  // State for user preferences\n  const [userPreferences, setUserPreferences] = useState<UserPreferences>({\n    defaultDateRange: '7',\n    defaultTab: 0,\n    dashboardLayouts: [],\n    theme: 'light',\n    chartPreferences: {\n      showLegends: true,\n      showGridLines: true,\n      colorPalette: 'default'\n    }\n  });\n\n  // State for dialogs\n  const [saveConfigDialogOpen, setSaveConfigDialogOpen] = useState<boolean>(false);\n  const [shareDialogOpen, setShareDialogOpen] = useState<boolean>(false);\n  const [addWidgetDialogOpen, setAddWidgetDialogOpen] = useState<boolean>(false);\n  const [configName, setConfigName] = useState<string>('');\n  const [configDescription, setConfigDescription] = useState<string>('');\n\n  // State for widget menu\n  const [widgetMenuAnchorEl, setWidgetMenuAnchorEl] = useState<null | HTMLElement>(null);\n  const [selectedWidgetId, setSelectedWidgetId] = useState<string | null>(null);\n\n  // Mock data for demonstration\n  const [playerData, setPlayerData] = useState<any[]>([]);\n  const [gameData, setGameData] = useState<any[]>([]);\n  const [dailyActionData, setDailyActionData] = useState<any[]>([]);\n\n  // Get dispatch function\n  const dispatch = useDispatch<AppDispatch>();\n\n  // Get data from Redux store\n  const dailyActionsState = useSelector(selectDailyActionsData);\n  const playersState = useSelector(selectPlayerData);\n  const gamesState = useSelector(selectGameData);\n  const userPreferencesState = useSelector(selectUserPreferences);\n\n  /**\n   * Handle tab change\n   * @param event - React synthetic event\n   * @param newValue - New tab index\n   */\n  const handleTabChange = useCallback((event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  }, []);\n\n  // Fetch data on component mount\n  useEffect(() => {\n    // Fetch data from API\n    fetchData();\n\n    // Fetch user preferences\n    dispatch(fetchUserPreferences());\n\n    // Load user preferences from localStorage as fallback\n    const savedPreferences = localStorage.getItem('userReportPreferences');\n    if (savedPreferences) {\n      try {\n        const parsedPreferences = JSON.parse(savedPreferences);\n        setUserPreferences(parsedPreferences);\n\n        // Apply saved preferences\n        if (parsedPreferences.defaultTab !== undefined) {\n          setActiveTab(parsedPreferences.defaultTab);\n        }\n\n        // Load saved dashboard layout if available\n        if (parsedPreferences.dashboardLayouts && parsedPreferences.dashboardLayouts.length > 0) {\n          setDashboardConfig(parsedPreferences.dashboardLayouts[0]);\n        }\n      } catch (e) {\n        console.error('Error parsing saved preferences:', e);\n      }\n    }\n  }, [dispatch]);\n\n  // Update local state when Redux state changes\n  useEffect(() => {\n    if (dailyActionsState?.data?.length > 0) {\n      setDailyActionData(dailyActionsState.data);\n      setLoading(dailyActionsState.loading);\n      setError(dailyActionsState.error);\n    }\n  }, [dailyActionsState]);\n\n  useEffect(() => {\n    if (playersState?.data?.length > 0) {\n      setPlayerData(playersState.data);\n    }\n  }, [playersState]);\n\n  useEffect(() => {\n    if (gamesState?.data?.length > 0) {\n      setGameData(gamesState.data);\n    }\n  }, [gamesState]);\n\n  useEffect(() => {\n    if (userPreferencesState?.data) {\n      setUserPreferences(userPreferencesState.data);\n\n      // Apply saved preferences\n      if (userPreferencesState.data.defaultTab !== undefined) {\n        setActiveTab(userPreferencesState.data.defaultTab);\n      }\n\n      // Load saved dashboard layout if available\n      if (userPreferencesState.data.dashboardLayouts && userPreferencesState.data.dashboardLayouts.length > 0) {\n        setDashboardConfig(userPreferencesState.data.dashboardLayouts[0]);\n      }\n    }\n  }, [userPreferencesState]);\n\n  /**\n   * Fetch data from API\n   * Memoized to prevent unnecessary re-renders\n   */\n  const fetchData = useCallback(() => {\n    setLoading(true);\n\n    // Convert Date objects to ISO strings to make them serializable\n    const dateParams = {\n      startDate: startDate ? startDate.toISOString() : null,\n      endDate: endDate ? endDate.toISOString() : null\n    };\n\n    // Fetch all data in parallel\n    Promise.all([\n      // Fetch daily actions data\n      dispatch(fetchDailyActionsData(dateParams)),\n\n      // Fetch player data\n      dispatch(fetchPlayerData(dateParams)),\n\n      // Fetch game data\n      dispatch(fetchGameData(dateParams)),\n\n      // Fetch dashboard summary\n      dispatch(fetchDashboardSummary(dateParams)),\n\n      // Fetch revenue chart data\n      dispatch(fetchRevenueChartData({\n        ...dateParams,\n        interval: 'daily'\n      })),\n\n      // Fetch registrations chart data\n      dispatch(fetchRegistrationsChartData({\n        ...dateParams,\n        interval: 'daily'\n      })),\n\n      // Fetch top games data\n      dispatch(fetchTopGamesData({\n        ...dateParams,\n        limit: 10\n      })),\n\n      // Fetch recent transactions data\n      dispatch(fetchRecentTransactionsData({\n        ...dateParams,\n        limit: 10\n      }))\n    ]).catch(error => {\n      console.error('Error fetching data:', error);\n      setError('Failed to fetch data. Please try again.');\n    });\n  }, [dispatch, startDate, endDate]);\n\n  /**\n   * Format currency\n   * Memoized to prevent unnecessary re-renders\n   */\n  const formatCurrency = useMemo(() => {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n\n    return (amount: number): string => formatter.format(amount);\n  }, []);\n\n  /**\n   * Handle apply filters\n   */\n  const handleApplyFilters = useCallback(() => {\n    setLoading(true);\n    fetchData();\n  }, [fetchData]);\n\n  /**\n   * Handle export\n   * @param format - Export format\n   * @param exportData - Data to export\n   */\n  const handleExport = useCallback(async (format: ExportFormat, exportData: any[]): Promise<void> => {\n    console.log(`Exporting data in ${format} format`, exportData);\n    // Implementation would go here\n  }, []);\n\n  /**\n   * Handle search query\n   * @param query - Search query\n   */\n  const handleSearch = useCallback((query: string) => {\n    console.log('Search query:', query);\n    // Implementation would go here\n  }, []);\n\n  /**\n   * Toggle customize mode\n   */\n  const toggleCustomizeMode = useCallback(() => {\n    setCustomizeMode(prevMode => !prevMode);\n  }, []);\n\n  /**\n   * Handle widget menu open\n   * @param event - Mouse event\n   * @param widgetId - Widget ID\n   */\n  const handleWidgetMenuOpen = useCallback((event: React.MouseEvent<HTMLElement>, widgetId: string) => {\n    setWidgetMenuAnchorEl(event.currentTarget);\n    setSelectedWidgetId(widgetId);\n  }, []);\n\n  /**\n   * Handle widget menu close\n   */\n  const handleWidgetMenuClose = useCallback(() => {\n    setWidgetMenuAnchorEl(null);\n    setSelectedWidgetId(null);\n  }, []);\n\n  /**\n   * Handle widget removal\n   */\n  const handleRemoveWidget = useCallback(() => {\n    if (selectedWidgetId) {\n      setDashboardConfig(prevConfig => ({\n        ...prevConfig,\n        widgets: prevConfig.widgets.filter(widget => widget.id !== selectedWidgetId)\n      }));\n      handleWidgetMenuClose();\n    }\n  }, [selectedWidgetId, handleWidgetMenuClose]);\n\n  /**\n   * Handle widget edit\n   */\n  const handleEditWidget = useCallback(() => {\n    // Implementation would go here\n    handleWidgetMenuClose();\n  }, [handleWidgetMenuClose]);\n\n  /**\n   * Handle save configuration dialog open\n   */\n  const handleSaveConfigDialogOpen = useCallback(() => {\n    setConfigName(dashboardConfig.name);\n    setConfigDescription(dashboardConfig.description || '');\n    setSaveConfigDialogOpen(true);\n  }, [dashboardConfig]);\n\n  /**\n   * Handle save configuration dialog close\n   */\n  const handleSaveConfigDialogClose = useCallback(() => {\n    setSaveConfigDialogOpen(false);\n  }, []);\n\n  /**\n   * Handle save configuration\n   */\n  const handleSaveConfig = useCallback(() => {\n    const updatedConfig = {\n      ...dashboardConfig,\n      name: configName,\n      description: configDescription,\n      updatedAt: new Date().toISOString()\n    };\n\n    setDashboardConfig(updatedConfig);\n\n    // Save to user preferences\n    const updatedPreferences = {\n      ...userPreferences,\n      dashboardLayouts: [\n        updatedConfig,\n        ...(userPreferences.dashboardLayouts || []).filter(config => config.id !== updatedConfig.id)\n      ]\n    };\n\n    setUserPreferences(updatedPreferences);\n\n    // Save to API\n    dispatch(saveUserPreferences(updatedPreferences));\n\n    // Save to localStorage as fallback\n    localStorage.setItem('userReportPreferences', JSON.stringify(updatedPreferences));\n\n    setSaveConfigDialogOpen(false);\n  }, [dashboardConfig, configName, configDescription, userPreferences, dispatch]);\n\n  /**\n   * Handle share dialog open\n   */\n  const handleShareDialogOpen = useCallback(() => {\n    setShareDialogOpen(true);\n  }, []);\n\n  /**\n   * Handle share dialog close\n   */\n  const handleShareDialogClose = useCallback(() => {\n    setShareDialogOpen(false);\n  }, []);\n\n  /**\n   * Handle add widget dialog open\n   */\n  const handleAddWidgetDialogOpen = useCallback(() => {\n    setAddWidgetDialogOpen(true);\n  }, []);\n\n  /**\n   * Handle add widget dialog close\n   */\n  const handleAddWidgetDialogClose = useCallback(() => {\n    setAddWidgetDialogOpen(false);\n  }, []);\n\n  /**\n   * Handle add widget\n   * @param type - Widget type\n   * @param title - Widget title\n   * @param dataSource - Widget data source\n   */\n  const handleAddWidget = useCallback((type: DashboardWidgetType, title: string, dataSource: string) => {\n    const newWidget: Widget = {\n      id: `widget-${Date.now()}`,\n      type: type as WidgetType, // Cast to local WidgetType\n      title,\n      dataSource,\n      size: 'medium',\n      position: dashboardConfig.widgets.length\n    };\n\n    setDashboardConfig(prevConfig => ({\n      ...prevConfig,\n      widgets: [...prevConfig.widgets, newWidget]\n    }));\n\n    setAddWidgetDialogOpen(false);\n  }, [dashboardConfig.widgets.length]);\n\n  // Handle drag end for widgets\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n\n    const items = Array.from(dashboardConfig.widgets);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    // Update positions\n    const updatedItems = items.map((item, index) => ({\n      ...item,\n      position: index\n    }));\n\n    setDashboardConfig({\n      ...dashboardConfig,\n      widgets: updatedItems\n    });\n  };\n\n  // Define columns for player table\n  const playerColumns: ColumnDef[] = [\n    {\n      id: 'name',\n      label: 'Name',\n      sortable: true\n    },\n    {\n      id: 'email',\n      label: 'Email',\n      sortable: true\n    },\n    {\n      id: 'registrationDate',\n      label: 'Registration Date',\n      format: (value) => formatDate(new Date(value), 'MMM dd, yyyy'),\n      sortable: true\n    },\n    {\n      id: 'country',\n      label: 'Country',\n      sortable: true\n    },\n    {\n      id: 'totalDeposits',\n      label: 'Total Deposits',\n      type: 'currency',\n      format: (value) => formatCurrency(value),\n      sortable: true\n    },\n    {\n      id: 'netGamingRevenue',\n      label: 'Net Gaming Revenue',\n      type: 'currency',\n      format: (value) => formatCurrency(value),\n      sortable: true\n    },\n    {\n      id: 'status',\n      label: 'Status',\n      sortable: true\n    }\n  ];\n\n  // Define columns for game table\n  const gameColumns: ColumnDef[] = [\n    {\n      id: 'name',\n      label: 'Name',\n      sortable: true\n    },\n    {\n      id: 'provider',\n      label: 'Provider',\n      sortable: true\n    },\n    {\n      id: 'category',\n      label: 'Category',\n      sortable: true\n    },\n    {\n      id: 'totalBets',\n      label: 'Total Bets',\n      type: 'currency',\n      format: (value) => formatCurrency(value),\n      sortable: true\n    },\n    {\n      id: 'netGamingRevenue',\n      label: 'Net Gaming Revenue',\n      type: 'currency',\n      format: (value) => formatCurrency(value),\n      sortable: true\n    },\n    {\n      id: 'uniquePlayers',\n      label: 'Unique Players',\n      sortable: true\n    },\n    {\n      id: 'popularity',\n      label: 'Popularity',\n      format: (value) => `${value}%`,\n      sortable: true\n    }\n  ];\n\n  // Define columns for daily action table\n  const dailyActionColumns: ColumnDef[] = [\n    {\n      id: 'date',\n      label: 'Date',\n      format: (value) => formatDate(new Date(value), 'MMM dd, yyyy'),\n      sortable: true\n    },\n    {\n      id: 'uniquePlayers',\n      label: 'Unique Players',\n      sortable: true\n    },\n    {\n      id: 'newRegistrations',\n      label: 'New Registrations',\n      sortable: true\n    },\n    {\n      id: 'deposits',\n      label: 'Deposits',\n      type: 'currency',\n      format: (value) => formatCurrency(value),\n      sortable: true\n    },\n    {\n      id: 'withdrawals',\n      label: 'Withdrawals',\n      type: 'currency',\n      format: (value) => formatCurrency(value),\n      sortable: true\n    },\n    {\n      id: 'bets',\n      label: 'Bets',\n      type: 'currency',\n      format: (value) => formatCurrency(value),\n      sortable: true\n    },\n    {\n      id: 'ggr',\n      label: 'GGR',\n      type: 'currency',\n      format: (value) => formatCurrency(value),\n      sortable: true\n    }\n  ];\n\n  return (\n    <Container maxWidth=\"xl\">\n      <div style={{\n        marginBottom: '32px',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'flex-start'\n      }}>\n        <div>\n          <Typography variant=\"h4\" gutterBottom>\n            Integrated Reports\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            Comprehensive analytics dashboard combining player, game, and daily action data\n          </Typography>\n        </div>\n      </div>\n\n      {/* Natural Language Query Panel */}\n      <Paper style={{ padding: 24, marginBottom: 32 }}>\n        <NaturalLanguageQueryPanel\n          onSearch={handleSearch}\n          showSuggestions={true}\n          suggestions={mockSuggestions}\n          onApplySuggestion={handleSearch}\n          loading={loading}\n          error={error}\n        />\n      </Paper>\n\n      {/* Filters */}\n      <Paper style={{ padding: 24, marginBottom: 32 }}>\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }}>\n          <FilterListIcon style={{ marginRight: 8 }} />\n          <Typography variant=\"h6\">Filters</Typography>\n        </div>\n\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={4}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={4}>\n            <div style={{ display: 'flex', justifyContent: 'flex-end', height: '100%', alignItems: 'center' }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<RefreshIcon />}\n                onClick={handleApplyFilters}\n                disabled={loading}\n              >\n                Apply Filters\n              </Button>\n            </div>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Customizable Dashboard */}\n      <Paper style={{ padding: 24, marginBottom: 32 }}>\n        <AnnotationContextProvider>\n          <FilterContextProvider>\n            <CustomizableDashboard\n              dashboardConfig={dashboardConfig}\n              customizeMode={customizeMode}\n              playerData={playerData}\n              gameData={gameData}\n              dailyActionData={dailyActionData}\n              loading={loading}\n              error={error}\n              playerColumns={playerColumns}\n              gameColumns={gameColumns}\n              dailyActionColumns={dailyActionColumns}\n              onToggleCustomizeMode={toggleCustomizeMode}\n              onSaveConfigDialogOpen={handleSaveConfigDialogOpen}\n              onShareDialogOpen={handleShareDialogOpen}\n              onAddWidgetDialogOpen={handleAddWidgetDialogOpen}\n              onDragEnd={handleDragEnd}\n              onWidgetMenuOpen={handleWidgetMenuOpen}\n            />\n          </FilterContextProvider>\n        </AnnotationContextProvider>\n      </Paper>\n\n      {/* Tabs for different report types */}\n      <Paper style={{ marginBottom: 32 }}>\n        <Tabs\n          value={activeTab}\n          onChange={handleTabChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"Daily Actions\" icon={<TableChartIcon />} iconPosition=\"start\" />\n          <Tab label=\"Players\" icon={<PeopleIcon />} iconPosition=\"start\" />\n          <Tab label=\"Games\" icon={<VideogameAssetIcon />} iconPosition=\"start\" />\n        </Tabs>\n      </Paper>\n\n      {/* Tab Content */}\n      {activeTab === 0 && (\n        <Paper style={{ padding: 24 }}>\n          <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }}>\n            <TableChartIcon style={{ marginRight: 8 }} />\n            <Typography variant=\"h6\">Daily Actions Data</Typography>\n          </div>\n\n          <EnhancedTable\n            columns={dailyActionColumns}\n            data={dailyActionData}\n            loading={loading}\n            title=\"Daily Actions\"\n            emptyMessage=\"No daily actions data available\"\n            idField=\"id\"\n            onExport={handleExport}\n            features={{\n              sorting: true,\n              filtering: {\n                enabled: true,\n                quickFilter: true,\n                advancedFilter: true\n              },\n              pagination: {\n                enabled: true,\n                defaultPageSize: 10,\n                pageSizeOptions: [10, 25, 50, 100]\n              },\n              columnManagement: {\n                enabled: true,\n                allowReordering: true,\n                allowHiding: true,\n                allowResizing: true\n              },\n              export: {\n                enabled: true,\n                formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n              }\n            }}\n          />\n        </Paper>\n      )}\n\n      {activeTab === 1 && (\n        <Paper style={{ padding: 24 }}>\n          <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }}>\n            <PeopleIcon style={{ marginRight: 8 }} />\n            <Typography variant=\"h6\">Players Data</Typography>\n          </div>\n\n          <EnhancedTable\n            columns={playerColumns}\n            data={playerData}\n            loading={loading}\n            title=\"Players\"\n            emptyMessage=\"No player data available\"\n            idField=\"id\"\n            onExport={handleExport}\n            features={{\n              sorting: true,\n              filtering: {\n                enabled: true,\n                quickFilter: true,\n                advancedFilter: true\n              },\n              pagination: {\n                enabled: true,\n                defaultPageSize: 10,\n                pageSizeOptions: [10, 25, 50, 100]\n              },\n              columnManagement: {\n                enabled: true,\n                allowReordering: true,\n                allowHiding: true,\n                allowResizing: true\n              },\n              export: {\n                enabled: true,\n                formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n              }\n            }}\n          />\n        </Paper>\n      )}\n\n      {activeTab === 2 && (\n        <Paper style={{ padding: 24 }}>\n          <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }}>\n            <VideogameAssetIcon style={{ marginRight: 8 }} />\n            <Typography variant=\"h6\">Games Data</Typography>\n          </div>\n\n          <EnhancedTable\n            columns={gameColumns}\n            data={gameData}\n            loading={loading}\n            title=\"Games\"\n            emptyMessage=\"No game data available\"\n            idField=\"id\"\n            onExport={handleExport}\n            features={{\n              sorting: true,\n              filtering: {\n                enabled: true,\n                quickFilter: true,\n                advancedFilter: true\n              },\n              pagination: {\n                enabled: true,\n                defaultPageSize: 10,\n                pageSizeOptions: [10, 25, 50, 100]\n              },\n              columnManagement: {\n                enabled: true,\n                allowReordering: true,\n                allowHiding: true,\n                allowResizing: true\n              },\n              export: {\n                enabled: true,\n                formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n              }\n            }}\n          />\n        </Paper>\n      )}\n\n      {/* Dialogs */}\n      <SaveConfigDialog\n        open={saveConfigDialogOpen}\n        onClose={handleSaveConfigDialogClose}\n        onSave={handleSaveConfig}\n        configName={configName}\n        configDescription={configDescription}\n        setConfigName={setConfigName}\n        setConfigDescription={setConfigDescription}\n      />\n\n      <AddWidgetDialog\n        open={addWidgetDialogOpen}\n        onClose={handleAddWidgetDialogClose}\n        onAddWidget={(type, title, dataSource) => handleAddWidget(type as DashboardWidgetType, title, dataSource)}\n      />\n\n      <ShareDialog\n        open={shareDialogOpen}\n        onClose={handleShareDialogClose}\n      />\n\n      {/* Widget Menu */}\n      <Menu\n        anchorEl={widgetMenuAnchorEl}\n        open={Boolean(widgetMenuAnchorEl)}\n        onClose={handleWidgetMenuClose}\n      >\n        <MenuItem onClick={handleEditWidget}>\n          <EditIcon fontSize=\"small\" style={{ marginRight: 8 }} />\n          Edit Widget\n        </MenuItem>\n        <MenuItem onClick={handleRemoveWidget}>\n          <DeleteIcon fontSize=\"small\" style={{ marginRight: 8 }} />\n          Remove Widget\n        </MenuItem>\n      </Menu>\n    </Container>\n  );\n};\n\nexport default IntegratedReportsPage;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  Button,\n  IconButton,\n  Divider,\n  Chip,\n  CircularProgress,\n  Collapse,\n  List,\n  ListItem,\n  ListItemText,\n  Alert,\n  Tooltip\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport HistoryIcon from '@mui/icons-material/History';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport MicIcon from '@mui/icons-material/Mic';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport LightbulbIcon from '@mui/icons-material/Lightbulb';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport { CommonProps } from '../../types/common';\n\n// Add WebkitSpeechRecognition to the Window interface\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n\n// Type definitions\nexport interface QueryItem {\n  text: string;\n  timestamp?: string | number | Date;\n  name?: string;\n  description?: string;\n}\n\nexport interface NaturalLanguageQueryPanelProps extends CommonProps {\n  /**\n   * Function called when a search is executed\n   */\n  onSearch: (query: string) => void;\n\n  /**\n   * Function called when a query is saved\n   */\n  onSaveQuery?: (query: string) => void;\n\n  /**\n   * List of recent queries\n   */\n  recentQueries?: QueryItem[];\n\n  /**\n   * List of saved queries\n   */\n  savedQueries?: QueryItem[];\n\n  /**\n   * Whether a query is currently being processed\n   */\n  loading?: boolean;\n\n  /**\n   * Error message to display\n   */\n  error?: string | null;\n\n  /**\n   * Whether to show query suggestions\n   */\n  showSuggestions?: boolean;\n\n  /**\n   * List of query suggestions\n   */\n  suggestions?: string[];\n\n  /**\n   * Function called when a suggestion is applied\n   */\n  onApplySuggestion?: (suggestion: string) => void;\n}\n\n/**\n * NaturalLanguageQueryPanel component for enabling natural language queries for reports\n */\nconst NaturalLanguageQueryPanel: React.FC<NaturalLanguageQueryPanelProps> = ({\n  onSearch,\n  onSaveQuery,\n  recentQueries = [],\n  savedQueries = [],\n  loading = false,\n  error = null,\n  showSuggestions = true,\n  suggestions = [],\n  onApplySuggestion,\n  sx\n}) => {\n  const [query, setQuery] = useState<string>('');\n  const [showHistory, setShowHistory] = useState<boolean>(false);\n  const [isListening, setIsListening] = useState<boolean>(false);\n  const [recognition, setRecognition] = useState<any>(null);\n\n  // Set up speech recognition if available\n  useEffect(() => {\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognitionInstance = new SpeechRecognition();\n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = false;\n\n      recognitionInstance.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        setQuery(transcript);\n        setIsListening(false);\n      };\n\n      recognitionInstance.onerror = () => {\n        setIsListening(false);\n      };\n\n      recognitionInstance.onend = () => {\n        setIsListening(false);\n      };\n\n      setRecognition(recognitionInstance);\n    }\n  }, []);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setQuery(event.target.value);\n  };\n\n  const handleSearch = (): void => {\n    if (query.trim() && onSearch) {\n      onSearch(query.trim());\n    }\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleClearQuery = (): void => {\n    setQuery('');\n  };\n\n  const handleToggleHistory = (): void => {\n    setShowHistory(!showHistory);\n  };\n\n  const handleSelectQuery = (selectedQuery: string): void => {\n    setQuery(selectedQuery);\n    if (onApplySuggestion) {\n      onApplySuggestion(selectedQuery);\n    }\n  };\n\n  const handleSaveQuery = (): void => {\n    if (query.trim() && onSaveQuery) {\n      onSaveQuery(query.trim());\n    }\n  };\n\n  const toggleSpeechRecognition = (): void => {\n    if (!recognition) return;\n\n    if (isListening) {\n      recognition.stop();\n    } else {\n      recognition.start();\n      setIsListening(true);\n    }\n  };\n\n  const isSaved = (queryText: string): boolean => {\n    return savedQueries.some(saved => saved.text === queryText);\n  };\n\n  // Example query suggestions based on report context\n  const defaultSuggestions: string[] = [\n    \"Show me total revenue by month for the last quarter\",\n    \"What are the top 5 performing products?\",\n    \"Compare conversion rates between desktop and mobile\",\n    \"Show user growth trend over the past year\",\n    \"Identify customers with declining activity\"\n  ];\n\n  const queryExamples: string[] = suggestions.length > 0 ? suggestions : defaultSuggestions;\n\n  return (\n    <Paper variant=\"outlined\" sx={{ p: 2, mb: 3, borderRadius: 1, ...sx }}>\n      <Box sx={{ mb: 2 }}>\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'medium', mb: 1, display: 'flex', alignItems: 'center' }}>\n          <SearchIcon sx={{ mr: 1, fontSize: 20 }} />\n          Ask a question about your data\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          Use natural language to query your data. For example, \"Show me sales by region for Q1\"\n        </Typography>\n\n        <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            placeholder=\"Ask a question about your data...\"\n            value={query}\n            onChange={handleQueryChange}\n            onKeyPress={handleKeyPress}\n            disabled={loading}\n            InputProps={{\n              endAdornment: (\n                <Box sx={{ display: 'flex' }}>\n                  {query && (\n                    <IconButton size=\"small\" onClick={handleClearQuery} edge=\"end\">\n                      <ClearIcon />\n                    </IconButton>\n                  )}\n                  {recognition && (\n                    <Tooltip title={isListening ? \"Stop listening\" : \"Voice search\"}>\n                      <IconButton\n                        size=\"small\"\n                        onClick={toggleSpeechRecognition}\n                        color={isListening ? \"primary\" : \"default\"}\n                        edge=\"end\"\n                      >\n                        <MicIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                </Box>\n              ),\n            }}\n            sx={{ mr: 1 }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleSearch}\n            disabled={!query.trim() || loading}\n            startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <SearchIcon />}\n          >\n            {loading ? 'Processing' : 'Search'}\n          </Button>\n        </Box>\n\n        <Box sx={{ display: 'flex', mt: 1, alignItems: 'center' }}>\n          <Tooltip title=\"View search history\">\n            <IconButton size=\"small\" onClick={handleToggleHistory}>\n              {showHistory ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n              <HistoryIcon fontSize=\"small\" sx={{ ml: 0.5 }} />\n            </IconButton>\n          </Tooltip>\n\n          {query.trim() && (\n            <Tooltip title={isSaved(query.trim()) ? \"Query already saved\" : \"Save this query\"}>\n              <IconButton\n                size=\"small\"\n                onClick={handleSaveQuery}\n                disabled={isSaved(query.trim()) || !query.trim()}\n              >\n                {isSaved(query.trim()) ? <BookmarkIcon color=\"primary\" /> : <BookmarkBorderIcon />}\n              </IconButton>\n            </Tooltip>\n          )}\n\n          {error && (\n            <Typography variant=\"caption\" color=\"error\" sx={{ ml: 2 }}>\n              {error}\n            </Typography>\n          )}\n        </Box>\n      </Box>\n\n      <Collapse in={showHistory}>\n        <Divider sx={{ my: 2 }} />\n        <Box>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Recent Queries\n          </Typography>\n          {recentQueries.length > 0 ? (\n            <List dense disablePadding>\n              {recentQueries.slice(0, 5).map((item, index) => (\n                <ListItem\n                  key={index}\n                  button\n                  onClick={() => handleSelectQuery(item.text)}\n                  dense\n                  sx={{ borderRadius: 1 }}\n                >\n                  <ListItemText\n                    primary={item.text}\n                    secondary={item.timestamp && new Date(item.timestamp).toLocaleString()}\n                  />\n                  {isSaved(item.text) && (\n                    <BookmarkIcon fontSize=\"small\" color=\"primary\" />\n                  )}\n                </ListItem>\n              ))}\n            </List>\n          ) : (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No recent queries\n            </Typography>\n          )}\n\n          {savedQueries.length > 0 && (\n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Saved Queries\n              </Typography>\n              <List dense disablePadding>\n                {savedQueries.map((item, index) => (\n                  <ListItem\n                    key={index}\n                    button\n                    onClick={() => handleSelectQuery(item.text)}\n                    dense\n                    sx={{ borderRadius: 1 }}\n                  >\n                    <ListItemText\n                      primary={item.text}\n                      secondary={item.name || item.description}\n                    />\n                    <BookmarkIcon fontSize=\"small\" color=\"primary\" />\n                  </ListItem>\n                ))}\n              </List>\n            </Box>\n          )}\n        </Box>\n      </Collapse>\n\n      {showSuggestions && (\n        <>\n          <Divider sx={{ my: 2 }} />\n          <Box>\n            <Typography variant=\"subtitle2\" sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <LightbulbIcon fontSize=\"small\" sx={{ mr: 0.5 }} color=\"warning\" />\n              Try asking\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              {queryExamples.map((example, index) => (\n                <Chip\n                  key={index}\n                  label={example}\n                  onClick={() => handleSelectQuery(example)}\n                  clickable\n                  size=\"small\"\n                  sx={{ mb: 1 }}\n                />\n              ))}\n            </Box>\n          </Box>\n        </>\n      )}\n    </Paper>\n  );\n};\n\nexport default NaturalLanguageQueryPanel;\n"],"names":["_ref","id","title","description","data","height","loading","error","nodeColorBy","linkColorBy","nodeSizeBy","linkSizeBy","groupBy","enableZoom","enableDrag","enableNodeSelection","enableLinkSelection","enableSearch","enableFiltering","enableAnnotations","onNodeClick","onLinkClick","theme","useTheme","addAnnotation","getAnnotationsForDataPoint","useAnnotationContext","graphRef","useRef","graphData","setGraphData","useState","nodes","links","selectedNode","setSelectedNode","selectedLink","setSelectedLink","searchTerm","setSearchTerm","highlightNodes","setHighlightNodes","Set","highlightLinks","setHighlightLinks","zoomLevel","setZoomLevel","groups","setGroups","selectedGroups","setSelectedGroups","nodeValueRange","setNodeValueRange","linkValueRange","setLinkValueRange","useEffect","processedNodes","map","node","value","undefined","group","processedLinks","link","source","target","Math","random","toString","substring","uniqueGroups","Array","from","nodeValues","linkValues","min","max","filteredData","useCallback","length","filteredNodes","term","toLowerCase","filter","name","includes","filteredNodeIds","filteredLinks","has","handleNodeClick","connectedLinks","connectedNodes","add","forEach","handleLinkClick","handleZoomIn","current","currentZoom","zoom","handleZoomOut","handleResetView","zoomToFit","handleSearch","event","handleGroupSelection","getNodeColor","newValue","size","alpha","palette","text","disabled","color","groupIndex","indexOf","colors","primary","main","secondary","success","warning","info","getLinkColor","normalized","round","getNodeSize","getLinkWidth","getNodeLabel","getLinkLabel","label","_jsx","style","display","justifyContent","alignItems","children","CircularProgress","Typography","_jsxs","Paper","sx","flexDirection","Box","padding","flexWrap","gap","borderBottom","TextField","placeholder","onChange","InputProps","startAdornment","SearchIcon","fontSize","mr","width","FormControl","minWidth","InputLabel","Select","labelId","multiple","renderValue","selected","Chip","MenuItem","Tooltip","IconButton","onClick","ZoomInIcon","ZoomOutIcon","RestartAltIcon","flex","position","ForceGraph2D","ref","nodeId","nodeLabel","nodeColor","nodeVal","linkLabel","linkColor","linkWidth","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkCurvature","nodeRelSize","enableNodeDrag","enableZoomInteraction","cooldownTicks","onEngineStop","_graphRef$current","borderTop","variant","marginTop","Object","entries","_ref2","key","_ref3","_ref4","_ref5","Sankey","nodeWidth","nodePadding","Rectangle","x","y","fill","fillOpacity","stroke","strokeWidth","onMouseEnter","onMouseLeave","left","top","backgroundColor","opacity","border","cursor","Layer","enableExport","valueRange","setValueRange","categories","setCategories","selectedCategories","setSelectedCategories","tooltipContent","setTooltipContent","processedData","useMemo","uniqueCategories","category","minValue","maxValue","filteredNodeIndices","_","index","handleCategorySelection","handleValueRangeChange","nodeData","linkData","handleExport","nodesCsv","join","linksCsv","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","CustomNode","payload","isSelected","categoryIndex","common","white","nodeName","nodeValue","CustomLink","_ref6","sourceX","sourceY","sourceControlX","targetX","targetY","targetControlX","d","strokeOpacity","sourceName","targetName","linkValue","CustomTooltipContent","_ref7","active","p","maxWidth","_Fragment","paddingLeft","paddingRight","Slider","valueLabelDisplay","DownloadIcon","ResponsiveContainer","linkProps","shape","nodeComponent","linkComponent","RechartsTooltip","content","fallback","hasError","setHasError","isSupported","setIsSupported","canvas","getContext","e","console","ThreeComponents","lazy","xLabel","yLabel","zLabel","colorBy","sizeBy","enableRotation","enableLabels","enableGrid","enableAxes","chartType","onPointClick","autoRotate","setAutoRotate","rotationSpeed","setRotationSpeed","darkMode","setDarkMode","mode","selectedPoint","setSelectedPoint","hoveredPoint","setHoveredPoint","point","handleAutoRotateToggle","prev","handleRotationSpeedChange","handleDarkModeToggle","handlePointClick","normalizedData","filtered","xValues","yValues","zValues","z","xMin","xMax","yMin","yMax","zMin","zMax","normalizedX","normalizedY","normalizedZ","getPointColor","getPointSize","FormControlLabel","control","Switch","checked","step","RotateLeftIcon","RotateRightIcon","Brightness7Icon","Brightness4Icon","render3DContent","Safe3DRenderer","Suspense","ThreeSurfaceComponents","xRange","yRange","resolution","interpolationMethod","colorMap","wireframe","surfaceResolution","setSurfaceResolution","selectedInterpolation","setSelectedInterpolation","showWireframe","setShowWireframe","selectedColorMap","setSelectedColorMap","handleResolutionChange","handleInterpolationChange","handleWireframeToggle","handleColorMapChange","MockWebSocket","constructor","callbacks","connected","this","log","setTimeout","trigger","getInstance","instance","on","callback","push","off","cb","send","parsedData","JSON","parse","annotation","Date","now","createdAt","toISOString","updatedAt","annotationId","mockAnnotations","chartId","dataPointId","author","metadata","annotations","close","CollaborativeAnnotationContext","createContext","CollaborativeAnnotationContextProvider","currentUser","setAnnotations","notifications","setNotifications","users","setUsers","setLoading","setError","socket","setSocket","ws","handleOpen","stringify","handleMessage","_data$annotation$ment","_data$annotation$ment2","mentions","authorId","addNotification","fromUser","fromUserId","message","handleError","handleClose","matchAll","match","username","user","find","u","replace","Boolean","updateAnnotation","extractedMentions","mentionRegex","deleteAnnotation","getAnnotationsForChart","notification","newNotification","read","markNotificationAsRead","markAllNotificationsAsRead","getUnreadNotificationsCount","Provider","useCollaborativeAnnotationContext","context","useContext","Error","maxNotifications","onNotificationClick","anchorEl","setAnchorEl","handleMenuOpen","currentTarget","handleMenuClose","handleNotificationClick","handleMarkAllAsRead","getNotificationIcon","PersonIcon","CommentIcon","EditIcon","DeleteIcon","NotificationsIcon","formatNotificationTime","date","notificationDate","getTime","formatDistanceToNow","addSuffix","formatDate","unreadCount","sortedNotifications","sort","b","slice","Badge","badgeContent","NotificationsActiveIcon","NotificationsNoneIcon","Menu","open","onClose","PaperProps","maxHeight","overflow","transformOrigin","horizontal","vertical","anchorOrigin","px","py","Button","startIcon","CheckCircleIcon","Divider","List","ListItem","ListItemAvatar","Avatar","bgcolor","grey","ListItemText","fontWeight","borderRadius","ml","textAlign","mb","dataPointLabel","existingAnnotations","newAnnotationText","setNewAnnotationText","newAnnotationType","setNewAnnotationType","editingAnnotation","setEditingAnnotation","mentionSearch","setMentionSearch","mentionAnchorEl","setMentionAnchorEl","mentionPosition","setMentionPosition","textFieldRef","handleTextChange","cursorPosition","selectionStart","mentionMatch","mentionText","start","end","filteredUsers","handleMentionSelect","beforeMention","afterMention","updatedText","handleAddAnnotation","trim","handleEditAnnotation","handleSaveEdit","handleCancelEdit","handleDeleteAnnotation","getAnnotationTypeIcon","FlagIcon","AddCommentIcon","formatTextWithMentions","parts","lastIndex","exec","mentionName","avatar","charAt","Dialog","fullWidth","DialogTitle","CloseIcon","DialogContent","dividers","React","mt","component","whiteSpace","ListItemSecondaryAction","edge","gutterBottom","multiline","rows","Popper","placement","transition","TransitionProps","Grow","elevation","ClickAwayListener","onClickAway","MenuList","icon","DialogActions","enableFullscreen","enableShare","enableNotifications","onExport","onShare","isFullscreen","setIsFullscreen","menuAnchorEl","setMenuAnchorEl","activeTab","setActiveTab","annotationDialogOpen","setAnnotationDialogOpen","selectedDataPoint","setSelectedDataPoint","handleFullscreenToggle","format","handleShare","handleTabChange","handleDataPointClick","dataPoint","renderVisualization","NetworkGraph","SankeyDiagram","Interactive3DChart","getDataPointLabel","startsWith","zIndex","borderColor","InfoOutlinedIcon","NotificationSystem","FullscreenExitIcon","FullscreenIcon","MoreVertIcon","ListItemIcon","ShareIcon","Tabs","Tab","CollaborativeAnnotationDialog","CHART_COLORS","widget","customizeMode","onMenuOpen","columns","enableInteractivity","drilldownOpen","setDrilldownOpen","drilldownData","setDrilldownData","getWidgetSizeStyles","gridColumn","handleDrillDown","detailData","dataSource","deposits","bets","uniquePlayers","isArray","item","totalBets","netGamingRevenue","totalDeposits","SimpleBox","renderWidgetContent","AdvancedInteractiveChart","xKey","yKeys","enableDrilldown","enableTooltip","enableCrossFiltering","ReportAreaChart","ReportBarChart","pieData","reduce","sum","withdrawals","wins","countryMap","Map","player","country","set","get","categoryMap","game","nameKey","valueKey","ReportPieChart","scatterData","result","LassoSelectionScatterChart","yKey","enableLassoSelection","ReportScatterChart","zKey","radarData","ggr","totalWins","popularity","ReportRadarChart","dataKey","treemapData","ReportTreemapChart","gaugeData","totalWithdrawals","totalGGR","ReportGaugeChart","timeSeriesData","ZoomableTimeSeriesChart","enableBrush","heatmapData","days","day","hour","floor","metrics","metric","countries","ReportHeatmap","networkData","players","i","j","games","AdvancedVisualizationContainer","sankeyData","points3D","dailyActions","surfaceData","metricIndex","Surface3DPlot","EnhancedTable","emptyMessage","idField","features","sorting","pagination","enabled","defaultPageSize","pageSizeOptions","toLocaleString","status","DrilldownModal","dashboardConfig","playerData","gameData","dailyActionData","playerColumns","gameColumns","dailyActionColumns","onToggleCustomizeMode","onSaveConfigDialogOpen","onShareDialogOpen","onAddWidgetDialogOpen","onDragEnd","onWidgetMenuOpen","getWidgetData","getWidgetColumns","DashboardCustomizeIcon","AddIcon","SaveIcon","DragDropContext","Droppable","droppableId","direction","provided","DragDropWrapper","droppableProps","innerRef","gridTemplateColumns","widgets","Draggable","draggableId","isDragDisabled","draggableProps","dragHandleProps","DashboardWidget","SaveConfigDialog","onSave","configName","configDescription","setConfigName","setConfigDescription","right","margin","required","AddWidgetDialog","onAddWidget","widgetType","setWidgetType","widgetTitle","setWidgetTitle","setDataSource","Grid","container","spacing","xs","md","sm","TimelineIcon","BarChartIcon","PieChartIcon","TableChartIcon","DashboardIcon","ScatterPlotIcon","RadarIcon","AccountTreeIcon","SpeedIcon","GridOnIcon","BubbleChartIcon","handleAddWidget","ShareDialog","email","setEmail","shareLink","setShareLink","my","readOnly","handleCopyLink","navigator","clipboard","writeText","API_URL","formatDateForApi","dateObj","getDailyActionsData","async","startDate","endDate","filters","arguments","axios","params","getPlayerData","getGameData","getDashboardSummary","getRevenueChartData","interval","getRegistrationsChartData","getTopGamesData","limit","getRecentTransactionsData","getHeatmapData","getSegmentComparisonData","segments","saveUserPreferences","post","preferences","getUserPreferences","fetchDailyActionsData","createAsyncThunk","rejectWithValue","integratedReportsService","fetchPlayerData","fetchGameData","fetchDashboardSummary","_ref8","fetchRevenueChartData","_ref9","_ref0","fetchRegistrationsChartData","_ref1","_ref10","fetchTopGamesData","_ref11","_ref12","fetchRecentTransactionsData","_ref13","_ref14","fetchHeatmapData","_ref15","_ref16","fetchSegmentComparisonData","_ref17","_ref18","fetchUserPreferences","_ref19","_ref20","integratedReportsSlice","createSlice","initialState","dashboardSummary","revenueChart","registrationsChart","topGames","recentTransactions","heatmap","segmentComparison","userPreferences","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","rejected","selectDailyActionsData","_state$integratedRepo","integratedReports","selectPlayerData","_state$integratedRepo2","selectGameData","_state$integratedRepo3","selectUserPreferences","_state$integratedRepo1","mockSuggestions","IntegratedReportsPage","setStartDate","setDate","getDate","setEndDate","setCustomizeMode","setDashboardConfig","setUserPreferences","defaultDateRange","defaultTab","dashboardLayouts","chartPreferences","showLegends","showGridLines","colorPalette","saveConfigDialogOpen","setSaveConfigDialogOpen","shareDialogOpen","setShareDialogOpen","addWidgetDialogOpen","setAddWidgetDialogOpen","widgetMenuAnchorEl","setWidgetMenuAnchorEl","selectedWidgetId","setSelectedWidgetId","setPlayerData","setGameData","setDailyActionData","dispatch","useDispatch","dailyActionsState","useSelector","playersState","gamesState","userPreferencesState","fetchData","savedPreferences","localStorage","getItem","parsedPreferences","_dailyActionsState$da","_playersState$data","_gamesState$data","dateParams","Promise","all","catch","formatCurrency","formatter","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","amount","handleApplyFilters","exportData","query","toggleCustomizeMode","prevMode","handleWidgetMenuOpen","widgetId","handleWidgetMenuClose","handleRemoveWidget","prevConfig","handleEditWidget","handleSaveConfigDialogOpen","handleSaveConfigDialogClose","handleSaveConfig","updatedConfig","updatedPreferences","config","setItem","handleShareDialogOpen","handleShareDialogClose","handleAddWidgetDialogOpen","handleAddWidgetDialogClose","newWidget","sortable","Container","marginBottom","NaturalLanguageQueryPanel","onSearch","showSuggestions","suggestions","onApplySuggestion","FilterListIcon","marginRight","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","slotProps","textField","RefreshIcon","AnnotationContextProvider","FilterContextProvider","CustomizableDashboard","destination","items","reorderedItem","splice","updatedItems","indicatorColor","textColor","iconPosition","PeopleIcon","VideogameAssetIcon","filtering","quickFilter","advancedFilter","columnManagement","allowReordering","allowHiding","allowResizing","export","formats","ExportFormat","CSV","EXCEL","PDF","onSaveQuery","recentQueries","savedQueries","setQuery","showHistory","setShowHistory","isListening","setIsListening","recognition","setRecognition","window","recognitionInstance","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","onresult","transcript","results","onerror","onend","handleSelectQuery","selectedQuery","isSaved","queryText","some","saved","queryExamples","onKeyPress","endAdornment","handleClearQuery","ClearIcon","toggleSpeechRecognition","stop","MicIcon","handleToggleHistory","ExpandLessIcon","ExpandMoreIcon","HistoryIcon","handleSaveQuery","BookmarkIcon","BookmarkBorderIcon","Collapse","in","dense","disablePadding","button","timestamp","LightbulbIcon","example","clickable"],"sourceRoot":""}