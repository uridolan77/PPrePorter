{"version":3,"file":"static/js/5192.9f65c69c.chunk.js","mappings":"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","sources":["components/common/MultiSelect.tsx","components/common/CardAccent.tsx","components/reports/daily-actions/SimpleReportExport.tsx","components/reports/daily-actions/DailyActionsTableNew.tsx","components/reports/daily-actions/DailyActionsHeader.tsx","components/common/KPICard.tsx","components/reports/daily-actions/DailyActionsFilters.tsx","components/reports/daily-actions/ConfigurableSummaryCards.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Chip,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n  Typography,\n  Checkbox,\n  ListItemText,\n  TextField,\n  InputAdornment,\n  Divider,\n  Button,\n  FormHelperText,\n  Tooltip,\n  IconButton,\n  CircularProgress\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { CommonProps } from '../../types/common';\n\n// Option interface for select items\nexport interface MultiSelectOption {\n  value: string | number;\n  label: string;\n  disabled?: boolean;\n  group?: string;\n  description?: string;\n}\n\n// Props interface for the MultiSelect component\nexport interface MultiSelectProps extends CommonProps {\n  /**\n   * Array of options to display in the select\n   */\n  options: MultiSelectOption[];\n\n  /**\n   * Currently selected values\n   */\n  value: (string | number)[];\n\n  /**\n   * Callback fired when the value changes\n   */\n  onChange: (value: (string | number)[]) => void;\n\n  /**\n   * Label for the select\n   */\n  label?: string;\n\n  /**\n   * Placeholder text when no options are selected\n   */\n  placeholder?: string;\n\n  /**\n   * Whether the component is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the component is required\n   */\n  required?: boolean;\n\n  /**\n   * Error message to display\n   */\n  error?: string;\n\n  /**\n   * Helper text to display below the select\n   */\n  helperText?: string;\n\n  /**\n   * Maximum height of the dropdown menu in pixels\n   */\n  maxMenuHeight?: number;\n\n  /**\n   * Whether to show a search input in the dropdown\n   */\n  searchable?: boolean;\n\n  /**\n   * Whether to show select all/none options\n   */\n  showSelectAllOption?: boolean;\n\n  /**\n   * Custom render function for the selected values\n   */\n  renderValue?: (selected: (string | number)[]) => React.ReactNode;\n\n  /**\n   * Size of the select component\n   */\n  size?: 'small' | 'medium';\n\n  /**\n   * Width of the component\n   */\n  width?: string | number;\n\n  /**\n   * Custom ID for the component\n   */\n  id?: string;\n\n  /**\n   * Custom name for the component\n   */\n  name?: string;\n\n  /**\n   * Whether the component is in a loading state\n   */\n  loading?: boolean;\n\n  /**\n   * Whether the component should take up the full width of its container\n   */\n  fullWidth?: boolean;\n}\n\n/**\n * MultiSelect component\n *\n * A reusable multi-select dropdown component with search functionality,\n * select all option, and chip display for selected values.\n */\nconst MultiSelect: React.FC<MultiSelectProps> = ({\n  options = [],\n  value = [],\n  onChange,\n  label = '',\n  placeholder = 'Select items',\n  disabled = false,\n  required = false,\n  error = '',\n  helperText = '',\n  maxMenuHeight = 300,\n  searchable = true,\n  showSelectAllOption = true,\n  renderValue,\n  size = 'small',\n  width,\n  id,\n  name,\n  sx,\n  className,\n  style,\n  loading = false,\n  fullWidth = true\n}) => {\n  // State for search term\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  // Filter options based on search term\n  const filteredOptions = options.filter(option =>\n    option.label.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Handle select change\n  const handleChange = (event: SelectChangeEvent<(string | number)[]>) => {\n    const newValue = event.target.value as (string | number)[];\n    onChange(newValue);\n  };\n\n  // Handle search input change\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  };\n\n  // Clear search term\n  const handleClearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Handle select all\n  const handleSelectAll = () => {\n    // Only select from filtered options that aren't disabled\n    const selectableOptions = filteredOptions\n      .filter(option => !option.disabled)\n      .map(option => option.value);\n\n    onChange(selectableOptions);\n  };\n\n  // Handle select none\n  const handleSelectNone = () => {\n    onChange([]);\n  };\n\n  // Handle removing a single item\n  const handleRemoveItem = (valueToRemove: string | number) => (event: React.MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation(); // Prevent the dropdown from opening\n    const newValue = value.filter(val => val.toString() !== valueToRemove.toString());\n    onChange(newValue);\n  };\n\n  // Default render function for selected values\n  const defaultRenderValue = (selected: (string | number)[]) => {\n    if (!selected || selected.length === 0) {\n      return <Typography color=\"text.secondary\">{placeholder}</Typography>;\n    }\n\n    // Always show chips for all selected items\n    return (\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n        {selected.map((selectedValue) => {\n          const option = options.find(opt => opt.value.toString() === selectedValue.toString());\n          return (\n            <Chip\n              key={selectedValue}\n              label={option ? option.label : selectedValue}\n              size=\"small\"\n              onDelete={handleRemoveItem(selectedValue)}\n              onClick={(e) => e.stopPropagation()} // Prevent opening dropdown when clicking the chip\n              deleteIcon={\n                <ClearIcon\n                  fontSize=\"small\"\n                  onMouseDown={(e) => e.stopPropagation()} // Extra prevention\n                />\n              }\n              sx={{\n                '& .MuiChip-deleteIcon': {\n                  display: 'none',\n                  opacity: 0.7,\n                  '&:hover': {\n                    opacity: 1,\n                  }\n                },\n                '&:hover .MuiChip-deleteIcon': {\n                  display: 'block',\n                },\n              }}\n            />\n          );\n        })}\n      </div>\n    );\n  };\n\n  // If loading, show a loading message\n  if (loading) {\n    return (\n      <FormControl\n        fullWidth\n        size={size}\n        error={!!error}\n        disabled={true}\n        required={required}\n        sx={{\n          width: width,\n          ...sx\n        }}\n        className={className}\n        style={style}\n      >\n        {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n        <Select\n          labelId={`${id || 'multi-select'}-label`}\n          id={id || 'multi-select'}\n          name={name}\n          multiple\n          value={[]}\n          input={<OutlinedInput label={label} />}\n          renderValue={() => <Typography color=\"text.secondary\">Loading options...</Typography>}\n        >\n          <MenuItem disabled>\n            <div style={{ display: 'flex', alignItems: 'center', padding: 8 }}>\n              <CircularProgress size={20} style={{ marginRight: 8 }} />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Loading options...\n              </Typography>\n            </div>\n          </MenuItem>\n        </Select>\n        {helperText && (\n          <FormHelperText>{helperText}</FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n\n  // If no options are provided, show a message\n  if (!options || options.length === 0) {\n    return (\n      <FormControl\n        fullWidth\n        size={size}\n        error={!!error}\n        disabled={true}\n        required={required}\n        sx={{\n          width: width,\n          ...sx\n        }}\n        className={className}\n        style={style}\n      >\n        {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n        <Select\n          labelId={`${id || 'multi-select'}-label`}\n          id={id || 'multi-select'}\n          name={name}\n          multiple\n          value={[]}\n          input={<OutlinedInput label={label} />}\n          renderValue={() => <Typography color=\"text.secondary\">No options available</Typography>}\n        >\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options available\n            </Typography>\n          </MenuItem>\n        </Select>\n        {helperText && (\n          <FormHelperText>{helperText}</FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n\n  // Reset search when dropdown closes\n  const handleClose = () => {\n    setSearchTerm('');\n  };\n\n  return (\n    <FormControl\n      fullWidth\n      size={size}\n      error={!!error}\n      disabled={disabled}\n      required={required}\n      sx={{\n        width: width || '100%',\n        minWidth: '100%',\n        ...sx\n      }}\n      className={className}\n      style={style}\n    >\n      {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n\n      <Select\n        labelId={`${id || 'multi-select'}-label`}\n        id={id || 'multi-select'}\n        name={name}\n        multiple\n        value={value}\n        onChange={handleChange}\n        input={<OutlinedInput label={label} />}\n        renderValue={renderValue || defaultRenderValue}\n        onClose={handleClose}\n        // Add a custom click handler to prevent opening when clicking on chips\n        onClick={(e) => {\n          // Check if the click was on a chip or delete icon\n          if (\n            e.target instanceof HTMLElement &&\n            (e.target.classList.contains('MuiChip-root') ||\n             e.target.classList.contains('MuiChip-label') ||\n             e.target.classList.contains('MuiChip-deleteIcon') ||\n             e.target.closest('.MuiChip-deleteIcon'))\n          ) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }}\n        MenuProps={{\n          PaperProps: {\n            style: {\n              maxHeight: maxMenuHeight,\n            },\n          },\n        }}\n      >\n        {/* Search input and Select All/Clear All in a sticky container */}\n        <div\n          style={{\n            position: 'sticky',\n            top: 0,\n            backgroundColor: '#fff',\n            zIndex: 2,\n            borderBottom: '1px solid rgba(0, 0, 0, 0.12)'\n          }}\n        >\n          {/* Search input */}\n          {searchable && (\n            <div style={{ padding: 8 }}>\n              <TextField\n                size=\"small\"\n                placeholder=\"Search...\"\n                fullWidth\n                value={searchTerm}\n                onChange={handleSearchChange}\n                onClick={(e) => e.stopPropagation()}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SearchIcon fontSize=\"small\" />\n                    </InputAdornment>\n                  ),\n                  endAdornment: searchTerm ? (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        size=\"small\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleClearSearch();\n                        }}\n                      >\n                        <ClearIcon fontSize=\"small\" />\n                      </IconButton>\n                    </InputAdornment>\n                  ) : null,\n                }}\n              />\n            </div>\n          )}\n\n          {/* Select all/none options */}\n          {showSelectAllOption && filteredOptions.length > 0 && (\n            <div style={{ paddingLeft: 8, paddingRight: 8, paddingTop: 4, paddingBottom: 4, display: 'flex', justifyContent: 'space-between' }}>\n              <Button size=\"small\" onClick={handleSelectAll}>Select All</Button>\n              <Button size=\"small\" onClick={handleSelectNone}>Clear All</Button>\n            </div>\n          )}\n        </div>\n\n        {/* No options message */}\n        {filteredOptions.length === 0 && (\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options found\n            </Typography>\n          </MenuItem>\n        )}\n\n        {/* Options */}\n        {filteredOptions.map((option) => (\n          <MenuItem\n            key={option.value}\n            value={option.value}\n            disabled={option.disabled}\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            }}\n          >\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <Checkbox\n                checked={value.some(val =>\n                  val.toString() === option.value.toString()\n                )}\n              />\n              <ListItemText\n                primary={option.label}\n                secondary={option.group}\n              />\n            </div>\n            {option.description && (\n              <Tooltip title={option.description} arrow>\n                <InfoOutlinedIcon fontSize=\"small\" color=\"action\" style={{ marginLeft: 8 }} />\n              </Tooltip>\n            )}\n          </MenuItem>\n        ))}\n      </Select>\n\n      {/* Helper text or error message */}\n      {(helperText || error) && (\n        <FormHelperText>{error || helperText}</FormHelperText>\n      )}\n    </FormControl>\n  );\n};\n\nexport default MultiSelect;\n","import React from 'react';\nimport { Box, useTheme } from '@mui/material';\nimport { getWavePatternBackground } from '../../theme/flatModernTheme';\n\nexport type AccentPosition = 'left' | 'top' | 'right' | 'bottom';\nexport type AccentVariant = 'teal' | 'purple' | 'blue' | 'green' | 'amber' | 'red';\n\nexport interface CardAccentProps {\n  /**\n   * Position of the accent stripe\n   */\n  position?: AccentPosition;\n\n  /**\n   * Color variant of the accent\n   */\n  variant?: AccentVariant;\n\n  /**\n   * Whether to show a wave pattern background\n   */\n  showWavePattern?: boolean;\n\n  /**\n   * Thickness of the accent stripe in pixels\n   */\n  thickness?: number;\n\n  /**\n   * Custom color for the accent (overrides variant)\n   */\n  color?: string;\n\n  /**\n   * Opacity of the wave pattern (0-1)\n   */\n  patternOpacity?: number;\n}\n\n/**\n * CardAccent component\n * Adds an accent stripe and optional wave pattern to cards\n */\nconst CardAccent: React.FC<CardAccentProps> = ({\n  position = 'left',\n  variant = 'teal',\n  showWavePattern = false,\n  thickness = 8,\n  color,\n  patternOpacity = 0.1\n}) => {\n  const theme = useTheme();\n\n  // Get color based on variant\n  const getColor = (): string => {\n    if (color) return color;\n\n    const variantColors = {\n      teal: theme.palette.primary.main,\n      purple: theme.palette.secondary.main,\n      blue: theme.palette.info.main,\n      green: theme.palette.success.main,\n      amber: theme.palette.warning.main,\n      red: theme.palette.error.main\n    };\n\n    return variantColors[variant] || theme.palette.primary.main;\n  };\n\n  // Get position styles\n  const getPositionStyles = () => {\n    switch (position) {\n      case 'top':\n        return {\n          top: 0,\n          left: 0,\n          right: 0,\n          height: thickness,\n          width: '100%'\n        };\n      case 'right':\n        return {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          width: thickness,\n          height: '100%'\n        };\n      case 'bottom':\n        return {\n          bottom: 0,\n          left: 0,\n          right: 0,\n          height: thickness,\n          width: '100%'\n        };\n      case 'left':\n      default:\n        return {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          width: thickness,\n          height: '100%'\n        };\n    }\n  };\n\n  const accentColor = getColor();\n  // Extract position styles to avoid complex union type\n  const positionStyles = getPositionStyles();\n\n  // Create a style object instead of using sx prop\n  const accentStyle = {\n    position: 'absolute',\n    backgroundColor: accentColor,\n    zIndex: 1,\n    top: positionStyles.top,\n    right: positionStyles.right,\n    bottom: positionStyles.bottom,\n    left: positionStyles.left,\n    width: positionStyles.width,\n    height: positionStyles.height\n  } as React.CSSProperties;\n\n  return (\n    <>\n      {/* Accent stripe */}\n      <div style={accentStyle} />\n\n      {/* Wave pattern background */}\n      {showWavePattern && (\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            opacity: patternOpacity,\n            backgroundImage: getWavePatternBackground(accentColor),\n            backgroundSize: '100px 50px',\n            backgroundPosition: 'bottom',\n            backgroundRepeat: 'repeat-x',\n            zIndex: 0\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CardAccent;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Typography,\n  Box,\n  Paper\n} from '@mui/material';\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport DescriptionIcon from '@mui/icons-material/Description';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport { ExportFormat } from '../../../components/tables/enhanced/types';\n\ninterface SimpleReportExportProps {\n  onExport: (format: ExportFormat) => void;\n}\n\nconst SimpleReportExport: React.FC<SimpleReportExportProps> = ({ onExport }) => {\n  const [format, setFormat] = useState<ExportFormat>(ExportFormat.CSV);\n\n  // Handle format change\n  const handleFormatChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setFormat(event.target.value as ExportFormat);\n  };\n\n  // Handle export button click\n  const handleExport = (): void => {\n    onExport(format);\n  };\n\n  return (\n    <div>\n      <Typography variant=\"subtitle1\" gutterBottom>\n        Export Format\n      </Typography>\n\n      <Paper variant=\"outlined\" style={{ padding: 16, marginBottom: 16 }}>\n        <FormControl component=\"fieldset\" fullWidth>\n          <RadioGroup\n            aria-label=\"export-format\"\n            name=\"format\"\n            value={format}\n            onChange={handleFormatChange}\n          >\n            <FormControlLabel\n              value={ExportFormat.CSV}\n              control={<Radio />}\n              label={\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                  <DescriptionIcon color=\"primary\" style={{ marginRight: 8 }} />\n                  <Typography>CSV File</Typography>\n                </div>\n              }\n            />\n            <FormControlLabel\n              value={ExportFormat.EXCEL}\n              control={<Radio />}\n              label={\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                  <TableChartIcon color=\"success\" style={{ marginRight: 8 }} />\n                  <Typography>Excel Spreadsheet</Typography>\n                </div>\n              }\n            />\n            <FormControlLabel\n              value={ExportFormat.PDF}\n              control={<Radio />}\n              label={\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                  <PictureAsPdfIcon color=\"error\" style={{ marginRight: 8 }} />\n                  <Typography>PDF Document</Typography>\n                </div>\n              }\n            />\n          </RadioGroup>\n        </FormControl>\n      </Paper>\n\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: 16 }}>\n        <Button\n          onClick={handleExport}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Export\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleReportExport;\n","import React from 'react';\nimport { Paper, Typography, CircularProgress } from '@mui/material';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport { EnhancedTable } from '../../../components/tables/enhanced';\nimport { BaseColumnDef, TableState } from '../../../components/tables/enhanced/types';\nimport { DailyAction } from './types';\n\n// Define a custom column type that matches what EnhancedTable expects\ntype TableColumnDef = BaseColumnDef;\n\ninterface DailyActionsTableProps {\n  data: DailyAction[];\n  loading: boolean;\n  visibleColumns: string[];\n  groupBy: string;\n  hierarchicalGrouping: {\n    enabled: boolean;\n    groupByLevels: string[];\n  };\n  handleColumnVisibilityChange: (columns: string[]) => void;\n  onStateChange?: (state: TableState) => void;\n  onDrillDown?: (row: any, sourceGrouping: string, targetGrouping: string, filters: Record<string, any>) => void;\n}\n\nconst DailyActionsTableNew: React.FC<DailyActionsTableProps> = ({\n  data,\n  loading,\n  visibleColumns,\n  groupBy,\n  hierarchicalGrouping,\n  handleColumnVisibilityChange,\n  onStateChange,\n  onDrillDown\n}) => {\n  // Define columns based on the groupBy value\n  const getColumns = (): TableColumnDef[] => {\n    const baseColumns: TableColumnDef[] = [\n      {\n        id: 'groupValue',\n        label: groupBy === 'Day' ? 'Date' : groupBy,\n        format: (value, row) => row.groupValue\n      },\n      {\n        id: 'registrations',\n        label: 'Registrations',\n        align: 'right',\n        format: (value, row) => row.registrations\n      },\n      {\n        id: 'ftd',\n        label: 'FTD',\n        align: 'right',\n        format: (value, row) => row.ftd\n      },\n      {\n        id: 'deposits',\n        label: 'Deposits',\n        align: 'right',\n        format: (value, row) => row.deposits\n      },\n      {\n        id: 'paidCashouts',\n        label: 'Cashouts',\n        align: 'right',\n        format: (value, row) => row.paidCashouts\n      },\n      {\n        id: 'ggrCasino',\n        label: 'Casino GGR',\n        align: 'right',\n        type: 'currency',\n        format: (value, row) => row.ggrCasino.toFixed(2)\n      },\n      {\n        id: 'ggrSport',\n        label: 'Sport GGR',\n        align: 'right',\n        type: 'currency',\n        format: (value, row) => row.ggrSport.toFixed(2)\n      },\n      {\n        id: 'ggrLive',\n        label: 'Live GGR',\n        align: 'right',\n        type: 'currency',\n        format: (value, row) => row.ggrLive.toFixed(2)\n      },\n      {\n        id: 'totalGGR',\n        label: 'Total GGR',\n        align: 'right',\n        type: 'currency',\n        format: (value, row) => row.totalGGR.toFixed(2)\n      }\n    ];\n\n    return baseColumns;\n  };\n\n  return (\n    <Paper sx={{ p: 3 }}>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }}>\n        <TableChartIcon style={{ marginRight: 8 }} />\n        <Typography variant=\"h6\">Daily Actions Data</Typography>\n      </div>\n\n      {loading ? (\n        <div style={{ display: 'flex', justifyContent: 'center', padding: 32 }}>\n          <CircularProgress />\n        </div>\n      ) : (\n        <EnhancedTable\n          title=\"\"\n          columns={getColumns()}\n          data={data}\n          loading={false}\n          emptyMessage=\"No data available for the selected filters. Try adjusting your filters or click 'Apply Filters' to load data.\"\n          idField=\"id\"\n          onStateChange={onStateChange}\n          onDrillDown={onDrillDown}\n          features={{\n            columnManagement: {\n              enabled: true,\n              allowReordering: true,\n              allowHiding: true\n            },\n            filtering: {\n              enabled: true,\n              advancedFilter: true\n            },\n            export: {\n              enabled: true\n            },\n            grouping: {\n              enabled: hierarchicalGrouping.enabled,\n              hierarchical: hierarchicalGrouping.enabled,\n              defaultGroupByLevels: hierarchicalGrouping.groupByLevels\n            },\n            sorting: {\n              enabled: true\n            },\n            pagination: {\n              enabled: true\n            }\n          }}\n          initialState={{\n            grouping: {\n              groupByColumn: hierarchicalGrouping.enabled ? null : groupBy,\n              groupByLevels: hierarchicalGrouping.groupByLevels,\n              expandedGroups: [],\n              hierarchical: hierarchicalGrouping.enabled\n            },\n            columns: {\n              visible: visibleColumns,\n              order: getColumns().map(col => col.id),\n              sticky: [],\n              widths: {}\n            }\n          }}\n          // Key prop to force re-initialization when hierarchical grouping changes\n          key={`table-${hierarchicalGrouping.enabled}-${hierarchicalGrouping.groupByLevels.join('-')}`}\n        />\n      )}\n    </Paper>\n  );\n};\n\nexport default DailyActionsTableNew;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Typography, Button, Paper } from '@mui/material';\nimport FilterListIcon from '@mui/icons-material/FilterList';\n\ninterface DailyActionsHeaderProps {\n  title: string;\n  subtitle: string;\n}\n\nconst DailyActionsHeader: React.FC<DailyActionsHeaderProps> = ({ title, subtitle }) => {\n  return (\n    <div style={{ marginBottom: 32, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n      <div>\n        <Typography variant=\"h4\" gutterBottom>\n          {title}\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {subtitle}\n        </Typography>\n      </div>\n      <Button\n        component={RouterLink}\n        variant=\"contained\"\n        color=\"primary\"\n        to=\"/reports/daily-actions/advanced\"\n        startIcon={<FilterListIcon />}\n      >\n        Advanced Report\n      </Button>\n    </div>\n  );\n};\n\nexport default DailyActionsHeader;\n","import React from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Tooltip,\n  CircularProgress,\n  Divider,\n  IconButton,\n  alpha\n} from '@mui/material';\nimport SimpleBox from './SimpleBox';\nimport { createSx } from '../../utils/styleUtils';\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\nimport TrendingFlatIcon from '@mui/icons-material/TrendingFlat';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { KPICardProps } from '../../types/common';\nimport CardAccent from './CardAccent';\nimport { getFlatModernCardSx } from '../../utils/applyFlatModernStyle';\n\n/**\n * KPI (Key Performance Indicator) card component for displaying metrics with trends\n */\nconst KPICard: React.FC<KPICardProps> = ({\n  title,\n  value,\n  subtitle,\n  description,\n  trend = null,\n  trendLabel = 'vs previous period',\n  icon = null,\n  loading = false,\n  onMoreClick,\n  color,\n  isInverse = false,\n  prefix = '',\n  valueFormatOptions,\n  sx\n}) => {\n  // Determine the trend direction and color\n  const getTrendInfo = () => {\n    if (trend === null) return { icon: null, color: 'text.secondary' };\n\n    if (trend > 0) {\n      return {\n        icon: <TrendingUpIcon fontSize=\"small\" />,\n        color: isInverse ? 'error.main' : 'success.main'\n      };\n    }\n\n    if (trend < 0) {\n      return {\n        icon: <TrendingDownIcon fontSize=\"small\" />,\n        color: isInverse ? 'success.main' : 'error.main'\n      };\n    }\n\n    return {\n      icon: <TrendingFlatIcon fontSize=\"small\" />,\n      color: 'text.secondary'\n    };\n  };\n\n  const trendInfo = getTrendInfo();\n\n  // Format the trend percentage\n  const formatTrend = (value: number | null): string => {\n    if (value === null || value === undefined) return '';\n    // Ensure value is a valid number\n    if (isNaN(Number(value))) return '';\n    // Ensure value is rounded to 2 decimal places\n    const roundedValue = parseFloat(Number(value).toFixed(2));\n    const prefix = roundedValue > 0 ? '+' : '';\n    return `${prefix}${roundedValue.toFixed(2)}%`;\n  };\n\n  // Format the main value\n  const formatValue = (value: string | number | undefined | null): string => {\n    // If value is undefined or null, return a default value\n    if (value === undefined || value === null) return '0';\n\n    // If value is already a string, return it as is\n    if (typeof value === 'string') return value;\n\n    // Ensure value is a valid number\n    if (isNaN(Number(value))) return '0';\n\n    // If we have format options, use them with Intl.NumberFormat\n    if (valueFormatOptions) {\n      return new Intl.NumberFormat('en-GB', valueFormatOptions).format(value);\n    }\n\n    // Default formatting with 2 decimal places\n    return new Intl.NumberFormat('en-GB', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(value);\n  };\n\n  // Determine the accent variant based on the trend\n  const getAccentVariant = (): 'teal' | 'green' | 'red' | 'blue' => {\n    if (trend === null) return 'blue';\n    if (trend > 0) return isInverse ? 'red' : 'green';\n    if (trend < 0) return isInverse ? 'green' : 'red';\n    return 'blue';\n  };\n\n  return (\n    <Card\n      sx={{\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        bgcolor: color,\n        position: 'relative',\n        overflow: 'hidden',\n        boxShadow: '0px 12px 24px rgba(0, 0, 0, 0.12), 0px 24px 32px rgba(0, 0, 0, 0.16)',\n        borderRadius: 2,\n        border: '1px solid rgba(0, 0, 0, 0.08)',\n        transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n        '&:hover': {\n          transform: 'translateY(-4px)',\n          boxShadow: '0px 16px 32px rgba(0, 0, 0, 0.16), 0px 32px 48px rgba(0, 0, 0, 0.2)',\n        },\n        ...sx\n      }}\n    >\n      <CardAccent\n        position=\"left\"\n        variant={getAccentVariant()}\n      />\n      <CardContent sx={{ flex: 1, position: 'relative', p: 3 }}>\n        {/* Card header with title and actions */}\n        <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 })}>\n          <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center' })}>\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\n              {title}\n            </Typography>\n\n            {description && (\n              <Tooltip title={description} arrow>\n                <IconButton size=\"small\" sx={{ ml: 0.5, p: 0 }}>\n                  <InfoOutlinedIcon fontSize=\"small\" color=\"action\" />\n                </IconButton>\n              </Tooltip>\n            )}\n          </SimpleBox>\n\n          {onMoreClick && (\n            <IconButton\n              size=\"small\"\n              onClick={(event) => onMoreClick(event)}\n              sx={{ marginRight: -1 }}\n            >\n              <MoreVertIcon fontSize=\"small\" />\n            </IconButton>\n          )}\n        </SimpleBox>\n\n        {/* Main content with value and icon */}\n        <SimpleBox\n          sx={createSx({\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            mt: 1\n          })}\n        >\n          <SimpleBox>\n            {loading ? (\n              <CircularProgress size={24} />\n            ) : (\n              <>\n                <Typography variant=\"h4\" component=\"div\" fontWeight=\"medium\">\n                  {prefix}{formatValue(value)}\n                </Typography>\n\n                {subtitle && (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {subtitle}\n                  </Typography>\n                )}\n              </>\n            )}\n          </SimpleBox>\n\n          {icon && (\n            <SimpleBox\n              sx={createSx({\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                bgcolor: (theme: any) => alpha(theme.palette.primary.main, 0.1),\n                color: 'primary.main',\n                borderRadius: '50%',\n                width: 48,\n                height: 48\n              })}\n            >\n              {icon}\n            </SimpleBox>\n          )}\n        </SimpleBox>\n\n        {/* Trend indicator */}\n        {trend !== null && (\n          <>\n            <Divider sx={{ my: 1.5, borderColor: 'divider' }} />\n\n            <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center' })}>\n              <SimpleBox\n                sx={createSx({\n                  display: 'flex',\n                  alignItems: 'center',\n                  color: trendInfo.color,\n                  mr: 1\n                })}\n              >\n                {trendInfo.icon}\n                <Typography\n                  variant=\"body2\"\n                  component=\"span\"\n                  fontWeight=\"medium\"\n                  sx={{ color: trendInfo.color, ml: 0.5 }}\n                >\n                  {formatTrend(trend)}\n                </Typography>\n              </SimpleBox>\n\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {trendLabel}\n              </Typography>\n            </SimpleBox>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default KPICard;\n","import React from 'react';\nimport {\n  Paper,\n  Typography,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  Collapse\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport MultiSelect, { MultiSelectOption } from '../../../components/common/MultiSelect';\nimport FilterPanel, { FilterDefinition, FilterType } from '../../../components/common/FilterPanel';\nimport { GroupByOption, AdvancedFilters } from './types';\n\n// Define a custom type for MultiSelect onChange handler\ntype MultiSelectChangeHandler = (value: (string | number)[]) => void;\n\ninterface DailyActionsFiltersProps {\n  startDate: Date;\n  endDate: Date;\n  setStartDate: (date: Date) => void;\n  setEndDate: (date: Date) => void;\n  selectedWhiteLabels: string[];\n  setSelectedWhiteLabels: MultiSelectChangeHandler;\n  whiteLabelsOptions: MultiSelectOption[];\n  whiteLabelsLoading?: boolean;\n  selectedCountries: string[];\n  setSelectedCountries: MultiSelectChangeHandler;\n  countriesOptions: MultiSelectOption[];\n  countriesLoading?: boolean;\n  groupBy: string;\n  setGroupBy: (groupBy: string) => void;\n  groupByOptions: GroupByOption[];\n  showAdvancedFilters: boolean;\n  setShowAdvancedFilters: (show: boolean) => void;\n  showFiltersPanel: boolean;\n  setShowFiltersPanel: (show: boolean) => void;\n  advancedFilters: AdvancedFilters;\n  setAdvancedFilters: (filters: AdvancedFilters) => void;\n  handleApplyFilters: () => void;\n  handleExport: () => void;\n  loading: boolean;\n  dataLength: number;\n}\n\nconst DailyActionsFilters: React.FC<DailyActionsFiltersProps> = ({\n  startDate,\n  endDate,\n  setStartDate,\n  setEndDate,\n  selectedWhiteLabels,\n  setSelectedWhiteLabels,\n  whiteLabelsOptions,\n  whiteLabelsLoading = false,\n  selectedCountries,\n  setSelectedCountries,\n  countriesOptions,\n  countriesLoading = false,\n  groupBy,\n  setGroupBy,\n  groupByOptions,\n  showAdvancedFilters,\n  setShowAdvancedFilters,\n  showFiltersPanel,\n  setShowFiltersPanel,\n  advancedFilters,\n  setAdvancedFilters,\n  handleApplyFilters,\n  handleExport,\n  loading,\n  dataLength\n}) => {\n  // Handle advanced filter toggle\n  const handleToggleAdvancedFilters = (): void => {\n    setShowAdvancedFilters(!showAdvancedFilters);\n  };\n\n  // Handle filters panel toggle\n  const handleToggleFiltersPanel = (): void => {\n    setShowFiltersPanel(!showFiltersPanel);\n  };\n\n  // Handle group by change\n  const handleGroupByChange = (event: SelectChangeEvent<string>): void => {\n    setGroupBy(event.target.value);\n  };\n\n  // Handle advanced filter changes\n  const handleAdvancedFilterChange = (filterName: string, value: any): void => {\n    setAdvancedFilters({\n      ...advancedFilters,\n      [filterName]: value\n    });\n  };\n\n  return (\n    <Paper sx={{ p: 3, mb: 4 }}>\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 16 }}>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <FilterListIcon style={{ marginRight: 8 }} />\n          <Typography variant=\"h6\">Filters</Typography>\n        </div>\n        <div>\n          <Button\n            color=\"primary\"\n            onClick={handleToggleAdvancedFilters}\n            endIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n            style={{ marginRight: 8 }}\n            disabled={!showFiltersPanel}\n          >\n            {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n          </Button>\n          <Button\n            color=\"primary\"\n            onClick={handleToggleFiltersPanel}\n            endIcon={showFiltersPanel ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          >\n            {showFiltersPanel ? 'Hide Filters' : 'Show Filters'}\n          </Button>\n        </div>\n      </div>\n      <Collapse in={showFiltersPanel}>\n        {/* Basic Filters */}\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => {\n                  if (newValue) setStartDate(newValue);\n                }}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => {\n                  if (newValue) setEndDate(newValue);\n                }}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <FormControl fullWidth>\n              <InputLabel id=\"group-by-label\">Group By</InputLabel>\n              <Select\n                labelId=\"group-by-label\"\n                id=\"group-by\"\n                value={groupBy}\n                label=\"Group By\"\n                onChange={handleGroupByChange}\n              >\n                {groupByOptions.map((option) => (\n                  <MenuItem key={option.id} value={option.id}>\n                    {option.name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <MultiSelect\n              label=\"Countries\"\n              options={countriesOptions}\n              value={selectedCountries as (string | number)[]}\n              onChange={setSelectedCountries}\n              placeholder=\"Select countries\"\n              loading={countriesLoading}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <MultiSelect\n              label=\"White Labels\"\n              options={whiteLabelsOptions}\n              value={selectedWhiteLabels as (string | number)[]}\n              onChange={setSelectedWhiteLabels}\n              placeholder=\"Select white labels\"\n              loading={whiteLabelsLoading}\n            />\n          </Grid>\n        </Grid>\n\n        {/* Advanced Filters */}\n        {showAdvancedFilters && (\n          <div style={{ marginTop: 24 }}>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n            <div>\n              {/* We'll implement a simpler version of the advanced filters for now */}\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                      label=\"Registration Date\"\n                      value={advancedFilters.registration || null}\n                      onChange={(newValue) => {\n                        handleAdvancedFilterChange('registration', newValue);\n                      }}\n                      slotProps={{ textField: { fullWidth: true } }}\n                    />\n                  </LocalizationProvider>\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                      label=\"First Time Deposit Date\"\n                      value={advancedFilters.firstTimeDeposit || null}\n                      onChange={(newValue) => {\n                        handleAdvancedFilterChange('firstTimeDeposit', newValue);\n                      }}\n                      slotProps={{ textField: { fullWidth: true } }}\n                    />\n                  </LocalizationProvider>\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Trackers\"\n                    value={advancedFilters.trackers || ''}\n                    onChange={(e) => handleAdvancedFilterChange('trackers', e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Promotion Code\"\n                    value={advancedFilters.promotionCode || ''}\n                    onChange={(e) => handleAdvancedFilterChange('promotionCode', e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Players (comma separated)\"\n                    value={advancedFilters.players || ''}\n                    onChange={(e) => handleAdvancedFilterChange('players', e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <FormControl fullWidth>\n                    <InputLabel id=\"sms-enabled-label\">SMS Enabled</InputLabel>\n                    <Select\n                      labelId=\"sms-enabled-label\"\n                      id=\"sms-enabled\"\n                      value={advancedFilters.smsEnabled || ''}\n                      label=\"SMS Enabled\"\n                      onChange={(e) => handleAdvancedFilterChange('smsEnabled', e.target.value)}\n                    >\n                      <MenuItem value=\"\">\n                        <em>Any</em>\n                      </MenuItem>\n                      <MenuItem value=\"Yes\">Yes</MenuItem>\n                      <MenuItem value=\"No\">No</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <FormControl fullWidth>\n                    <InputLabel id=\"mail-enabled-label\">Mail Enabled</InputLabel>\n                    <Select\n                      labelId=\"mail-enabled-label\"\n                      id=\"mail-enabled\"\n                      value={advancedFilters.mailEnabled || ''}\n                      label=\"Mail Enabled\"\n                      onChange={(e) => handleAdvancedFilterChange('mailEnabled', e.target.value)}\n                    >\n                      <MenuItem value=\"\">\n                        <em>Any</em>\n                      </MenuItem>\n                      <MenuItem value=\"Yes\">Yes</MenuItem>\n                      <MenuItem value=\"No\">No</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', marginTop: 24 }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<RefreshIcon />}\n            onClick={handleApplyFilters}\n            style={{ marginRight: 16 }}\n          >\n            Apply Filters\n          </Button>\n\n          <span>\n            <Button\n              variant=\"outlined\"\n              startIcon={<DownloadIcon />}\n              disabled={loading || dataLength === 0}\n              onClick={handleExport}\n            >\n              Export\n            </Button>\n          </span>\n        </div>\n      </Collapse>\n\n      {/* Compact Action Buttons - Only shown when filters are collapsed */}\n      {!showFiltersPanel && (\n        <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', marginTop: 8 }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            startIcon={<RefreshIcon />}\n            onClick={handleApplyFilters}\n            style={{ marginRight: 16 }}\n          >\n            Apply\n          </Button>\n\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            startIcon={<DownloadIcon />}\n            disabled={loading || dataLength === 0}\n            onClick={handleExport}\n          >\n            Export\n          </Button>\n        </div>\n      )}\n    </Paper>\n  );\n};\n\nexport default DailyActionsFilters;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Box,\n  IconButton,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n  Divider,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  SelectChangeEvent,\n  TextField\n} from '@mui/material';\nimport KPICard from '../../common/KPICard';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport SwapHorizIcon from '@mui/icons-material/SwapHoriz';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport PeopleAltIcon from '@mui/icons-material/PeopleAlt';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn';\nimport CasinoIcon from '@mui/icons-material/Casino';\nimport AccountBalanceIcon from '@mui/icons-material/AccountBalance';\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport RepeatIcon from '@mui/icons-material/Repeat';\nimport {\n  DailyActionsSummary,\n  SummaryMetricType,\n  ComparisonPeriodType,\n  MetricDefinition\n} from '../../../types/reports';\n\n// Available metrics with their definitions\nconst availableMetrics: MetricDefinition[] = [\n  {\n    id: 'totalPlayers',\n    label: 'Total Players',\n    description: 'Total number of unique players',\n    format: 'number',\n    icon: <PeopleAltIcon />,\n    defaultComparisonPeriod: 'previous'\n  },\n  {\n    id: 'newRegistrations',\n    label: 'New Registrations',\n    description: 'New player registrations',\n    format: 'number',\n    icon: <PersonAddIcon />,\n    defaultComparisonPeriod: 'previous'\n  },\n  {\n    id: 'totalDeposits',\n    label: 'Total Deposits',\n    description: 'Total deposit amount',\n    format: 'currency',\n    icon: <MonetizationOnIcon />,\n    defaultComparisonPeriod: 'previous'\n  },\n  {\n    id: 'totalBets',\n    label: 'Total Bets',\n    description: 'Total bet amount',\n    format: 'currency',\n    icon: <CasinoIcon />,\n    defaultComparisonPeriod: 'previous'\n  },\n  {\n    id: 'totalWithdrawals',\n    label: 'Total Withdrawals',\n    description: 'Total withdrawal amount',\n    format: 'currency',\n    icon: <AccountBalanceIcon />,\n    defaultComparisonPeriod: 'previous'\n  },\n  {\n    id: 'totalGGR',\n    label: 'Total GGR',\n    description: 'Gross Gaming Revenue',\n    format: 'currency',\n    icon: <TrendingUpIcon />,\n    defaultComparisonPeriod: 'previous'\n  },\n  {\n    id: 'avgBetAmount',\n    label: 'Avg. Bet Amount',\n    description: 'Average bet amount per player',\n    format: 'currency',\n    icon: <CasinoIcon />,\n    defaultComparisonPeriod: 'previous'\n  },\n  {\n    id: 'conversionRate',\n    label: 'Conversion Rate',\n    description: 'Percentage of players who made a deposit',\n    format: 'percentage',\n    icon: <RepeatIcon />,\n    defaultComparisonPeriod: 'previous'\n  },\n  {\n    id: 'avgSessionDuration',\n    label: 'Avg. Session Duration',\n    description: 'Average time spent by players',\n    format: 'time',\n    icon: <AccessTimeIcon />,\n    defaultComparisonPeriod: 'previous'\n  },\n  {\n    id: 'betCount',\n    label: 'Bet Count',\n    description: 'Total number of bets placed',\n    format: 'number',\n    icon: <CasinoIcon />,\n    defaultComparisonPeriod: 'previous'\n  }\n];\n\n// Comparison period options\nconst comparisonPeriodOptions = [\n  { value: 'previous', label: 'Previous Period' },\n  { value: 'lastWeek', label: 'Last Week' },\n  { value: 'lastMonth', label: 'Last Month' },\n  { value: 'lastYear', label: 'Last Year' },\n  { value: 'custom', label: 'Custom Period' }\n];\n\n// Default metrics to display\nconst defaultMetrics: SummaryMetricType[] = [\n  'totalPlayers',\n  'newRegistrations',\n  'totalDeposits',\n  'totalBets'\n];\n\ninterface ConfigurableSummaryCardsProps {\n  summary: DailyActionsSummary | null;\n  isLoading: boolean;\n  error: string | null;\n  selectedMetrics?: SummaryMetricType[];\n  comparisonPeriods?: Record<SummaryMetricType, ComparisonPeriodType>;\n  onMetricsChange?: (metrics: SummaryMetricType[]) => void;\n  onComparisonPeriodChange?: (metricId: SummaryMetricType, period: ComparisonPeriodType) => void;\n}\n\nconst ConfigurableSummaryCards: React.FC<ConfigurableSummaryCardsProps> = ({\n  summary,\n  isLoading,\n  error,\n  selectedMetrics: selectedMetricsProp,\n  comparisonPeriods: comparisonPeriodsProp,\n  onMetricsChange,\n  onComparisonPeriodChange\n}) => {\n  // State for selected metrics\n  const [selectedMetricsState, setSelectedMetricsState] = useState<SummaryMetricType[]>(defaultMetrics);\n  // Use prop if provided, otherwise use state\n  const selectedMetrics = selectedMetricsProp || selectedMetricsState;\n\n  // State for comparison periods for each metric\n  const [comparisonPeriodsState, setComparisonPeriodsState] = useState<Record<SummaryMetricType, ComparisonPeriodType>>(() => {\n    const periods: Record<SummaryMetricType, ComparisonPeriodType> = {} as Record<SummaryMetricType, ComparisonPeriodType>;\n    availableMetrics.forEach(metric => {\n      periods[metric.id] = metric.defaultComparisonPeriod;\n    });\n    return periods;\n  });\n  // Use prop if provided, otherwise use state\n  const comparisonPeriods = comparisonPeriodsProp || comparisonPeriodsState;\n\n  // State for menu anchor\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n  const [activeMetric, setActiveMetric] = useState<SummaryMetricType | null>(null);\n  const [currentEvent, setCurrentEvent] = useState<React.MouseEvent<HTMLElement> | null>(null);\n\n  // State for loading individual metrics\n  const [loadingMetric, setLoadingMetric] = useState<SummaryMetricType | null>(null);\n\n  // State for metric selection dialog\n  const [metricDialogOpen, setMetricDialogOpen] = useState(false);\n  const [availableMetricsDialog, setAvailableMetricsDialog] = useState<SummaryMetricType[]>([]);\n\n  // State for the metric being replaced (separate from activeMetric)\n  const [metricToReplace, setMetricToReplace] = useState<SummaryMetricType | null>(null);\n\n  // Initialize available metrics for dialog\n  useEffect(() => {\n    updateAvailableMetricsDialog();\n  }, [selectedMetrics]);\n\n  // Update available metrics when metricToReplace changes\n  useEffect(() => {\n    if (metricToReplace && metricDialogOpen) {\n      console.log('Metric to replace changed, updating available metrics dialog');\n      updateAvailableMetricsDialog();\n    }\n  }, [metricToReplace, metricDialogOpen]);\n\n  // Update available metrics for dialog\n  const updateAvailableMetricsDialog = () => {\n    // Show metrics that are not already selected, except for the one being replaced\n    const availableMetricsForDialog = availableMetrics\n      .filter(metric => {\n        // Include the metric if:\n        // 1. It's not already selected, OR\n        // 2. It's the one being replaced (which we'll filter out later)\n        return !selectedMetrics.includes(metric.id) || metric.id === metricToReplace;\n      })\n      // Then filter out the metric being replaced\n      .filter(metric => metric.id !== metricToReplace)\n      .map(metric => metric.id);\n\n    console.log('Available metrics for dialog:', availableMetricsForDialog);\n    console.log('Selected metrics:', selectedMetrics);\n    console.log('Metric to replace:', metricToReplace);\n\n    setAvailableMetricsDialog(availableMetricsForDialog);\n  };\n\n  // Update internal state when props change\n  useEffect(() => {\n    if (selectedMetricsProp) {\n      setSelectedMetricsState(selectedMetricsProp);\n    }\n  }, [selectedMetricsProp]);\n\n  useEffect(() => {\n    if (comparisonPeriodsProp) {\n      setComparisonPeriodsState(comparisonPeriodsProp);\n    }\n  }, [comparisonPeriodsProp]);\n\n  // Handle menu open\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, metricId: SummaryMetricType) => {\n    console.log('Menu opened for metric:', metricId);\n    console.log('Event target:', event.currentTarget);\n    setMenuAnchorEl(event.currentTarget);\n    setActiveMetric(metricId);\n    setMetricToReplace(metricId); // Store the metric to replace\n    setCurrentEvent(event);\n  };\n\n  // Handle menu close\n  const handleMenuClose = () => {\n    console.log('Closing menu');\n    setMenuAnchorEl(null);\n    // Only reset the active metric if the dialog is not open\n    if (!metricDialogOpen) {\n      console.log('Resetting active metric');\n      setActiveMetric(null);\n    } else {\n      console.log('Dialog is open, keeping active metric:', activeMetric);\n    }\n  };\n\n  // Handle comparison period change\n  const handleComparisonPeriodChange = (period: ComparisonPeriodType) => {\n    if (activeMetric) {\n      const newPeriods = { ...comparisonPeriods, [activeMetric]: period };\n\n      // If we're using internal state, update it\n      if (!comparisonPeriodsProp) {\n        setComparisonPeriodsState(newPeriods);\n      }\n\n      // Always call the callback if provided\n      if (onComparisonPeriodChange) {\n        onComparisonPeriodChange(activeMetric, period);\n      }\n    }\n    handleMenuClose();\n  };\n\n  // Handle metric dialog open\n  const handleMetricDialogOpen = () => {\n    console.log('Opening metric dialog');\n    console.log('Active metric before dialog open:', activeMetric);\n    console.log('Metric to replace:', metricToReplace);\n\n    // First set the dialog open state to true\n    setMetricDialogOpen(true);\n\n    // Then update available metrics\n    updateAvailableMetricsDialog();\n\n    // Close the menu\n    handleMenuClose();\n  };\n\n  // Handle metric dialog close\n  const handleMetricDialogClose = () => {\n    console.log('Closing metric dialog');\n    setMetricDialogOpen(false);\n    // Reset both the active metric and the metric to replace when the dialog is closed\n    console.log('Resetting active metric and metric to replace on dialog close');\n    setActiveMetric(null);\n    setMetricToReplace(null);\n  };\n\n  // Handle metric change\n  const handleMetricChange = (newMetric: SummaryMetricType) => {\n    // Use the stored metricToReplace state\n    if (!metricToReplace) {\n      console.log('No metric to replace set, cannot change metric');\n      return;\n    }\n\n    console.log('Changing metric:', metricToReplace, 'to', newMetric);\n\n    const newMetrics = selectedMetrics.map(m => m === metricToReplace ? newMetric : m);\n    console.log('New metrics:', newMetrics);\n\n    // If we're using internal state, update it\n    if (!selectedMetricsProp) {\n      setSelectedMetricsState(newMetrics);\n    }\n\n    // Always call the callback if provided\n    if (onMetricsChange) {\n      onMetricsChange(newMetrics);\n    }\n\n    // Set loading state for the new metric\n    setLoadingMetric(newMetric);\n\n    // Simulate a delay to show loading state\n    setTimeout(() => {\n      setLoadingMetric(null);\n    }, 500);\n\n    // No need to call handleMenuClose() here as it will be called by handleMetricDialogClose()\n  };\n\n  // Get trend value for a metric based on its comparison period\n  const getTrendValue = (metricId: SummaryMetricType): number | null => {\n    if (!summary) return null;\n\n    // Check if we have the new trends structure\n    if (summary.trends && summary.trends[metricId] && summary.trends[metricId]?.[comparisonPeriods[metricId]]) {\n      return summary.trends[metricId]?.[comparisonPeriods[metricId]] || null;\n    }\n\n    // Fallback to legacy trend fields\n    switch (metricId) {\n      case 'totalPlayers': return summary.playersTrend || null;\n      case 'newRegistrations': return summary.registrationsTrend || null;\n      case 'totalDeposits': return summary.depositsTrend || null;\n      case 'totalBets': return summary.betsTrend || null;\n      default: return null;\n    }\n  };\n\n  // Get trend label based on comparison period\n  const getTrendLabel = (metricId: SummaryMetricType): string => {\n    const period = comparisonPeriods[metricId];\n    switch (period) {\n      case 'previous': return 'vs previous period';\n      case 'lastWeek': return 'vs last week';\n      case 'lastMonth': return 'vs last month';\n      case 'lastYear': return 'vs last year';\n      case 'custom': return 'vs custom period';\n      default: return 'vs previous period';\n    }\n  };\n\n  return (\n    <>\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        {selectedMetrics.map((metricId) => {\n          const metricDef = availableMetrics.find(m => m.id === metricId);\n          if (!metricDef) return null;\n\n          // Get value based on metric type\n          let value: number | string = 0;\n          if (summary) {\n            if (metricId in summary) {\n              // Use the value from summary if available, otherwise use 0\n              const summaryValue = summary[metricId as keyof DailyActionsSummary];\n              // Make sure we only use number or string values\n              if (typeof summaryValue === 'number' || typeof summaryValue === 'string') {\n                value = summaryValue;\n              }\n            }\n          }\n\n          // Format value based on metric type\n          const isCurrency = metricDef.format === 'currency';\n          const isPercentage = metricDef.format === 'percentage';\n          const isTime = metricDef.format === 'time';\n\n          return (\n            <Grid item xs={12} sm={6} md={3} key={metricId}>\n              <KPICard\n                id={`metric-card-${metricId}`}\n                title={metricDef.label}\n                value={value}\n                trend={getTrendValue(metricId)}\n                trendLabel={getTrendLabel(metricId)}\n                icon={metricDef.icon}\n                loading={isLoading || loadingMetric === metricId}\n                error={error}\n                description={metricDef.description}\n                prefix={isPercentage ? '' : ''}\n                valueFormatOptions={\n                  isCurrency ? { style: 'currency', currency: 'GBP', minimumFractionDigits: 2, maximumFractionDigits: 2 } :\n                  isPercentage ? { style: 'percent', minimumFractionDigits: 2, maximumFractionDigits: 2 } :\n                  isTime ? { minimumFractionDigits: 2, maximumFractionDigits: 2 } :\n                  metricDef.format === 'number' ? { minimumFractionDigits: 0, maximumFractionDigits: 0 } :\n                  { minimumFractionDigits: 2, maximumFractionDigits: 2 }\n                }\n                onMoreClick={(event) => {\n                  // Use the actual event target\n                  handleMenuOpen(event, metricId);\n                }}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n\n      {/* Menu for metric options */}\n      <Menu\n        anchorEl={menuAnchorEl}\n        open={Boolean(menuAnchorEl)}\n        onClose={handleMenuClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem onClick={handleMetricDialogOpen}>\n          <ListItemIcon>\n            <SwapHorizIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Change Metric</ListItemText>\n        </MenuItem>\n\n        <Divider />\n\n        <Typography variant=\"caption\" sx={{ px: 2, py: 1, display: 'block', color: 'text.secondary' }}>\n          Compare To:\n        </Typography>\n\n        {comparisonPeriodOptions.map((option) => (\n          <MenuItem\n            key={option.value}\n            onClick={() => handleComparisonPeriodChange(option.value as ComparisonPeriodType)}\n            selected={activeMetric ? comparisonPeriods[activeMetric] === option.value : false}\n          >\n            <ListItemText inset>{option.label}</ListItemText>\n          </MenuItem>\n        ))}\n      </Menu>\n\n      {/* Dialog for metric selection */}\n      {/* Debugging logs moved outside of JSX */}\n      <Dialog\n        key={`metric-dialog-${metricToReplace || 'none'}`}\n        open={metricDialogOpen}\n        onClose={handleMetricDialogClose}\n        maxWidth=\"sm\"\n        fullWidth>\n        <DialogTitle>Change Metric</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n            Select a new metric to replace {metricToReplace ? availableMetrics.find(m => m.id === metricToReplace)?.label : ''}\n            {availableMetricsDialog.length === 0 && (\n              <Box sx={{ mt: 1, color: 'error.main' }}>\n                No available metrics to choose from. All metrics are already selected.\n              </Box>\n            )}\n          </Typography>\n\n          {/* Log for debugging */}\n          {/* Moved console.log outside of JSX */}\n          <Grid container spacing={2}>\n            {availableMetricsDialog.map((metricId) => {\n              // Debugging logs\n              const metric = availableMetrics.find(m => m.id === metricId);\n              if (!metric) {\n                return null;\n              }\n\n              return (\n                <Grid item xs={12} sm={6} key={metricId}>\n                  <Button\n                    variant=\"outlined\"\n                    fullWidth\n                    startIcon={metric.icon}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      console.log('Metric button clicked:', metricId);\n                      console.log('Metric to replace:', metricToReplace);\n\n                      // Call the handleMetricChange function with the new metric\n                      handleMetricChange(metricId);\n\n                      // Close the dialog\n                      handleMetricDialogClose();\n                    }}\n                    sx={{ justifyContent: 'flex-start', textAlign: 'left', py: 1 }}\n                  >\n                    <Box>\n                      <Typography variant=\"body2\" component=\"div\">\n                        {metric.label}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {metric.description}\n                      </Typography>\n                    </Box>\n                  </Button>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleMetricDialogClose}>Cancel</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default ConfigurableSummaryCards;\n"],"names":["_ref","options","value","onChange","label","placeholder","disabled","required","error","helperText","maxMenuHeight","searchable","showSelectAllOption","renderValue","size","width","id","name","sx","className","style","loading","fullWidth","searchTerm","setSearchTerm","useState","filteredOptions","filter","option","toLowerCase","includes","_jsxs","FormControl","children","_jsx","InputLabel","Select","labelId","multiple","input","OutlinedInput","Typography","color","MenuItem","display","alignItems","padding","CircularProgress","marginRight","variant","FormHelperText","length","minWidth","event","newValue","target","selected","flexWrap","gap","map","selectedValue","find","opt","toString","Chip","onDelete","valueToRemove","preventDefault","stopPropagation","val","onClick","e","deleteIcon","ClearIcon","fontSize","onMouseDown","opacity","onClose","handleClose","HTMLElement","classList","contains","closest","MenuProps","PaperProps","maxHeight","position","top","backgroundColor","zIndex","borderBottom","TextField","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","paddingLeft","paddingRight","paddingTop","paddingBottom","justifyContent","Button","handleSelectAll","selectableOptions","handleSelectNone","Checkbox","checked","some","ListItemText","primary","secondary","group","description","Tooltip","title","arrow","InfoOutlinedIcon","marginLeft","showWavePattern","thickness","patternOpacity","theme","useTheme","accentColor","getColor","teal","palette","main","purple","blue","info","green","success","amber","warning","red","positionStyles","getPositionStyles","left","right","height","bottom","accentStyle","_Fragment","backgroundImage","getWavePatternBackground","backgroundSize","backgroundPosition","backgroundRepeat","onExport","format","setFormat","ExportFormat","CSV","gutterBottom","Paper","marginBottom","component","RadioGroup","FormControlLabel","control","Radio","DescriptionIcon","EXCEL","TableChartIcon","PDF","PictureAsPdfIcon","marginTop","handleExport","data","visibleColumns","groupBy","hierarchicalGrouping","handleColumnVisibilityChange","onStateChange","onDrillDown","getColumns","row","groupValue","align","registrations","ftd","deposits","paidCashouts","type","ggrCasino","toFixed","ggrSport","ggrLive","totalGGR","p","EnhancedTable","columns","emptyMessage","idField","features","columnManagement","enabled","allowReordering","allowHiding","filtering","advancedFilter","export","grouping","hierarchical","defaultGroupByLevels","groupByLevels","sorting","pagination","initialState","groupByColumn","expandedGroups","visible","order","col","sticky","widths","join","subtitle","RouterLink","to","startIcon","FilterListIcon","trend","trendLabel","icon","onMoreClick","isInverse","prefix","valueFormatOptions","trendInfo","TrendingUpIcon","TrendingDownIcon","TrendingFlatIcon","Card","flexDirection","bgcolor","overflow","boxShadow","borderRadius","border","transition","transform","CardAccent","CardContent","flex","SimpleBox","createSx","mb","ml","MoreVertIcon","mt","fontWeight","undefined","isNaN","Number","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","formatValue","alpha","Divider","my","borderColor","mr","roundedValue","parseFloat","formatTrend","startDate","endDate","setStartDate","setEndDate","selectedWhiteLabels","setSelectedWhiteLabels","whiteLabelsOptions","whiteLabelsLoading","selectedCountries","setSelectedCountries","countriesOptions","countriesLoading","setGroupBy","groupByOptions","showAdvancedFilters","setShowAdvancedFilters","showFiltersPanel","setShowFiltersPanel","advancedFilters","setAdvancedFilters","handleApplyFilters","dataLength","handleAdvancedFilterChange","filterName","handleToggleAdvancedFilters","endIcon","ExpandLessIcon","ExpandMoreIcon","handleToggleFiltersPanel","Collapse","in","Grid","container","spacing","item","xs","sm","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","slotProps","textField","MultiSelect","registration","firstTimeDeposit","trackers","promotionCode","players","smsEnabled","mailEnabled","RefreshIcon","DownloadIcon","availableMetrics","PeopleAltIcon","defaultComparisonPeriod","PersonAddIcon","MonetizationOnIcon","CasinoIcon","AccountBalanceIcon","RepeatIcon","AccessTimeIcon","comparisonPeriodOptions","defaultMetrics","_availableMetrics$fin","summary","isLoading","selectedMetrics","selectedMetricsProp","comparisonPeriods","comparisonPeriodsProp","onMetricsChange","onComparisonPeriodChange","selectedMetricsState","setSelectedMetricsState","comparisonPeriodsState","setComparisonPeriodsState","periods","forEach","metric","menuAnchorEl","setMenuAnchorEl","activeMetric","setActiveMetric","currentEvent","setCurrentEvent","loadingMetric","setLoadingMetric","metricDialogOpen","setMetricDialogOpen","availableMetricsDialog","setAvailableMetricsDialog","metricToReplace","setMetricToReplace","useEffect","updateAvailableMetricsDialog","console","log","availableMetricsForDialog","handleMenuClose","handleMetricDialogClose","getTrendValue","metricId","_summary$trends$metri","_summary$trends$metri2","trends","playersTrend","registrationsTrend","depositsTrend","betsTrend","getTrendLabel","metricDef","m","summaryValue","isCurrency","isPercentage","isTime","KPICard","currency","handleMenuOpen","currentTarget","Menu","anchorEl","open","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","handleMetricDialogOpen","ListItemIcon","SwapHorizIcon","px","py","period","newPeriods","handleComparisonPeriodChange","inset","Dialog","maxWidth","DialogTitle","DialogContent","paragraph","Box","newMetric","newMetrics","setTimeout","handleMetricChange","textAlign","DialogActions"],"sourceRoot":""}