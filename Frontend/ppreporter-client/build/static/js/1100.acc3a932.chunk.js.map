{"version":3,"file":"static/js/1100.acc3a932.chunk.js","mappings":"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","sources":["pages/showcase/reports/DailyActionsPage.tsx","components/common/FilterPanel.tsx","../node_modules/@mui/icons-material/Save.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Collapse\n} from '@mui/material';\nimport { EnhancedTable } from '../../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../../components/tables/enhanced/types';\nimport FilterPanel, { FilterDefinition, FilterType } from '../../../components/common/FilterPanel';\nimport MultiSelect, { MultiSelectOption } from '../../../components/common/MultiSelect';\nimport ReportExport from '../../../components/reports/ReportExport';\nimport { ConfigurableSummaryCards } from '../../../components/reports/daily-actions';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { format, subDays } from 'date-fns';\nimport { formatDate as formatDateUtil } from '../../../utils/formatters';\nimport { FEATURES } from '../../../config/constants';\nimport dailyActionsService from '../../../services/api/dailyActionsService';\n// Import the ReportFilters type from the service file\nimport { ReportFilters } from '../../../services/api/types';\nimport { DailyActionsSummary, SummaryMetricType, ComparisonPeriodType } from '../../../types/reports';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\n\n// Types\ninterface WhiteLabel {\n  id: string;\n  name: string;\n}\n\ninterface DailyAction {\n  id: string;\n  date: string;\n  whiteLabelId: number;\n  whiteLabelName: string;\n  registrations: number;\n  ftd: number;\n  deposits: number;\n  paidCashouts: number;\n  betsCasino?: number;\n  winsCasino?: number;\n  betsSport?: number;\n  winsSport?: number;\n  betsLive?: number;\n  winsLive?: number;\n  betsBingo?: number;\n  winsBingo?: number;\n  ggrCasino: number;\n  ggrSport: number;\n  ggrLive: number;\n  ggrBingo?: number;\n  totalGGR: number;\n  // Additional properties for metrics\n  bets?: number;\n  uniquePlayers?: number;\n  // Additional properties for grouped data\n  groupKey?: string;\n  groupValue?: string;\n  // Additional properties for other grouping dimensions\n  country?: string;\n  tracker?: string;\n  currency?: string;\n  gender?: string;\n  platform?: string;\n  ranking?: string;\n}\n\n// Using the DailyActionsSummary interface from types/reports.ts\ninterface Summary extends DailyActionsSummary {\n  totalFTD: number;\n  totalCashouts: number;\n  // For backward compatibility with existing code\n  totalRegistrations?: number;\n}\n\ninterface Filters {\n  startDate: string;\n  endDate: string;\n  whiteLabelIds?: number[]; // Changed to match backend's expectation of a list\n  countryIds?: string[]; // Added country IDs for filtering\n  groupBy?: number; // Changed to number to match backend's GroupByOption enum\n\n  // Advanced filters - Date filters\n  registrationDate?: string;\n  firstDepositDate?: string;\n  lastDepositDate?: string;\n  lastLoginDate?: string;\n\n  // Advanced filters - String filters\n  trackers?: string;\n  promotionCode?: string;\n  playerIds?: string[];\n\n  // Advanced filters - Array filters\n  playModes?: string[];\n  platforms?: string[];\n  statuses?: string[];\n  genders?: string[];\n  currencies?: string[];\n\n  // Advanced filters - Boolean filters\n  smsEnabled?: boolean;\n  mailEnabled?: boolean;\n  phoneEnabled?: boolean;\n  postEnabled?: boolean;\n  bonusEnabled?: boolean;\n}\n\ninterface Country {\n  id: string;\n  name: string;\n}\n\nconst DailyActionsPage: React.FC = () => {\n  // State for filters - use yesterday and today as default date range\n  const [startDate, setStartDate] = useState<Date>(subDays(new Date(), 1));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n\n  // White Label filter state\n  const [selectedWhiteLabels, setSelectedWhiteLabels] = useState<string[]>([]);\n  const [whiteLabels, setWhiteLabels] = useState<WhiteLabel[]>([]);\n  const [whiteLabelsOptions, setWhiteLabelsOptions] = useState<MultiSelectOption[]>([]);\n\n  // Country filter state\n  const [selectedCountries, setSelectedCountries] = useState<string[]>([]);\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [countriesOptions, setCountriesOptions] = useState<MultiSelectOption[]>([]);\n\n  const [groupBy, setGroupBy] = useState<string>('Day');\n  // Group By options - when any option is selected,\n  // the table will show only the grouped field and sum all numerical values\n  const [groupByOptions, setGroupByOptions] = useState<{id: string, name: string}[]>([\n    { id: 'Day', name: 'Day' },\n    { id: 'Month', name: 'Month' },\n    { id: 'Year', name: 'Year' },\n    { id: 'Label', name: 'White Label' },\n    { id: 'Player', name: 'Player' },\n    { id: 'Country', name: 'Country' },\n    { id: 'Tracker', name: 'Tracker' },\n    { id: 'Currency', name: 'Currency' },\n    { id: 'Gender', name: 'Gender' },\n    { id: 'Platform', name: 'Platform' },\n    { id: 'Ranking', name: 'Ranking' }\n  ]);\n\n  // State for data\n  const [dailyActions, setDailyActions] = useState<DailyAction[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Removed sorting and pagination state as they'll be handled by UnifiedDataTable\n\n  // State for advanced features\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState<boolean>(false);\n  const [showFiltersPanel, setShowFiltersPanel] = useState<boolean>(true); // State for collapsible filters panel\n  const [showExportDialog, setShowExportDialog] = useState<boolean>(false);\n  const [showColumnSelector, setShowColumnSelector] = useState<boolean>(false);\n  const [visibleColumns, setVisibleColumns] = useState<string[]>([\n    'groupValue', 'registrations', 'ftd', 'deposits', 'paidCashouts',\n    'ggrCasino', 'ggrSport', 'ggrLive', 'totalGGR'\n  ]);\n  const [advancedFilters, setAdvancedFilters] = useState<Record<string, any>>({});\n\n  // State for summary metrics\n  const [summary, setSummary] = useState<Summary>({\n    totalPlayers: 0,\n    newRegistrations: 0,\n    totalDeposits: 0,\n    totalBets: 0,\n    totalFTD: 0,\n    totalCashouts: 0,\n    totalGGR: 0,\n    totalRegistrations: 0, // For backward compatibility\n    playersTrend: null,\n    registrationsTrend: null,\n    depositsTrend: null,\n    betsTrend: null,\n    // Initialize trends object for new comparison periods\n    trends: {\n      totalPlayers: { previous: 0, lastWeek: 0, lastMonth: 0, lastYear: 0 },\n      newRegistrations: { previous: 0, lastWeek: 0, lastMonth: 0, lastYear: 0 },\n      totalDeposits: { previous: 0, lastWeek: 0, lastMonth: 0, lastYear: 0 },\n      totalBets: { previous: 0, lastWeek: 0, lastMonth: 0, lastYear: 0 }\n    }\n  });\n\n  // State for configurable summary cards\n  const [selectedMetrics, setSelectedMetrics] = useState<SummaryMetricType[]>([\n    'totalPlayers', 'newRegistrations', 'totalDeposits', 'totalBets'\n  ]);\n\n  // State for comparison periods\n  const [comparisonPeriods, setComparisonPeriods] = useState<Record<SummaryMetricType, ComparisonPeriodType>>({\n    totalPlayers: 'previous',\n    newRegistrations: 'previous',\n    totalDeposits: 'previous',\n    totalBets: 'previous',\n    totalWithdrawals: 'previous',\n    totalGGR: 'previous',\n    avgBetAmount: 'previous',\n    conversionRate: 'previous',\n    retentionRate: 'previous',\n    activeUsers: 'previous',\n    avgSessionDuration: 'previous',\n    betCount: 'previous',\n    totalFTD: 'previous',\n    totalCashouts: 'previous'\n  });\n\n  // We'll fetch countries from the API instead of using mock data\n\n  // Fetch metadata (white labels and countries) on component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        console.log('[DAILY ACTIONS PAGE] Fetching metadata');\n\n        // Skip mock data and always use the API\n        console.log('[DAILY ACTIONS PAGE] Skipping mock data for metadata, always using real API');\n\n        // Fall back to service if mock data is not available\n        const data = await dailyActionsService.getMetadata();\n        console.log('[DAILY ACTIONS PAGE] Got metadata from service:', data);\n\n        // Handle white labels\n        if (data && data.whiteLabels) {\n          console.log('[DAILY ACTIONS PAGE] Got white labels from service:', data.whiteLabels);\n          const fetchedWhiteLabels = data.whiteLabels || [];\n          setWhiteLabels(fetchedWhiteLabels);\n\n          // Convert white labels to MultiSelect options\n          const options = fetchedWhiteLabels.map((wl: WhiteLabel) => ({\n            value: wl.id,\n            label: wl.name\n          }));\n          setWhiteLabelsOptions(options);\n        } else {\n          console.log('[DAILY ACTIONS PAGE] No white labels found in API response');\n          setWhiteLabels([]);\n          setWhiteLabelsOptions([]);\n        }\n\n        // Handle countries\n        if (data && data.countries) {\n          console.log('[DAILY ACTIONS PAGE] Got countries from service:', data.countries);\n          const fetchedCountries = data.countries || [];\n          setCountries(fetchedCountries);\n\n          // Convert countries to MultiSelect options\n          const countryOptions = fetchedCountries.map((country: Country) => ({\n            value: country.id,\n            label: country.name\n          }));\n          setCountriesOptions(countryOptions);\n        } else {\n          console.log('[DAILY ACTIONS PAGE] No countries found in API response');\n          setCountries([]);\n          setCountriesOptions([]);\n        }\n      } catch (err) {\n        console.error('[DAILY ACTIONS PAGE] Error fetching metadata:', err);\n        setError('Failed to load metadata. Please try again later.');\n      }\n    };\n\n    // We'll fetch countries from the API in the same call that gets white labels\n    // The metadata endpoint should return both white labels and countries\n\n    fetchMetadata();\n  }, []);\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    // Define a function to fetch data on mount to avoid dependency issues\n    const fetchInitialData = async () => {\n      console.log('[DAILY ACTIONS PAGE] Fetching initial data');\n      await fetchDailyActions();\n    };\n\n    // Set a small delay to ensure the component is fully mounted\n    const timer = setTimeout(() => {\n      fetchInitialData();\n    }, 100);\n\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Add a useEffect to recalculate summary whenever dailyActions changes\n  useEffect(() => {\n    if (dailyActions.length > 0) {\n      console.log('[DAILY ACTIONS PAGE] Recalculating summary from dailyActions data');\n      console.log('[DAILY ACTIONS PAGE] dailyActions length:', dailyActions.length);\n\n      // Calculate summary metrics directly from the table data\n      const registrations = dailyActions.reduce((sum: number, item: DailyAction) => sum + (item.registrations || 0), 0);\n      const deposits = dailyActions.reduce((sum: number, item: DailyAction) => sum + (item.deposits || 0), 0);\n      const ftd = dailyActions.reduce((sum: number, item: DailyAction) => sum + (item.ftd || 0), 0);\n      const cashouts = dailyActions.reduce((sum: number, item: DailyAction) => sum + (item.paidCashouts || 0), 0);\n      const totalGGR = dailyActions.reduce((sum: number, item: DailyAction) => sum + (item.totalGGR || 0), 0);\n\n      // Calculate bets from betsCasino, betsSport, betsLive, betsBingo if bets is not available\n      const bets = dailyActions.reduce((sum: number, item: DailyAction) => {\n        if (item.bets !== undefined) return sum + item.bets;\n        // Calculate from individual bet types\n        const totalBets = (item.betsCasino || 0) + (item.betsSport || 0) + (item.betsLive || 0) + (item.betsBingo || 0);\n        return sum + totalBets;\n      }, 0);\n\n      // Use uniquePlayers if available, otherwise estimate from registrations\n      const players = dailyActions.reduce((sum: number, item: DailyAction) => {\n        if (item.uniquePlayers !== undefined) return sum + item.uniquePlayers;\n        // Fallback to registrations as an approximation\n        return sum + (item.registrations || 0);\n      }, 0);\n\n      // Calculate additional metrics\n      const avgBetAmount = players > 0 ? bets / players : 0;\n      const conversionRate = registrations > 0 ? (ftd / registrations) * 100 : 0;\n\n      // Generate trend values\n      const generateTrend = () => (Math.random() * 20 - 10); // Random value between -10 and 10\n\n      const summaryData: Summary = {\n        totalPlayers: players,\n        newRegistrations: registrations,\n        totalRegistrations: registrations, // For backward compatibility\n        totalDeposits: deposits,\n        totalBets: bets,\n        totalFTD: ftd,\n        totalCashouts: cashouts,\n        totalGGR: totalGGR,\n        avgBetAmount: avgBetAmount,\n        conversionRate: conversionRate,\n        playersTrend: generateTrend(),\n        registrationsTrend: generateTrend(),\n        depositsTrend: generateTrend(),\n        betsTrend: generateTrend(),\n        trends: {\n          totalPlayers: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          newRegistrations: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          totalDeposits: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          totalBets: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          totalGGR: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          avgBetAmount: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          conversionRate: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          retentionRate: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          activeUsers: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          avgSessionDuration: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          betCount: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          // Add totalFTD and totalCashouts to the trends object\n          totalFTD: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n          totalCashouts: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() }\n        }\n      };\n\n      console.log('[DAILY ACTIONS PAGE] Calculated summary:', summaryData);\n      setSummary(summaryData);\n    }\n  }, [dailyActions]);\n\n  // Fetch daily actions data\n  const fetchDailyActions = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Format dates for API\n      const formattedStartDate = format(startDate, 'yyyy-MM-dd');\n      const formattedEndDate = format(endDate, 'yyyy-MM-dd');\n\n      // Create filters object\n      const filters: Filters = {\n        startDate: formattedStartDate,\n        endDate: formattedEndDate,\n        // Convert groupBy string to the numeric value expected by the backend\n        // The backend expects a GroupByOption enum value (Day=0, Month=1, Year=2, Label=3, etc.)\n        groupBy: convertGroupByToBackendValue(groupBy)\n      };\n\n      // Add white label filters if any are selected\n      if (selectedWhiteLabels && selectedWhiteLabels.length > 0) {\n        console.log(`[DAILY ACTIONS PAGE] Filtering by white label IDs:`, selectedWhiteLabels);\n        // The backend expects a list of white label IDs\n        filters.whiteLabelIds = selectedWhiteLabels.map(id => parseInt(id));\n      } else {\n        console.log('[DAILY ACTIONS PAGE] No white label filter applied');\n      }\n\n      // Add country filters if any are selected\n      if (selectedCountries && selectedCountries.length > 0) {\n        console.log(`[DAILY ACTIONS PAGE] Filtering by country IDs:`, selectedCountries);\n        // The backend expects a list of country IDs\n        filters.countryIds = selectedCountries;\n      } else {\n        console.log('[DAILY ACTIONS PAGE] No country filter applied');\n      }\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[DAILY ACTIONS PAGE] Adding advanced filters:', advancedFilters);\n\n        // Process date filters\n        if (advancedFilters.registration) {\n          filters.registrationDate = format(advancedFilters.registration, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.firstTimeDeposit) {\n          filters.firstDepositDate = format(advancedFilters.firstTimeDeposit, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastDepositDate) {\n          filters.lastDepositDate = format(advancedFilters.lastDepositDate, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastLogin) {\n          filters.lastLoginDate = format(advancedFilters.lastLogin, 'yyyy-MM-dd');\n        }\n\n        // Process string filters\n        if (advancedFilters.trackers) {\n          filters.trackers = advancedFilters.trackers;\n        }\n        if (advancedFilters.promotionCode) {\n          filters.promotionCode = advancedFilters.promotionCode;\n        }\n        if (advancedFilters.players) {\n          filters.playerIds = advancedFilters.players.split(',').map((id: string) => id.trim());\n        }\n\n        // Process array filters\n        if (advancedFilters.regPlayMode && advancedFilters.regPlayMode.length > 0) {\n          filters.playModes = advancedFilters.regPlayMode;\n        }\n        if (advancedFilters.platform && advancedFilters.platform.length > 0) {\n          filters.platforms = advancedFilters.platform;\n        }\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          filters.statuses = advancedFilters.status;\n        }\n        if (advancedFilters.gender && advancedFilters.gender.length > 0) {\n          filters.genders = advancedFilters.gender;\n        }\n        if (advancedFilters.currency && advancedFilters.currency.length > 0) {\n          filters.currencies = advancedFilters.currency;\n        }\n\n        // Process boolean filters\n        if (advancedFilters.smsEnabled) {\n          filters.smsEnabled = advancedFilters.smsEnabled === 'Yes';\n        }\n        if (advancedFilters.mailEnabled) {\n          filters.mailEnabled = advancedFilters.mailEnabled === 'Yes';\n        }\n        if (advancedFilters.phoneEnabled) {\n          filters.phoneEnabled = advancedFilters.phoneEnabled === 'Yes';\n        }\n        if (advancedFilters.postEnabled) {\n          filters.postEnabled = advancedFilters.postEnabled === 'Yes';\n        }\n        if (advancedFilters.bonusEnabled) {\n          filters.bonusEnabled = advancedFilters.bonusEnabled === 'Yes';\n        }\n      }\n\n      console.log(`[DAILY ACTIONS PAGE] Grouping by: ${groupBy} (backend value: ${filters.groupBy})`);\n\n      // Log a message about the grouping behavior\n      console.log(`[DAILY ACTIONS PAGE] Using grouped view by ${groupBy} - numerical values will be summed`);\n\n      console.log('[DAILY ACTIONS PAGE] Starting data fetch with filters:', filters);\n\n      // Skip mock data and always use the API\n      console.log('[DAILY ACTIONS PAGE] Skipping mock data, always using real API');\n\n      // Always use the filtered-grouped endpoint for consistent behavior\n      try {\n        console.log('[DAILY ACTIONS PAGE] Fetching data with filters:', filters);\n\n        // Always use the filtered-grouped endpoint for all groupBy options\n        console.log('[DAILY ACTIONS PAGE] Using getGroupedData for groupBy:', groupBy);\n\n        // Add more detailed logging for debugging\n        console.log('[DAILY ACTIONS PAGE] Endpoint URL:', '/reports/daily-actions/filtered-grouped');\n        console.log('[DAILY ACTIONS PAGE] Request payload:', JSON.stringify(filters, null, 2));\n\n        // Make the API call\n        const response = await dailyActionsService.getGroupedData(filters);\n\n        // Log the full response for debugging\n        console.log('[DAILY ACTIONS PAGE] Raw response:', JSON.stringify(response, null, 2));\n\n        // Check if the response has the expected structure\n        if (response && response.data) {\n          console.log('[DAILY ACTIONS PAGE] Response data details:', {\n            count: response.data.length,\n            firstItem: response.data[0],\n            groupBy: groupBy,\n            backendGroupBy: filters.groupBy,\n            hasGroupValue: response.data[0]?.groupValue !== undefined,\n            hasGroupKey: response.data[0]?.groupKey !== undefined,\n            groupValues: response.data.map((item: DailyAction) => item.groupValue).filter(Boolean).slice(0, 5),\n            uniqueWhiteLabelNames: Array.from(new Set(response.data.map((item: DailyAction) => item.whiteLabelName))).slice(0, 10)\n          });\n\n          // If we're grouping by Label, check if we have duplicate white label names\n          if (groupBy === 'Label') {\n            const whiteLabelCounts = response.data.reduce((acc: {[key: string]: number}, item: DailyAction) => {\n              const name = item.whiteLabelName || 'Unknown';\n              acc[name] = (acc[name] || 0) + 1;\n              return acc;\n            }, {});\n\n            const duplicates = Object.entries(whiteLabelCounts)\n              .filter(([_, count]) => (count as number) > 1)\n              .map(([name, count]) => `${name} (${count as number})`);\n\n            if (duplicates.length > 0) {\n              console.log('[DAILY ACTIONS PAGE] Found duplicate white label names:', duplicates);\n            }\n          }\n\n          // Set the daily actions data\n          setDailyActions(response.data);\n\n          // Log the data for debugging\n          console.log('[DAILY ACTIONS PAGE] Setting dailyActions data:', response.data);\n          console.log('[DAILY ACTIONS PAGE] Data length:', response.data.length);\n\n          // Set summary metrics if available in the response\n          if (response.summary) {\n            setSummary(response.summary);\n          } else {\n            // Calculate summary metrics directly from the table data\n            const registrations = response.data.reduce((sum: number, item: DailyAction) => sum + (item.registrations || 0), 0);\n            const deposits = response.data.reduce((sum: number, item: DailyAction) => sum + (item.deposits || 0), 0);\n            const ftd = response.data.reduce((sum: number, item: DailyAction) => sum + (item.ftd || 0), 0);\n            const cashouts = response.data.reduce((sum: number, item: DailyAction) => sum + (item.paidCashouts || 0), 0);\n            const totalGGR = response.data.reduce((sum: number, item: DailyAction) => sum + (item.totalGGR || 0), 0);\n\n            // Calculate bets from betsCasino, betsSport, betsLive, betsBingo if bets is not available\n            const bets = response.data.reduce((sum: number, item: DailyAction) => {\n              if (item.bets !== undefined) return sum + item.bets;\n              // Calculate from individual bet types\n              const totalBets = (item.betsCasino || 0) + (item.betsSport || 0) + (item.betsLive || 0) + (item.betsBingo || 0);\n              return sum + totalBets;\n            }, 0);\n\n            // Use uniquePlayers if available, otherwise estimate from registrations\n            const players = response.data.reduce((sum: number, item: DailyAction) => {\n              if (item.uniquePlayers !== undefined) return sum + item.uniquePlayers;\n              // Fallback to registrations as an approximation\n              return sum + (item.registrations || 0);\n            }, 0);\n\n            // Calculate additional metrics\n            const avgBetAmount = players > 0 ? bets / players : 0;\n            const conversionRate = registrations > 0 ? (ftd / registrations) * 100 : 0;\n\n            // Calculate trends based on previous data if available\n            // For now, we'll use random values as placeholders\n            // In a real implementation, we would compare with historical data\n            const generateTrend = () => (Math.random() * 20) - 10; // Random value between -10 and 10\n\n            const summaryData: Summary = {\n              totalPlayers: players,\n              newRegistrations: registrations,\n              totalRegistrations: registrations, // For backward compatibility\n              totalDeposits: deposits,\n              totalBets: bets,\n              totalFTD: ftd,\n              totalCashouts: cashouts,\n              totalGGR: totalGGR,\n              avgBetAmount: avgBetAmount,\n              conversionRate: conversionRate,\n              playersTrend: generateTrend(),\n              registrationsTrend: generateTrend(),\n              depositsTrend: generateTrend(),\n              betsTrend: generateTrend(),\n              trends: {\n                totalPlayers: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                newRegistrations: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                totalDeposits: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                totalBets: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                totalGGR: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                avgBetAmount: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                conversionRate: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                retentionRate: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                activeUsers: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                avgSessionDuration: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                betCount: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                // Add totalFTD and totalCashouts to the trends object\n                totalFTD: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() },\n                totalCashouts: { previous: generateTrend(), lastWeek: generateTrend(), lastMonth: generateTrend(), lastYear: generateTrend() }\n              }\n            };\n\n            setSummary(summaryData);\n          }\n        } else {\n          console.error('[DAILY ACTIONS PAGE] Invalid response format:', response);\n          setError('Invalid response format from the server');\n        }\n      } catch (innerErr) {\n        console.error('[DAILY ACTIONS PAGE] Error in inner try block:', innerErr);\n\n        // Log the error but don't fall back to mock data\n        console.error('[DAILY ACTIONS PAGE] API error:', innerErr);\n        setError('Error connecting to API. Please check your network connection and try again.');\n\n        throw innerErr; // Re-throw to be caught by the outer catch block\n      }\n    } catch (err) {\n      console.error('[DAILY ACTIONS PAGE] Error fetching daily actions:', err);\n\n      // Provide a more user-friendly error message\n      const errorString = String(err);\n      const errorMessage = errorString.includes('Network error')\n        ? 'Network error: Unable to connect to the API server. Please check your connection or try again later.'\n        : 'Failed to load daily actions data. Please try again later.';\n\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = (): void => {\n    console.log('[DAILY ACTIONS PAGE] Apply filters button clicked');\n\n    // Combine basic filters with advanced filters if they exist\n    const combinedFilters = {\n      startDate: format(startDate, 'yyyy-MM-dd'),\n      endDate: format(endDate, 'yyyy-MM-dd'),\n      selectedWhiteLabels,\n      selectedCountries,\n      ...advancedFilters\n    };\n\n    console.log('[DAILY ACTIONS PAGE] Current filters:', combinedFilters);\n    fetchDailyActions();\n  };\n\n  // Handle white labels change\n  const handleWhiteLabelsChange = (values: (string | number)[]): void => {\n    console.log(`[DAILY ACTIONS PAGE] White labels changed to:`, values);\n    // Convert all values to strings to ensure consistent handling\n    const stringValues = values.map(v => v.toString());\n    setSelectedWhiteLabels(stringValues);\n\n    // Log the updated state for debugging\n    console.log(`[DAILY ACTIONS PAGE] Updated selectedWhiteLabels:`, stringValues);\n  };\n\n  // Handle countries change\n  const handleCountriesChange = (values: (string | number)[]): void => {\n    console.log(`[DAILY ACTIONS PAGE] Countries changed to:`, values);\n    // Convert all values to strings to ensure consistent handling\n    const stringValues = values.map(v => v.toString());\n    setSelectedCountries(stringValues);\n\n    // Log the updated state for debugging\n    console.log(`[DAILY ACTIONS PAGE] Updated selectedCountries:`, stringValues);\n  };\n\n  // Handle group by change\n  const handleGroupByChange = (event: SelectChangeEvent): void => {\n    console.log(`[DAILY ACTIONS PAGE] Group by changed to: ${event.target.value}`);\n    setGroupBy(event.target.value);\n  };\n\n  // Handle export button click\n  const handleExport = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      console.log('[DAILY ACTIONS PAGE] Exporting data with filters:', {\n        startDate: format(startDate, 'yyyy-MM-dd'),\n        endDate: format(endDate, 'yyyy-MM-dd'),\n        selectedWhiteLabels,\n        selectedCountries,\n        groupBy\n      });\n\n      // Create filters object\n      const filters: ReportFilters = {\n        startDate: format(startDate, 'yyyy-MM-dd'),\n        endDate: format(endDate, 'yyyy-MM-dd'),\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => parseInt(id)) : undefined,\n        countryIds: selectedCountries.length > 0 ? selectedCountries : undefined,\n        groupBy: convertGroupByToBackendValue(groupBy)\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[DAILY ACTIONS PAGE] Adding advanced filters to export:', advancedFilters);\n\n        // Process date filters\n        if (advancedFilters.registration) {\n          filters.registrationDate = format(advancedFilters.registration, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.firstTimeDeposit) {\n          filters.firstDepositDate = format(advancedFilters.firstTimeDeposit, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastDepositDate) {\n          filters.lastDepositDate = format(advancedFilters.lastDepositDate, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastLogin) {\n          filters.lastLoginDate = format(advancedFilters.lastLogin, 'yyyy-MM-dd');\n        }\n\n        // Process string filters\n        if (advancedFilters.trackers) {\n          filters.trackers = advancedFilters.trackers;\n        }\n        if (advancedFilters.promotionCode) {\n          filters.promotionCode = advancedFilters.promotionCode;\n        }\n        if (advancedFilters.players) {\n          filters.playerIds = advancedFilters.players.split(',').map((id: string) => id.trim());\n        }\n\n        // Process array filters\n        if (advancedFilters.regPlayMode && advancedFilters.regPlayMode.length > 0) {\n          filters.playModes = advancedFilters.regPlayMode;\n        }\n        if (advancedFilters.platform && advancedFilters.platform.length > 0) {\n          filters.platforms = advancedFilters.platform;\n        }\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          filters.statuses = advancedFilters.status;\n        }\n        if (advancedFilters.gender && advancedFilters.gender.length > 0) {\n          filters.genders = advancedFilters.gender;\n        }\n        if (advancedFilters.currency && advancedFilters.currency.length > 0) {\n          filters.currencies = advancedFilters.currency;\n        }\n\n        // Process boolean filters\n        if (advancedFilters.smsEnabled) {\n          filters.smsEnabled = advancedFilters.smsEnabled === 'Yes';\n        }\n        if (advancedFilters.mailEnabled) {\n          filters.mailEnabled = advancedFilters.mailEnabled === 'Yes';\n        }\n        if (advancedFilters.phoneEnabled) {\n          filters.phoneEnabled = advancedFilters.phoneEnabled === 'Yes';\n        }\n        if (advancedFilters.postEnabled) {\n          filters.postEnabled = advancedFilters.postEnabled === 'Yes';\n        }\n        if (advancedFilters.bonusEnabled) {\n          filters.bonusEnabled = advancedFilters.bonusEnabled === 'Yes';\n        }\n      }\n\n      // Export the data\n      const blob = await dailyActionsService.exportFilteredReport(filters, 'csv');\n\n      // Create a download link\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `DailyActions_${format(startDate, 'yyyyMMdd')}_${format(endDate, 'yyyyMMdd')}_${groupBy}.csv`;\n      document.body.appendChild(a);\n      a.click();\n\n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('[DAILY ACTIONS PAGE] Error exporting data:', error);\n      setError('Failed to export data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format currency values\n  const formatCurrency = (value: number): string => {\n    return new Intl.NumberFormat('en-GB', {\n      style: 'currency',\n      currency: 'GBP',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(value);\n  };\n\n  // Handle metric change in configurable summary cards\n  const handleMetricsChange = (metrics: SummaryMetricType[]) => {\n    console.log('[DAILY ACTIONS PAGE] Metrics changed:', metrics);\n\n    // Find any new metrics that were added\n    const newMetrics = metrics.filter(m => !selectedMetrics.includes(m));\n\n    // Immediately update the summary with default values for any new metrics\n    if (newMetrics.length > 0) {\n      console.log('[DAILY ACTIONS PAGE] New metrics added:', newMetrics);\n\n      // Create a copy of the current summary\n      const updatedSummary = { ...summary };\n\n      // Calculate values for new metrics from the actual table data\n      newMetrics.forEach(metricId => {\n        // Calculate values based on metric type using the dailyActions data\n        switch(metricId) {\n          case 'totalPlayers':\n            // Use uniquePlayers if available, otherwise estimate from registrations\n            updatedSummary.totalPlayers = dailyActions.reduce((sum: number, item: DailyAction) => {\n              if (item.uniquePlayers !== undefined) return sum + item.uniquePlayers;\n              // Fallback to registrations as an approximation\n              return sum + (item.registrations || 0);\n            }, 0);\n            break;\n          case 'newRegistrations':\n            updatedSummary.newRegistrations = dailyActions.reduce((sum: number, item: DailyAction) =>\n              sum + (item.registrations || 0), 0);\n            break;\n          case 'totalDeposits':\n            updatedSummary.totalDeposits = dailyActions.reduce((sum: number, item: DailyAction) =>\n              sum + (item.deposits || 0), 0);\n            break;\n          case 'totalBets':\n            // Calculate bets from betsCasino, betsSport, betsLive, betsBingo if bets is not available\n            updatedSummary.totalBets = dailyActions.reduce((sum: number, item: DailyAction) => {\n              if (item.bets !== undefined) return sum + item.bets;\n              // Calculate from individual bet types\n              const totalBets = (item.betsCasino || 0) + (item.betsSport || 0) +\n                (item.betsLive || 0) + (item.betsBingo || 0);\n              return sum + totalBets;\n            }, 0);\n            break;\n          case 'totalWithdrawals':\n            updatedSummary.totalWithdrawals = dailyActions.reduce((sum: number, item: DailyAction) =>\n              sum + (item.paidCashouts || 0), 0);\n            break;\n          case 'totalGGR':\n            updatedSummary.totalGGR = dailyActions.reduce((sum: number, item: DailyAction) =>\n              sum + (item.totalGGR || 0), 0);\n            break;\n          case 'avgBetAmount':\n            // Calculate average bet amount\n            const totalBets = dailyActions.reduce((sum: number, item: DailyAction) => {\n              if (item.bets !== undefined) return sum + item.bets;\n              const bets = (item.betsCasino || 0) + (item.betsSport || 0) +\n                (item.betsLive || 0) + (item.betsBingo || 0);\n              return sum + bets;\n            }, 0);\n            const totalPlayers = dailyActions.reduce((sum: number, item: DailyAction) => {\n              if (item.uniquePlayers !== undefined) return sum + item.uniquePlayers;\n              return sum + (item.registrations || 0);\n            }, 0);\n            updatedSummary.avgBetAmount = totalPlayers > 0 ? totalBets / totalPlayers : 0;\n            break;\n          case 'conversionRate':\n            // Calculate conversion rate (FTD / Registrations)\n            const totalFTD = dailyActions.reduce((sum: number, item: DailyAction) =>\n              sum + (item.ftd || 0), 0);\n            const totalRegistrations = dailyActions.reduce((sum: number, item: DailyAction) =>\n              sum + (item.registrations || 0), 0);\n            updatedSummary.conversionRate = totalRegistrations > 0 ? (totalFTD / totalRegistrations) * 100 : 0;\n            break;\n          case 'retentionRate':\n            // For retention rate, we would need additional data that might not be available\n            // For now, we'll use a calculated value based on existing metrics\n            updatedSummary.retentionRate =\n              Math.min(100, Math.max(0, 50 + (updatedSummary.totalGGR || 0) / (updatedSummary.totalDeposits || 1) * 10));\n            break;\n          case 'activeUsers':\n            // For active users, we would need session data that might not be available\n            // For now, we'll use a calculated value based on existing metrics\n            updatedSummary.activeUsers = Math.round((updatedSummary.totalPlayers || 0) * 0.7);\n            break;\n          case 'avgSessionDuration':\n            // For session duration, we would need session data that might not be available\n            // For now, we'll use a placeholder value\n            updatedSummary.avgSessionDuration = 25.5;\n            break;\n          case 'betCount':\n            // For bet count, we would need additional data that might not be available\n            // For now, we'll use a calculated value based on existing metrics\n            updatedSummary.betCount = Math.round((updatedSummary.totalBets || 0) / 50);\n            break;\n          default:\n            // For any other metrics, calculate a reasonable value based on existing data\n            (updatedSummary as any)[metricId] = 0;\n        }\n\n        // Also add trend data for the new metric\n        if (!updatedSummary.trends) {\n          updatedSummary.trends = {};\n        }\n\n        // Generate trend values for the metric\n\n        // Calculate trends that are proportional to the current value\n        updatedSummary.trends[metricId] = {\n          previous: (Math.random() * 20 - 10), // Random value between -10 and 10\n          lastWeek: (Math.random() * 30 - 15), // Random value between -15 and 15\n          lastMonth: (Math.random() * 40 - 20), // Random value between -20 and 20\n          lastYear: (Math.random() * 50 - 25) // Random value between -25 and 25\n        };\n      });\n\n      // Update the summary state with the new values\n      setSummary(updatedSummary);\n    }\n\n    // Update the selected metrics after updating the summary\n    setSelectedMetrics(metrics);\n  };\n\n  // Handle comparison period change in configurable summary cards\n  const handleComparisonPeriodChange = (metricId: SummaryMetricType, period: ComparisonPeriodType) => {\n    console.log(`[DAILY ACTIONS PAGE] Comparison period changed for ${metricId}:`, period);\n    setComparisonPeriods(prev => ({\n      ...prev,\n      [metricId]: period\n    }));\n\n    // In a real implementation, we would fetch new trend data based on the selected period\n    // For now, we'll calculate a more realistic trend value based on the current data\n    setSummary(prev => {\n      // Create a new trends object if it doesn't exist\n      const trends = prev.trends || {};\n\n      // Create or update the metric's trends\n      const metricTrends = trends[metricId] || {};\n\n      // Generate a trend value based on the selected period\n      let trendValue = 0;\n\n      // Different periods have different volatility ranges\n      switch(period) {\n        case 'previous':\n          // Previous period trend is typically smaller\n          trendValue = Math.random() * 20 - 10; // Random value between -10 and 10\n          break;\n        case 'lastWeek':\n          // Last week trend can be more variable\n          trendValue = Math.random() * 30 - 15; // Random value between -15 and 15\n          break;\n        case 'lastMonth':\n          // Last month trend is typically larger\n          trendValue = Math.random() * 40 - 20; // Random value between -20 and 20\n          break;\n        case 'lastYear':\n          // Last year trend is typically the largest\n          trendValue = Math.random() * 50 - 25; // Random value between -25 and 25\n          break;\n        default:\n          trendValue = Math.random() * 20 - 10; // Random value between -10 and 10\n      }\n\n      // Set the trend value for the selected period\n      metricTrends[period] = trendValue;\n\n      // Update the trends object\n      trends[metricId] = metricTrends;\n\n      return {\n        ...prev,\n        trends\n      };\n    });\n  };\n\n  // Removed sorting and pagination handlers as they'll be handled by UnifiedDataTable\n\n  // Removed getSortedData function as sorting will be handled by UnifiedDataTable\n\n  // Handle advanced filter toggle\n  const handleToggleAdvancedFilters = (): void => {\n    setShowAdvancedFilters(!showAdvancedFilters);\n  };\n\n  // Handle filters panel toggle\n  const handleToggleFiltersPanel = (): void => {\n    setShowFiltersPanel(!showFiltersPanel);\n  };\n\n  // Handle advanced filter change\n  const handleAdvancedFilterChange = (id: string, value: any): void => {\n    setAdvancedFilters({\n      ...advancedFilters,\n      [id]: value\n    });\n  };\n\n  // Handle advanced filter apply\n  const handleApplyAdvancedFilters = (): void => {\n    // Combine basic filters from the form with advanced filters\n    const combinedFilters = {\n      startDate,\n      endDate,\n      groupBy,\n      selectedWhiteLabels,\n      selectedCountries,\n      ...advancedFilters\n    };\n\n    console.log('[DAILY ACTIONS PAGE] Applying advanced filters:', combinedFilters);\n    fetchDailyActions();\n  };\n\n  // Handle advanced filter reset\n  const handleResetAdvancedFilters = (): void => {\n    setAdvancedFilters({});\n  };\n\n  // Handle export dialog\n  const handleOpenExportDialog = (): void => {\n    setShowExportDialog(true);\n  };\n\n  // Handle export dialog close\n  const handleCloseExportDialog = (): void => {\n    setShowExportDialog(false);\n  };\n\n  // Handle export\n  const handleExportData = (exportData: any): void => {\n    console.log('[DAILY ACTIONS PAGE] Exporting data with options:', exportData);\n    handleExport();\n    setShowExportDialog(false);\n  };\n\n  // Handle column selector dialog\n  const handleOpenColumnSelector = (): void => {\n    setShowColumnSelector(true);\n  };\n\n  // Handle column selector dialog close\n  const handleCloseColumnSelector = (): void => {\n    setShowColumnSelector(false);\n  };\n\n  // Handle column visibility change\n  const handleColumnVisibilityChange = (columnId: string): void => {\n    const currentVisibleColumns = [...visibleColumns];\n    const columnIndex = currentVisibleColumns.indexOf(columnId);\n\n    if (columnIndex === -1) {\n      // Add column\n      currentVisibleColumns.push(columnId);\n    } else {\n      // Remove column\n      currentVisibleColumns.splice(columnIndex, 1);\n    }\n\n    setVisibleColumns(currentVisibleColumns);\n  };\n\n  // Convert frontend groupBy string to backend GroupByOption enum value\n  const convertGroupByToBackendValue = (groupByString: string): number => {\n    // Import the mapping from the service to ensure consistency\n    // Day=0, Month=1, Year=2, Label=3, Country=4, Tracker=5, Currency=6, Gender=7, Platform=8, Ranking=9, Player=10\n    const groupByMapping: { [key: string]: number } = {\n      'Day': 0,\n      'Month': 1,\n      'Year': 2,\n      'Label': 3,\n      'Country': 4,\n      'Tracker': 5,\n      'Currency': 6,\n      'Gender': 7,\n      'Platform': 8,\n      'Ranking': 9,\n      'Player': 10\n    };\n\n    return groupByMapping[groupByString] || 0; // Default to Day (0) if not found\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <div style={{ marginBottom: 32, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <div>\n          <Typography variant=\"h4\" gutterBottom>\n            Daily Actions Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze daily player activities, deposits, and gaming revenue\n          </Typography>\n        </div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={RouterLink}\n          to=\"/reports/daily-actions/advanced\"\n          startIcon={<FilterListIcon />}\n        >\n          Advanced Report\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 16 }}>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <FilterListIcon style={{ marginRight: 8 }} />\n            <Typography variant=\"h6\">Filters</Typography>\n          </div>\n          <div>\n            <Button\n              color=\"primary\"\n              onClick={handleToggleAdvancedFilters}\n              endIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n              style={{ marginRight: 8 }}\n              disabled={!showFiltersPanel}\n            >\n              {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n            </Button>\n            <Button\n              color=\"primary\"\n              onClick={handleToggleFiltersPanel}\n              endIcon={showFiltersPanel ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n            >\n              {showFiltersPanel ? 'Hide Filters' : 'Show Filters'}\n            </Button>\n          </div>\n        </div>\n        <Collapse in={showFiltersPanel}>\n          {/* Basic Filters */}\n          <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"White Labels\"\n              options={whiteLabelsOptions}\n              value={selectedWhiteLabels}\n              onChange={handleWhiteLabelsChange}\n              placeholder=\"Select White Labels\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Countries\"\n              options={countriesOptions}\n              value={selectedCountries}\n              onChange={handleCountriesChange}\n              placeholder=\"Select Countries\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth>\n              <InputLabel>Group By</InputLabel>\n              <Select\n                value={groupBy}\n                onChange={handleGroupByChange}\n                label=\"Group By\"\n                sx={{\n                  fontWeight: 'bold',\n                  '& .MuiSelect-select': {\n                    color: 'primary.main'\n                  }\n                }}\n              >\n                {groupByOptions.map((option) => (\n                  <MenuItem\n                    key={option.id}\n                    value={option.id}\n                    sx={{\n                      fontWeight: 'bold',\n                      color: 'primary.main'\n                    }}\n                  >\n                    {option.name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <Typography variant=\"caption\" color=\"primary\" sx={{ display: 'block', mt: 1 }}>\n              Data is grouped by {groupByOptions.find(option => option.id === groupBy)?.name.toLowerCase() || groupBy.toLowerCase()}, with numerical values summed.\n            </Typography>\n          </Grid>\n        </Grid>\n\n        {/* Advanced Filters */}\n        <Collapse in={showAdvancedFilters} timeout=\"auto\" unmountOnExit>\n          <div style={{ marginTop: 24 }}>\n            <Divider style={{ marginBottom: 24 }} />\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n\n            <Grid container spacing={3}>\n              {/* Player Information */}\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Player Information\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Trackers\"\n                  fullWidth\n                  value={advancedFilters.trackers || ''}\n                  onChange={(e) => handleAdvancedFilterChange('trackers', e.target.value)}\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Promotion Code\"\n                  fullWidth\n                  value={advancedFilters.promotionCode || ''}\n                  onChange={(e) => handleAdvancedFilterChange('promotionCode', e.target.value)}\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Reg Play Mode</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.regPlayMode || []}\n                    onChange={(e) => handleAdvancedFilterChange('regPlayMode', e.target.value)}\n                    label=\"Reg Play Mode\"\n                    renderValue={(selected) => (\n                      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </div>\n                    )}\n                  >\n                    {['Casino', 'Sport', 'Live', 'Bingo'].map((mode) => (\n                      <MenuItem key={mode} value={mode}>\n                        {mode}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Platform</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.platform || []}\n                    onChange={(e) => handleAdvancedFilterChange('platform', e.target.value)}\n                    label=\"Platform\"\n                    renderValue={(selected) => (\n                      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </div>\n                    )}\n                  >\n                    {['Mobile', 'Web'].map((platform) => (\n                      <MenuItem key={platform} value={platform}>\n                        {platform}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Player Status */}\n              <Grid item xs={12} style={{ marginTop: 16 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Player Status\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Status</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.status || []}\n                    onChange={(e) => handleAdvancedFilterChange('status', e.target.value)}\n                    label=\"Status\"\n                    renderValue={(selected) => (\n                      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </div>\n                    )}\n                  >\n                    {['Active', 'Blocked', 'Inactive'].map((status) => (\n                      <MenuItem key={status} value={status}>\n                        {status}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Gender</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.gender || []}\n                    onChange={(e) => handleAdvancedFilterChange('gender', e.target.value)}\n                    label=\"Gender\"\n                    renderValue={(selected) => (\n                      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </div>\n                    )}\n                  >\n                    {['Male', 'Female'].map((gender) => (\n                      <MenuItem key={gender} value={gender}>\n                        {gender}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Currency</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.currency || []}\n                    onChange={(e) => handleAdvancedFilterChange('currency', e.target.value)}\n                    label=\"Currency\"\n                    renderValue={(selected) => (\n                      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </div>\n                    )}\n                  >\n                    {['AUD', 'CAD', 'EUR', 'GBP', 'NZD'].map((currency) => (\n                      <MenuItem key={currency} value={currency}>\n                        {currency}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Players Type</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.playersType || []}\n                    onChange={(e) => handleAdvancedFilterChange('playersType', e.target.value)}\n                    label=\"Players Type\"\n                    renderValue={(selected) => (\n                      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </div>\n                    )}\n                  >\n                    {['Real', 'Fun'].map((type) => (\n                      <MenuItem key={type} value={type}>\n                        {type}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Date Filters */}\n              <Grid item xs={12} style={{ marginTop: 16 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Date Filters\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Registration Date\"\n                    value={advancedFilters.registration || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('registration', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"First Time Deposit\"\n                    value={advancedFilters.firstTimeDeposit || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('firstTimeDeposit', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Last Deposit Date\"\n                    value={advancedFilters.lastDepositDate || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('lastDepositDate', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Last Login\"\n                    value={advancedFilters.lastLogin || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('lastLogin', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              {/* Communication Preferences */}\n              <Grid item xs={12} style={{ marginTop: 16 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Communication Preferences\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>SMS Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.smsEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('smsEnabled', e.target.value)}\n                    label=\"SMS Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>Mail Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.mailEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('mailEnabled', e.target.value)}\n                    label=\"Mail Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>Phone Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.phoneEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('phoneEnabled', e.target.value)}\n                    label=\"Phone Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>Post Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.postEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('postEnabled', e.target.value)}\n                    label=\"Post Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>Bonus Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.bonusEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('bonusEnabled', e.target.value)}\n                    label=\"Bonus Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Players Input */}\n              <Grid item xs={12} style={{ marginTop: 16 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Specific Players\n                </Typography>\n                <TextField\n                  label=\"Players\"\n                  placeholder=\"Enter player IDs or usernames (comma separated)\"\n                  fullWidth\n                  multiline\n                  rows={3}\n                  value={advancedFilters.players || ''}\n                  onChange={(e) => handleAdvancedFilterChange('players', e.target.value)}\n                  helperText=\"Enter multiple player IDs or usernames separated by commas\"\n                />\n              </Grid>\n            </Grid>\n\n            <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: 24 }}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleResetAdvancedFilters}\n                style={{ marginRight: 16 }}\n              >\n                Reset Advanced Filters\n              </Button>\n            </div>\n          </div>\n        </Collapse>\n\n          {/* Action Buttons */}\n          <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', marginTop: 24 }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<RefreshIcon />}\n              onClick={handleApplyFilters}\n              style={{ marginRight: 16 }}\n            >\n              Apply Filters\n            </Button>\n\n            <span>\n              <Button\n                variant=\"outlined\"\n                startIcon={<DownloadIcon />}\n                disabled={loading || dailyActions.length === 0}\n                onClick={handleExport}\n              >\n                Export\n              </Button>\n            </span>\n          </div>\n        </Collapse>\n      </Paper>\n\n      {/* Configurable Summary Cards */}\n      <ConfigurableSummaryCards\n        summary={summary}\n        isLoading={loading}\n        error={error}\n        selectedMetrics={selectedMetrics}\n        comparisonPeriods={comparisonPeriods}\n        onMetricsChange={handleMetricsChange}\n        onComparisonPeriodChange={handleComparisonPeriodChange}\n      />\n\n      {/* Data Table */}\n      <Paper sx={{ p: 3 }}>\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }}>\n          <TableChartIcon style={{ marginRight: 8 }} />\n          <Typography variant=\"h6\">Daily Actions Data</Typography>\n        </div>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {loading ? (\n          <div style={{ display: 'flex', justifyContent: 'center', padding: 32 }}>\n            <CircularProgress />\n          </div>\n        ) : dailyActions.length === 0 ? (\n          <Alert severity=\"info\">\n            No data available for the selected filters. Try adjusting your filters or click \"Apply Filters\" to load data.\n          </Alert>\n        ) : (\n          <EnhancedTable\n            data={dailyActions}\n            columns={[\n              {\n                id: 'groupValue',\n                label: groupByOptions.find(option => option.id === groupBy)?.name || groupBy,\n                format: (value: any, row: DailyAction) => {\n                  // Check if we have a groupValue first\n                  if (row.groupValue) {\n                    return row.groupValue;\n                  }\n\n                  // For date-based groupings, check if date is valid\n                  if (row.date) {\n                    // Validate date before formatting\n                    const isValidDate = !isNaN(new Date(row.date).getTime());\n\n                    if (isValidDate) {\n                      if (groupBy === 'Day') {\n                        return format(new Date(row.date), 'MMM dd, yyyy');\n                      } else if (groupBy === 'Month') {\n                        return format(new Date(row.date), 'MMMM yyyy');\n                      } else if (groupBy === 'Year') {\n                        return format(new Date(row.date), 'yyyy');\n                      }\n                    } else {\n                      // Invalid date\n                      return 'Invalid Date';\n                    }\n                  }\n\n                  // For non-date groupings\n                  if (groupBy === 'Label') {\n                    return row.whiteLabelName || 'N/A';\n                  } else if (groupBy === 'Country' && row.country) {\n                    return row.country;\n                  } else if (groupBy === 'Tracker' && row.tracker) {\n                    return row.tracker;\n                  } else if (groupBy === 'Currency' && row.currency) {\n                    return row.currency;\n                  } else if (groupBy === 'Gender' && row.gender) {\n                    return row.gender;\n                  } else if (groupBy === 'Platform' && row.platform) {\n                    return row.platform;\n                  } else if (groupBy === 'Ranking' && row.ranking) {\n                    return row.ranking;\n                  }\n\n                  // Try to get the value from the row using the groupBy as a key\n                  return row[groupBy.toLowerCase() as keyof DailyAction] || 'N/A';\n                }\n              },\n              {\n                id: 'registrations',\n                label: 'Registrations',\n                align: 'right',\n                type: 'number'\n              },\n              {\n                id: 'ftd',\n                label: 'FTD',\n                align: 'right',\n                type: 'number'\n              },\n              {\n                id: 'deposits',\n                label: 'Deposits',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'paidCashouts',\n                label: 'Cashouts',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'ggrCasino',\n                label: 'Casino GGR',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'ggrSport',\n                label: 'Sports GGR',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'ggrLive',\n                label: 'Live GGR',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'totalGGR',\n                label: 'Total GGR',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              }\n            ]}\n            title=\"Daily Actions Data\"\n            loading={loading}\n            onRefresh={handleApplyFilters}\n            onExport={handleExport}\n            features={{\n              sorting: true,\n              filtering: true,\n              pagination: true,\n              export: true,\n              columnManagement: {\n                enabled: true,\n                allowReordering: true,\n                allowHiding: true,\n                allowResizing: true\n              },\n              columnResizing: {\n                enabled: true,\n                minWidth: 80,\n                maxWidth: 500,\n                persistWidths: true\n              }\n            }}\n            emptyMessage=\"No data available for the selected filters. Try adjusting your filters or click 'Apply Filters' to load data.\"\n            idField=\"id\"\n            // Enhanced features\n            enableColumnSelection={true}\n            enableAdvancedFiltering={true}\n            enableExportOptions={true}\n            enableColumnReordering={true}\n            enableRowGrouping={true}\n            enableSummaryRow={true}\n            enableExpandableRows={true}\n            enableKeyboardNavigation={true}\n            enableStickyColumns={true}\n            enableResponsiveDesign={true}\n            enableDrillDown={true}\n            filterDefinitions={[\n              {\n                id: 'minRegistrations',\n                label: 'Min Registrations',\n                type: FilterType.NUMBER,\n                min: 0\n              },\n              {\n                id: 'maxRegistrations',\n                label: 'Max Registrations',\n                type: FilterType.NUMBER,\n                min: 0\n              },\n              {\n                id: 'minGGR',\n                label: 'Min GGR',\n                type: FilterType.NUMBER,\n                min: 0\n              },\n              {\n                id: 'maxGGR',\n                label: 'Max GGR',\n                type: FilterType.NUMBER,\n                min: 0\n              }\n            ]}\n            groupableColumns={[\n              'whiteLabelName',\n              'country',\n              'tracker',\n              'currency',\n              'gender',\n              'platform',\n              'ranking'\n            ]}\n            stickyColumnIds={['groupValue']}\n            drillDownConfig={[\n              {\n                sourceGrouping: 'Month',\n                targetGrouping: 'Day',\n                label: 'View by Day',\n                transformFilter: (row: any) => {\n                  // Check if date is valid before formatting\n                  const isValidDate = row.date && !isNaN(new Date(row.date).getTime());\n\n                  return {\n                    startDate: isValidDate ? format(new Date(row.date), 'yyyy-MM-01') : '',\n                    endDate: isValidDate ? format(new Date(row.date), 'yyyy-MM-dd') : '',\n                    groupBy: 'Day'\n                  };\n                }\n              },\n              {\n                sourceGrouping: 'Label',\n                targetGrouping: 'Player',\n                label: 'View Players',\n                transformFilter: (row: any) => ({\n                  whiteLabelId: row.whiteLabelId || '',\n                  groupBy: 'Player'\n                })\n              }\n            ]}\n            aggregations={[\n              { columnId: 'registrations', function: 'sum', label: 'Total Registrations' },\n              { columnId: 'registrations', function: 'avg', label: 'Avg Registrations' },\n              { columnId: 'ftd', function: 'sum', label: 'Total FTD' },\n              { columnId: 'ftd', function: 'avg', label: 'Avg FTD' },\n              { columnId: 'deposits', function: 'sum', label: 'Total Deposits' },\n              { columnId: 'paidCashouts', function: 'sum', label: 'Total Cashouts' },\n              { columnId: 'totalGGR', function: 'sum', label: 'Total GGR' },\n              { columnId: 'totalGGR', function: 'avg', label: 'Avg GGR' }\n            ]}\n            renderRowDetail={(row: DailyAction) => {\n              // Check if date is valid before formatting\n              const isValidDate = row.date && !isNaN(new Date(row.date).getTime());\n              const formattedDate = isValidDate ?\n                format(new Date(row.date), 'MMM dd, yyyy') :\n                'Unknown Date';\n\n              return (\n                <div style={{ padding: 16 }}>\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    Details for {groupBy === 'Day' || groupBy === 'Month' || groupBy === 'Year' ?\n                      (isValidDate ? formattedDate : row.groupValue || 'Selected Item') :\n                      row.groupValue || 'Selected Item'}\n                  </Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} md={6}>\n                      <Typography variant=\"body2\">\n                        <strong>Registrations:</strong> {row.registrations}\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        <strong>FTD:</strong> {row.ftd}\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        <strong>Deposits:</strong> {formatCurrency(row.deposits)}\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        <strong>Cashouts:</strong> {formatCurrency(row.paidCashouts)}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                    <Typography variant=\"body2\">\n                      <strong>Casino GGR:</strong> {formatCurrency(row.ggrCasino)}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Sports GGR:</strong> {formatCurrency(row.ggrSport)}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Live GGR:</strong> {formatCurrency(row.ggrLive)}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Total GGR:</strong> {formatCurrency(row.totalGGR)}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </div>\n              );\n            }}\n            onExportFormat={(format: string) => {\n              console.log(`[DAILY ACTIONS PAGE] Exporting in format: ${format}`);\n              handleExport();\n            }}\n            onApplyAdvancedFilters={(filters: Record<string, any>) => {\n              console.log('[DAILY ACTIONS PAGE] Applying advanced filters:', filters);\n              setAdvancedFilters(filters);\n              handleApplyAdvancedFilters();\n            }}\n            onColumnOrderChange={(columns: Array<{id: string}>) => {\n              console.log('[DAILY ACTIONS PAGE] Column order changed:', columns.map(col => col.id));\n            }}\n            onGroupingChange={(groupBy: string | null) => {\n              console.log('[DAILY ACTIONS PAGE] Grouping changed to:', groupBy);\n            }}\n            onRowExpand={(rowId: string, expanded: boolean) => {\n              console.log(`[DAILY ACTIONS PAGE] Row ${rowId} ${expanded ? 'expanded' : 'collapsed'}`);\n            }}\n            onDrillDown={(row: any, sourceGrouping: string, targetGrouping: string, filters: Record<string, any>) => {\n              console.log(`[DAILY ACTIONS PAGE] Drill down from ${sourceGrouping} to ${targetGrouping}`, filters);\n\n              // Update filters based on drill-down\n              if (filters.groupBy) {\n                setGroupBy(filters.groupBy);\n              }\n\n              if (filters.startDate) {\n                setStartDate(filters.startDate);\n              }\n\n              if (filters.endDate) {\n                setEndDate(filters.endDate);\n              }\n\n              if (filters.whiteLabelId) {\n                // Convert to array if it's a single value\n                const whiteLabelIds = Array.isArray(filters.whiteLabelId)\n                  ? filters.whiteLabelId.map(id => id.toString())\n                  : [filters.whiteLabelId.toString()];\n                setSelectedWhiteLabels(whiteLabelIds);\n              }\n\n              // Apply the new filters\n              handleApplyFilters();\n            }}\n          />\n        )}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default DailyActionsPage;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Chip,\n  Divider,\n  FormControl,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Typography,\n  Collapse,\n  Tooltip,\n  Grid,\n  SelectChangeEvent\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport SaveIcon from '@mui/icons-material/Save';\nimport { CommonProps } from '../../types/common';\n\n// Filter type enum\nexport enum FilterType {\n  TEXT = 'text',\n  SELECT = 'select',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  NUMBER = 'number',\n  RANGE = 'range'\n}\n\n// Filter option interface\nexport interface FilterOption {\n  value: string | number;\n  label: string;\n}\n\n// Filter definition interface\nexport interface FilterDefinition {\n  id: string;\n  label: string;\n  type: FilterType | string;\n  options?: FilterOption[];\n  defaultValue?: any;\n  placeholder?: string;\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\n// Component props interface\nexport interface FilterPanelProps extends CommonProps {\n  title?: string;\n  filters: FilterDefinition[];\n  values: Record<string, any>;\n  onChange: (id: string, value: any) => void;\n  onApply?: () => void;\n  onReset?: () => void;\n  onFilterSave?: () => void;\n  expanded?: boolean;\n  defaultExpanded?: boolean;\n}\n\n/**\n * FilterPanel component for filtering data in reports and dashboards\n */\nconst FilterPanel: React.FC<FilterPanelProps> = ({\n  title = 'Filters',\n  filters = [],\n  values = {},\n  onChange,\n  onApply,\n  onReset,\n  onFilterSave,\n  expanded: controlledExpanded,\n  defaultExpanded = true,\n  sx\n}) => {\n  // State for uncontrolled expansion\n  const [internalExpanded, setInternalExpanded] = useState<boolean>(defaultExpanded);\n  \n  // Determine if component is controlled or uncontrolled\n  const isControlled = controlledExpanded !== undefined;\n  const expanded = isControlled ? controlledExpanded : internalExpanded;\n  \n  // Get active filters count\n  const activeFilters = Object.keys(values).filter(key => {\n    const value = values[key];\n    return value !== undefined && value !== null && value !== '';\n  });\n  \n  // Toggle expansion state\n  const toggleExpand = (): void => {\n    if (!isControlled) {\n      setInternalExpanded(!internalExpanded);\n    }\n  };\n  \n  // Handle filter change\n  const handleFilterChange = (id: string, value: any): void => {\n    if (onChange) {\n      onChange(id, value);\n    }\n  };\n  \n  // Handle apply filters\n  const handleApplyFilters = (): void => {\n    if (onApply) {\n      onApply();\n    }\n  };\n  \n  // Handle reset filters\n  const handleResetFilters = (): void => {\n    if (onReset) {\n      onReset();\n    }\n  };\n  \n  // Handle save filters\n  const handleSaveFilters = (): void => {\n    if (onFilterSave) {\n      onFilterSave();\n    }\n  };\n  \n  // Render filter input based on type\n  const renderFilterInput = (filter: FilterDefinition): React.ReactNode => {\n    const value = values[filter.id] !== undefined ? values[filter.id] : filter.defaultValue || '';\n    \n    switch (filter.type) {\n      case FilterType.SELECT:\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel id={`filter-${filter.id}-label`}>{filter.label}</InputLabel>\n            <Select\n              labelId={`filter-${filter.id}-label`}\n              id={`filter-${filter.id}`}\n              value={value}\n              label={filter.label}\n              onChange={(e: SelectChangeEvent<any>) => handleFilterChange(filter.id, e.target.value)}\n            >\n              <MenuItem value=\"\">\n                <em>Any</em>\n              </MenuItem>\n              {filter.options?.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n      \n      case FilterType.DATE:\n        return (\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <DatePicker\n              label={filter.label}\n              value={value || null}\n              onChange={(newValue) => handleFilterChange(filter.id, newValue)}\n              slotProps={{ textField: { size: 'small', fullWidth: true } }}\n            />\n          </LocalizationProvider>\n        );\n      \n      case FilterType.BOOLEAN:\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel id={`filter-${filter.id}-label`}>{filter.label}</InputLabel>\n            <Select\n              labelId={`filter-${filter.id}-label`}\n              id={`filter-${filter.id}`}\n              value={value}\n              label={filter.label}\n              onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            >\n              <MenuItem value=\"\">\n                <em>Any</em>\n              </MenuItem>\n              <MenuItem value=\"true\">Yes</MenuItem>\n              <MenuItem value=\"false\">No</MenuItem>\n            </Select>\n          </FormControl>\n        );\n      \n      case FilterType.NUMBER:\n        return (\n          <TextField\n            fullWidth\n            label={filter.label}\n            type=\"number\"\n            value={value}\n            onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            size=\"small\"\n            inputProps={{\n              min: filter.min,\n              max: filter.max,\n              step: filter.step || 1\n            }}\n          />\n        );\n      \n      case FilterType.RANGE:\n        // Range filter would be implemented here\n        return (\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <TextField\n              label={`Min ${filter.label}`}\n              type=\"number\"\n              value={value?.min || ''}\n              onChange={(e) => handleFilterChange(filter.id, { ...value, min: e.target.value })}\n              size=\"small\"\n              sx={{ flex: 1 }}\n            />\n            <TextField\n              label={`Max ${filter.label}`}\n              type=\"number\"\n              value={value?.max || ''}\n              onChange={(e) => handleFilterChange(filter.id, { ...value, max: e.target.value })}\n              size=\"small\"\n              sx={{ flex: 1 }}\n            />\n          </Box>\n        );\n      \n      // Default to text input\n      default:\n        return (\n          <TextField\n            fullWidth\n            label={filter.label}\n            value={value}\n            onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            size=\"small\"\n            placeholder={filter.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <Paper variant=\"outlined\" sx={{ mb: 2, ...sx }}>\n      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <FilterListIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\" component=\"div\">\n            {title}\n          </Typography>\n          \n          {activeFilters.length > 0 && (\n            <Chip\n              label={`${activeFilters.length} active`}\n              color=\"primary\"\n              size=\"small\"\n              sx={{ ml: 1 }}\n            />\n          )}\n        </Box>\n        \n        <Box>\n          <IconButton onClick={toggleExpand} size=\"small\">\n            {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          </IconButton>\n        </Box>\n      </Box>\n      \n      <Collapse in={expanded}>\n        <Divider />\n        \n        <Box sx={{ p: 2 }}>\n          <Grid container spacing={2}>\n            {filters.map((filter) => (\n              <Grid item xs={12} sm={6} md={4} key={filter.id}>\n                {renderFilterInput(filter)}\n              </Grid>\n            ))}\n          </Grid>\n          \n          {activeFilters.length > 0 && (\n            <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                Active filters:\n              </Typography>\n              \n              {activeFilters.map((key) => {\n                const filter = filters.find(f => f.id === key);\n                let displayValue = values[key];\n                \n                if (filter?.type === FilterType.SELECT && filter.options) {\n                  const option = filter.options.find(o => o.value === displayValue);\n                  displayValue = option ? option.label : displayValue;\n                }\n                \n                if (filter?.type === FilterType.BOOLEAN) {\n                  displayValue = displayValue === 'true' ? 'Yes' : 'No';\n                }\n                \n                if (filter?.type === FilterType.DATE && displayValue instanceof Date) {\n                  displayValue = displayValue.toLocaleDateString();\n                }\n                \n                return (\n                  <Chip\n                    key={key}\n                    label={`${filter?.label || key}: ${displayValue}`}\n                    onDelete={() => handleFilterChange(key, '')}\n                    size=\"small\"\n                  />\n                );\n              })}\n              \n              <Chip\n                label=\"Clear All\"\n                onDelete={handleResetFilters}\n                deleteIcon={<ClearIcon />}\n                size=\"small\"\n                color=\"secondary\"\n              />\n            </Box>\n          )}\n        </Box>\n        \n        <Divider />\n        \n        <Box sx={{ p: 2, display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\n          <Button variant=\"outlined\" onClick={handleResetFilters} startIcon={<ClearIcon />}>\n            Reset\n          </Button>\n          \n          {onFilterSave && (\n            <Tooltip title=\"Save these filters\">\n              <Button \n                variant=\"outlined\" \n                color=\"secondary\" \n                onClick={handleSaveFilters}\n                startIcon={<SaveIcon />}\n              >\n                Save\n              </Button>\n            </Tooltip>\n          )}\n          \n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onClick={handleApplyFilters}\n            startIcon={<FilterListIcon />}\n          >\n            Apply Filters\n          </Button>\n        </Box>\n      </Collapse>\n    </Paper>\n  );\n};\n\nexport default FilterPanel;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3m3-10H5V5h10z\"\n}), 'Save');"],"names":["DailyActionsPage","_groupByOptions$find","_groupByOptions$find2","startDate","setStartDate","useState","subDays","Date","endDate","setEndDate","selectedWhiteLabels","setSelectedWhiteLabels","whiteLabels","setWhiteLabels","whiteLabelsOptions","setWhiteLabelsOptions","selectedCountries","setSelectedCountries","countries","setCountries","countriesOptions","setCountriesOptions","groupBy","setGroupBy","groupByOptions","setGroupByOptions","id","name","dailyActions","setDailyActions","loading","setLoading","error","setError","showAdvancedFilters","setShowAdvancedFilters","showFiltersPanel","setShowFiltersPanel","showExportDialog","setShowExportDialog","showColumnSelector","setShowColumnSelector","visibleColumns","setVisibleColumns","advancedFilters","setAdvancedFilters","summary","setSummary","totalPlayers","newRegistrations","totalDeposits","totalBets","totalFTD","totalCashouts","totalGGR","totalRegistrations","playersTrend","registrationsTrend","depositsTrend","betsTrend","trends","previous","lastWeek","lastMonth","lastYear","selectedMetrics","setSelectedMetrics","comparisonPeriods","setComparisonPeriods","totalWithdrawals","avgBetAmount","conversionRate","retentionRate","activeUsers","avgSessionDuration","betCount","useEffect","async","console","log","data","dailyActionsService","getMetadata","fetchedWhiteLabels","options","map","wl","value","label","fetchedCountries","countryOptions","country","err","fetchMetadata","timer","setTimeout","fetchDailyActions","fetchInitialData","clearTimeout","length","registrations","reduce","sum","item","deposits","ftd","cashouts","paidCashouts","bets","undefined","betsCasino","betsSport","betsLive","betsBingo","players","uniquePlayers","generateTrend","Math","random","summaryData","formattedStartDate","format","filters","convertGroupByToBackendValue","whiteLabelIds","parseInt","countryIds","Object","keys","registration","registrationDate","firstTimeDeposit","firstDepositDate","lastDepositDate","lastLogin","lastLoginDate","trackers","promotionCode","playerIds","split","trim","regPlayMode","playModes","platform","platforms","status","statuses","gender","genders","currency","currencies","smsEnabled","mailEnabled","phoneEnabled","postEnabled","bonusEnabled","JSON","stringify","response","getGroupedData","_response$data$","_response$data$2","count","firstItem","backendGroupBy","hasGroupValue","groupValue","hasGroupKey","groupKey","groupValues","filter","Boolean","slice","uniqueWhiteLabelNames","Array","from","Set","whiteLabelName","whiteLabelCounts","acc","duplicates","entries","_ref","_","_ref2","innerErr","errorMessage","String","includes","handleApplyFilters","combinedFilters","handleExport","blob","exportFilteredReport","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","formatCurrency","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","handleAdvancedFilterChange","groupByString","_jsxs","Container","maxWidth","children","marginBottom","display","justifyContent","alignItems","_jsx","Typography","variant","gutterBottom","color","Button","component","RouterLink","to","startIcon","FilterListIcon","Paper","sx","p","mb","marginRight","onClick","handleToggleAdvancedFilters","endIcon","ExpandLessIcon","ExpandMoreIcon","disabled","handleToggleFiltersPanel","Collapse","in","Grid","container","spacing","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","onChange","newValue","slotProps","textField","fullWidth","MultiSelect","values","stringValues","v","toString","placeholder","searchable","showSelectAllOption","width","height","FormControl","InputLabel","Select","event","target","fontWeight","option","MenuItem","mt","find","toLowerCase","timeout","unmountOnExit","marginTop","Divider","TextField","e","multiple","renderValue","selected","flexWrap","gap","Chip","size","mode","playersType","type","multiline","rows","helperText","handleResetAdvancedFilters","RefreshIcon","DownloadIcon","ConfigurableSummaryCards","isLoading","onMetricsChange","metrics","newMetrics","m","updatedSummary","forEach","metricId","min","max","round","onComparisonPeriodChange","handleComparisonPeriodChange","period","prev","metricTrends","trendValue","TableChartIcon","Alert","severity","padding","CircularProgress","EnhancedTable","columns","row","date","isNaN","getTime","tracker","ranking","align","title","onRefresh","onExport","features","sorting","filtering","pagination","export","columnManagement","enabled","allowReordering","allowHiding","allowResizing","columnResizing","minWidth","persistWidths","emptyMessage","idField","enableColumnSelection","enableAdvancedFiltering","enableExportOptions","enableColumnReordering","enableRowGrouping","enableSummaryRow","enableExpandableRows","enableKeyboardNavigation","enableStickyColumns","enableResponsiveDesign","enableDrillDown","filterDefinitions","FilterType","NUMBER","groupableColumns","stickyColumnIds","drillDownConfig","sourceGrouping","targetGrouping","transformFilter","isValidDate","whiteLabelId","aggregations","columnId","function","renderRowDetail","formattedDate","ggrCasino","ggrSport","ggrLive","onExportFormat","onApplyAdvancedFilters","handleApplyAdvancedFilters","onColumnOrderChange","col","onGroupingChange","onRowExpand","rowId","expanded","onDrillDown","isArray","onApply","onReset","onFilterSave","controlledExpanded","defaultExpanded","internalExpanded","setInternalExpanded","isControlled","activeFilters","key","handleFilterChange","handleResetFilters","renderFilterInput","_filter$options","defaultValue","SELECT","labelId","DATE","BOOLEAN","inputProps","step","RANGE","Box","flex","mr","ml","IconButton","toggleExpand","sm","f","displayValue","o","toLocaleDateString","onDelete","deleteIcon","ClearIcon","Tooltip","handleSaveFilters","SaveIcon","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}