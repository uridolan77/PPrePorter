{"version":3,"file":"static/js/58.9a17acb4.chunk.js","mappings":"kgBA0EA,MAoUA,EApUmCA,KAEjC,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAeC,EAAAA,EAAAA,GAAQ,IAAIC,KAAQ,MAC9DC,EAASC,IAAcJ,EAAAA,EAAAA,UAAe,IAAIE,OAC1CG,EAAcC,IAAmBN,EAAAA,EAAAA,UAAiB,KAClDO,EAAaC,IAAkBR,EAAAA,EAAAA,UAAuB,KAGtDS,EAAcC,IAAmBV,EAAAA,EAAAA,UAAwB,KACzDW,EAASC,IAAcZ,EAAAA,EAAAA,WAAkB,IACzCa,EAAOC,IAAYd,EAAAA,EAAAA,UAAwB,OAG3Ce,EAASC,IAAchB,EAAAA,EAAAA,UAAkB,CAC9CiB,mBAAoB,EACpBC,SAAU,EACVC,cAAe,EACfC,cAAe,EACfC,SAAU,KAIZC,EAAAA,EAAAA,YAAU,KACcC,WACpB,IACE,MAAMC,QAAaC,EAAAA,EAAoBC,cACvClB,EAAgBgB,EAAajB,aAAe,GAC9C,CAAE,MAAOoB,GACPC,QAAQf,MAAM,2BAA4Bc,GAC1Cb,EAAS,mDACX,GAGFe,EAAe,GACd,IAGH,MA2DMC,EAAkBC,GACf,IAAIC,KAAKC,aAAa,QAAS,CACpCC,MAAO,WACPC,SAAU,MACVC,sBAAuB,IACtBC,OAAON,GAGZ,OACEO,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,SAAS,KAAIC,SAAA,EACtBH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,EAAGC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,cAAeN,SAAA,EAC7FH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAAAD,SAAA,EACFO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAV,SAAC,0BAGtCO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,QAAQE,MAAM,iBAAgBX,SAAC,+EAIrDO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLH,QAAQ,YACRE,MAAM,UACNE,UAAWC,EAAAA,GACXC,GAAG,kCACHC,WAAWT,EAAAA,EAAAA,KAACU,EAAAA,EAAc,IAAIjB,SAC/B,wBAMHH,EAAAA,EAAAA,MAACqB,EAAAA,EAAK,CAAChB,GAAI,CAAEiB,EAAG,EAAGhB,GAAI,GAAIH,SAAA,EACzBH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQE,WAAY,SAAUH,GAAI,GAAIH,SAAA,EACxDO,EAAAA,EAAAA,KAACU,EAAAA,EAAc,CAACf,GAAI,CAAEkB,GAAI,MAC1Bb,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SAAC,gBAG3BH,EAAAA,EAAAA,MAACwB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEvB,SAAA,EACzBO,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE1B,UACvBO,EAAAA,EAAAA,KAACoB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAe7B,UAChDO,EAAAA,EAAAA,KAACuB,EAAAA,EAAU,CACTC,MAAM,aACNzC,MAAOjC,EACP2E,SAAWC,GAAaA,GAAY3E,EAAa2E,GACjDC,UAAW,CAAEC,UAAW,CAAEC,WAAW,WAK3C7B,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE1B,UACvBO,EAAAA,EAAAA,KAACoB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAe7B,UAChDO,EAAAA,EAAAA,KAACuB,EAAAA,EAAU,CACTC,MAAM,WACNzC,MAAO5B,EACPsE,SAAWC,GAAaA,GAAYtE,EAAWsE,GAC/CC,UAAW,CAAEC,UAAW,CAAEC,WAAW,WAK3C7B,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE1B,UACvBH,EAAAA,EAAAA,MAACwC,EAAAA,EAAW,CAACD,WAAS,EAAApC,SAAA,EACpBO,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CAAAtC,SAAC,iBACZH,EAAAA,EAAAA,MAAC0C,EAAAA,EAAM,CACLjD,MAAO1B,EACPoE,SAtEkBQ,IAC9B3E,EAAgB2E,EAAMC,OAAOnD,MAAM,EAsEvByC,MAAM,cAAa/B,SAAA,EAEnBO,EAAAA,EAAAA,KAACmC,EAAAA,EAAQ,CAACpD,MAAM,GAAEU,SAAC,qBAClBlC,EAAY6E,KAAKC,IAChBrC,EAAAA,EAAAA,KAACmC,EAAAA,EAAQ,CAAapD,MAAOsD,EAAGC,GAAG7C,SAAE4C,EAAGE,MAAzBF,EAAGC,eAM1BhD,EAAAA,EAAAA,MAACwB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGxB,GAAI,CAAEE,QAAS,OAAQE,WAAY,UAAWN,SAAA,EACtEO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLH,QAAQ,YACRE,MAAM,UACNK,WAAWT,EAAAA,EAAAA,KAACwC,EAAAA,EAAW,IACvBC,QA3FeC,KAjDDnE,WACxBX,GAAW,GACXE,EAAS,MAET,IAEE,MAIM6E,EAAmB,CACvB7F,WALyBuC,EAAAA,EAAAA,GAAOvC,EAAW,cAM3CK,SALuBkC,EAAAA,EAAAA,GAAOlC,EAAS,eAQrCE,IACFsF,EAAQtF,aAAeA,GAIzB,MAAMuF,QAAiBnE,EAAAA,EAAoBoE,QAAQF,GAC7CnE,EAAQoE,EAAiBpE,MAAQ,GAKvC,GAHAd,EAAgBc,GAGXoE,EAAiB7E,QACpBC,EAAY4E,EAAiB7E,aACxB,CAEL,MAAM+E,EAAuB,CAC3B7E,mBAAoBO,EAAKuE,QAAO,CAACC,EAAa/B,IAAc+B,EAAM/B,EAAKgC,eAAe,GACtF/E,SAAUM,EAAKuE,QAAO,CAACC,EAAa/B,IAAc+B,EAAM/B,EAAKiC,KAAK,GAClE/E,cAAeK,EAAKuE,QAAO,CAACC,EAAa/B,IAAc+B,EAAM/B,EAAKkC,UAAU,GAC5E/E,cAAeI,EAAKuE,QAAO,CAACC,EAAa/B,IAAc+B,EAAM/B,EAAKmC,cAAc,GAChF/E,SAAUG,EAAKuE,QAAO,CAACC,EAAa/B,IAAc+B,EAAM/B,EAAK5C,UAAU,IAGzEL,EAAW8E,EACb,CACF,CAAE,MAAOnE,GACPC,QAAQf,MAAM,gCAAiCc,GAC/Cb,EAAS,6DACX,CAAC,QACCF,GAAW,EACb,GAKAyF,EAAmB,EA2FT1D,GAAI,CAAEkB,GAAI,GAAIpB,SACf,mBAIDO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLH,QAAQ,WACRO,WAAWT,EAAAA,EAAAA,KAACsD,EAAAA,EAAY,IACxBC,SAAU5F,GAAmC,IAAxBF,EAAa+F,OAAa/D,SAChD,qBAQPH,EAAAA,EAAAA,MAACwB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGrB,GAAI,CAAEC,GAAI,GAAIH,SAAA,EACxCO,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIuC,GAAI,EAAGtC,GAAI,IAAI1B,UAChCO,EAAAA,EAAAA,KAAC0D,EAAAA,EAAI,CAAAjE,UACHH,EAAAA,EAAAA,MAACqE,EAAAA,EAAW,CAAAlE,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,mBAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrB1B,EAAQE,mBAAmB2F,2BAMpC5D,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIuC,GAAI,EAAGtC,GAAI,IAAI1B,UAChCO,EAAAA,EAAAA,KAAC0D,EAAAA,EAAI,CAAAjE,UACHH,EAAAA,EAAAA,MAACqE,EAAAA,EAAW,CAAAlE,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,2BAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrB1B,EAAQG,SAAS0F,2BAM1B5D,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIuC,GAAI,EAAGtC,GAAI,IAAI1B,UAChCO,EAAAA,EAAAA,KAAC0D,EAAAA,EAAI,CAAAjE,UACHH,EAAAA,EAAAA,MAACqE,EAAAA,EAAW,CAAAlE,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,cAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrBX,EAAef,EAAQI,yBAMhC6B,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIuC,GAAI,EAAGtC,GAAI,IAAI1B,UAChCO,EAAAA,EAAAA,KAAC0D,EAAAA,EAAI,CAAAjE,UACHH,EAAAA,EAAAA,MAACqE,EAAAA,EAAW,CAAAlE,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,cAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrBX,EAAef,EAAQK,yBAMhC4B,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIuC,GAAI,EAAGtC,GAAI,IAAI1B,UAChCO,EAAAA,EAAAA,KAAC0D,EAAAA,EAAI,CAAAjE,UACHH,EAAAA,EAAAA,MAACqE,EAAAA,EAAW,CAAAlE,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,eAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrBX,EAAef,EAAQM,uBAQlCiB,EAAAA,EAAAA,MAACqB,EAAAA,EAAK,CAAChB,GAAI,CAAEiB,EAAG,GAAInB,SAAA,EAClBH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQE,WAAY,SAAUH,GAAI,GAAIH,SAAA,EACxDO,EAAAA,EAAAA,KAAC6D,EAAAA,EAAc,CAAClE,GAAI,CAAEkB,GAAI,MAC1Bb,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SAAC,0BAG1B5B,IACCmC,EAAAA,EAAAA,KAAC8D,EAAAA,EAAK,CAACC,SAAS,QAAQpE,GAAI,CAAEC,GAAI,GAAIH,SACnC5B,IAIJF,GACCqC,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQC,eAAgB,SAAUc,EAAG,GAAInB,UAC3DO,EAAAA,EAAAA,KAACgE,EAAAA,EAAgB,MAEO,IAAxBvG,EAAa+F,QACfxD,EAAAA,EAAAA,KAAC8D,EAAAA,EAAK,CAACC,SAAS,OAAMtE,SAAC,mHAIvBO,EAAAA,EAAAA,KAACiE,EAAAA,EAAc,CAAAxE,UACbH,EAAAA,EAAAA,MAAC4E,EAAAA,EAAK,CAAAzE,SAAA,EACJO,EAAAA,EAAAA,KAACmE,EAAAA,EAAS,CAAA1E,UACRH,EAAAA,EAAAA,MAAC8E,EAAAA,EAAQ,CAAA3E,SAAA,EACPO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAAA5E,SAAC,UACXO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAAA5E,SAAC,iBACXO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAC,mBACzBO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAC,SACzBO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAC,cACzBO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAC,cACzBO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAC,gBACzBO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAC,gBACzBO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAC,cACzBO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAC,oBAG7BO,EAAAA,EAAAA,KAACuE,EAAAA,EAAS,CAAA9E,SACPhC,EAAa2E,KAAKoC,IACjBlF,EAAAA,EAAAA,MAAC8E,EAAAA,EAAQ,CAAA3E,SAAA,EACPO,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAAA5E,UAAEJ,EAAAA,EAAAA,GAAO,IAAInC,KAAKsH,EAAIC,MAAO,mBACvCzE,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAAA5E,SAAE+E,EAAIE,kBAChB1E,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAE+E,EAAIvB,iBAC9BjD,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAE+E,EAAItB,OAC9BlD,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAEX,EAAe0F,EAAIrB,aAC7CnD,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAEX,EAAe0F,EAAIpB,iBAC7CpD,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAEX,EAAe0F,EAAIG,cAC7C3E,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAEX,EAAe0F,EAAII,aAC7C5E,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAEX,EAAe0F,EAAIK,YAC7C7E,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAACC,MAAM,QAAO7E,SAAEX,EAAe0F,EAAInG,cAVhCmG,EAAIlC,kBAkBrB,C","sources":["pages/reports/DailyActionsPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { format, subDays } from 'date-fns';\nimport dailyActionsService from '../../services/api/dailyActionsService';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport TableChartIcon from '@mui/icons-material/TableChart';\n\n// Types\ninterface WhiteLabel {\n  id: string;\n  name: string;\n}\n\ninterface DailyAction {\n  id: string;\n  date: string;\n  whiteLabelName: string;\n  registrations: number;\n  ftd: number;\n  deposits: number;\n  paidCashouts: number;\n  ggrCasino: number;\n  ggrSport: number;\n  ggrLive: number;\n  totalGGR: number;\n}\n\ninterface Summary {\n  totalRegistrations: number;\n  totalFTD: number;\n  totalDeposits: number;\n  totalCashouts: number;\n  totalGGR: number;\n}\n\ninterface Filters {\n  startDate: string;\n  endDate: string;\n  whiteLabelId?: string;\n}\n\nconst DailyActionsPage: React.FC = () => {\n  // State for filters\n  const [startDate, setStartDate] = useState<Date>(subDays(new Date(), 30));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [whiteLabelId, setWhiteLabelId] = useState<string>('');\n  const [whiteLabels, setWhiteLabels] = useState<WhiteLabel[]>([]);\n\n  // State for data\n  const [dailyActions, setDailyActions] = useState<DailyAction[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // State for summary metrics\n  const [summary, setSummary] = useState<Summary>({\n    totalRegistrations: 0,\n    totalFTD: 0,\n    totalDeposits: 0,\n    totalCashouts: 0,\n    totalGGR: 0\n  });\n\n  // Fetch metadata (white labels) on component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        const data = await dailyActionsService.getMetadata();\n        setWhiteLabels((data as any).whiteLabels || []);\n      } catch (err) {\n        console.error('Error fetching metadata:', err);\n        setError('Failed to load metadata. Please try again later.');\n      }\n    };\n\n    fetchMetadata();\n  }, []);\n\n  // Fetch daily actions data\n  const fetchDailyActions = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Format dates for API\n      const formattedStartDate = format(startDate, 'yyyy-MM-dd');\n      const formattedEndDate = format(endDate, 'yyyy-MM-dd');\n\n      // Create filters object\n      const filters: Filters = {\n        startDate: formattedStartDate,\n        endDate: formattedEndDate\n      };\n\n      if (whiteLabelId) {\n        filters.whiteLabelId = whiteLabelId;\n      }\n\n      // Use the service to get data\n      const response = await dailyActionsService.getData(filters);\n      const data = (response as any).data || [];\n\n      setDailyActions(data);\n\n      // Set summary metrics if available in the response\n      if ((response as any).summary) {\n        setSummary((response as any).summary);\n      } else {\n        // Calculate summary metrics if not provided by the API\n        const summaryData: Summary = {\n          totalRegistrations: data.reduce((sum: number, item: any) => sum + item.registrations, 0),\n          totalFTD: data.reduce((sum: number, item: any) => sum + item.ftd, 0),\n          totalDeposits: data.reduce((sum: number, item: any) => sum + item.deposits, 0),\n          totalCashouts: data.reduce((sum: number, item: any) => sum + item.paidCashouts, 0),\n          totalGGR: data.reduce((sum: number, item: any) => sum + item.totalGGR, 0)\n        };\n\n        setSummary(summaryData);\n      }\n    } catch (err) {\n      console.error('Error fetching daily actions:', err);\n      setError('Failed to load daily actions data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = (): void => {\n    fetchDailyActions();\n  };\n\n  // Handle white label change\n  const handleWhiteLabelChange = (event: SelectChangeEvent): void => {\n    setWhiteLabelId(event.target.value);\n  };\n\n  // Format currency values\n  const formatCurrency = (value: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(value);\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom>\n            Daily Actions Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze daily player activities, deposits, and gaming revenue\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={RouterLink}\n          to=\"/reports/daily-actions/advanced\"\n          startIcon={<FilterListIcon />}\n        >\n          Advanced Report\n        </Button>\n      </Box>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <FilterListIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Filters</Typography>\n        </Box>\n\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth>\n              <InputLabel>White Label</InputLabel>\n              <Select\n                value={whiteLabelId}\n                onChange={handleWhiteLabelChange}\n                label=\"White Label\"\n              >\n                <MenuItem value=\"\">All White Labels</MenuItem>\n                {whiteLabels.map((wl) => (\n                  <MenuItem key={wl.id} value={wl.id}>{wl.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} md={3} sx={{ display: 'flex', alignItems: 'center' }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<RefreshIcon />}\n              onClick={handleApplyFilters}\n              sx={{ mr: 2 }}\n            >\n              Apply Filters\n            </Button>\n\n            <Button\n              variant=\"outlined\"\n              startIcon={<DownloadIcon />}\n              disabled={loading || dailyActions.length === 0}\n            >\n              Export\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Registrations\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalRegistrations.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                First Time Depositors\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalFTD.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Deposits\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalDeposits)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Cashouts\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalCashouts)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total GGR\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalGGR)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Data Table */}\n      <Paper sx={{ p: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <TableChartIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Daily Actions Data</Typography>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : dailyActions.length === 0 ? (\n          <Alert severity=\"info\">\n            No data available for the selected filters. Try adjusting your filters or click \"Apply Filters\" to load data.\n          </Alert>\n        ) : (\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Date</TableCell>\n                  <TableCell>White Label</TableCell>\n                  <TableCell align=\"right\">Registrations</TableCell>\n                  <TableCell align=\"right\">FTD</TableCell>\n                  <TableCell align=\"right\">Deposits</TableCell>\n                  <TableCell align=\"right\">Cashouts</TableCell>\n                  <TableCell align=\"right\">Casino GGR</TableCell>\n                  <TableCell align=\"right\">Sports GGR</TableCell>\n                  <TableCell align=\"right\">Live GGR</TableCell>\n                  <TableCell align=\"right\">Total GGR</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {dailyActions.map((row) => (\n                  <TableRow key={row.id}>\n                    <TableCell>{format(new Date(row.date), 'MMM dd, yyyy')}</TableCell>\n                    <TableCell>{row.whiteLabelName}</TableCell>\n                    <TableCell align=\"right\">{row.registrations}</TableCell>\n                    <TableCell align=\"right\">{row.ftd}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.deposits)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.paidCashouts)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.ggrCasino)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.ggrSport)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.ggrLive)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.totalGGR)}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default DailyActionsPage;\n"],"names":["DailyActionsPage","startDate","setStartDate","useState","subDays","Date","endDate","setEndDate","whiteLabelId","setWhiteLabelId","whiteLabels","setWhiteLabels","dailyActions","setDailyActions","loading","setLoading","error","setError","summary","setSummary","totalRegistrations","totalFTD","totalDeposits","totalCashouts","totalGGR","useEffect","async","data","dailyActionsService","getMetadata","err","console","fetchMetadata","formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","format","_jsxs","Container","maxWidth","children","Box","sx","mb","display","justifyContent","alignItems","_jsx","Typography","variant","gutterBottom","color","Button","component","RouterLink","to","startIcon","FilterListIcon","Paper","p","mr","Grid","container","spacing","item","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","label","onChange","newValue","slotProps","textField","fullWidth","FormControl","InputLabel","Select","event","target","MenuItem","map","wl","id","name","RefreshIcon","onClick","handleApplyFilters","filters","response","getData","summaryData","reduce","sum","registrations","ftd","deposits","paidCashouts","fetchDailyActions","DownloadIcon","disabled","length","sm","Card","CardContent","toLocaleString","TableChartIcon","Alert","severity","CircularProgress","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","date","whiteLabelName","ggrCasino","ggrSport","ggrLive"],"sourceRoot":""}