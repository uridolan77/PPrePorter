{"version":3,"file":"static/js/70.9ff098f8.chunk.js","mappings":"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","sources":["components/common/MultiSelect.tsx","../node_modules/@mui/icons-material/ZoomIn.js","components/tables/enhanced/features/Filtering.tsx","components/tables/enhanced/features/ColumnManagement.tsx","components/tables/enhanced/features/Pagination.tsx","components/tables/enhanced/features/Grouping.tsx","components/tables/enhanced/features/HierarchicalGrouping.tsx","components/tables/enhanced/features/Aggregation.tsx","components/tables/enhanced/utils.ts","components/tables/enhanced/features/DrillDown.tsx","components/tables/enhanced/features/ExpandableRows.tsx","components/tables/enhanced/features/Export.tsx","../node_modules/@mui/material/internal/svg-icons/ArrowDownward.js","../node_modules/@mui/material/TableSortLabel/tableSortLabelClasses.js","../node_modules/@mui/material/TableSortLabel/TableSortLabel.js","components/tables/enhanced/features/Sorting.tsx","components/tables/enhanced/features/TableContent.tsx","components/tables/enhanced/features/HierarchicalTableContent.tsx","components/tables/enhanced/EnhancedTable.tsx","../node_modules/@mui/icons-material/Summarize.js","../node_modules/@mui/icons-material/KeyboardArrowRight.js","../node_modules/@mui/icons-material/KeyboardArrowDown.js","../node_modules/@mui/icons-material/PushPin.js","../node_modules/@mui/icons-material/ArrowRight.js","../node_modules/@mui/icons-material/ChevronRight.js","components/tables/enhanced/types.ts","../node_modules/@mui/icons-material/GetApp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Chip,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n  Typography,\n  Checkbox,\n  ListItemText,\n  TextField,\n  InputAdornment,\n  Divider,\n  Button,\n  FormHelperText,\n  Tooltip,\n  IconButton\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { CommonProps } from '../../types/common';\n\n// Option interface for select items\nexport interface MultiSelectOption {\n  value: string | number;\n  label: string;\n  disabled?: boolean;\n  group?: string;\n  description?: string;\n}\n\n// Props interface for the MultiSelect component\nexport interface MultiSelectProps extends CommonProps {\n  /**\n   * Array of options to display in the select\n   */\n  options: MultiSelectOption[];\n\n  /**\n   * Currently selected values\n   */\n  value: (string | number)[];\n\n  /**\n   * Callback fired when the value changes\n   */\n  onChange: (value: (string | number)[]) => void;\n\n  /**\n   * Label for the select\n   */\n  label?: string;\n\n  /**\n   * Placeholder text when no options are selected\n   */\n  placeholder?: string;\n\n  /**\n   * Whether the component is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the component is required\n   */\n  required?: boolean;\n\n  /**\n   * Error message to display\n   */\n  error?: string;\n\n  /**\n   * Helper text to display below the select\n   */\n  helperText?: string;\n\n  /**\n   * Maximum height of the dropdown menu in pixels\n   */\n  maxMenuHeight?: number;\n\n  /**\n   * Whether to show a search input in the dropdown\n   */\n  searchable?: boolean;\n\n  /**\n   * Whether to show select all/none options\n   */\n  showSelectAllOption?: boolean;\n\n  /**\n   * Custom render function for the selected values\n   */\n  renderValue?: (selected: (string | number)[]) => React.ReactNode;\n\n  /**\n   * Size of the select component\n   */\n  size?: 'small' | 'medium';\n\n  /**\n   * Width of the component\n   */\n  width?: string | number;\n\n  /**\n   * Custom ID for the component\n   */\n  id?: string;\n\n  /**\n   * Custom name for the component\n   */\n  name?: string;\n}\n\n/**\n * MultiSelect component\n *\n * A reusable multi-select dropdown component with search functionality,\n * select all option, and chip display for selected values.\n */\nconst MultiSelect: React.FC<MultiSelectProps> = ({\n  options = [],\n  value = [],\n  onChange,\n  label = '',\n  placeholder = 'Select items',\n  disabled = false,\n  required = false,\n  error = '',\n  helperText = '',\n  maxMenuHeight = 300,\n  searchable = true,\n  showSelectAllOption = true,\n  renderValue,\n  size = 'small',\n  width,\n  id,\n  name,\n  sx,\n  className,\n  style\n}) => {\n  // State for search term\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  // Filter options based on search term\n  const filteredOptions = options.filter(option =>\n    option.label.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Handle select change\n  const handleChange = (event: SelectChangeEvent<(string | number)[]>) => {\n    const newValue = event.target.value as (string | number)[];\n    onChange(newValue);\n  };\n\n  // Handle search input change\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  };\n\n  // Clear search term\n  const handleClearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Handle select all\n  const handleSelectAll = () => {\n    // Only select from filtered options that aren't disabled\n    const selectableOptions = filteredOptions\n      .filter(option => !option.disabled)\n      .map(option => option.value);\n\n    onChange(selectableOptions);\n  };\n\n  // Handle select none\n  const handleSelectNone = () => {\n    onChange([]);\n  };\n\n  // Handle removing a single item\n  const handleRemoveItem = (valueToRemove: string | number) => (event: React.MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation(); // Prevent the dropdown from opening\n    const newValue = value.filter(val => val.toString() !== valueToRemove.toString());\n    onChange(newValue);\n  };\n\n  // Default render function for selected values\n  const defaultRenderValue = (selected: (string | number)[]) => {\n    if (!selected || selected.length === 0) {\n      return <Typography color=\"text.secondary\">{placeholder}</Typography>;\n    }\n\n    // Always show chips for all selected items\n    return (\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n        {selected.map((selectedValue) => {\n          const option = options.find(opt => opt.value.toString() === selectedValue.toString());\n          return (\n            <Chip\n              key={selectedValue}\n              label={option ? option.label : selectedValue}\n              size=\"small\"\n              onDelete={handleRemoveItem(selectedValue)}\n              onClick={(e) => e.stopPropagation()} // Prevent opening dropdown when clicking the chip\n              deleteIcon={\n                <ClearIcon\n                  fontSize=\"small\"\n                  onMouseDown={(e) => e.stopPropagation()} // Extra prevention\n                />\n              }\n              sx={{\n                '& .MuiChip-deleteIcon': {\n                  display: 'none',\n                  opacity: 0.7,\n                  '&:hover': {\n                    opacity: 1,\n                  }\n                },\n                '&:hover .MuiChip-deleteIcon': {\n                  display: 'block',\n                },\n              }}\n            />\n          );\n        })}\n      </Box>\n    );\n  };\n\n  // If no options are provided, show a message\n  if (!options || options.length === 0) {\n    return (\n      <FormControl\n        fullWidth\n        size={size}\n        error={!!error}\n        disabled={true}\n        required={required}\n        sx={{\n          width: width,\n          ...sx\n        }}\n        className={className}\n        style={style}\n      >\n        {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n        <Select\n          labelId={`${id || 'multi-select'}-label`}\n          id={id || 'multi-select'}\n          name={name}\n          multiple\n          value={[]}\n          input={<OutlinedInput label={label} />}\n          renderValue={() => <Typography color=\"text.secondary\">No options available</Typography>}\n        >\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options available\n            </Typography>\n          </MenuItem>\n        </Select>\n        {helperText && (\n          <FormHelperText>{helperText}</FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n\n  // Reset search when dropdown closes\n  const handleClose = () => {\n    setSearchTerm('');\n  };\n\n  return (\n    <FormControl\n      fullWidth\n      size={size}\n      error={!!error}\n      disabled={disabled}\n      required={required}\n      sx={{\n        width: width || '100%',\n        minWidth: '100%',\n        ...sx\n      }}\n      className={className}\n      style={style}\n    >\n      {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n\n      <Select\n        labelId={`${id || 'multi-select'}-label`}\n        id={id || 'multi-select'}\n        name={name}\n        multiple\n        value={value}\n        onChange={handleChange}\n        input={<OutlinedInput label={label} />}\n        renderValue={renderValue || defaultRenderValue}\n        onClose={handleClose}\n        // Add a custom click handler to prevent opening when clicking on chips\n        onClick={(e) => {\n          // Check if the click was on a chip or delete icon\n          if (\n            e.target instanceof HTMLElement &&\n            (e.target.classList.contains('MuiChip-root') ||\n             e.target.classList.contains('MuiChip-label') ||\n             e.target.classList.contains('MuiChip-deleteIcon') ||\n             e.target.closest('.MuiChip-deleteIcon'))\n          ) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }}\n        MenuProps={{\n          PaperProps: {\n            style: {\n              maxHeight: maxMenuHeight,\n            },\n          },\n        }}\n      >\n        {/* Search input */}\n        {searchable && (\n          <Box sx={{ p: 1, position: 'sticky', top: 0, bgcolor: 'background.paper', zIndex: 1 }}>\n            <TextField\n              size=\"small\"\n              placeholder=\"Search...\"\n              fullWidth\n              value={searchTerm}\n              onChange={handleSearchChange}\n              onClick={(e) => e.stopPropagation()}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon fontSize=\"small\" />\n                  </InputAdornment>\n                ),\n                endAdornment: searchTerm ? (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleClearSearch();\n                      }}\n                    >\n                      <ClearIcon fontSize=\"small\" />\n                    </IconButton>\n                  </InputAdornment>\n                ) : null,\n              }}\n            />\n          </Box>\n        )}\n\n        {/* Select all/none options */}\n        {showSelectAllOption && filteredOptions.length > 0 && [\n            <Box key=\"select-all-box\" sx={{ px: 1, py: 0.5, display: 'flex', justifyContent: 'space-between' }}>\n              <Button size=\"small\" onClick={handleSelectAll}>Select All</Button>\n              <Button size=\"small\" onClick={handleSelectNone}>Clear All</Button>\n            </Box>,\n            <Divider key=\"select-all-divider\" />\n        ]}\n\n        {/* No options message */}\n        {filteredOptions.length === 0 && (\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options found\n            </Typography>\n          </MenuItem>\n        )}\n\n        {/* Options */}\n        {filteredOptions.map((option) => (\n          <MenuItem\n            key={option.value}\n            value={option.value}\n            disabled={option.disabled}\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            }}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <Checkbox\n                checked={value.some(val =>\n                  val.toString() === option.value.toString()\n                )}\n              />\n              <ListItemText\n                primary={option.label}\n                secondary={option.group}\n              />\n            </Box>\n            {option.description && (\n              <Tooltip title={option.description} arrow>\n                <InfoOutlinedIcon fontSize=\"small\" color=\"action\" sx={{ ml: 1 }} />\n              </Tooltip>\n            )}\n          </MenuItem>\n        ))}\n      </Select>\n\n      {/* Helper text or error message */}\n      {(helperText || error) && (\n        <FormHelperText>{error || helperText}</FormHelperText>\n      )}\n    </FormControl>\n  );\n};\n\nexport default MultiSelect;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)([/*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}, \"0\"), /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 10h-2v2H9v-2H7V9h2V7h1v2h2z\"\n}, \"1\")], 'ZoomIn');","import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  IconButton,\n  InputAdornment,\n  Menu,\n  MenuItem,\n  Popover,\n  TextField,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { ColumnDef, FilteringConfig } from '../types';\n\ninterface QuickFilterProps {\n  value: string;\n  onChange: (value: string) => void;\n}\n\n/**\n * Quick filter component\n */\nexport const QuickFilter: React.FC<QuickFilterProps> = ({ value, onChange }) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n\n  const handleClear = () => {\n    onChange('');\n  };\n\n  return (\n    <TextField\n      size=\"small\"\n      placeholder=\"Search...\"\n      value={value}\n      onChange={handleChange}\n      InputProps={{\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <SearchIcon fontSize=\"small\" />\n          </InputAdornment>\n        ),\n        endAdornment: value ? (\n          <InputAdornment position=\"end\">\n            <IconButton\n              size=\"small\"\n              onClick={handleClear}\n              edge=\"end\"\n              aria-label=\"clear search\"\n            >\n              <ClearIcon fontSize=\"small\" />\n            </IconButton>\n          </InputAdornment>\n        ) : null\n      }}\n      sx={{ width: { xs: 120, sm: 200 } }}\n    />\n  );\n};\n\ninterface AdvancedFilterProps {\n  columns: ColumnDef[];\n  filters: Record<string, any>;\n  onChange: (filters: Record<string, any>) => void;\n}\n\n/**\n * Advanced filter component\n */\nexport const AdvancedFilter: React.FC<AdvancedFilterProps> = ({\n  columns,\n  filters,\n  onChange\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [localFilters, setLocalFilters] = useState<Record<string, any>>(filters);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n    setLocalFilters({ ...filters });\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleApply = () => {\n    onChange(localFilters);\n    handleClose();\n  };\n\n  const handleReset = () => {\n    setLocalFilters({});\n    onChange({});\n    handleClose();\n  };\n\n  const handleFilterChange = (columnId: string, value: any) => {\n    setLocalFilters(prev => ({\n      ...prev,\n      [columnId]: value\n    }));\n  };\n\n  const filterableColumns = columns.filter(col => col.filterable !== false);\n\n  return (\n    <>\n      <Tooltip title=\"Advanced filters\">\n        <IconButton size=\"small\" onClick={handleOpen}>\n          <FilterListIcon\n            fontSize=\"small\"\n            color={Object.keys(filters).length > 0 ? 'primary' : 'inherit'}\n          />\n        </IconButton>\n      </Tooltip>\n\n      <Popover\n        open={Boolean(anchorEl)}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right'\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right'\n        }}\n      >\n        <Box sx={{ p: 2, width: 300 }}>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Advanced Filters\n          </Typography>\n\n          {filterableColumns.map(column => (\n            <Box key={column.id} sx={{ mb: 2 }}>\n              <Typography variant=\"caption\">{column.label}</Typography>\n              {renderFilterInput(column, localFilters[column.id], value => {\n                handleFilterChange(column.id, value);\n              })}\n            </Box>\n          ))}\n\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>\n            <Button size=\"small\" onClick={handleReset}>\n              Reset\n            </Button>\n            <Button size=\"small\" variant=\"contained\" onClick={handleApply}>\n              Apply\n            </Button>\n          </Box>\n        </Box>\n      </Popover>\n    </>\n  );\n};\n\n/**\n * Render appropriate filter input based on column type\n */\nconst renderFilterInput = (\n  column: ColumnDef,\n  value: any,\n  onChange: (value: any) => void\n) => {\n  switch (column.type) {\n    case 'number':\n    case 'currency':\n      return (\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          <TextField\n            size=\"small\"\n            type=\"number\"\n            placeholder=\"Min\"\n            value={value?.min || ''}\n            onChange={e => {\n              const min = e.target.value ? Number(e.target.value) : undefined;\n              onChange({ ...value, min });\n            }}\n            sx={{ flex: 1 }}\n          />\n          <TextField\n            size=\"small\"\n            type=\"number\"\n            placeholder=\"Max\"\n            value={value?.max || ''}\n            onChange={e => {\n              const max = e.target.value ? Number(e.target.value) : undefined;\n              onChange({ ...value, max });\n            }}\n            sx={{ flex: 1 }}\n          />\n        </Box>\n      );\n\n    case 'text':\n    case 'link':\n    default:\n      return (\n        <TextField\n          size=\"small\"\n          placeholder=\"Filter...\"\n          value={value || ''}\n          onChange={e => onChange(e.target.value)}\n          fullWidth\n        />\n      );\n  }\n};\n\ninterface FilteringComponentProps {\n  columns: ColumnDef[];\n  config: FilteringConfig;\n  quickFilterValue: string;\n  advancedFilters: Record<string, any>;\n  onQuickFilterChange: (value: string) => void;\n  onAdvancedFiltersChange: (filters: Record<string, any>) => void;\n}\n\n/**\n * Main filtering component\n */\nconst Filtering: React.FC<FilteringComponentProps> = ({\n  columns,\n  config,\n  quickFilterValue,\n  advancedFilters,\n  onQuickFilterChange,\n  onAdvancedFiltersChange\n}) => {\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n      {config.quickFilter && (\n        <QuickFilter value={quickFilterValue} onChange={onQuickFilterChange} />\n      )}\n      \n      {config.advancedFilter && (\n        <AdvancedFilter\n          columns={columns}\n          filters={advancedFilters}\n          onChange={onAdvancedFiltersChange}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default Filtering;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Checkbox,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport ViewColumnIcon from '@mui/icons-material/ViewColumn';\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\nimport PushPinIcon from '@mui/icons-material/PushPin';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { ColumnDef, ColumnManagementConfig } from '../types';\n\ninterface ColumnManagementProps {\n  columns: ColumnDef[];\n  config: ColumnManagementConfig;\n  visibleColumns: string[];\n  columnOrder: string[];\n  stickyColumns: string[];\n  onVisibilityChange: (columnId: string, visible: boolean) => void;\n  onOrderChange: (newOrder: string[]) => void;\n  onStickyChange: (columnId: string, sticky: boolean) => void;\n}\n\n/**\n * Column management component\n */\nconst ColumnManagement: React.FC<ColumnManagementProps> = ({\n  columns,\n  config,\n  visibleColumns,\n  columnOrder,\n  stickyColumns,\n  onVisibilityChange,\n  onOrderChange,\n  onStickyChange\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleVisibilityChange = (columnId: string) => {\n    const isVisible = visibleColumns.includes(columnId);\n    onVisibilityChange(columnId, !isVisible);\n  };\n\n  const handleStickyChange = (columnId: string) => {\n    const isSticky = stickyColumns.includes(columnId);\n    onStickyChange(columnId, !isSticky);\n  };\n\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n\n    const sourceIndex = result.source.index;\n    const destinationIndex = result.destination.index;\n\n    const newOrder = [...columnOrder];\n    const [removed] = newOrder.splice(sourceIndex, 1);\n    newOrder.splice(destinationIndex, 0, removed);\n\n    onOrderChange(newOrder);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Manage columns\">\n        <IconButton size=\"small\" onClick={handleOpen}>\n          <ViewColumnIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            maxHeight: 400,\n            width: 250\n          }\n        }}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Manage Columns\n        </Typography>\n        <Divider />\n\n        {config.allowReordering ? (\n          <DragDropContext onDragEnd={handleDragEnd}>\n            <Droppable droppableId=\"column-manager\">\n              {(provided) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {columnOrder.map((columnId, index) => {\n                    const column = columns.find(col => col.id === columnId);\n                    if (!column) return null;\n\n                    return (\n                      <Draggable\n                        key={column.id}\n                        draggableId={column.id}\n                        index={index}\n                      >\n                        {(provided) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            <MenuItem\n                              dense\n                              sx={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'space-between'\n                              }}\n                            >\n                              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                <DragIndicatorIcon\n                                  fontSize=\"small\"\n                                  sx={{ mr: 1, color: 'text.secondary' }}\n                                />\n                                <FormControlLabel\n                                  control={\n                                    <Checkbox\n                                      size=\"small\"\n                                      checked={visibleColumns.includes(column.id)}\n                                      onChange={() => handleVisibilityChange(column.id)}\n                                      disabled={visibleColumns.length === 1 && visibleColumns.includes(column.id)}\n                                    />\n                                  }\n                                  label={column.label}\n                                  sx={{ m: 0 }}\n                                />\n                              </Box>\n                              {config.allowPinning && (\n                                <Tooltip title={stickyColumns.includes(column.id) ? \"Unpin column\" : \"Pin column\"}>\n                                  <IconButton\n                                    size=\"small\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleStickyChange(column.id);\n                                    }}\n                                    color={stickyColumns.includes(column.id) ? \"primary\" : \"default\"}\n                                  >\n                                    <PushPinIcon fontSize=\"small\" />\n                                  </IconButton>\n                                </Tooltip>\n                              )}\n                            </MenuItem>\n                          </div>\n                        )}\n                      </Draggable>\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        ) : (\n          columns.map(column => (\n            <MenuItem key={column.id} dense>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    size=\"small\"\n                    checked={visibleColumns.includes(column.id)}\n                    onChange={() => handleVisibilityChange(column.id)}\n                    disabled={visibleColumns.length === 1 && visibleColumns.includes(column.id)}\n                  />\n                }\n                label={column.label}\n                sx={{ width: '100%' }}\n              />\n              {config.allowPinning && (\n                <Tooltip title={stickyColumns.includes(column.id) ? \"Unpin column\" : \"Pin column\"}>\n                  <IconButton\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleStickyChange(column.id);\n                    }}\n                    color={stickyColumns.includes(column.id) ? \"primary\" : \"default\"}\n                  >\n                    <PushPinIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              )}\n            </MenuItem>\n          ))\n        )}\n      </Menu>\n    </>\n  );\n};\n\nexport default ColumnManagement;\n","import React from 'react';\nimport { TablePagination } from '@mui/material';\nimport { PaginationConfig } from '../types';\n\ninterface PaginationProps {\n  config: PaginationConfig;\n  totalCount: number;\n  page: number;\n  pageSize: number;\n  onPageChange: (page: number) => void;\n  onPageSizeChange: (pageSize: number) => void;\n}\n\n/**\n * Pagination component for tables\n */\nconst Pagination: React.FC<PaginationProps> = ({\n  config,\n  totalCount,\n  page,\n  pageSize,\n  onPageChange,\n  onPageSizeChange\n}) => {\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number\n  ) => {\n    onPageChange(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    onPageSizeChange(parseInt(event.target.value, 10));\n  };\n\n  return (\n    <TablePagination\n      component=\"div\"\n      count={totalCount}\n      page={page}\n      onPageChange={handleChangePage}\n      rowsPerPage={pageSize}\n      onRowsPerPageChange={handleChangeRowsPerPage}\n      rowsPerPageOptions={config.pageSizeOptions || [10, 25, 50, 100]}\n      labelDisplayedRows={({ from, to, count }) => `${from}-${to} of ${count}`}\n      labelRowsPerPage=\"Rows per page:\"\n      sx={{\n        '.MuiTablePagination-selectLabel, .MuiTablePagination-displayedRows': {\n          margin: 0\n        }\n      }}\n    />\n  );\n};\n\nexport default Pagination;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Chip,\n  Divider,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport GroupWorkIcon from '@mui/icons-material/GroupWork';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { ColumnDef, GroupingConfig } from '../types';\n\ninterface GroupingProps {\n  columns: ColumnDef[];\n  config: GroupingConfig;\n  groupByColumn: string | null;\n  onGroupingChange: (columnId: string | null) => void;\n}\n\n/**\n * Grouping component for tables\n */\nconst Grouping: React.FC<GroupingProps> = ({\n  columns,\n  config,\n  groupByColumn,\n  onGroupingChange\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleGroupingChange = (columnId: string | null) => {\n    onGroupingChange(columnId);\n    handleClose();\n  };\n\n  // Filter columns that can be grouped\n  const groupableColumns = columns.filter(col => col.groupable !== false);\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Tooltip title={groupByColumn ? \"Change grouping\" : \"Group by column\"}>\n          <IconButton\n            size=\"small\"\n            onClick={handleOpen}\n            color={groupByColumn ? \"primary\" : \"default\"}\n          >\n            <GroupWorkIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n\n        {groupByColumn && (\n          <Chip\n            size=\"small\"\n            label={`Grouped by: ${columns.find(col => col.id === groupByColumn)?.label || groupByColumn}`}\n            onDelete={() => onGroupingChange(null)}\n            sx={{ ml: 1 }}\n          />\n        )}\n      </Box>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Group By Column\n        </Typography>\n        <Divider />\n        <MenuItem\n          onClick={() => handleGroupingChange(null)}\n          selected={groupByColumn === null}\n        >\n          <Typography color={!groupByColumn ? 'primary' : 'inherit'}>\n            None (No Grouping)\n          </Typography>\n        </MenuItem>\n        {groupableColumns.map(column => (\n          <MenuItem\n            key={column.id}\n            onClick={() => handleGroupingChange(column.id)}\n            selected={groupByColumn === column.id}\n          >\n            {column.label}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default Grouping;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Chip,\n  Divider,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Checkbox,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions\n} from '@mui/material';\nimport GroupWorkIcon from '@mui/icons-material/GroupWork';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight';\nimport { ColumnDef, GroupingConfig } from '../types';\n\ninterface HierarchicalGroupingProps {\n  columns: ColumnDef[];\n  config: GroupingConfig;\n  groupByLevels: string[];\n  onGroupingLevelsChange: (columnIds: string[]) => void;\n}\n\n/**\n * Hierarchical Grouping component for tables\n * Allows selecting multiple grouping levels in a specific order\n */\nconst HierarchicalGrouping: React.FC<HierarchicalGroupingProps> = ({\n  columns,\n  config,\n  groupByLevels,\n  onGroupingLevelsChange\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // Filter columns that can be grouped\n  const groupableColumns = columns.filter(col => col.groupable !== false);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleOpenDialog = () => {\n    setDialogOpen(true);\n    handleClose();\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n  };\n\n  const handleToggleGroupLevel = (columnId: string) => {\n    const newGroupByLevels = [...groupByLevels];\n    const index = newGroupByLevels.indexOf(columnId);\n    \n    if (index === -1) {\n      // Add to the end of the list\n      newGroupByLevels.push(columnId);\n    } else {\n      // Remove from the list\n      newGroupByLevels.splice(index, 1);\n    }\n    \n    onGroupingLevelsChange(newGroupByLevels);\n  };\n\n  const handleMoveUp = (index: number) => {\n    if (index <= 0) return;\n    \n    const newGroupByLevels = [...groupByLevels];\n    const temp = newGroupByLevels[index];\n    newGroupByLevels[index] = newGroupByLevels[index - 1];\n    newGroupByLevels[index - 1] = temp;\n    \n    onGroupingLevelsChange(newGroupByLevels);\n  };\n\n  const handleMoveDown = (index: number) => {\n    if (index >= groupByLevels.length - 1) return;\n    \n    const newGroupByLevels = [...groupByLevels];\n    const temp = newGroupByLevels[index];\n    newGroupByLevels[index] = newGroupByLevels[index + 1];\n    newGroupByLevels[index + 1] = temp;\n    \n    onGroupingLevelsChange(newGroupByLevels);\n  };\n\n  const handleClearAll = () => {\n    onGroupingLevelsChange([]);\n    handleCloseDialog();\n  };\n\n  const handleApply = () => {\n    handleCloseDialog();\n  };\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Tooltip title=\"Configure hierarchical grouping\">\n          <IconButton\n            size=\"small\"\n            onClick={handleOpen}\n            color={groupByLevels.length > 0 ? \"primary\" : \"default\"}\n          >\n            <GroupWorkIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n\n        {groupByLevels.length > 0 && (\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, ml: 1 }}>\n            {groupByLevels.map((columnId, index) => {\n              const column = columns.find(col => col.id === columnId);\n              return (\n                <Box key={columnId} sx={{ display: 'flex', alignItems: 'center' }}>\n                  {index > 0 && <ArrowRightIcon fontSize=\"small\" sx={{ mx: 0.5 }} />}\n                  <Chip\n                    size=\"small\"\n                    label={column?.label || columnId}\n                    onDelete={() => {\n                      const newLevels = [...groupByLevels];\n                      newLevels.splice(index, 1);\n                      onGroupingLevelsChange(newLevels);\n                    }}\n                  />\n                </Box>\n              );\n            })}\n          </Box>\n        )}\n      </Box>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Hierarchical Grouping\n        </Typography>\n        <Divider />\n        <MenuItem onClick={handleOpenDialog}>\n          Configure Group Levels\n        </MenuItem>\n        {groupByLevels.length > 0 && (\n          <MenuItem onClick={() => onGroupingLevelsChange([])}>\n            Clear All Grouping\n          </MenuItem>\n        )}\n      </Menu>\n\n      <Dialog \n        open={dialogOpen} \n        onClose={handleCloseDialog}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>Configure Hierarchical Grouping</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" sx={{ mb: 2 }}>\n            Select columns to group by and arrange them in the desired order. Data will be grouped by the first level, then by the second level within each first-level group, and so on.\n          </Typography>\n          \n          <List sx={{ width: '100%' }}>\n            {groupableColumns.map(column => {\n              const isSelected = groupByLevels.includes(column.id);\n              const index = groupByLevels.indexOf(column.id);\n              \n              return (\n                <ListItem \n                  key={column.id}\n                  secondaryAction={\n                    isSelected && (\n                      <Box>\n                        <IconButton \n                          edge=\"end\" \n                          onClick={() => handleMoveUp(index)}\n                          disabled={index <= 0}\n                          size=\"small\"\n                        >\n                          ↑\n                        </IconButton>\n                        <IconButton \n                          edge=\"end\" \n                          onClick={() => handleMoveDown(index)}\n                          disabled={index >= groupByLevels.length - 1}\n                          size=\"small\"\n                        >\n                          ↓\n                        </IconButton>\n                      </Box>\n                    )\n                  }\n                >\n                  <ListItemIcon>\n                    <Checkbox\n                      edge=\"start\"\n                      checked={isSelected}\n                      onChange={() => handleToggleGroupLevel(column.id)}\n                    />\n                  </ListItemIcon>\n                  <ListItemText \n                    primary={column.label} \n                    secondary={isSelected ? `Level ${index + 1}` : null}\n                  />\n                </ListItem>\n              );\n            })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClearAll}>Clear All</Button>\n          <Button onClick={handleCloseDialog}>Cancel</Button>\n          <Button onClick={handleApply} variant=\"contained\">Apply</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default HierarchicalGrouping;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Checkbox,\n  Chip,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  Menu,\n  MenuItem,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport SummarizeIcon from '@mui/icons-material/Summarize';\nimport { AggregationConfig, AggregationDefinition, AggregationFunction, ColumnDef } from '../types';\nimport { calculateAggregation } from '../utils';\n\ninterface AggregationMenuProps {\n  columns: ColumnDef[];\n  aggregations: AggregationDefinition[];\n  enabledAggregations: string[];\n  onAggregationToggle: (aggregationId: string) => void;\n}\n\n/**\n * Aggregation menu component\n */\nconst AggregationMenu: React.FC<AggregationMenuProps> = ({\n  columns,\n  aggregations,\n  enabledAggregations,\n  onAggregationToggle\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleToggle = (aggregationId: string) => {\n    onAggregationToggle(aggregationId);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Summary calculations\">\n        <IconButton\n          size=\"small\"\n          onClick={handleOpen}\n          color={enabledAggregations.length > 0 ? \"primary\" : \"default\"}\n        >\n          <SummarizeIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            maxHeight: 400,\n            width: 250\n          }\n        }}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Summary Calculations\n        </Typography>\n        <Divider />\n        {aggregations.map(agg => {\n          const column = columns.find(col => col.id === agg.columnId);\n          if (!column) return null;\n          \n          const aggregationId = `${agg.columnId}_${agg.function}`;\n          \n          return (\n            <MenuItem key={aggregationId} dense>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    size=\"small\"\n                    checked={enabledAggregations.includes(aggregationId)}\n                    onChange={() => handleToggle(aggregationId)}\n                  />\n                }\n                label={agg.label || `${column.label} (${agg.function.toUpperCase()})`}\n                sx={{ width: '100%' }}\n              />\n            </MenuItem>\n          );\n        })}\n      </Menu>\n    </>\n  );\n};\n\ninterface AggregationRowProps {\n  columns: ColumnDef[];\n  data: any[];\n  enabledAggregations: string[];\n  visibleColumns: string[];\n}\n\n/**\n * Aggregation row component\n */\nexport const AggregationRow: React.FC<AggregationRowProps> = ({\n  columns,\n  data,\n  enabledAggregations,\n  visibleColumns\n}) => {\n  if (!data.length || !enabledAggregations.length) return null;\n\n  // Calculate aggregations\n  const aggregationResults: Record<string, any> = {};\n  \n  enabledAggregations.forEach(aggId => {\n    const [columnId, func] = aggId.split('_');\n    aggregationResults[aggId] = calculateAggregation(\n      data,\n      columnId,\n      func as AggregationFunction\n    );\n  });\n\n  return (\n    <Paper\n      elevation={0}\n      variant=\"outlined\"\n      sx={{\n        mt: 1,\n        p: 1,\n        backgroundColor: theme => theme.palette.mode === 'dark'\n          ? theme.palette.grey[800]\n          : theme.palette.grey[100]\n      }}\n    >\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n        <SummarizeIcon fontSize=\"small\" sx={{ mr: 1 }} />\n        <Typography variant=\"subtitle2\">Summary</Typography>\n      </Box>\n      <Table size=\"small\">\n        <TableBody>\n          <TableRow>\n            {visibleColumns.map(columnId => {\n              const column = columns.find(col => col.id === columnId);\n              if (!column) return null;\n\n              // Find aggregations for this column\n              const columnAggs = enabledAggregations\n                .filter(aggId => aggId.startsWith(column.id + '_'))\n                .map(aggId => {\n                  const [_, func] = aggId.split('_');\n                  return {\n                    function: func as AggregationFunction,\n                    value: aggregationResults[aggId]\n                  };\n                });\n\n              if (columnAggs.length === 0) {\n                return (\n                  <TableCell key={column.id} align={column.align || 'left'}>\n                    -\n                  </TableCell>\n                );\n              }\n\n              return (\n                <TableCell key={column.id} align={column.align || 'left'}>\n                  {columnAggs.map(agg => {\n                    let displayValue = agg.value;\n                    \n                    // Format the value based on column type\n                    if (column.format && typeof displayValue === 'number') {\n                      displayValue = column.format(displayValue, {});\n                    } else if (column.type === 'currency' && typeof displayValue === 'number') {\n                      displayValue = new Intl.NumberFormat('en-US', {\n                        style: 'currency',\n                        currency: 'USD'\n                      }).format(displayValue);\n                    } else if (column.type === 'number' && typeof displayValue === 'number') {\n                      displayValue = displayValue.toLocaleString();\n                    }\n                    \n                    return (\n                      <Box key={agg.function} sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>\n                        <Chip\n                          size=\"small\"\n                          label={agg.function.toUpperCase()}\n                          sx={{ mr: 1, fontSize: '0.7rem' }}\n                        />\n                        <Typography variant=\"body2\">{displayValue}</Typography>\n                      </Box>\n                    );\n                  })}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n};\n\ninterface AggregationProps {\n  columns: ColumnDef[];\n  config: AggregationConfig;\n  data: any[];\n  enabledAggregations: string[];\n  visibleColumns: string[];\n  onAggregationToggle: (aggregationId: string) => void;\n}\n\n/**\n * Main aggregation component\n */\nconst Aggregation: React.FC<AggregationProps> = ({\n  columns,\n  config,\n  data,\n  enabledAggregations,\n  visibleColumns,\n  onAggregationToggle\n}) => {\n  // Create aggregation definitions from columns\n  const aggregations = columns\n    .filter(col => col.aggregatable !== false && (col.type === 'number' || col.type === 'currency'))\n    .flatMap(col => {\n      const funcs: AggregationFunction[] = ['sum', 'avg'];\n      return funcs.map(func => ({\n        columnId: col.id,\n        function: func,\n        label: `${col.label} (${func.toUpperCase()})`\n      }));\n    });\n\n  return (\n    <AggregationMenu\n      columns={columns}\n      aggregations={aggregations}\n      enabledAggregations={enabledAggregations}\n      onAggregationToggle={onAggregationToggle}\n    />\n  );\n};\n\nexport default Aggregation;\n","import { AggregationFunction, TableState, ColumnDef, HierarchicalGroup } from './types';\n\n/**\n * Format a number as currency\n */\nexport const formatCurrency = (value: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(value);\n};\n\n/**\n * Format a number with thousands separators\n */\nexport const formatNumber = (value: number): string => {\n  return new Intl.NumberFormat('en-US').format(value);\n};\n\n/**\n * Format a number as a percentage\n */\nexport const formatPercentage = (value: number): string => {\n  return `${value}%`;\n};\n\n/**\n * Calculate aggregation for a column\n */\nexport const calculateAggregation = (\n  data: any[],\n  columnId: string,\n  aggregationFunction: AggregationFunction\n): number => {\n  if (!data.length) return 0;\n\n  switch (aggregationFunction) {\n    case 'sum':\n      return data.reduce((sum, row) => {\n        const value = Number(row[columnId]) || 0;\n        return sum + value;\n      }, 0);\n\n    case 'avg':\n      const sum = data.reduce((acc, row) => {\n        const value = Number(row[columnId]) || 0;\n        return acc + value;\n      }, 0);\n      return sum / data.length;\n\n    case 'min':\n      return Math.min(...data.map(row => Number(row[columnId]) || 0));\n\n    case 'max':\n      return Math.max(...data.map(row => Number(row[columnId]) || 0));\n\n    case 'count':\n      return data.length;\n\n    default:\n      return 0;\n  }\n};\n\n/**\n * Group data by a column\n */\nexport const groupData = (data: any[], groupByColumn: string): Record<string, any[]> => {\n  const groups: Record<string, any[]> = {};\n\n  data.forEach(row => {\n    const groupValue = String(row[groupByColumn] || 'Unknown');\n    if (!groups[groupValue]) {\n      groups[groupValue] = [];\n    }\n    groups[groupValue].push(row);\n  });\n\n  return groups;\n};\n\n/**\n * Sort data by a column\n */\nexport const sortData = (\n  data: any[],\n  columnId: string,\n  direction: 'asc' | 'desc'\n): any[] => {\n  return [...data].sort((a, b) => {\n    const valueA = a[columnId];\n    const valueB = b[columnId];\n\n    // Handle null/undefined values\n    if (valueA === null || valueA === undefined) return direction === 'asc' ? -1 : 1;\n    if (valueB === null || valueB === undefined) return direction === 'asc' ? 1 : -1;\n\n    // Compare based on type\n    if (typeof valueA === 'number' && typeof valueB === 'number') {\n      return direction === 'asc' ? valueA - valueB : valueB - valueA;\n    }\n\n    // Default string comparison\n    return direction === 'asc'\n      ? String(valueA).localeCompare(String(valueB))\n      : String(valueB).localeCompare(String(valueA));\n  });\n};\n\n/**\n * Filter data based on quick filter and advanced filters\n */\nexport const filterData = (\n  data: any[],\n  quickFilter: string,\n  advancedFilters: Record<string, any>\n): any[] => {\n  let filteredData = data;\n\n  // Apply quick filter\n  if (quickFilter) {\n    const lowerCaseSearchTerm = quickFilter.toLowerCase();\n    filteredData = filteredData.filter(row => {\n      return Object.keys(row).some(key => {\n        const value = row[key];\n        if (value === null || value === undefined) return false;\n        if (typeof value === 'object') return false;\n        return String(value).toLowerCase().includes(lowerCaseSearchTerm);\n      });\n    });\n  }\n\n  // Apply advanced filters\n  if (Object.keys(advancedFilters).length > 0) {\n    filteredData = filteredData.filter(row => {\n      return Object.entries(advancedFilters).every(([key, value]) => {\n        if (value === null || value === undefined) return true;\n\n        // Handle different filter types\n        if (typeof value === 'object') {\n          if ('min' in value && row[key] < value.min) return false;\n          if ('max' in value && row[key] > value.max) return false;\n          if ('values' in value && !value.values.includes(row[key])) return false;\n          return true;\n        }\n\n        return row[key] === value;\n      });\n    });\n  }\n\n  return filteredData;\n};\n\n/**\n * Encode table state to URL parameters\n */\nexport const encodeStateToUrl = (state: TableState): string => {\n  const params = new URLSearchParams();\n\n  // Encode sorting\n  params.set('sort', `${state.sorting.column},${state.sorting.direction}`);\n\n  // Encode filtering\n  if (state.filtering.quickFilter) {\n    params.set('q', state.filtering.quickFilter);\n  }\n\n  if (Object.keys(state.filtering.advancedFilters).length > 0) {\n    params.set('filters', JSON.stringify(state.filtering.advancedFilters));\n  }\n\n  // Encode pagination\n  params.set('page', state.pagination.page.toString());\n  params.set('pageSize', state.pagination.pageSize.toString());\n\n  // Encode grouping\n  if (state.grouping.groupByColumn) {\n    params.set('groupBy', state.grouping.groupByColumn);\n  }\n\n  // Encode columns\n  params.set('columns', state.columns.visible.join(','));\n  params.set('columnOrder', state.columns.order.join(','));\n  params.set('stickyColumns', state.columns.sticky.join(','));\n\n  // Encode aggregation\n  if (state.aggregation.enabled.length > 0) {\n    params.set('aggregations', state.aggregation.enabled.join(','));\n  }\n\n  return params.toString();\n};\n\n/**\n * Decode table state from URL parameters\n */\nexport const decodeStateFromUrl = (url: string, defaultState: TableState): TableState => {\n  const params = new URLSearchParams(url);\n  const state = { ...defaultState };\n\n  // Decode sorting\n  const sort = params.get('sort');\n  if (sort) {\n    const [column, direction] = sort.split(',');\n    state.sorting.column = column;\n    state.sorting.direction = direction as 'asc' | 'desc';\n  }\n\n  // Decode filtering\n  const quickFilter = params.get('q');\n  if (quickFilter) {\n    state.filtering.quickFilter = quickFilter;\n  }\n\n  const filters = params.get('filters');\n  if (filters) {\n    try {\n      state.filtering.advancedFilters = JSON.parse(filters);\n    } catch (e) {\n      console.error('Error parsing filters from URL', e);\n    }\n  }\n\n  // Decode pagination\n  const page = params.get('page');\n  if (page) {\n    state.pagination.page = parseInt(page, 10);\n  }\n\n  const pageSize = params.get('pageSize');\n  if (pageSize) {\n    state.pagination.pageSize = parseInt(pageSize, 10);\n  }\n\n  // Decode grouping\n  const groupBy = params.get('groupBy');\n  if (groupBy) {\n    state.grouping.groupByColumn = groupBy;\n  }\n\n  // Decode hierarchical grouping\n  const groupByLevels = params.get('groupByLevels');\n  if (groupByLevels) {\n    state.grouping.groupByLevels = groupByLevels.split(',');\n  }\n\n  // Decode columns\n  const columns = params.get('columns');\n  if (columns) {\n    state.columns.visible = columns.split(',');\n  }\n\n  const columnOrder = params.get('columnOrder');\n  if (columnOrder) {\n    state.columns.order = columnOrder.split(',');\n  }\n\n  const stickyColumns = params.get('stickyColumns');\n  if (stickyColumns) {\n    state.columns.sticky = stickyColumns.split(',');\n  }\n\n  // Decode aggregation\n  const aggregations = params.get('aggregations');\n  if (aggregations) {\n    state.aggregation.enabled = aggregations.split(',');\n  }\n\n  return state;\n};\n\n/**\n * Creates hierarchical data structure from flat data\n * @param data Flat data array\n * @param groupByField Field to group by\n * @param level Current hierarchy level (0-based)\n * @param columns Column definitions\n * @param parentPath Path to the parent node\n * @returns Hierarchical data structure\n */\nexport const createHierarchicalData = (\n  data: any[],\n  groupByField: string,\n  level: number = 0,\n  columns: ColumnDef[],\n  parentPath: string = ''\n): HierarchicalGroup[] => {\n  if (!data || data.length === 0) {\n    return [];\n  }\n\n  // Group data by the specified field\n  const groups: Record<string, any[]> = {};\n\n  data.forEach(item => {\n    const key = item[groupByField]?.toString() || 'Unknown';\n    if (!groups[key]) {\n      groups[key] = [];\n    }\n    groups[key].push(item);\n  });\n\n  // Convert groups to hierarchical structure\n  return Object.entries(groups).map(([value, items]) => {\n    // Generate a unique path for this group\n    const path = parentPath\n      ? `${parentPath}/${groupByField}:${value}`\n      : `${groupByField}:${value}`;\n\n    // Calculate metrics for this group\n    const metrics: Record<string, number> = {};\n\n    // Sum numeric values for all columns\n    columns.forEach(column => {\n      if (column.type === 'number' || column.type === 'currency' || column.type === 'percentage') {\n        metrics[column.id] = items.reduce((sum, item) => {\n          const val = parseFloat(item[column.id]) || 0;\n          return sum + val;\n        }, 0);\n      }\n    });\n\n    // Create the hierarchical group\n    return {\n      id: `group_${level}_${value}`,\n      key: columns.find(col => col.id === groupByField)?.label || groupByField,\n      value,\n      path,\n      level,\n      children: [],\n      data: items,\n      metrics,\n      hasChildren: true,\n      childrenLoaded: false\n    };\n  });\n};\n","import React, { useState } from 'react';\nimport {\n  Divider,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport ZoomInIcon from '@mui/icons-material/ZoomIn';\nimport { DrillDownConfigItem } from '../types';\n\ninterface DrillDownProps {\n  configs: DrillDownConfigItem[];\n  sourceGrouping: string | null;\n  selectedRow: any | null;\n  onDrillDown: (row: any, sourceGrouping: string, targetGrouping: string, filters: Record<string, any>) => void;\n}\n\n/**\n * DrillDown component for tables\n */\nconst DrillDown: React.FC<DrillDownProps> = ({\n  configs,\n  sourceGrouping,\n  selectedRow,\n  onDrillDown\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (selectedRow) {\n      setAnchorEl(event.currentTarget);\n    }\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleDrillDown = (config: DrillDownConfigItem) => {\n    if (!selectedRow || !sourceGrouping) return;\n\n    const filters = config.transformFilter\n      ? config.transformFilter(selectedRow)\n      : { [sourceGrouping]: selectedRow[sourceGrouping] };\n\n    onDrillDown(selectedRow, config.sourceGrouping, config.targetGrouping, filters);\n    handleClose();\n  };\n\n  // Filter applicable drill-down configurations\n  const applicableConfigs = sourceGrouping\n    ? configs.filter(config => config.sourceGrouping === sourceGrouping)\n    : [];\n\n  if (applicableConfigs.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      <Tooltip title=\"Drill down options\">\n        <IconButton\n          size=\"small\"\n          onClick={handleOpen}\n          color=\"primary\"\n          disabled={!selectedRow}\n        >\n          <ZoomInIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Drill Down Options\n        </Typography>\n        <Divider />\n        {applicableConfigs.map((config, index) => (\n          <MenuItem\n            key={`drill-down-${index}`}\n            onClick={() => handleDrillDown(config)}\n          >\n            {config.label || `View by ${config.targetGrouping}`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default DrillDown;\n","import React from 'react';\nimport {\n  Box,\n  Collapse,\n  IconButton,\n  TableCell,\n  TableRow,\n  Tooltip\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport { ExpandableRowsConfig, RowDetailRenderer } from '../types';\n\ninterface ExpandButtonProps {\n  expanded: boolean;\n  onClick: (event?: React.MouseEvent) => void;\n}\n\n/**\n * Expand/collapse button component\n */\nexport const ExpandButton: React.FC<ExpandButtonProps> = ({\n  expanded,\n  onClick\n}) => {\n  return (\n    <Tooltip title={expanded ? \"Collapse\" : \"Expand\"}>\n      <IconButton\n        size=\"small\"\n        onClick={onClick}\n        sx={{ ml: 1 }}\n      >\n        {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\ninterface ExpandedRowProps {\n  colSpan: number;\n  expanded: boolean;\n  renderDetail: RowDetailRenderer;\n  row: any;\n}\n\n/**\n * Expanded row content component\n */\nexport const ExpandedRow: React.FC<ExpandedRowProps> = ({\n  colSpan,\n  expanded,\n  renderDetail,\n  row\n}) => {\n  return (\n    <TableRow>\n      <TableCell\n        colSpan={colSpan}\n        sx={{\n          py: 0,\n          borderBottom: expanded ? undefined : 'none'\n        }}\n      >\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <Box sx={{ py: 2, px: 1 }}>\n            {renderDetail(row)}\n          </Box>\n        </Collapse>\n      </TableCell>\n    </TableRow>\n  );\n};\n\ninterface ExpandAllButtonProps {\n  config: ExpandableRowsConfig;\n  expandedRows: string[];\n  totalRows: number;\n  onExpandAll: () => void;\n  onCollapseAll: () => void;\n}\n\n/**\n * Expand/collapse all button component\n */\nexport const ExpandAllButton: React.FC<ExpandAllButtonProps> = ({\n  config,\n  expandedRows,\n  totalRows,\n  onExpandAll,\n  onCollapseAll\n}) => {\n  const allExpanded = expandedRows.length === totalRows && totalRows > 0;\n\n  return (\n    <Tooltip title={allExpanded ? \"Collapse all rows\" : \"Expand all rows\"}>\n      <IconButton\n        size=\"small\"\n        onClick={allExpanded ? onCollapseAll : onExpandAll}\n        color={expandedRows.length > 0 ? \"primary\" : \"default\"}\n      >\n        {allExpanded ? <ExpandLessIcon fontSize=\"small\" /> : <ExpandMoreIcon fontSize=\"small\" />}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default {\n  ExpandButton,\n  ExpandedRow,\n  ExpandAllButton\n};\n","import React, { useState } from 'react';\nimport {\n  Divider,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport GetAppIcon from '@mui/icons-material/GetApp';\nimport { ExportConfig, ExportFormat } from '../types';\n\ninterface ExportProps {\n  config: ExportConfig;\n  onExport: (format: ExportFormat) => void;\n}\n\n/**\n * Export component for tables\n */\nconst Export: React.FC<ExportProps> = ({\n  config,\n  onExport\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleExport = (format: ExportFormat) => {\n    onExport(format);\n    handleClose();\n  };\n\n  // Use configured formats or default to all formats\n  const formats = config.formats || [\n    ExportFormat.CSV,\n    ExportFormat.EXCEL,\n    ExportFormat.PDF,\n    ExportFormat.JSON\n  ];\n\n  return (\n    <>\n      <Tooltip title=\"Export data\">\n        <IconButton size=\"small\" onClick={handleOpen}>\n          <GetAppIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Export Format\n        </Typography>\n        <Divider />\n        {formats.includes(ExportFormat.CSV) && (\n          <MenuItem onClick={() => handleExport(ExportFormat.CSV)}>\n            CSV\n          </MenuItem>\n        )}\n        {formats.includes(ExportFormat.EXCEL) && (\n          <MenuItem onClick={() => handleExport(ExportFormat.EXCEL)}>\n            Excel\n          </MenuItem>\n        )}\n        {formats.includes(ExportFormat.PDF) && (\n          <MenuItem onClick={() => handleExport(ExportFormat.PDF)}>\n            PDF\n          </MenuItem>\n        )}\n        {formats.includes(ExportFormat.JSON) && (\n          <MenuItem onClick={() => handleExport(ExportFormat.JSON)}>\n            JSON\n          </MenuItem>\n        )}\n      </Menu>\n    </>\n  );\n};\n\nexport default Export;\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"\n}), 'ArrowDownward');","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getTableSortLabelUtilityClass(slot) {\n  return generateUtilityClass('MuiTableSortLabel', slot);\n}\nconst tableSortLabelClasses = generateUtilityClasses('MuiTableSortLabel', ['root', 'active', 'icon', 'iconDirectionDesc', 'iconDirectionAsc']);\nexport default tableSortLabelClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"active\", \"children\", \"className\", \"direction\", \"hideSortIcon\", \"IconComponent\"];\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport ButtonBase from '../ButtonBase';\nimport ArrowDownwardIcon from '../internal/svg-icons/ArrowDownward';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport tableSortLabelClasses, { getTableSortLabelUtilityClass } from './tableSortLabelClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    direction,\n    active\n  } = ownerState;\n  const slots = {\n    root: ['root', active && 'active'],\n    icon: ['icon', `iconDirection${capitalize(direction)}`]\n  };\n  return composeClasses(slots, getTableSortLabelUtilityClass, classes);\n};\nconst TableSortLabelRoot = styled(ButtonBase, {\n  name: 'MuiTableSortLabel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.active && styles.active];\n  }\n})(({\n  theme\n}) => ({\n  cursor: 'pointer',\n  display: 'inline-flex',\n  justifyContent: 'flex-start',\n  flexDirection: 'inherit',\n  alignItems: 'center',\n  '&:focus': {\n    color: (theme.vars || theme).palette.text.secondary\n  },\n  '&:hover': {\n    color: (theme.vars || theme).palette.text.secondary,\n    [`& .${tableSortLabelClasses.icon}`]: {\n      opacity: 0.5\n    }\n  },\n  [`&.${tableSortLabelClasses.active}`]: {\n    color: (theme.vars || theme).palette.text.primary,\n    [`& .${tableSortLabelClasses.icon}`]: {\n      opacity: 1,\n      color: (theme.vars || theme).palette.text.secondary\n    }\n  }\n}));\nconst TableSortLabelIcon = styled('span', {\n  name: 'MuiTableSortLabel',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.icon, styles[`iconDirection${capitalize(ownerState.direction)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  fontSize: 18,\n  marginRight: 4,\n  marginLeft: 4,\n  opacity: 0,\n  transition: theme.transitions.create(['opacity', 'transform'], {\n    duration: theme.transitions.duration.shorter\n  }),\n  userSelect: 'none'\n}, ownerState.direction === 'desc' && {\n  transform: 'rotate(0deg)'\n}, ownerState.direction === 'asc' && {\n  transform: 'rotate(180deg)'\n}));\n\n/**\n * A button based label for placing inside `TableCell` for column sorting.\n */\nconst TableSortLabel = /*#__PURE__*/React.forwardRef(function TableSortLabel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTableSortLabel'\n  });\n  const {\n      active = false,\n      children,\n      className,\n      direction = 'asc',\n      hideSortIcon = false,\n      IconComponent = ArrowDownwardIcon\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    active,\n    direction,\n    hideSortIcon,\n    IconComponent\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(TableSortLabelRoot, _extends({\n    className: clsx(classes.root, className),\n    component: \"span\",\n    disableRipple: true,\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [children, hideSortIcon && !active ? null : /*#__PURE__*/_jsx(TableSortLabelIcon, {\n      as: IconComponent,\n      className: clsx(classes.icon),\n      ownerState: ownerState\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableSortLabel.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the label will have the active styling (should be true for the sorted column).\n   * @default false\n   */\n  active: PropTypes.bool,\n  /**\n   * Label contents, the arrow will be appended automatically.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The current sort direction.\n   * @default 'asc'\n   */\n  direction: PropTypes.oneOf(['asc', 'desc']),\n  /**\n   * Hide sort icon when active is false.\n   * @default false\n   */\n  hideSortIcon: PropTypes.bool,\n  /**\n   * Sort icon to use.\n   * @default ArrowDownwardIcon\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableSortLabel;","import React from 'react';\nimport { TableSortLabel, Tooltip } from '@mui/material';\nimport { ColumnDef, SortingConfig } from '../types';\n\ninterface SortingProps {\n  column: ColumnDef;\n  config: SortingConfig;\n  activeColumn: string;\n  direction: 'asc' | 'desc';\n  onSort: (columnId: string) => void;\n}\n\n/**\n * Sorting component for table headers\n */\nconst Sorting: React.FC<SortingProps> = ({\n  column,\n  config,\n  activeColumn,\n  direction,\n  onSort\n}) => {\n  // Don't render sorting for non-sortable columns\n  if (column.sortable === false) {\n    return <>{column.label}</>;\n  }\n\n  const handleSort = () => {\n    onSort(column.id);\n  };\n\n  return (\n    <Tooltip title={`Sort by ${column.label}`}>\n      <TableSortLabel\n        active={activeColumn === column.id}\n        direction={activeColumn === column.id ? direction : 'asc'}\n        onClick={handleSort}\n      >\n        {column.label}\n      </TableSortLabel>\n    </Tooltip>\n  );\n};\n\nexport default Sorting;\n","import React, { useRef, useEffect } from 'react';\nimport {\n  Box,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography\n} from '@mui/material';\nimport { ColumnDef, KeyboardNavigationConfig, RowDetailRenderer, StickyColumnsConfig } from '../types';\nimport Sorting from './Sorting';\nimport { ExpandButton, ExpandedRow } from './ExpandableRows';\n\ninterface TableContentProps {\n  data: any[];\n  columns: ColumnDef[];\n  visibleColumns: string[];\n  stickyColumns: string[];\n  orderBy: string;\n  order: 'asc' | 'desc';\n  page: number;\n  pageSize: number;\n  idField: string;\n  emptyMessage: string;\n  expandedRows: string[];\n  selectedRow: any | null;\n  keyboardNavConfig: KeyboardNavigationConfig;\n  stickyColumnsConfig: StickyColumnsConfig;\n  renderRowDetail?: RowDetailRenderer;\n  onSort: (columnId: string) => void;\n  onRowClick?: (row: any) => void;\n  onRowExpand: (rowId: string) => void;\n  onKeyDown: (event: React.KeyboardEvent, rowIndex: number, colIndex: number) => void;\n  onSetSelectedRow: (row: any) => void;\n}\n\n/**\n * Table content component\n */\nconst TableContent: React.FC<TableContentProps> = ({\n  data,\n  columns,\n  visibleColumns,\n  stickyColumns,\n  orderBy,\n  order,\n  page,\n  pageSize,\n  idField,\n  emptyMessage,\n  expandedRows,\n  selectedRow,\n  keyboardNavConfig,\n  stickyColumnsConfig,\n  renderRowDetail,\n  onSort,\n  onRowClick,\n  onRowExpand,\n  onKeyDown,\n  onSetSelectedRow\n}) => {\n  const tableRef = useRef<HTMLDivElement>(null);\n\n  // Get visible columns in the correct order\n  const visibleOrderedColumns = columns.filter(col => visibleColumns.includes(col.id));\n\n  // Calculate paginated data\n  const startIndex = page * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedData = data.slice(startIndex, endIndex);\n\n  // Handle row click\n  const handleRowClick = (row: any) => {\n    onSetSelectedRow(row);\n    if (onRowClick) {\n      onRowClick(row);\n    }\n  };\n\n  // Handle row expansion\n  const handleRowExpand = (event: React.MouseEvent, rowId: string) => {\n    event.stopPropagation();\n    onRowExpand(rowId);\n  };\n\n  // Render cell content\n  const renderCellContent = (column: ColumnDef, row: any) => {\n    const value = row[column.id];\n\n    // If column has a custom formatter, use it\n    if (column.format) {\n      return column.format(value, row);\n    }\n\n    // Handle different column types\n    switch (column.type) {\n      case 'number':\n        return value?.toLocaleString() || '-';\n\n      case 'currency':\n        return value !== undefined && value !== null\n          ? new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: 'USD'\n            }).format(value)\n          : '-';\n\n      case 'percentage':\n        return value !== undefined && value !== null\n          ? `${value}%`\n          : '-';\n\n      case 'link':\n        if (!column.linkConfig) return value;\n\n        let url = '';\n        let displayText = value;\n\n        // Determine URL\n        if (column.linkConfig.urlBuilder) {\n          url = column.linkConfig.urlBuilder(row);\n        } else if (column.linkConfig.urlField) {\n          url = row[column.linkConfig.urlField] || '';\n          if (column.linkConfig.urlPrefix) url = column.linkConfig.urlPrefix + url;\n          if (column.linkConfig.urlSuffix) url = url + column.linkConfig.urlSuffix;\n        } else {\n          url = String(value);\n        }\n\n        // Determine display text\n        if (column.linkConfig.displayField) {\n          displayText = row[column.linkConfig.displayField] || value;\n        }\n\n        return (\n          <Link\n            href={url}\n            target={column.linkConfig.openInNewTab ? '_blank' : '_self'}\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener noreferrer\"\n            sx={{ textDecoration: 'none', color: 'primary.main' }}\n          >\n            {displayText}\n          </Link>\n        );\n\n      default:\n        return value !== undefined && value !== null ? value : '-';\n    }\n  };\n\n  // If no data, show empty message\n  if (data.length === 0) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyMessage}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <TableContainer ref={tableRef}>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            {/* Expand column if row details are enabled */}\n            {renderRowDetail && (\n              <TableCell padding=\"checkbox\" />\n            )}\n\n            {/* Render column headers */}\n            {visibleOrderedColumns.map((column, colIndex) => (\n              <TableCell\n                key={column.id}\n                align={column.align || 'left'}\n                sx={{\n                  ...(stickyColumnsConfig.enabled && stickyColumns.includes(column.id) ? {\n                    position: 'sticky',\n                    left: 0,\n                    zIndex: 2,\n                    backgroundColor: theme => theme.palette.background.paper,\n                    boxShadow: '2px 0 5px rgba(0,0,0,0.1)'\n                  } : {})\n                }}\n              >\n                <Sorting\n                  column={column}\n                  config={{ enabled: true }}\n                  activeColumn={orderBy}\n                  direction={order}\n                  onSort={onSort}\n                />\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {paginatedData.map((row, rowIndex) => {\n            const rowId = row[idField];\n            const isExpanded = expandedRows.includes(rowId);\n            const isSelected = selectedRow && selectedRow[idField] === rowId;\n\n            return (\n              <React.Fragment key={rowId || `row-${rowIndex}`}>\n                <TableRow\n                  hover\n                  onClick={() => handleRowClick(row)}\n                  selected={isSelected}\n                  sx={{ cursor: onRowClick ? 'pointer' : 'default' }}\n                >\n                  {/* Expand button if row details are enabled */}\n                  {renderRowDetail && (\n                    <TableCell padding=\"checkbox\">\n                      <ExpandButton\n                        expanded={isExpanded}\n                        onClick={(e) => {\n                          if (e) handleRowExpand(e, rowId);\n                          else handleRowExpand({} as React.MouseEvent, rowId);\n                        }}\n                      />\n                    </TableCell>\n                  )}\n\n                  {/* Render cells */}\n                  {visibleOrderedColumns.map((column, colIndex) => (\n                    <TableCell\n                      key={column.id}\n                      align={column.align || 'left'}\n                      sx={{\n                        whiteSpace: column.wrap ? 'normal' : 'nowrap',\n                        maxWidth: column.maxWidth || 'auto',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        ...(stickyColumnsConfig.enabled && stickyColumns.includes(column.id) ? {\n                          position: 'sticky',\n                          left: 0,\n                          zIndex: 1,\n                          backgroundColor: theme => theme.palette.background.paper,\n                          boxShadow: '2px 0 5px rgba(0,0,0,0.1)'\n                        } : {})\n                      }}\n                      tabIndex={keyboardNavConfig.enabled ? 0 : -1}\n                      onKeyDown={(e) => keyboardNavConfig.enabled && onKeyDown(e, rowIndex, colIndex)}\n                      id={`cell-${rowIndex}-${colIndex}`}\n                    >\n                      {renderCellContent(column, row)}\n                    </TableCell>\n                  ))}\n                </TableRow>\n\n                {/* Expanded row content */}\n                {renderRowDetail && (\n                  <ExpandedRow\n                    colSpan={visibleOrderedColumns.length + 1}\n                    expanded={isExpanded}\n                    renderDetail={renderRowDetail}\n                    row={row}\n                  />\n                )}\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default TableContent;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  IconButton,\n  Tooltip,\n  CircularProgress,\n  Collapse\n} from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\nimport { ColumnDef, HierarchicalGroup } from '../types';\n\ninterface HierarchicalTableContentProps {\n  columns: ColumnDef[];\n  groupByLevels: string[];\n  hierarchicalData: HierarchicalGroup[];\n  expandedGroups: string[];\n  loading: boolean;\n  emptyMessage: string;\n  onToggleGroup: (path: string) => void;\n  onLoadChildren: (parentPath: string, childLevel: number, groupBy: string) => Promise<void>;\n}\n\n/**\n * Hierarchical Table Content component\n * Displays data in a hierarchical structure with expandable groups\n */\nconst HierarchicalTableContent: React.FC<HierarchicalTableContentProps> = ({\n  columns,\n  groupByLevels,\n  hierarchicalData,\n  expandedGroups,\n  loading,\n  emptyMessage,\n  onToggleGroup,\n  onLoadChildren\n}) => {\n  const [loadingGroups, setLoadingGroups] = useState<string[]>([]);\n\n  // Handle expanding/collapsing a group\n  const handleToggleGroup = async (group: HierarchicalGroup) => {\n    const isExpanded = expandedGroups.includes(group.path);\n    \n    if (!isExpanded && !group.childrenLoaded && group.hasChildren) {\n      // If expanding and children not loaded yet, load them\n      setLoadingGroups(prev => [...prev, group.path]);\n      \n      try {\n        // Get the next level in the hierarchy\n        const childLevel = group.level + 1;\n        const childGroupBy = childLevel < groupByLevels.length ? groupByLevels[childLevel] : null;\n        \n        if (childGroupBy) {\n          await onLoadChildren(group.path, childLevel, childGroupBy);\n        }\n      } finally {\n        setLoadingGroups(prev => prev.filter(path => path !== group.path));\n      }\n    }\n    \n    // Toggle the group expansion state\n    onToggleGroup(group.path);\n  };\n\n  // Render a group row\n  const renderGroupRow = (group: HierarchicalGroup, indent: number = 0) => {\n    const isExpanded = expandedGroups.includes(group.path);\n    const isLoading = loadingGroups.includes(group.path);\n    const hasNextLevel = group.level < groupByLevels.length - 1;\n    const canExpand = group.hasChildren && hasNextLevel;\n    \n    return (\n      <React.Fragment key={group.path}>\n        <TableRow \n          hover\n          sx={{ \n            backgroundColor: theme => \n              `rgba(${theme.palette.primary.main}, ${0.05 + (group.level * 0.05)})`\n          }}\n        >\n          {/* First cell with expand/collapse button */}\n          <TableCell \n            sx={{ \n              pl: 1 + (indent * 2),\n              fontWeight: 'bold'\n            }}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {canExpand ? (\n                <IconButton\n                  size=\"small\"\n                  onClick={() => handleToggleGroup(group)}\n                  disabled={isLoading}\n                >\n                  {isLoading ? (\n                    <CircularProgress size={20} />\n                  ) : isExpanded ? (\n                    <KeyboardArrowDownIcon fontSize=\"small\" />\n                  ) : (\n                    <KeyboardArrowRightIcon fontSize=\"small\" />\n                  )}\n                </IconButton>\n              ) : (\n                <Box sx={{ width: 28 }} /> // Spacer for alignment\n              )}\n              <Typography variant=\"body2\" component=\"span\">\n                {group.key}: {group.value}\n              </Typography>\n            </Box>\n          </TableCell>\n          \n          {/* Metrics cells */}\n          {columns.filter(col => col.id !== groupByLevels[group.level]).map(column => (\n            <TableCell \n              key={column.id}\n              align={column.align || 'left'}\n            >\n              {renderMetricValue(group, column)}\n            </TableCell>\n          ))}\n        </TableRow>\n        \n        {/* Render children if expanded */}\n        {isExpanded && group.children && group.children.length > 0 && (\n          <TableRow>\n            <TableCell colSpan={columns.length} sx={{ p: 0, border: 0 }}>\n              <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\n                <Box sx={{ pl: 2 }}>\n                  {group.children.map(child => renderGroupRow(child, indent + 1))}\n                </Box>\n              </Collapse>\n            </TableCell>\n          </TableRow>\n        )}\n      </React.Fragment>\n    );\n  };\n\n  // Render a metric value with appropriate formatting\n  const renderMetricValue = (group: HierarchicalGroup, column: ColumnDef) => {\n    const value = group.metrics[column.id];\n    \n    if (value === undefined || value === null) {\n      return '-';\n    }\n    \n    // Apply column formatting if available\n    if (column.format) {\n      return column.format(value, group);\n    }\n    \n    // Format based on column type\n    switch (column.type) {\n      case 'number':\n        return value.toLocaleString();\n      \n      case 'currency':\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD'\n        }).format(value);\n      \n      case 'percentage':\n        return `${value}%`;\n      \n      default:\n        return value.toString();\n    }\n  };\n\n  // If no data, show empty message\n  if (hierarchicalData.length === 0 && !loading) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyMessage}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // If loading, show loading indicator\n  if (loading && hierarchicalData.length === 0) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <CircularProgress size={40} />\n      </Box>\n    );\n  }\n\n  // Get visible columns (excluding the first grouping level which is shown in the first column)\n  const visibleColumns = columns.filter(col => col.id !== groupByLevels[0]);\n\n  return (\n    <TableContainer>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>\n              {groupByLevels.length > 0 && columns.find(col => col.id === groupByLevels[0])?.label}\n            </TableCell>\n            {visibleColumns.map(column => (\n              <TableCell\n                key={column.id}\n                align={column.align || 'left'}\n              >\n                {column.label}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {hierarchicalData.map(group => renderGroupRow(group))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default HierarchicalTableContent;\n","import React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport {\n  Box,\n  Paper,\n  Toolbar,\n  Typography,\n  CircularProgress,\n  IconButton,\n  Tooltip,\n  useTheme,\n  useMediaQuery,\n  Alert\n} from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { EnhancedTableProps, TableState, ColumnDef, ExportFormat, HierarchicalGroup } from './types';\nimport { decodeStateFromUrl, encodeStateToUrl, filterData, sortData, groupData, createHierarchicalData } from './utils';\nimport Sorting from './features/Sorting';\nimport Filtering, { AdvancedFilter, QuickFilter } from './features/Filtering';\nimport ColumnManagement from './features/ColumnManagement';\nimport Pagination from './features/Pagination';\nimport Grouping from './features/Grouping';\nimport HierarchicalGrouping from './features/HierarchicalGrouping';\nimport Aggregation, { AggregationRow } from './features/Aggregation';\nimport DrillDown from './features/DrillDown';\nimport { ExpandAllButton } from './features/ExpandableRows';\nimport Export from './features/Export';\nimport TableContent from './features/TableContent';\nimport HierarchicalTableContent from './features/HierarchicalTableContent';\n\n// Default table state\nconst DEFAULT_TABLE_STATE: TableState = {\n  sorting: {\n    column: '',\n    direction: 'asc'\n  },\n  filtering: {\n    quickFilter: '',\n    advancedFilters: {}\n  },\n  pagination: {\n    page: 0,\n    pageSize: 10\n  },\n  grouping: {\n    groupByColumn: null,\n    groupByLevels: [],\n    expandedGroups: []\n  },\n  columns: {\n    visible: [],\n    order: [],\n    sticky: [],\n    widths: {}\n  },\n  aggregation: {\n    enabled: []\n  },\n  expandedRows: [],\n  selectedRows: [],\n  treeData: {\n    expandedNodes: []\n  },\n  infiniteScroll: {\n    loadedPages: 0\n  },\n  history: {\n    undoStack: [],\n    redoStack: []\n  },\n  calculatedColumns: {\n    values: {}\n  }\n};\n\n/**\n * Enhanced table component with advanced features\n */\nconst EnhancedTable: React.FC<EnhancedTableProps> = ({\n  // Base props\n  data = [],\n  columns = [],\n  title = '',\n  loading = false,\n  emptyMessage = 'No data to display',\n  idField = 'id',\n  sx,\n\n  // Event handlers\n  onRowClick,\n  onRefresh,\n  onExport,\n  onStateChange,\n  onDrillDown,\n  onLoadGroupChildren,\n\n  // Feature configurations\n  features = {},\n\n  // Feature-specific props\n  renderRowDetail,\n  initialState,\n  stateFromUrl = false,\n\n  // Legacy EnhancedUnifiedDataTable compatibility props\n  enableColumnSelection,\n  enableAdvancedFiltering,\n  enableExportOptions,\n  enableColumnReordering,\n  enableRowGrouping,\n  enableSummaryRow,\n  enableExpandableRows,\n  enableKeyboardNavigation,\n  enableStickyColumns,\n  enableResponsiveDesign,\n  enableDrillDown,\n  filterDefinitions,\n  groupableColumns,\n  stickyColumnIds,\n  drillDownConfig: drillDownConfigProp,\n  aggregations,\n  onExportFormat,\n  onApplyAdvancedFilters,\n  onColumnOrderChange,\n  onGroupingChange,\n  onRowExpand\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Initialize feature configurations with defaults, using legacy props if provided\n  const sortingConfig = useMemo(() => {\n    if (typeof features.sorting === 'boolean') {\n      return features.sorting ? { enabled: true } : { enabled: false };\n    }\n    return features.sorting || { enabled: false };\n  }, [features.sorting]);\n\n  const filteringConfig = useMemo(() => {\n    // Use enableAdvancedFiltering if provided\n    if (enableAdvancedFiltering !== undefined) {\n      return { enabled: true, quickFilter: true, advancedFilter: enableAdvancedFiltering };\n    }\n    if (typeof features.filtering === 'boolean') {\n      return features.filtering ? { enabled: true, quickFilter: true, advancedFilter: true } : { enabled: false };\n    }\n    return features.filtering || { enabled: false };\n  }, [features.filtering, enableAdvancedFiltering]);\n\n  const paginationConfig = useMemo(() => {\n    if (typeof features.pagination === 'boolean') {\n      return features.pagination ? { enabled: true, pageSizeOptions: [10, 25, 50, 100] } : { enabled: false };\n    }\n    return features.pagination || { enabled: false };\n  }, [features.pagination]);\n\n  const groupingConfig = useMemo(() => {\n    // Use enableRowGrouping if provided\n    if (enableRowGrouping !== undefined) {\n      return { enabled: enableRowGrouping };\n    }\n    if (typeof features.grouping === 'boolean') {\n      return features.grouping ? { enabled: true } : { enabled: false };\n    }\n    return features.grouping || { enabled: false };\n  }, [features.grouping, enableRowGrouping]);\n\n  const aggregationConfig = useMemo(() => {\n    // Use enableSummaryRow if provided\n    if (enableSummaryRow !== undefined) {\n      return { enabled: enableSummaryRow, showInFooter: true };\n    }\n    if (typeof features.aggregation === 'boolean') {\n      return features.aggregation ? { enabled: true, showInFooter: true } : { enabled: false };\n    }\n    return features.aggregation || { enabled: false };\n  }, [features.aggregation, enableSummaryRow]);\n\n  const columnManagementConfig = useMemo(() => {\n    // Use enableColumnSelection and enableColumnReordering if provided\n    if (enableColumnSelection !== undefined || enableColumnReordering !== undefined) {\n      return {\n        enabled: enableColumnSelection || enableColumnReordering || false,\n        allowReordering: enableColumnReordering || false,\n        allowHiding: enableColumnSelection || false,\n        allowPinning: false\n      };\n    }\n    if (typeof features.columnManagement === 'boolean') {\n      return features.columnManagement ? { enabled: true, allowReordering: true, allowHiding: true, allowPinning: true } : { enabled: false };\n    }\n    return features.columnManagement || { enabled: false };\n  }, [features.columnManagement, enableColumnSelection, enableColumnReordering]);\n\n  const expandableRowsConfig = useMemo(() => {\n    // Use enableExpandableRows if provided\n    if (enableExpandableRows !== undefined) {\n      return { enabled: enableExpandableRows };\n    }\n    if (typeof features.expandableRows === 'boolean') {\n      return features.expandableRows ? { enabled: true } : { enabled: false };\n    }\n    return features.expandableRows || { enabled: false };\n  }, [features.expandableRows, enableExpandableRows]);\n\n  const keyboardNavigationConfig = useMemo(() => {\n    // Use enableKeyboardNavigation if provided\n    if (enableKeyboardNavigation !== undefined) {\n      return { enabled: enableKeyboardNavigation, allowCellNavigation: true };\n    }\n    if (typeof features.keyboardNavigation === 'boolean') {\n      return features.keyboardNavigation ? { enabled: true, allowCellNavigation: true } : { enabled: false };\n    }\n    return features.keyboardNavigation || { enabled: false };\n  }, [features.keyboardNavigation, enableKeyboardNavigation]);\n\n  const stickyColumnsConfig = useMemo(() => {\n    // Use enableStickyColumns if provided\n    if (enableStickyColumns !== undefined) {\n      return { enabled: enableStickyColumns };\n    }\n    if (typeof features.stickyColumns === 'boolean') {\n      return features.stickyColumns ? { enabled: true } : { enabled: false };\n    }\n    return features.stickyColumns || { enabled: false };\n  }, [features.stickyColumns, enableStickyColumns]);\n\n  const responsiveConfig = useMemo(() => {\n    // Use enableResponsiveDesign if provided\n    if (enableResponsiveDesign !== undefined) {\n      return { enabled: enableResponsiveDesign };\n    }\n    if (typeof features.responsive === 'boolean') {\n      return features.responsive ? { enabled: true } : { enabled: false };\n    }\n    return features.responsive || { enabled: false };\n  }, [features.responsive, enableResponsiveDesign]);\n\n  const drillDownConfig = useMemo(() => {\n    // Use enableDrillDown and drillDownConfigProp if provided\n    if (enableDrillDown !== undefined) {\n      return {\n        enabled: enableDrillDown,\n        configs: drillDownConfigProp || []\n      };\n    }\n    if (typeof features.drillDown === 'boolean') {\n      return features.drillDown ? { enabled: true } : { enabled: false };\n    }\n    return features.drillDown || { enabled: false };\n  }, [features.drillDown, enableDrillDown, drillDownConfigProp]);\n\n  const exportConfig = useMemo(() => {\n    // Use enableExportOptions if provided\n    if (enableExportOptions !== undefined) {\n      return { enabled: enableExportOptions };\n    }\n    if (typeof features.export === 'boolean') {\n      return features.export ? { enabled: true } : { enabled: false };\n    }\n    return features.export || { enabled: false };\n  }, [features.export, enableExportOptions]);\n\n  // Initialize state\n  const [tableState, setTableState] = useState<TableState>(() => {\n    // Start with default state\n    const defaultState = {\n      ...DEFAULT_TABLE_STATE,\n      columns: {\n        visible: columns.map(col => col.id),\n        order: columns.map(col => col.id),\n        sticky: stickyColumnIds || columns.filter(col => col.pinned).map(col => col.id),\n        widths: columns.reduce((acc, col) => ({ ...acc, [col.id]: col.width || 150 }), {})\n      }\n    };\n\n    // Apply initial state from props\n    const state = initialState ? { ...defaultState, ...initialState } : defaultState;\n\n    // Apply state from URL if enabled\n    if (stateFromUrl) {\n      return decodeStateFromUrl(location.search, state);\n    }\n\n    return state;\n  });\n\n  // Update URL when state changes\n  useEffect(() => {\n    if (stateFromUrl && onStateChange) {\n      const queryString = encodeStateToUrl(tableState);\n      navigate({ search: queryString }, { replace: true });\n      onStateChange(tableState);\n    } else if (onStateChange) {\n      onStateChange(tableState);\n    }\n  }, [tableState, stateFromUrl, navigate, onStateChange]);\n\n  // State for hierarchical data\n  const [hierarchicalData, setHierarchicalData] = useState<HierarchicalGroup[]>([]);\n  const [isLoadingHierarchicalData, setIsLoadingHierarchicalData] = useState(false);\n\n  // Process data based on current state\n  const processedData = useMemo(() => {\n    let result = [...data];\n\n    // Apply filtering\n    if (filteringConfig.enabled) {\n      result = filterData(\n        result,\n        tableState.filtering.quickFilter,\n        tableState.filtering.advancedFilters\n      );\n    }\n\n    // Apply sorting\n    if (sortingConfig.enabled && tableState.sorting.column) {\n      result = sortData(\n        result,\n        tableState.sorting.column,\n        tableState.sorting.direction\n      );\n    }\n\n    return result;\n  }, [data, filteringConfig.enabled, sortingConfig.enabled, tableState.filtering, tableState.sorting]);\n\n  // Generate hierarchical data when groupByLevels change\n  useEffect(() => {\n    if (groupingConfig.hierarchical && tableState.grouping.groupByLevels.length > 0) {\n      setIsLoadingHierarchicalData(true);\n\n      // Create hierarchical data structure from flat data\n      const firstLevelGroupBy = tableState.grouping.groupByLevels[0];\n      if (firstLevelGroupBy) {\n        const hierarchical = createHierarchicalData(\n          processedData,\n          firstLevelGroupBy,\n          0,\n          columns\n        );\n        setHierarchicalData(hierarchical);\n      }\n\n      setIsLoadingHierarchicalData(false);\n    }\n  }, [processedData, tableState.grouping.groupByLevels, groupingConfig.hierarchical, columns]);\n\n  // Handle sorting\n  const handleSort = useCallback((columnId: string) => {\n    setTableState(prevState => {\n      const isAsc = prevState.sorting.column === columnId && prevState.sorting.direction === 'asc';\n      return {\n        ...prevState,\n        sorting: {\n          column: columnId,\n          direction: isAsc ? 'desc' : 'asc'\n        },\n        // Reset to first page when sorting changes\n        pagination: {\n          ...prevState.pagination,\n          page: 0\n        }\n      };\n    });\n  }, []);\n\n  // Handle quick filter change\n  const handleQuickFilterChange = useCallback((value: string) => {\n    setTableState(prevState => ({\n      ...prevState,\n      filtering: {\n        ...prevState.filtering,\n        quickFilter: value\n      },\n      // Reset to first page when filter changes\n      pagination: {\n        ...prevState.pagination,\n        page: 0\n      }\n    }));\n  }, []);\n\n  // Handle advanced filters change\n  const handleAdvancedFiltersChange = useCallback((filters: Record<string, any>) => {\n    setTableState(prevState => ({\n      ...prevState,\n      filtering: {\n        ...prevState.filtering,\n        advancedFilters: filters\n      },\n      // Reset to first page when filter changes\n      pagination: {\n        ...prevState.pagination,\n        page: 0\n      }\n    }));\n\n    // Call legacy callback if provided\n    if (onApplyAdvancedFilters) {\n      onApplyAdvancedFilters(filters);\n    }\n  }, [onApplyAdvancedFilters]);\n\n  // Handle column visibility change\n  const handleColumnVisibilityChange = useCallback((columnId: string, visible: boolean) => {\n    setTableState(prevState => {\n      const newVisibleColumns = visible\n        ? [...prevState.columns.visible, columnId]\n        : prevState.columns.visible.filter(id => id !== columnId);\n\n      return {\n        ...prevState,\n        columns: {\n          ...prevState.columns,\n          visible: newVisibleColumns\n        }\n      };\n    });\n  }, []);\n\n  // Handle column order change\n  const handleColumnOrderChange = useCallback((newOrder: string[]) => {\n    setTableState(prevState => ({\n      ...prevState,\n      columns: {\n        ...prevState.columns,\n        order: newOrder\n      }\n    }));\n\n    // Call legacy callback if provided\n    if (onColumnOrderChange) {\n      onColumnOrderChange(newOrder.map(id => ({ id })));\n    }\n  }, [onColumnOrderChange]);\n\n  // Handle sticky column change\n  const handleStickyColumnChange = useCallback((columnId: string, sticky: boolean) => {\n    setTableState(prevState => {\n      const newStickyColumns = sticky\n        ? [...prevState.columns.sticky, columnId]\n        : prevState.columns.sticky.filter(id => id !== columnId);\n\n      return {\n        ...prevState,\n        columns: {\n          ...prevState.columns,\n          sticky: newStickyColumns\n        }\n      };\n    });\n  }, []);\n\n  // Handle page change\n  const handlePageChange = useCallback((page: number) => {\n    setTableState(prevState => ({\n      ...prevState,\n      pagination: {\n        ...prevState.pagination,\n        page\n      }\n    }));\n  }, []);\n\n  // Handle page size change\n  const handlePageSizeChange = useCallback((pageSize: number) => {\n    setTableState(prevState => ({\n      ...prevState,\n      pagination: {\n        ...prevState.pagination,\n        page: 0, // Reset to first page\n        pageSize\n      }\n    }));\n  }, []);\n\n  // Handle grouping change\n  const handleGroupingChange = useCallback((columnId: string | null) => {\n    setTableState(prevState => ({\n      ...prevState,\n      grouping: {\n        ...prevState.grouping,\n        groupByColumn: columnId\n      }\n    }));\n\n    // Call legacy callback if provided\n    if (onGroupingChange) {\n      onGroupingChange(columnId);\n    }\n  }, [onGroupingChange]);\n\n  // Handle hierarchical grouping levels change\n  const handleGroupingLevelsChange = useCallback((columnIds: string[]) => {\n    setTableState(prevState => ({\n      ...prevState,\n      grouping: {\n        ...prevState.grouping,\n        groupByLevels: columnIds,\n        expandedGroups: [] // Reset expanded groups when levels change\n      }\n    }));\n  }, []);\n\n  // Handle toggle group expansion in hierarchical view\n  const handleToggleGroup = useCallback((path: string) => {\n    setTableState(prevState => {\n      const expandedGroups = [...prevState.grouping.expandedGroups];\n      const index = expandedGroups.indexOf(path);\n\n      if (index === -1) {\n        // Expand group\n        expandedGroups.push(path);\n      } else {\n        // Collapse group\n        expandedGroups.splice(index, 1);\n      }\n\n      return {\n        ...prevState,\n        grouping: {\n          ...prevState.grouping,\n          expandedGroups\n        }\n      };\n    });\n  }, []);\n\n  // Handle loading children for a hierarchical group\n  const handleLoadGroupChildren = useCallback(async (parentPath: string, childLevel: number, groupBy: string) => {\n    if (!onLoadGroupChildren) return;\n\n    try {\n      // Call the provided callback to load children\n      const children = await onLoadGroupChildren(parentPath, childLevel, groupBy);\n\n      // Update hierarchical data with the loaded children\n      setHierarchicalData(prevData => {\n        // Find the parent group by path and update its children\n        const updateChildren = (groups: HierarchicalGroup[]): HierarchicalGroup[] => {\n          return groups.map(group => {\n            if (group.path === parentPath) {\n              return {\n                ...group,\n                children,\n                childrenLoaded: true\n              };\n            } else if (group.children && group.children.length > 0) {\n              return {\n                ...group,\n                children: updateChildren(group.children)\n              };\n            }\n            return group;\n          });\n        };\n\n        return updateChildren(prevData);\n      });\n    } catch (error) {\n      console.error('Error loading group children:', error);\n    }\n  }, [onLoadGroupChildren]);\n\n  // Handle aggregation toggle\n  const handleAggregationToggle = useCallback((aggregationId: string) => {\n    setTableState(prevState => {\n      const currentEnabledAggregations = [...prevState.aggregation.enabled];\n      const aggregationIndex = currentEnabledAggregations.indexOf(aggregationId);\n\n      if (aggregationIndex === -1) {\n        // Add aggregation\n        currentEnabledAggregations.push(aggregationId);\n      } else {\n        // Remove aggregation\n        currentEnabledAggregations.splice(aggregationIndex, 1);\n      }\n\n      return {\n        ...prevState,\n        aggregation: {\n          ...prevState.aggregation,\n          enabled: currentEnabledAggregations\n        }\n      };\n    });\n  }, []);\n\n  // Handle row expansion\n  const handleRowExpand = useCallback((rowId: string) => {\n    setTableState(prevState => {\n      const currentExpandedRows = [...prevState.expandedRows];\n      const rowIndex = currentExpandedRows.indexOf(rowId);\n      const isExpanded = rowIndex === -1;\n\n      // Call legacy callback if provided\n      if (onRowExpand) {\n        onRowExpand(rowId, isExpanded);\n      }\n\n      if (isExpanded) {\n        // Expand row\n        if (expandableRowsConfig.singleExpand) {\n          // If single expand, replace the array\n          return {\n            ...prevState,\n            expandedRows: [rowId]\n          };\n        } else {\n          // Otherwise add to the array\n          return {\n            ...prevState,\n            expandedRows: [...currentExpandedRows, rowId]\n          };\n        }\n      } else {\n        // Collapse row\n        currentExpandedRows.splice(rowIndex, 1);\n        return {\n          ...prevState,\n          expandedRows: currentExpandedRows\n        };\n      }\n    });\n  }, [expandableRowsConfig, onRowExpand]);\n\n  // Handle expand all rows\n  const handleExpandAllRows = useCallback(() => {\n    setTableState(prevState => ({\n      ...prevState,\n      expandedRows: processedData.map(row => row[idField])\n    }));\n  }, [processedData, idField]);\n\n  // Handle collapse all rows\n  const handleCollapseAllRows = useCallback(() => {\n    setTableState(prevState => ({\n      ...prevState,\n      expandedRows: []\n    }));\n  }, []);\n\n  // Get visible and ordered columns\n  const visibleOrderedColumns = useMemo(() => {\n    return columns\n      .filter(col => tableState.columns.visible.includes(col.id))\n      .sort((a, b) => {\n        const indexA = tableState.columns.order.indexOf(a.id);\n        const indexB = tableState.columns.order.indexOf(b.id);\n        return indexA - indexB;\n      });\n  }, [columns, tableState.columns.visible, tableState.columns.order]);\n\n  // Handle keyboard navigation\n  const handleKeyDown = useCallback((event: React.KeyboardEvent, rowIndex: number, colIndex: number) => {\n    if (!keyboardNavigationConfig.enabled) return;\n\n    const maxRowIndex = processedData.length - 1;\n    const maxColIndex = visibleOrderedColumns.length - 1;\n\n    let newRowIndex = rowIndex;\n    let newColIndex = colIndex;\n\n    switch (event.key) {\n      case 'ArrowUp':\n        newRowIndex = Math.max(0, rowIndex - 1);\n        event.preventDefault();\n        break;\n      case 'ArrowDown':\n        newRowIndex = Math.min(maxRowIndex, rowIndex + 1);\n        event.preventDefault();\n        break;\n      case 'ArrowLeft':\n        newColIndex = Math.max(0, colIndex - 1);\n        event.preventDefault();\n        break;\n      case 'ArrowRight':\n        newColIndex = Math.min(maxColIndex, colIndex + 1);\n        event.preventDefault();\n        break;\n      case 'Home':\n        newColIndex = 0;\n        event.preventDefault();\n        break;\n      case 'End':\n        newColIndex = maxColIndex;\n        event.preventDefault();\n        break;\n      case 'PageUp':\n        newRowIndex = Math.max(0, rowIndex - 10);\n        event.preventDefault();\n        break;\n      case 'PageDown':\n        newRowIndex = Math.min(maxRowIndex, rowIndex + 10);\n        event.preventDefault();\n        break;\n      case 'Enter':\n        // Handle row selection or expansion\n        const rowId = processedData[rowIndex][idField];\n        if (tableState.expandedRows.includes(rowId)) {\n          handleRowExpand(rowId);\n        } else if (onRowClick) {\n          onRowClick(processedData[rowIndex]);\n        }\n        event.preventDefault();\n        break;\n    }\n\n    // Focus the cell\n    if (newRowIndex !== rowIndex || newColIndex !== colIndex) {\n      const cellId = `cell-${newRowIndex}-${newColIndex}`;\n      const cellElement = document.getElementById(cellId);\n      if (cellElement) {\n        cellElement.focus();\n      }\n    }\n  }, [keyboardNavigationConfig.enabled, processedData, visibleOrderedColumns.length, idField, tableState.expandedRows, handleRowExpand, onRowClick]);\n\n  // Handle export\n  const handleExport = useCallback((format: ExportFormat) => {\n    // Get all data or just visible columns\n    const exportData = processedData.map(row => {\n      const exportRow: Record<string, any> = {};\n\n      // Include only visible columns if configured\n      const columnsToExport = exportConfig.includeHiddenColumns\n        ? columns\n        : columns.filter(col => tableState.columns.visible.includes(col.id));\n\n      columnsToExport.forEach(column => {\n        exportRow[column.label] = row[column.id];\n      });\n\n      return exportRow;\n    });\n\n    // Call legacy callback if provided\n    if (onExportFormat) {\n      onExportFormat(format.toString());\n    }\n\n    // Call standard callback if provided\n    if (onExport) {\n      onExport(format, exportData);\n    }\n  }, [onExport, onExportFormat, processedData, columns, tableState.columns.visible, exportConfig]);\n\n  // Handle drill down\n  const handleDrillDown = useCallback((row: any, sourceGrouping: string, targetGrouping: string, filters: Record<string, any>) => {\n    if (onDrillDown) {\n      onDrillDown(row, sourceGrouping, targetGrouping, filters);\n    }\n  }, [onDrillDown]);\n\n  // Set selected row\n  const [selectedRow, setSelectedRow] = useState<any | null>(null);\n\n  // Process data for grouping\n  const groupedData = useMemo(() => {\n    if (!groupingConfig.enabled || !tableState.grouping.groupByColumn) {\n      return null;\n    }\n\n    const groups = groupData(processedData, tableState.grouping.groupByColumn);\n\n    // Convert groups to array of objects\n    return Object.entries(groups).map(([groupValue, rows]) => {\n      const groupRow: Record<string, any> = {\n        [tableState.grouping.groupByColumn!]: groupValue,\n        _groupRows: rows.length,\n        _isGroupRow: true,\n        [idField]: `group_${groupValue}`\n      };\n\n      // Calculate aggregations for numeric columns\n      columns.forEach(column => {\n        if (column.id !== tableState.grouping.groupByColumn && (column.type === 'number' || column.type === 'currency')) {\n          // Sum numeric values\n          groupRow[column.id] = rows.reduce((sum, row) => {\n            const value = Number(row[column.id]) || 0;\n            return sum + value;\n          }, 0);\n        }\n      });\n\n      return groupRow;\n    });\n  }, [groupingConfig.enabled, tableState.grouping.groupByColumn, processedData, columns, idField]);\n\n  // Determine which data to display\n  const displayData = groupingConfig.enabled && tableState.grouping.groupByColumn && groupedData\n    ? groupedData\n    : processedData;\n\n  // Render loading state\n  if (loading) {\n    return (\n      <Box sx={{ p: 3, display: 'flex', alignItems: 'center', justifyContent: 'center', height: 200 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Paper elevation={0} variant=\"outlined\" sx={{ width: '100%', mb: 2, ...sx }}>\n      {/* Table header with title, search, and actions */}\n      <Toolbar\n        sx={{\n          pl: { sm: 2 },\n          pr: { xs: 1, sm: 1 },\n          display: 'flex',\n          justifyContent: 'space-between'\n        }}\n      >\n        <Typography variant=\"h6\" component=\"div\">\n          {title}\n        </Typography>\n\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          {/* Filtering */}\n          {filteringConfig.enabled && (\n            <Filtering\n              columns={columns}\n              config={filteringConfig}\n              quickFilterValue={tableState.filtering.quickFilter}\n              advancedFilters={tableState.filtering.advancedFilters}\n              onQuickFilterChange={handleQuickFilterChange}\n              onAdvancedFiltersChange={handleAdvancedFiltersChange}\n            />\n          )}\n\n          {/* Column Management */}\n          {columnManagementConfig.enabled && (\n            <ColumnManagement\n              columns={columns}\n              config={columnManagementConfig}\n              visibleColumns={tableState.columns.visible}\n              columnOrder={tableState.columns.order}\n              stickyColumns={tableState.columns.sticky}\n              onVisibilityChange={handleColumnVisibilityChange}\n              onOrderChange={handleColumnOrderChange}\n              onStickyChange={handleStickyColumnChange}\n            />\n          )}\n\n          {/* Grouping */}\n          {groupingConfig.enabled && !groupingConfig.hierarchical && (\n            <Grouping\n              columns={columns}\n              config={groupingConfig}\n              groupByColumn={tableState.grouping.groupByColumn}\n              onGroupingChange={handleGroupingChange}\n            />\n          )}\n\n          {/* Hierarchical Grouping */}\n          {groupingConfig.enabled && groupingConfig.hierarchical && (\n            <HierarchicalGrouping\n              columns={columns}\n              config={groupingConfig}\n              groupByLevels={tableState.grouping.groupByLevels}\n              onGroupingLevelsChange={handleGroupingLevelsChange}\n            />\n          )}\n\n          {/* Aggregation */}\n          {aggregationConfig.enabled && (\n            <Aggregation\n              columns={columns}\n              config={aggregationConfig}\n              data={processedData}\n              enabledAggregations={tableState.aggregation.enabled}\n              visibleColumns={tableState.columns.visible}\n              onAggregationToggle={handleAggregationToggle}\n            />\n          )}\n\n          {/* Expandable Rows */}\n          {expandableRowsConfig.enabled && renderRowDetail && (\n            <ExpandAllButton\n              config={expandableRowsConfig}\n              expandedRows={tableState.expandedRows}\n              totalRows={displayData.length}\n              onExpandAll={handleExpandAllRows}\n              onCollapseAll={handleCollapseAllRows}\n            />\n          )}\n\n          {/* Drill Down */}\n          {drillDownConfig.enabled && onDrillDown && (\n            <DrillDown\n              configs={(drillDownConfig as any).configs || []}\n              sourceGrouping={tableState.grouping.groupByColumn}\n              selectedRow={selectedRow}\n              onDrillDown={handleDrillDown}\n            />\n          )}\n\n          {/* Export */}\n          {exportConfig.enabled && onExport && (\n            <Export\n              config={exportConfig}\n              onExport={handleExport}\n            />\n          )}\n\n          {/* Refresh Button */}\n          {onRefresh && (\n            <Tooltip title=\"Refresh\">\n              <IconButton size=\"small\" onClick={onRefresh}>\n                <RefreshIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          )}\n        </Box>\n      </Toolbar>\n\n      {/* Table content */}\n      <Box\n        sx={{\n          width: '100%',\n          overflowX: responsiveConfig.enabled ? 'auto' : undefined\n        }}\n      >\n        {displayData.length === 0 && !groupingConfig.hierarchical ? (\n          <Box sx={{ p: 3, textAlign: 'center' }}>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              {emptyMessage}\n            </Typography>\n          </Box>\n        ) : groupingConfig.hierarchical && tableState.grouping.groupByLevels.length > 0 ? (\n          <HierarchicalTableContent\n            columns={columns}\n            groupByLevels={tableState.grouping.groupByLevels.map(id => id)}\n            hierarchicalData={hierarchicalData}\n            expandedGroups={tableState.grouping.expandedGroups}\n            loading={isLoadingHierarchicalData}\n            emptyMessage={emptyMessage}\n            onToggleGroup={handleToggleGroup}\n            onLoadChildren={handleLoadGroupChildren}\n          />\n        ) : (\n          <TableContent\n            data={displayData}\n            columns={columns}\n            visibleColumns={tableState.columns.visible}\n            stickyColumns={tableState.columns.sticky}\n            orderBy={tableState.sorting.column}\n            order={tableState.sorting.direction}\n            page={tableState.pagination.page}\n            pageSize={tableState.pagination.pageSize}\n            idField={idField}\n            emptyMessage={emptyMessage}\n            expandedRows={tableState.expandedRows}\n            selectedRow={selectedRow}\n            keyboardNavConfig={keyboardNavigationConfig}\n            stickyColumnsConfig={stickyColumnsConfig}\n            renderRowDetail={renderRowDetail}\n            onSort={handleSort}\n            onRowClick={onRowClick}\n            onRowExpand={handleRowExpand}\n            onKeyDown={handleKeyDown}\n            onSetSelectedRow={setSelectedRow}\n          />\n        )}\n      </Box>\n\n      {/* Aggregation Row */}\n      {aggregationConfig.enabled && aggregationConfig.showInFooter && tableState.aggregation.enabled.length > 0 && (\n        <AggregationRow\n          columns={columns}\n          data={processedData}\n          enabledAggregations={tableState.aggregation.enabled}\n          visibleColumns={tableState.columns.visible}\n        />\n      )}\n\n      {/* Pagination */}\n      {paginationConfig.enabled && (\n        <Pagination\n          config={paginationConfig}\n          totalCount={processedData.length}\n          page={tableState.pagination.page}\n          pageSize={tableState.pagination.pageSize}\n          onPageChange={handlePageChange}\n          onPageSizeChange={handlePageSizeChange}\n        />\n      )}\n    </Paper>\n  );\n};\n\nexport default EnhancedTable;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15 3H5c-1.1 0-1.99.9-1.99 2L3 19c0 1.1.89 2 1.99 2H19c1.1 0 2-.9 2-2V9zM8 17c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1m0-4c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1m0-4c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1m6 1V4.5l5.5 5.5z\"\n}), 'Summarize');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6z\"\n}), 'KeyboardArrowRight');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6z\"\n}), 'KeyboardArrowDown');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M16 9V4h1c.55 0 1-.45 1-1s-.45-1-1-1H7c-.55 0-1 .45-1 1s.45 1 1 1h1v5c0 1.66-1.34 3-3 3v2h5.97v7l1 1 1-1v-7H19v-2c-1.66 0-3-1.34-3-3\"\n}), 'PushPin');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m10 17 5-5-5-5z\"\n}), 'ArrowRight');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"\n}), 'ChevronRight');","import type { TableFeatures } from '../UnifiedDataTable';\nimport { SxProps, Theme, TooltipProps } from '@mui/material';\nimport React from 'react';\n\n// Base column definition\nexport interface BaseColumnDef {\n  id: string;\n  label: string;\n  align?: 'left' | 'right' | 'center';\n  format?: (value: any, row: any) => React.ReactNode;\n  type?: 'text' | 'number' | 'currency' | 'percentage' | 'status' | 'sparkline' | 'progress' | 'bars' | 'link' |\n         'user' | 'rating' | 'badge' | 'boolean' | 'date' | 'tags' | 'microChart';\n  wrap?: boolean;\n  maxWidth?: string;\n  valueKey?: string;\n  comparativeKey?: string;\n  target?: number;\n  sortable?: boolean;\n  cellProps?: Record<string, any>;\n  linkConfig?: {\n    urlField?: string;\n    urlPrefix?: string;\n    urlSuffix?: string;\n    urlBuilder?: (row: any) => string;\n    openInNewTab?: boolean;\n    displayField?: string;\n  };\n\n  // Additional properties for enhanced features\n  groupable?: boolean;\n  filterable?: boolean;\n  aggregatable?: boolean;\n  drillDownTarget?: string;\n  hidden?: boolean;\n  pinned?: boolean;\n  width?: number;\n\n  // New properties for additional features\n  spanConfig?: CellSpanConfig;\n  tooltip?: TooltipConfig;\n  calculated?: boolean;\n  formula?: (row: any) => any;\n\n  // Tree data properties\n  treeColumn?: boolean;\n\n  // Advanced feature properties\n  microChartConfig?: MicroChartConfig;\n  heatmap?: HeatmapConfig;\n  ratingMax?: number;\n  progressColor?: 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';\n  showProgressValue?: boolean;\n  badgeColor?: 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';\n  badgeMax?: number;\n  badgeContent?: string;\n  showZeroBadge?: boolean;\n  trueIcon?: string;\n  falseIcon?: string;\n  trueColor?: string;\n  falseColor?: string;\n  dateFormat?: 'short' | 'medium' | 'long' | 'relative' | 'datetime' | 'time';\n}\n\n// Export formats\nexport enum ExportFormat {\n  CSV = 'csv',\n  EXCEL = 'excel',\n  PDF = 'pdf',\n  JSON = 'json'\n}\n\n// Aggregation function type\nexport type AggregationFunction = 'sum' | 'avg' | 'min' | 'max' | 'count';\n\n// Aggregation definition interface\nexport interface AggregationDefinition {\n  columnId: string;\n  function: AggregationFunction;\n  label?: string;\n}\n\n// Row detail renderer function type\nexport type RowDetailRenderer = (row: any) => React.ReactNode;\n\n// Drill-down configuration interface\nexport interface DrillDownConfigItem {\n  // The source grouping level (e.g., 'Month', 'Label')\n  sourceGrouping: string;\n  // The target grouping level (e.g., 'Day', 'Player')\n  targetGrouping: string;\n  // Optional filter transformation function\n  transformFilter?: (row: any) => Record<string, any>;\n  // Label for the drill-down action\n  label?: string;\n  // Required for compatibility\n  enabled?: boolean;\n}\n\n// Cell spanning configuration\nexport interface CellSpanConfig {\n  rowSpan?: number | ((row: any, rowIndex: number, data: any[]) => number);\n  colSpan?: number | ((row: any, rowIndex: number, data: any[]) => number);\n}\n\n// Tooltip configuration\nexport interface TooltipConfig {\n  enabled: boolean;\n  content?: React.ReactNode | ((value: any, row: any) => React.ReactNode);\n  placement?: 'top' | 'right' | 'bottom' | 'left';\n  props?: Partial<TooltipProps>;\n}\n\n// Extended column definition with additional properties\nexport interface ColumnDef extends BaseColumnDef {\n  // All properties are now in BaseColumnDef\n}\n\n// Feature configuration interfaces\nexport interface SortingConfig {\n  enabled: boolean;\n  defaultColumn?: string;\n  defaultDirection?: 'asc' | 'desc';\n  multiColumn?: boolean;\n  serverSide?: boolean;\n}\n\nexport interface FilteringConfig {\n  enabled: boolean;\n  serverSide?: boolean;\n  quickFilter?: boolean;\n  advancedFilter?: boolean;\n  filterTypes?: string[];\n}\n\nexport interface PaginationConfig {\n  enabled: boolean;\n  defaultPageSize?: number;\n  pageSizeOptions?: number[];\n  serverSide?: boolean;\n}\n\nexport interface GroupingConfig {\n  enabled: boolean;\n  defaultGroupBy?: string | null;\n  defaultGroupByLevels?: string[];\n  allowMultipleGroups?: boolean;\n  expandByDefault?: boolean;\n  hierarchical?: boolean;\n}\n\nexport interface AggregationConfig {\n  enabled: boolean;\n  defaultAggregations?: string[];\n  showInFooter?: boolean;\n  showInGroupHeader?: boolean;\n}\n\nexport interface ColumnManagementConfig {\n  enabled: boolean;\n  allowReordering?: boolean;\n  allowHiding?: boolean;\n  allowPinning?: boolean;\n  allowResizing?: boolean;\n}\n\nexport interface ExpandableRowsConfig {\n  enabled: boolean;\n  expandByDefault?: boolean;\n  singleExpand?: boolean;\n}\n\nexport interface KeyboardNavigationConfig {\n  enabled: boolean;\n  allowCellNavigation?: boolean;\n  allowRowNavigation?: boolean;\n  allowPageNavigation?: boolean;\n}\n\nexport interface StickyColumnsConfig {\n  enabled: boolean;\n  defaultStickyColumns?: string[];\n  allowUserCustomization?: boolean;\n}\n\nexport interface ResponsiveConfig {\n  enabled: boolean;\n  breakpoints?: {\n    xs?: string[];\n    sm?: string[];\n    md?: string[];\n    lg?: string[];\n    xl?: string[];\n  };\n  priorityColumns?: string[];\n}\n\nexport interface DrillDownConfig {\n  enabled: boolean;\n  configs?: DrillDownConfigItem[];\n}\n\nexport interface StateManagementConfig {\n  enabled: boolean;\n  persistInLocalStorage?: boolean;\n  persistInUrl?: boolean;\n  stateKey?: string;\n}\n\nexport interface ExportConfig {\n  enabled: boolean;\n  formats?: ExportFormat[];\n  includeHiddenColumns?: boolean;\n  fileName?: string;\n}\n\nexport interface TreeDataConfig {\n  enabled: boolean;\n  childField: string;\n  expandByDefault?: boolean;\n  levelIndent?: number;\n  labelField?: string;\n}\n\nexport interface CellSpanningConfig {\n  enabled: boolean;\n  defaultRowSpan?: number;\n  defaultColSpan?: number;\n}\n\nexport interface InfiniteScrollConfig {\n  enabled: boolean;\n  loadMoreThreshold?: number;\n  pageSize?: number;\n  initialLoad?: number;\n}\n\nexport interface ColumnResizingConfig {\n  enabled: boolean;\n  minWidth?: number;\n  maxWidth?: number;\n  persistWidths?: boolean;\n  resizeMode?: 'fit' | 'expand';\n}\n\nexport interface SearchHighlightingConfig {\n  enabled: boolean;\n  highlightStyle?: React.CSSProperties;\n  caseSensitive?: boolean;\n}\n\nexport interface HistoryConfig {\n  enabled: boolean;\n  maxHistoryLength?: number;\n  trackChanges?: ('sorting' | 'filtering' | 'pagination' | 'grouping' | 'columns' | 'aggregation')[];\n}\n\nexport interface BulkImportConfig {\n  enabled: boolean;\n  formats: ('csv' | 'json' | 'excel')[];\n  validateRow?: (row: any) => { valid: boolean; errors: string[] };\n  headerMapping?: Record<string, string>;\n}\n\nexport interface ColumnCalculationsConfig {\n  enabled: boolean;\n  recalculateOnDataChange?: boolean;\n}\n\nexport interface PivotTableConfig {\n  enabled: boolean;\n  rowFields: string[];\n  columnFields: string[];\n  valueField: string;\n  aggregationFunction: AggregationFunction;\n  valueFormat?: 'number' | 'currency' | 'percentage';\n  showTotals?: boolean;\n  midPoint?: number;\n}\n\nexport interface CustomAggregationsConfig {\n  enabled: boolean;\n  functions?: Record<string, (values: number[], context?: any) => number>;\n}\n\nexport interface MicroChartConfig {\n  type: 'sparkline' | 'bar' | 'pie';\n  dataField: string;\n  width?: number;\n  height?: number;\n  color?: string;\n  fillColor?: string;\n  showArea?: boolean;\n  showPoints?: boolean;\n  barSpacing?: number;\n  borderRadius?: number;\n  showValues?: boolean;\n  colors?: string[];\n  donut?: boolean;\n  innerRadius?: number;\n}\n\nexport interface HeatmapConfig {\n  enabled: boolean;\n  minValue?: number;\n  maxValue?: number;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  midPoint?: number;\n  adaptiveText?: boolean;\n  padding?: number;\n  borderRadius?: number;\n  align?: 'left' | 'right' | 'center';\n}\n\nexport interface GanttChartConfig {\n  enabled: boolean;\n  startField: string;\n  endField: string;\n  taskField: string;\n  dependenciesField?: string;\n  progressField?: string;\n  colorField?: string;\n  defaultColor?: string;\n  showDependencies?: boolean;\n  showProgress?: boolean;\n  showToday?: boolean;\n  showWeekends?: boolean;\n}\n\nexport interface RealtimeConfig {\n  enabled: boolean;\n  websocketUrl: string;\n  messageTypes?: {\n    rowAdded?: string;\n    rowUpdated?: string;\n    rowDeleted?: string;\n    refresh?: string;\n  };\n  reconnectStrategy?: {\n    maxRetries?: number;\n    backoffFactor?: number;\n  };\n  customMessageHandlers?: Record<string, (data: any[], message: any) => any[] | null>;\n}\n\nexport interface WorkerProcessingConfig {\n  enabled: boolean;\n  workerUrl: string;\n  operations?: ('sort' | 'filter' | 'aggregate')[];\n}\n\nexport interface ProgressiveLoadingConfig {\n  enabled: boolean;\n  priorityColumns?: string[];\n  deferredColumns?: string[];\n  loadDelay?: number;\n  placeholders?: Record<string, React.ReactNode>;\n}\n\nexport interface ThemingConfig {\n  enabled: boolean;\n  theme?: 'light' | 'dark' | 'highContrast' | string;\n  customTheme?: {\n    header?: {\n      backgroundColor?: string;\n      textColor?: string;\n      borderColor?: string;\n    };\n    row?: {\n      evenBackgroundColor?: string;\n      oddBackgroundColor?: string;\n      hoverBackgroundColor?: string;\n      selectedBackgroundColor?: string;\n      textColor?: string;\n      borderColor?: string;\n    };\n    footer?: {\n      backgroundColor?: string;\n      textColor?: string;\n      borderColor?: string;\n    };\n    pagination?: {\n      backgroundColor?: string;\n      textColor?: string;\n      activeColor?: string;\n    };\n    scrollbar?: {\n      trackColor?: string;\n      thumbColor?: string;\n      thumbHoverColor?: string;\n    };\n  };\n  componentStyles?: Record<string, (props: any) => Record<string, any>>;\n}\n\nexport interface CustomRenderersConfig {\n  enabled: boolean;\n  renderers?: Record<string, (value: any, row: any, column: any) => React.ReactNode>;\n  conditionalRenderers?: {\n    condition: (value: any, row: any, column: any) => boolean;\n    renderer: (value: any, row: any, column: any) => React.ReactNode;\n  }[];\n}\n\nexport interface LayoutTemplatesConfig {\n  enabled: boolean;\n  template?: 'standard' | 'compact' | 'comfortable' | 'dashboard' | 'report' | 'admin' | 'minimal' | string;\n  customLayouts?: Record<string, {\n    headerHeight?: number;\n    rowHeight?: number;\n    footerHeight?: number;\n    density?: 'compact' | 'standard' | 'comfortable';\n    showBorders?: boolean;\n    borderRadius?: number;\n    elevation?: number;\n    padding?: number;\n    headerFontSize?: number;\n    bodyFontSize?: number;\n    footerFontSize?: number;\n    headerFontWeight?: number;\n    bodyFontWeight?: number;\n    footerFontWeight?: number;\n    headerTextTransform?: string;\n    rowHoverEffect?: 'background' | 'shadow' | 'none';\n    rowSelectedEffect?: 'background' | 'border' | 'none';\n    animation?: boolean;\n  }>;\n}\n\n// Table state interface\nexport interface TableState {\n  sorting: {\n    column: string;\n    direction: 'asc' | 'desc';\n  };\n  filtering: {\n    quickFilter: string;\n    advancedFilters: Record<string, any>;\n  };\n  pagination: {\n    page: number;\n    pageSize: number;\n  };\n  grouping: {\n    groupByColumn: string | null;\n    groupByLevels: string[];\n    expandedGroups: string[]; // Paths of expanded groups in hierarchical mode\n  };\n  columns: {\n    visible: string[];\n    order: string[];\n    sticky: string[];\n    widths: Record<string, number>;\n  };\n  aggregation: {\n    enabled: string[];\n  };\n  expandedRows: string[];\n  selectedRows: string[];\n  treeData: {\n    expandedNodes: string[];\n  };\n  infiniteScroll: {\n    loadedPages: number;\n  };\n  history: {\n    undoStack: Partial<TableState>[];\n    redoStack: Partial<TableState>[];\n  };\n  calculatedColumns: {\n    values: Record<string, any>;\n  };\n}\n\n// Enhanced table props interface\n// Hierarchical data interfaces\nexport interface HierarchicalGroup {\n  id: string;\n  key: string;\n  value: string;\n  path: string;\n  level: number;\n  children: HierarchicalGroup[];\n  data: any[];\n  metrics: Record<string, number>;\n  hasChildren: boolean;\n  childrenLoaded: boolean;\n  groupData?: any; // Additional data related to the group\n}\n\nexport interface EnhancedTableProps {\n  // Base props\n  data: any[];\n  columns: ColumnDef[];\n  title?: string;\n  loading?: boolean;\n  emptyMessage?: string;\n  idField?: string;\n  sx?: SxProps<Theme>;\n\n  // Event handlers\n  onRowClick?: (row: any) => void;\n  onRefresh?: () => void;\n  onExport?: (format: ExportFormat, data: any[]) => void;\n  onStateChange?: (state: TableState) => void;\n  onDrillDown?: (row: any, sourceGrouping: string, targetGrouping: string, filters: Record<string, any>) => void;\n  onLoadGroupChildren?: (parentPath: string, childLevel: number, groupBy: string) => Promise<HierarchicalGroup[]>;\n\n  // Feature configurations\n  features?: {\n    sorting?: boolean | SortingConfig;\n    filtering?: boolean | FilteringConfig;\n    pagination?: boolean | PaginationConfig;\n    grouping?: boolean | GroupingConfig;\n    aggregation?: boolean | AggregationConfig;\n    columnManagement?: boolean | ColumnManagementConfig;\n    expandableRows?: boolean | ExpandableRowsConfig;\n    keyboardNavigation?: boolean | KeyboardNavigationConfig;\n    stickyColumns?: boolean | StickyColumnsConfig;\n    responsive?: boolean | ResponsiveConfig;\n    drillDown?: boolean | DrillDownConfig;\n    stateManagement?: boolean | StateManagementConfig;\n    export?: boolean | ExportConfig;\n\n    // New features\n    treeData?: boolean | TreeDataConfig;\n    cellSpanning?: boolean | CellSpanningConfig;\n    infiniteScroll?: boolean | InfiniteScrollConfig;\n    columnResizing?: boolean | ColumnResizingConfig;\n    searchHighlighting?: boolean | SearchHighlightingConfig;\n    history?: boolean | HistoryConfig;\n    bulkImport?: boolean | BulkImportConfig;\n    columnCalculations?: boolean | ColumnCalculationsConfig;\n\n    // Advanced features\n    pivotTable?: boolean | PivotTableConfig;\n    customAggregations?: boolean | CustomAggregationsConfig;\n    microCharts?: boolean;\n    heatmap?: boolean | HeatmapConfig;\n    ganttChart?: boolean | GanttChartConfig;\n    realtime?: boolean | RealtimeConfig;\n    workerProcessing?: boolean | WorkerProcessingConfig;\n    progressiveLoading?: boolean | ProgressiveLoadingConfig;\n    theming?: boolean | ThemingConfig;\n    customRenderers?: boolean | CustomRenderersConfig;\n    layoutTemplates?: boolean | LayoutTemplatesConfig;\n  };\n\n  // Feature-specific props\n  renderRowDetail?: RowDetailRenderer;\n  initialState?: Partial<TableState>;\n  stateFromUrl?: boolean;\n\n  // New event handlers\n  onColumnResize?: (columnId: string, width: number) => void;\n  onLoadMore?: (page: number) => void;\n  onUndo?: () => void;\n  onRedo?: () => void;\n  onImport?: (data: any[]) => void;\n  onCalculatedColumnChange?: (columnId: string, values: Record<string, any>) => void;\n\n  // Legacy EnhancedUnifiedDataTable compatibility props\n  enableColumnSelection?: boolean;\n  enableAdvancedFiltering?: boolean;\n  enableExportOptions?: boolean;\n  enableColumnReordering?: boolean;\n  enableRowGrouping?: boolean;\n  enableSummaryRow?: boolean;\n  enableExpandableRows?: boolean;\n  enableKeyboardNavigation?: boolean;\n  enableStickyColumns?: boolean;\n  enableResponsiveDesign?: boolean;\n  enableDrillDown?: boolean;\n  filterDefinitions?: any[];\n  groupableColumns?: string[];\n  stickyColumnIds?: string[];\n  drillDownConfig?: any[];\n  aggregations?: any[];\n  onExportFormat?: (format: string) => void;\n  onApplyAdvancedFilters?: (filters: Record<string, any>) => void;\n  onColumnOrderChange?: (columns: Array<{id: string}>) => void;\n  onGroupingChange?: (groupBy: string | null) => void;\n  onRowExpand?: (rowId: string, expanded: boolean) => void;\n}\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 9h-4V3H9v6H5l7 7zM5 18v2h14v-2z\"\n}), 'GetApp');"],"names":["_ref","options","value","onChange","label","placeholder","disabled","required","error","helperText","maxMenuHeight","searchable","showSelectAllOption","renderValue","size","width","id","name","sx","className","style","searchTerm","setSearchTerm","useState","filteredOptions","filter","option","toLowerCase","includes","length","_jsxs","FormControl","fullWidth","children","_jsx","InputLabel","Select","labelId","multiple","input","OutlinedInput","Typography","color","MenuItem","variant","FormHelperText","minWidth","event","newValue","target","selected","Box","display","flexWrap","gap","map","selectedValue","find","opt","toString","Chip","onDelete","valueToRemove","preventDefault","stopPropagation","val","onClick","e","deleteIcon","ClearIcon","fontSize","onMouseDown","opacity","onClose","handleClose","HTMLElement","classList","contains","closest","MenuProps","PaperProps","maxHeight","p","position","top","bgcolor","zIndex","TextField","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","px","py","justifyContent","Button","handleSelectAll","selectableOptions","handleSelectNone","Divider","alignItems","Checkbox","checked","some","ListItemText","primary","secondary","group","description","Tooltip","title","arrow","InfoOutlinedIcon","ml","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d","QuickFilter","handleClear","edge","xs","sm","AdvancedFilter","_ref2","columns","filters","anchorEl","setAnchorEl","localFilters","setLocalFilters","filterableColumns","col","filterable","_Fragment","currentTarget","FilterListIcon","Object","keys","Popover","open","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","gutterBottom","column","mb","renderFilterInput","handleFilterChange","columnId","prev","mt","handleReset","handleApply","type","min","Number","undefined","flex","max","_ref3","config","quickFilterValue","advancedFilters","onQuickFilterChange","onAdvancedFiltersChange","quickFilter","advancedFilter","visibleColumns","columnOrder","stickyColumns","onVisibilityChange","onOrderChange","onStickyChange","handleVisibilityChange","isVisible","handleStickyChange","isSticky","ViewColumnIcon","Menu","allowReordering","DragDropContext","onDragEnd","result","destination","sourceIndex","source","index","destinationIndex","newOrder","removed","splice","Droppable","droppableId","provided","droppableProps","ref","innerRef","Draggable","draggableId","draggableProps","dragHandleProps","dense","DragIndicatorIcon","mr","FormControlLabel","control","m","allowPinning","PushPinIcon","totalCount","page","pageSize","onPageChange","onPageSizeChange","TablePagination","component","count","handleChangePage","newPage","rowsPerPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","pageSizeOptions","labelDisplayedRows","from","to","labelRowsPerPage","margin","_columns$find","groupByColumn","onGroupingChange","handleGroupingChange","groupableColumns","groupable","GroupWorkIcon","groupByLevels","onGroupingLevelsChange","dialogOpen","setDialogOpen","handleCloseDialog","ArrowRightIcon","mx","newLevels","handleOpenDialog","Dialog","maxWidth","DialogTitle","DialogContent","List","isSelected","indexOf","ListItem","secondaryAction","newGroupByLevels","temp","handleMoveUp","handleMoveDown","ListItemIcon","push","handleToggleGroupLevel","DialogActions","handleClearAll","AggregationMenu","aggregations","enabledAggregations","onAggregationToggle","SummarizeIcon","agg","aggregationId","function","handleToggle","toUpperCase","AggregationRow","data","aggregationResults","forEach","aggId","func","split","calculateAggregation","aggregationFunction","reduce","sum","row","acc","Math","Paper","elevation","backgroundColor","theme","palette","mode","grey","Table","TableBody","TableRow","columnAggs","startsWith","_","TableCell","align","displayValue","format","Intl","NumberFormat","currency","toLocaleString","aggregatable","flatMap","configs","sourceGrouping","selectedRow","onDrillDown","applicableConfigs","ZoomInIcon","transformFilter","targetGrouping","handleDrillDown","ExpandButton","expanded","ExpandLessIcon","ExpandMoreIcon","ExpandedRow","colSpan","renderDetail","borderBottom","Collapse","in","timeout","unmountOnExit","ExpandAllButton","expandedRows","totalRows","onExpandAll","onCollapseAll","allExpanded","onExport","handleExport","formats","ExportFormat","CSV","EXCEL","PDF","JSON","GetAppIcon","createSvgIcon","getTableSortLabelUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableSortLabelRoot","styled","ButtonBase","overridesResolver","props","styles","ownerState","root","active","cursor","flexDirection","vars","text","tableSortLabelClasses","icon","TableSortLabelIcon","capitalize","direction","_extends","marginRight","marginLeft","transition","transitions","create","duration","shorter","userSelect","transform","React","inProps","useThemeProps","hideSortIcon","IconComponent","ArrowDownwardIcon","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","clsx","disableRipple","as","activeColumn","onSort","sortable","TableSortLabel","handleSort","orderBy","order","idField","emptyMessage","keyboardNavConfig","stickyColumnsConfig","renderRowDetail","onRowClick","onRowExpand","onKeyDown","onSetSelectedRow","tableRef","useRef","visibleOrderedColumns","startIndex","endIndex","paginatedData","slice","handleRowExpand","rowId","renderCellContent","linkConfig","url","displayText","urlBuilder","urlField","urlPrefix","urlSuffix","String","displayField","Link","href","openInNewTab","rel","textDecoration","textAlign","TableContainer","TableHead","padding","colIndex","enabled","left","background","paper","boxShadow","Sorting","rowIndex","isExpanded","hover","handleRowClick","whiteSpace","wrap","overflow","textOverflow","tabIndex","hierarchicalData","expandedGroups","loading","onToggleGroup","onLoadChildren","loadingGroups","setLoadingGroups","renderGroupRow","indent","arguments","path","isLoading","hasNextLevel","level","canExpand","hasChildren","main","pl","fontWeight","async","childrenLoaded","childLevel","childGroupBy","handleToggleGroup","CircularProgress","KeyboardArrowDownIcon","KeyboardArrowRightIcon","key","renderMetricValue","border","child","metrics","DEFAULT_TABLE_STATE","sorting","filtering","pagination","grouping","visible","sticky","widths","aggregation","selectedRows","treeData","expandedNodes","infiniteScroll","loadedPages","history","undoStack","redoStack","calculatedColumns","values","onRefresh","onStateChange","onLoadGroupChildren","features","initialState","stateFromUrl","enableColumnSelection","enableAdvancedFiltering","enableExportOptions","enableColumnReordering","enableRowGrouping","enableSummaryRow","enableExpandableRows","enableKeyboardNavigation","enableStickyColumns","enableResponsiveDesign","enableDrillDown","filterDefinitions","stickyColumnIds","drillDownConfig","drillDownConfigProp","onExportFormat","onApplyAdvancedFilters","onColumnOrderChange","useTheme","location","useMediaQuery","breakpoints","down","useLocation","navigate","useNavigate","sortingConfig","useMemo","filteringConfig","paginationConfig","groupingConfig","aggregationConfig","showInFooter","columnManagementConfig","allowHiding","columnManagement","expandableRowsConfig","expandableRows","keyboardNavigationConfig","allowCellNavigation","keyboardNavigation","responsiveConfig","responsive","drillDown","exportConfig","export","tableState","setTableState","defaultState","pinned","state","decodeStateFromUrl","params","URLSearchParams","sort","get","parse","console","groupBy","search","useEffect","queryString","set","stringify","join","encodeStateToUrl","replace","setHierarchicalData","isLoadingHierarchicalData","setIsLoadingHierarchicalData","processedData","filterData","filteredData","lowerCaseSearchTerm","entries","every","sortData","a","b","valueA","valueB","localeCompare","hierarchical","firstLevelGroupBy","groupByField","parentPath","groups","item","_item$groupByField","items","parseFloat","createHierarchicalData","useCallback","prevState","isAsc","handleQuickFilterChange","handleAdvancedFiltersChange","handleColumnVisibilityChange","newVisibleColumns","handleColumnOrderChange","handleStickyColumnChange","newStickyColumns","handlePageChange","handlePageSizeChange","handleGroupingLevelsChange","columnIds","handleLoadGroupChildren","prevData","updateChildren","handleAggregationToggle","currentEnabledAggregations","aggregationIndex","currentExpandedRows","singleExpand","handleExpandAllRows","handleCollapseAllRows","handleKeyDown","maxRowIndex","maxColIndex","newRowIndex","newColIndex","cellId","cellElement","document","getElementById","focus","exportData","exportRow","includeHiddenColumns","setSelectedRow","groupedData","groupData","groupValue","rows","groupRow","_groupRows","_isGroupRow","displayData","height","Toolbar","pr","Filtering","ColumnManagement","Grouping","HierarchicalGrouping","Aggregation","DrillDown","Export","RefreshIcon","overflowX","HierarchicalTableContent","TableContent","Pagination","fillRule"],"sourceRoot":""}