{"version":3,"file":"static/js/1097.02edb901.chunk.js","mappings":"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","sources":["pages/reports/PerformancePage.tsx","../node_modules/@mui/icons-material/Download.js","../node_modules/@mui/icons-material/InfoOutlined.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Collapse\n} from '@mui/material';\nimport { EnhancedTable } from '../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../components/tables/enhanced/types';\nimport MultiSelect, { MultiSelectOption } from '../../components/common/MultiSelect';\nimport { format as formatDate } from 'date-fns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport { PerformanceData, PerformanceSummary, PerformanceFilters } from '../../types/performance';\nimport api from '../../services/api';\nimport { formatCurrency, formatNumber, formatPercentage } from '../../utils/formatters';\nimport { ReportAreaChart, ReportBarChart } from '../../components/reports/charts/ReportCharts';\n\n/**\n * PerformancePage component\n * Displays a comprehensive performance report with filtering and data visualization\n */\nconst PerformancePage: React.FC = () => {\n  // State for filters\n  const [startDate, setStartDate] = useState<Date>(new Date(new Date().setDate(new Date().getDate() - 30)));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [selectedGames, setSelectedGames] = useState<(string | number)[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<(string | number)[]>([]);\n  const [selectedProviders, setSelectedProviders] = useState<(string | number)[]>([]);\n  const [groupBy, setGroupBy] = useState<string>('day');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState<boolean>(false);\n  const [advancedFilters, setAdvancedFilters] = useState<Record<string, any>>({});\n\n  // State for data\n  const [performanceData, setPerformanceData] = useState<PerformanceData[]>([]);\n  const [summary, setSummary] = useState<PerformanceSummary | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState<number>(0);\n\n  // State for metadata\n  const [games, setGames] = useState<Array<{ id: string; name: string }>>([]);\n  const [categories, setCategories] = useState<Array<{ id: string; name: string }>>([]);\n  const [providers, setProviders] = useState<Array<{ id: string; name: string }>>([]);\n  const [gamesLoading, setGamesLoading] = useState<boolean>(false);\n  const [categoriesLoading, setCategoriesLoading] = useState<boolean>(false);\n  const [providersLoading, setProvidersLoading] = useState<boolean>(false);\n  const [gamesOptions, setGamesOptions] = useState<MultiSelectOption[]>([]);\n  const [categoriesOptions, setCategoriesOptions] = useState<MultiSelectOption[]>([]);\n  const [providersOptions, setProvidersOptions] = useState<MultiSelectOption[]>([]);\n\n  // State for table\n  const [page, setPage] = useState<number>(0);\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [sortBy, setSortBy] = useState<string>('date');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n\n  // State for export dialog\n  const [exportDialogOpen, setExportDialogOpen] = useState<boolean>(false);\n  const [exportFormat, setExportFormat] = useState<string>('excel');\n\n  // Fetch metadata (games, categories, providers) on component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        console.log('[PERFORMANCE PAGE] Fetching metadata');\n        setGamesLoading(true);\n        setCategoriesLoading(true);\n        setProvidersLoading(true);\n\n        // Get metadata from API\n        const data = await api.performance.getMetadata();\n        console.log('[PERFORMANCE PAGE] Got metadata from service:', data);\n\n        // Handle games\n        if (data && data.games) {\n          console.log('[PERFORMANCE PAGE] Got games from service:', data.games);\n          const fetchedGames = data.games || [];\n          setGames(fetchedGames);\n\n          // Convert games to MultiSelect options\n          const gamesOptions = fetchedGames.map((game) => ({\n            value: game.id,\n            label: game.name\n          }));\n          setGamesOptions(gamesOptions);\n        } else {\n          console.log('[PERFORMANCE PAGE] No games found in API response');\n          setGames([]);\n          setGamesOptions([]);\n        }\n        setGamesLoading(false);\n\n        // Handle categories\n        if (data && data.gameCategories) {\n          console.log('[PERFORMANCE PAGE] Got categories from service:', data.gameCategories);\n          const fetchedCategories = data.gameCategories || [];\n          setCategories(fetchedCategories);\n\n          // Convert categories to MultiSelect options\n          const categoriesOptions = fetchedCategories.map((category) => ({\n            value: category.id,\n            label: category.name\n          }));\n          setCategoriesOptions(categoriesOptions);\n        } else {\n          console.log('[PERFORMANCE PAGE] No categories found in API response');\n          setCategories([]);\n          setCategoriesOptions([]);\n        }\n        setCategoriesLoading(false);\n\n        // Handle providers\n        if (data && data.gameProviders) {\n          console.log('[PERFORMANCE PAGE] Got providers from service:', data.gameProviders);\n          const fetchedProviders = data.gameProviders || [];\n          setProviders(fetchedProviders);\n\n          // Convert providers to MultiSelect options\n          const providersOptions = fetchedProviders.map((provider) => ({\n            value: provider.id,\n            label: provider.name\n          }));\n          setProvidersOptions(providersOptions);\n        } else {\n          console.log('[PERFORMANCE PAGE] No providers found in API response');\n          setProviders([]);\n          setProvidersOptions([]);\n        }\n        setProvidersLoading(false);\n      } catch (err) {\n        console.error('[PERFORMANCE PAGE] Error fetching metadata:', err);\n        setError('Failed to load metadata. Please try again later.');\n      }\n    };\n\n    fetchMetadata();\n  }, []);\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    // Define a function to fetch data on mount to avoid dependency issues\n    const fetchInitialData = async () => {\n      console.log('[PERFORMANCE PAGE] Fetching initial data');\n      await fetchPerformanceData();\n    };\n\n    // Set a small delay to ensure the component is fully mounted\n    const timer = setTimeout(() => {\n      fetchInitialData();\n    }, 100);\n\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Fetch performance data based on filters\n  const fetchPerformanceData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Prepare filters\n      const filters: PerformanceFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        gameIds: selectedGames.length > 0 ? selectedGames.map(id => String(id)) : undefined,\n        gameCategories: selectedCategories.length > 0 ? selectedCategories.map(id => String(id)) : undefined,\n        gameProviders: selectedProviders.length > 0 ? selectedProviders.map(id => String(id)) : undefined,\n        groupBy: groupBy as any,\n        ...advancedFilters\n      };\n\n      console.log('[PERFORMANCE PAGE] Fetching data with filters:', filters);\n\n      // Add pagination and sorting\n      const params = {\n        page: page + 1, // API uses 1-based indexing\n        pageSize,\n        sortBy,\n        sortDirection\n      };\n\n      // Fetch performance data from API\n      const response = await api.performance.getData({ ...filters, ...params });\n\n      if (response && response.data) {\n        setPerformanceData(response.data);\n        setTotalCount(response.meta?.totalCount || response.data.length);\n\n        // Process summary data if available\n        if (response.summary) {\n          console.log('[PERFORMANCE PAGE] Using summary from response:', response.summary);\n          setSummary(response.summary);\n        } else {\n          // If no summary in response, fetch it separately\n          try {\n            const summaryResponse = await api.performance.getSummary(filters);\n            if (summaryResponse) {\n              setSummary(summaryResponse);\n            }\n          } catch (summaryError) {\n            console.error('[PERFORMANCE PAGE] Error fetching summary:', summaryError);\n          }\n        }\n      } else {\n        console.log('[PERFORMANCE PAGE] No data returned from API');\n        setPerformanceData([]);\n        setSummary(null);\n        setTotalCount(0);\n      }\n    } catch (err) {\n      console.error('[PERFORMANCE PAGE] Error fetching data:', err);\n      setError('Failed to load performance data. Please try again later.');\n      setPerformanceData([]);\n      setSummary(null);\n      setTotalCount(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = () => {\n    setPage(0); // Reset to first page when filters change\n    fetchPerformanceData();\n  };\n\n  // Handle reset filters\n  const handleResetFilters = () => {\n    setStartDate(new Date(new Date().setDate(new Date().getDate() - 30)));\n    setEndDate(new Date());\n    setSelectedGames([]);\n    setSelectedCategories([]);\n    setSelectedProviders([]);\n    setGroupBy('day');\n    setAdvancedFilters({});\n    setPage(0);\n    setSortBy('date');\n    setSortDirection('desc');\n  };\n\n  // Handle export\n  const handleExport = (format: ExportFormat) => {\n    setExportFormat(format);\n    setExportDialogOpen(true);\n  };\n\n  // Handle export confirmation\n  const handleExportConfirm = async () => {\n    try {\n      setLoading(true);\n\n      // Prepare filters\n      const filters: PerformanceFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        gameIds: selectedGames.length > 0 ? selectedGames.map(id => String(id)) : undefined,\n        gameCategories: selectedCategories.length > 0 ? selectedCategories.map(id => String(id)) : undefined,\n        gameProviders: selectedProviders.length > 0 ? selectedProviders.map(id => String(id)) : undefined,\n        groupBy: groupBy as any,\n        ...advancedFilters\n      };\n\n      // Export data\n      const blob = await api.performance.exportData(filters, exportFormat);\n\n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `performance-report-${formatDate(new Date(), 'yyyy-MM-dd')}.${exportFormat}`;\n      document.body.appendChild(a);\n      a.click();\n\n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      setExportDialogOpen(false);\n    } catch (err) {\n      console.error('[PERFORMANCE PAGE] Error exporting data:', err);\n      setError('Failed to export data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Define table columns\n  const columns: ColumnDef[] = [\n    {\n      id: 'date',\n      label: 'Date',\n      type: 'date',\n      align: 'left',\n      format: (value) => value ? formatDate(new Date(value), 'yyyy-MM-dd') : ''\n    },\n    {\n      id: 'gameName',\n      label: 'Game',\n      type: 'text',\n      align: 'left'\n    },\n    {\n      id: 'gameCategory',\n      label: 'Category',\n      type: 'text',\n      align: 'left'\n    },\n    {\n      id: 'gameProvider',\n      label: 'Provider',\n      type: 'text',\n      align: 'left'\n    },\n    {\n      id: 'activePlayers',\n      label: 'Active Players',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value)\n    },\n    {\n      id: 'newPlayers',\n      label: 'New Players',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value)\n    },\n    {\n      id: 'sessions',\n      label: 'Sessions',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value)\n    },\n    {\n      id: 'avgSessionDuration',\n      label: 'Avg Session (min)',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value, 1)\n    },\n    {\n      id: 'bets',\n      label: 'Bets',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value)\n    },\n    {\n      id: 'avgBet',\n      label: 'Avg Bet',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'wins',\n      label: 'Wins',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value)\n    },\n    {\n      id: 'avgWin',\n      label: 'Avg Win',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'winRate',\n      label: 'Win Rate',\n      type: 'percentage',\n      align: 'right',\n      format: (value) => formatPercentage(value)\n    },\n    {\n      id: 'rtp',\n      label: 'RTP',\n      type: 'percentage',\n      align: 'right',\n      format: (value) => formatPercentage(value)\n    },\n    {\n      id: 'holdPercentage',\n      label: 'Hold %',\n      type: 'percentage',\n      align: 'right',\n      format: (value) => formatPercentage(value)\n    }\n  ];\n\n  return (\n    <Container maxWidth=\"xl\">\n      <div style={{ marginBottom: '2rem', display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <div>\n          <Typography variant=\"h4\" gutterBottom>\n            Performance Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze game performance, player activity, and engagement metrics\n          </Typography>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <div style={{ marginBottom: '1rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">Filters</Typography>\n          <div>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              startIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n              sx={{ mr: 1 }}\n            >\n              {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={handleResetFilters}\n              sx={{ mr: 1 }}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleApplyFilters}\n              startIcon={<FilterListIcon />}\n            >\n              Apply Filters\n            </Button>\n          </div>\n        </div>\n\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true, variant: 'outlined' } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true, variant: 'outlined' } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth variant=\"outlined\">\n              <InputLabel id=\"group-by-label\">Group By</InputLabel>\n              <Select\n                labelId=\"group-by-label\"\n                value={groupBy}\n                onChange={(e) => setGroupBy(e.target.value)}\n                label=\"Group By\"\n              >\n                <MenuItem value=\"day\">Day</MenuItem>\n                <MenuItem value=\"week\">Week</MenuItem>\n                <MenuItem value=\"month\">Month</MenuItem>\n                <MenuItem value=\"game\">Game</MenuItem>\n                <MenuItem value=\"category\">Category</MenuItem>\n                <MenuItem value=\"provider\">Provider</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Game Categories\"\n              options={categoriesOptions}\n              value={selectedCategories}\n              onChange={setSelectedCategories}\n              loading={categoriesLoading}\n              fullWidth\n            />\n          </Grid>\n        </Grid>\n\n        <Collapse in={showAdvancedFilters}>\n          <div style={{ marginTop: '1rem' }}>\n            <Divider sx={{ my: 2 }} />\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n            <Grid container spacing={2}>\n              <Grid item xs={12} md={6}>\n                <MultiSelect\n                  label=\"Games\"\n                  options={gamesOptions}\n                  value={selectedGames}\n                  onChange={setSelectedGames}\n                  loading={gamesLoading}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <MultiSelect\n                  label=\"Providers\"\n                  options={providersOptions}\n                  value={selectedProviders}\n                  onChange={setSelectedProviders}\n                  loading={providersLoading}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </Collapse>\n      </Paper>\n\n      {/* Summary Cards */}\n      {summary && (\n        <Grid container spacing={3} sx={{ mb: 4 }}>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Active Players\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatNumber(summary.totalActivePlayers)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Total Sessions\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatNumber(summary.totalSessions)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Avg Session Duration\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatNumber(summary.avgSessionDuration, 1)} min\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Overall RTP\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatPercentage(summary.avgRTP)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Data Table */}\n      <Paper sx={{ p: 0, mb: 4, overflow: 'hidden' }}>\n        <EnhancedTable\n          columns={columns}\n          data={performanceData}\n          loading={loading}\n          title=\"Performance Data\"\n          emptyMessage=\"No performance data available\"\n          idField=\"id\"\n          onExport={handleExport}\n          features={{\n            sorting: true,\n            filtering: {\n              enabled: true,\n              quickFilter: true,\n              advancedFilter: true\n            },\n            pagination: {\n              enabled: true,\n              defaultPageSize: pageSize,\n              pageSizeOptions: [10, 25, 50, 100]\n            },\n            columnManagement: {\n              enabled: true,\n              allowReordering: true,\n              allowHiding: true,\n              allowResizing: true\n            },\n            export: {\n              enabled: true,\n              formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n            }\n          }}\n        />\n      </Paper>\n\n      {/* Export Dialog */}\n      <Dialog open={exportDialogOpen} onClose={() => setExportDialogOpen(false)}>\n        <DialogTitle>Export Performance Data</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\" paragraph>\n            Please confirm that you want to export the performance data with the current filters.\n          </Typography>\n          <FormControl fullWidth sx={{ mt: 2 }}>\n            <InputLabel id=\"export-format-label\">Export Format</InputLabel>\n            <Select\n              labelId=\"export-format-label\"\n              value={exportFormat}\n              onChange={(e) => setExportFormat(e.target.value)}\n              label=\"Export Format\"\n            >\n              <MenuItem value=\"excel\">Excel</MenuItem>\n              <MenuItem value=\"csv\">CSV</MenuItem>\n              <MenuItem value=\"pdf\">PDF</MenuItem>\n            </Select>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setExportDialogOpen(false)}>Cancel</Button>\n          <Button\n            onClick={handleExportConfirm}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<DownloadIcon />}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Export'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default PerformancePage;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z\"\n}), 'Download');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8\"\n}), 'InfoOutlined');"],"names":["PerformancePage","startDate","setStartDate","useState","Date","setDate","getDate","endDate","setEndDate","selectedGames","setSelectedGames","selectedCategories","setSelectedCategories","selectedProviders","setSelectedProviders","groupBy","setGroupBy","showAdvancedFilters","setShowAdvancedFilters","advancedFilters","setAdvancedFilters","performanceData","setPerformanceData","summary","setSummary","loading","setLoading","error","setError","totalCount","setTotalCount","games","setGames","categories","setCategories","providers","setProviders","gamesLoading","setGamesLoading","categoriesLoading","setCategoriesLoading","providersLoading","setProvidersLoading","gamesOptions","setGamesOptions","categoriesOptions","setCategoriesOptions","providersOptions","setProvidersOptions","page","setPage","pageSize","setPageSize","sortBy","setSortBy","sortDirection","setSortDirection","exportDialogOpen","setExportDialogOpen","exportFormat","setExportFormat","useEffect","async","console","log","data","api","performance","getMetadata","fetchedGames","map","game","value","id","label","name","gameCategories","fetchedCategories","category","gameProviders","fetchedProviders","provider","err","fetchMetadata","timer","setTimeout","fetchPerformanceData","fetchInitialData","clearTimeout","filters","formatDate","gameIds","length","String","undefined","params","response","getData","_response$meta","meta","summaryResponse","getSummary","summaryError","columns","type","align","format","formatNumber","formatCurrency","formatPercentage","_jsxs","Container","maxWidth","children","_jsx","style","marginBottom","display","justifyContent","alignItems","Typography","variant","gutterBottom","color","Paper","sx","p","mb","Button","onClick","startIcon","ExpandLessIcon","ExpandMoreIcon","mr","handleResetFilters","handleApplyFilters","FilterListIcon","Grid","container","spacing","item","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","onChange","newValue","slotProps","textField","fullWidth","FormControl","InputLabel","Select","labelId","e","target","MenuItem","MultiSelect","options","Collapse","in","marginTop","Divider","my","Card","CardContent","totalActivePlayers","totalSessions","avgSessionDuration","avgRTP","overflow","EnhancedTable","title","emptyMessage","idField","onExport","features","sorting","filtering","enabled","quickFilter","advancedFilter","pagination","defaultPageSize","pageSizeOptions","columnManagement","allowReordering","allowHiding","allowResizing","export","formats","ExportFormat","CSV","EXCEL","PDF","Dialog","open","onClose","DialogTitle","DialogContent","paragraph","mt","DialogActions","blob","exportData","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","DownloadIcon","disabled","CircularProgress","size","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}