{"version":3,"file":"static/js/800.0e9f7986.chunk.js","mappings":"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","sources":["mockData/auth/login.ts","mockData/auth/register.ts","mockData/auth/profile.ts","mockData/auth/index.ts","mockData/dashboard/stats.ts","mockData/dashboard/playerRegistrations.ts","mockData/dashboard/recentTransactions.ts","mockData/dashboard/topGames.ts","mockData/dashboard/casinoRevenue.ts","mockData/dashboard/playerJourney.ts","mockData/dashboard/kpi.ts","mockData/dashboard/index.ts","mockData/reports/dailyActions.ts","mockData/reports/dailyActionsSummary.ts","mockData/reports/playerActivity.ts","mockData/reports/revenue.ts","mockData/reports/promotional.ts","mockData/reports/compliance.ts","mockData/reports/export.ts","mockData/reports/schedule.ts","mockData/reports/index.ts","mockData/players/players.ts","mockData/players/playerDetails.ts","mockData/players/index.ts","mockData/games/games.ts","mockData/games/index.ts","mockData/transactions/transactions.ts","mockData/transactions/index.ts","mockData/naturalLanguage/query.ts","mockData/naturalLanguage/history.ts","mockData/naturalLanguage/suggestions.ts","mockData/naturalLanguage/index.ts","mockData/index.ts"],"sourcesContent":["/**\n * Login Mock Data\n */\nimport { User } from '../../types/auth';\n\n/**\n * Mock admin user\n */\nconst adminUser: User = {\n  id: '1',\n  username: 'admin',\n  email: 'admin@example.com',\n  firstName: 'Admin',\n  lastName: 'User',\n  role: 'admin',\n  permissions: [\n    'view_dashboard',\n    'view_reports',\n    'create_reports',\n    'edit_reports',\n    'delete_reports',\n    'export_data',\n    'manage_users',\n    'manage_settings',\n    'view_audit_logs'\n  ],\n  createdAt: '2023-01-01T00:00:00.000Z',\n  updatedAt: '2023-01-01T00:00:00.000Z',\n  lastLogin: '2023-06-15T10:30:00.000Z',\n  active: true,\n  avatar: 'https://i.pravatar.cc/150?img=1'\n};\n\n/**\n * Mock regular user\n */\nconst regularUser: User = {\n  id: '2',\n  username: 'user',\n  email: 'user@example.com',\n  firstName: 'Regular',\n  lastName: 'User',\n  role: 'viewer',\n  permissions: [\n    'view_dashboard',\n    'view_reports',\n    'export_data'\n  ],\n  createdAt: '2023-02-15T00:00:00.000Z',\n  updatedAt: '2023-02-15T00:00:00.000Z',\n  lastLogin: '2023-06-14T15:45:00.000Z',\n  active: true,\n  avatar: 'https://i.pravatar.cc/150?img=2'\n};\n\n/**\n * Mock analyst user\n */\nconst analystUser: User = {\n  id: '3',\n  username: 'analyst',\n  email: 'analyst@example.com',\n  firstName: 'Data',\n  lastName: 'Analyst',\n  role: 'analyst',\n  permissions: [\n    'view_dashboard',\n    'view_reports',\n    'create_reports',\n    'export_data'\n  ],\n  createdAt: '2023-03-10T00:00:00.000Z',\n  updatedAt: '2023-03-10T00:00:00.000Z',\n  lastLogin: '2023-06-13T09:20:00.000Z',\n  active: true,\n  avatar: 'https://i.pravatar.cc/150?img=3'\n};\n\n/**\n * Mock manager user\n */\nconst managerUser: User = {\n  id: '4',\n  username: 'manager',\n  email: 'manager@example.com',\n  firstName: 'Team',\n  lastName: 'Manager',\n  role: 'manager',\n  permissions: [\n    'view_dashboard',\n    'view_reports',\n    'create_reports',\n    'edit_reports',\n    'export_data',\n    'manage_users',\n    'manage_settings'\n  ],\n  createdAt: '2023-04-05T00:00:00.000Z',\n  updatedAt: '2023-04-05T00:00:00.000Z',\n  lastLogin: '2023-06-12T14:10:00.000Z',\n  active: true,\n  avatar: 'https://i.pravatar.cc/150?img=4'\n};\n\n/**\n * Mock successful login response for admin\n */\nconst successResponse = {\n  user: adminUser,\n  token: 'mock-jwt-token-for-admin-very-long-and-secure',\n  refreshToken: 'mock-refresh-token-for-admin-very-long-and-secure'\n};\n\n/**\n * Mock successful login response for regular user\n */\nconst userResponse = {\n  user: regularUser,\n  token: 'mock-jwt-token-for-user-very-long-and-secure',\n  refreshToken: 'mock-refresh-token-for-user-very-long-and-secure'\n};\n\n/**\n * Mock successful login response for analyst\n */\nconst analystResponse = {\n  user: analystUser,\n  token: 'mock-jwt-token-for-analyst-very-long-and-secure',\n  refreshToken: 'mock-refresh-token-for-analyst-very-long-and-secure'\n};\n\n/**\n * Mock successful login response for manager\n */\nconst managerResponse = {\n  user: managerUser,\n  token: 'mock-jwt-token-for-manager-very-long-and-secure',\n  refreshToken: 'mock-refresh-token-for-manager-very-long-and-secure'\n};\n\n/**\n * Mock refresh token response\n */\nconst refreshTokenResponse = {\n  token: 'mock-new-jwt-token-after-refresh-very-long-and-secure',\n  refreshToken: 'mock-new-refresh-token-after-refresh-very-long-and-secure'\n};\n\n/**\n * Mock Google OAuth login response\n */\nconst googleResponse = {\n  token: 'mock-jwt-token-for-google-oauth-very-long-and-secure',\n  refreshToken: 'mock-refresh-token-for-google-oauth-very-long-and-secure',\n  user: {\n    id: '5',\n    username: 'googleuser',\n    email: 'googleuser@example.com',\n    firstName: 'Google',\n    lastName: 'User',\n    role: 'viewer',\n    permissions: [\n      'view_dashboard',\n      'view_reports',\n      'export_data'\n    ],\n    createdAt: '2023-05-10T00:00:00.000Z',\n    updatedAt: '2023-05-10T00:00:00.000Z',\n    lastLogin: new Date().toISOString(),\n    active: true,\n    avatar: 'https://i.pravatar.cc/150?img=6'\n  }\n};\n\n/**\n * Mock Microsoft OAuth login response\n */\nconst microsoftResponse = {\n  token: 'mock-jwt-token-for-microsoft-oauth-very-long-and-secure',\n  refreshToken: 'mock-refresh-token-for-microsoft-oauth-very-long-and-secure',\n  user: {\n    id: '6',\n    username: 'microsoftuser',\n    email: 'microsoftuser@example.com',\n    firstName: 'Microsoft',\n    lastName: 'User',\n    role: 'viewer',\n    permissions: [\n      'view_dashboard',\n      'view_reports',\n      'export_data'\n    ],\n    createdAt: '2023-05-15T00:00:00.000Z',\n    updatedAt: '2023-05-15T00:00:00.000Z',\n    lastLogin: new Date().toISOString(),\n    active: true,\n    avatar: 'https://i.pravatar.cc/150?img=7'\n  }\n};\n\nexport default {\n  adminUser,\n  regularUser,\n  analystUser,\n  managerUser,\n  successResponse,\n  userResponse,\n  analystResponse,\n  managerResponse,\n  refreshTokenResponse,\n  googleResponse,\n  microsoftResponse\n};\n","/**\n * Register Mock Data\n */\nimport { User } from '../../types/auth';\n\n/**\n * Mock newly registered user\n */\nconst newUser: User = {\n  id: '5',\n  username: 'newuser',\n  email: 'newuser@example.com',\n  firstName: 'New',\n  lastName: 'User',\n  role: 'viewer',\n  permissions: [\n    'view_dashboard',\n    'view_reports',\n    'export_data'\n  ],\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  lastLogin: new Date().toISOString(),\n  active: true,\n  avatar: 'https://i.pravatar.cc/150?img=5'\n};\n\n/**\n * Mock successful registration response\n */\nconst successResponse = {\n  user: newUser,\n  token: 'mock-jwt-token-for-new-user-very-long-and-secure',\n  refreshToken: 'mock-refresh-token-for-new-user-very-long-and-secure'\n};\n\nexport default {\n  newUser,\n  successResponse\n};\n","/**\n * Profile Mock Data\n */\nimport { User } from '../../types/auth';\nimport loginMockData from './login';\n\n/**\n * Mock user profile\n */\nconst userProfile: User = {\n  ...loginMockData.adminUser,\n  preferences: {\n    theme: 'light',\n    language: 'en',\n    notifications: {\n      email: true,\n      push: true,\n      sms: false\n    },\n    dashboardLayout: 'default',\n    timezone: 'UTC'\n  }\n};\n\n/**\n * Mock profile update response\n */\nconst updateProfileResponse = {\n  success: true,\n  message: 'Profile updated successfully',\n  user: userProfile\n};\n\nexport default {\n  userProfile,\n  updateProfileResponse\n};\n","/**\n * Authentication Mock Data\n */\nimport { LoginCredentials, User } from '../../types/auth';\nimport { RegistrationData } from '../../types/redux';\nimport loginMockData from './login';\nimport registerMockData from './register';\nimport profileMockData from './profile';\n\n/**\n * Get mock data for authentication endpoints\n * @param endpoint The API endpoint\n * @param params Optional parameters for the request\n * @returns Mock data for the endpoint\n */\nconst getMockData = (endpoint: string, params?: any): any => {\n  // Handle different auth endpoints\n  if (endpoint.includes('auth/login')) {\n    return handleLogin(params);\n  } else if (endpoint.includes('auth/register')) {\n    return handleRegister(params);\n  } else if (endpoint.includes('auth/logout')) {\n    return { success: true, message: 'Logged out successfully' };\n  } else if (endpoint.includes('auth/refresh-token')) {\n    return loginMockData.refreshTokenResponse;\n  } else if (endpoint.includes('auth/forgot-password')) {\n    return { success: true, message: 'Password reset email sent' };\n  } else if (endpoint.includes('auth/reset-password')) {\n    return { success: true, message: 'Password reset successfully' };\n  } else if (endpoint.includes('auth/verify-email')) {\n    return { success: true, message: 'Email verified successfully' };\n  } else if (endpoint.includes('auth/change-password')) {\n    return { success: true, message: 'Password changed successfully' };\n  } else if (endpoint.includes('auth/profile')) {\n    return profileMockData.userProfile;\n  } else if (endpoint.includes('auth/google/callback')) {\n    return loginMockData.googleResponse;\n  } else if (endpoint.includes('auth/microsoft/callback')) {\n    return loginMockData.microsoftResponse;\n  } else {\n    console.warn(`No mock data available for auth endpoint: ${endpoint}`);\n    return null;\n  }\n};\n\n/**\n * Handle login request\n * @param credentials Login credentials\n * @returns Mock login response\n */\nconst handleLogin = (credentials: LoginCredentials): { user: User; token: string; refreshToken: string } => {\n  // Check if credentials match mock data\n  if (\n    (credentials.username === 'admin' || credentials.email === 'admin@example.com') &&\n    credentials.password === 'password'\n  ) {\n    return loginMockData.successResponse;\n  } else if (\n    (credentials.username === 'user' || credentials.email === 'user@example.com') &&\n    credentials.password === 'password'\n  ) {\n    return loginMockData.userResponse;\n  } else {\n    throw new Error('Invalid credentials');\n  }\n};\n\n/**\n * Handle register request\n * @param userData Registration data\n * @returns Mock register response\n */\nconst handleRegister = (userData: RegistrationData): { user: User; token: string; refreshToken: string } => {\n  // Simulate validation\n  if (!userData.email || !userData.password) {\n    throw new Error('Email and password are required');\n  }\n\n  if (userData.email === 'admin@example.com') {\n    throw new Error('Email already in use');\n  }\n\n  return registerMockData.successResponse;\n};\n\nexport default {\n  getMockData,\n  loginMockData,\n  registerMockData,\n  profileMockData\n};\n","/**\n * Dashboard Stats Mock Data\n */\n\n/**\n * Mock dashboard stats\n */\nconst stats = {\n  summary: {\n    totalRevenue: 1250000,\n    totalPlayers: 45000,\n    activePlayersToday: 12500,\n    newPlayersToday: 350,\n    depositAmount: 450000,\n    withdrawalAmount: 320000,\n    netGaming: 130000,\n    conversionRate: 0.35,\n    averageSessionTime: 25, // minutes\n    churnRate: 0.08\n  },\n  comparison: {\n    revenue: {\n      current: 1250000,\n      previous: 1150000,\n      change: 0.087, // 8.7% increase\n      trend: 'up'\n    },\n    players: {\n      current: 45000,\n      previous: 42000,\n      change: 0.071, // 7.1% increase\n      trend: 'up'\n    },\n    activePlayers: {\n      current: 12500,\n      previous: 11800,\n      change: 0.059, // 5.9% increase\n      trend: 'up'\n    },\n    newPlayers: {\n      current: 350,\n      previous: 320,\n      change: 0.094, // 9.4% increase\n      trend: 'up'\n    },\n    deposits: {\n      current: 450000,\n      previous: 420000,\n      change: 0.071, // 7.1% increase\n      trend: 'up'\n    },\n    withdrawals: {\n      current: 320000,\n      previous: 290000,\n      change: 0.103, // 10.3% increase\n      trend: 'up'\n    },\n    netGaming: {\n      current: 130000,\n      previous: 130000,\n      change: 0, // 0% change\n      trend: 'stable'\n    },\n    conversionRate: {\n      current: 0.35,\n      previous: 0.33,\n      change: 0.061, // 6.1% increase\n      trend: 'up'\n    },\n    sessionTime: {\n      current: 25,\n      previous: 23,\n      change: 0.087, // 8.7% increase\n      trend: 'up'\n    },\n    churnRate: {\n      current: 0.08,\n      previous: 0.09,\n      change: -0.111, // 11.1% decrease\n      trend: 'down' // Down is good for churn rate\n    }\n  },\n  timeframe: 'month'\n};\n\nexport default {\n  stats\n};\n","/**\n * Player Registrations Mock Data\n */\n\n/**\n * Generate mock player registrations data\n * @param params Optional parameters for customizing the data\n * @returns Mock player registrations data\n */\nconst getRegistrationsData = (params?: any): any => {\n  const period = params?.period || 'month';\n  const startDate = params?.startDate || '2023-01-01';\n  const endDate = params?.endDate || '2023-06-30';\n  \n  // Generate data based on the period\n  switch (period) {\n    case 'day':\n      return generateDailyData(startDate, endDate);\n    case 'week':\n      return generateWeeklyData(startDate, endDate);\n    case 'month':\n    default:\n      return generateMonthlyData(startDate, endDate);\n  }\n};\n\n/**\n * Generate daily player registrations data\n * @param startDate Start date\n * @param endDate End date\n * @returns Daily player registrations data\n */\nconst generateDailyData = (startDate: string, endDate: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each day\n  const currentDate = new Date(start);\n  while (currentDate <= end) {\n    // Generate a random number of registrations between 50 and 500\n    const registrations = Math.floor(Math.random() * 450) + 50;\n    \n    data.push({\n      date: currentDate.toISOString().split('T')[0],\n      registrations\n    });\n    \n    // Move to the next day\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  \n  return {\n    data,\n    period: 'day',\n    startDate: startDate,\n    endDate: endDate,\n    total: data.reduce((sum, item) => sum + item.registrations, 0)\n  };\n};\n\n/**\n * Generate weekly player registrations data\n * @param startDate Start date\n * @param endDate End date\n * @returns Weekly player registrations data\n */\nconst generateWeeklyData = (startDate: string, endDate: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each week\n  const currentDate = new Date(start);\n  let weekNumber = 1;\n  \n  while (currentDate <= end) {\n    // Generate a random number of registrations between 500 and 2500\n    const registrations = Math.floor(Math.random() * 2000) + 500;\n    \n    data.push({\n      week: weekNumber,\n      startDate: currentDate.toISOString().split('T')[0],\n      endDate: new Date(currentDate.getTime() + 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      registrations\n    });\n    \n    // Move to the next week\n    currentDate.setDate(currentDate.getDate() + 7);\n    weekNumber++;\n  }\n  \n  return {\n    data,\n    period: 'week',\n    startDate: startDate,\n    endDate: endDate,\n    total: data.reduce((sum, item) => sum + item.registrations, 0)\n  };\n};\n\n/**\n * Generate monthly player registrations data\n * @param startDate Start date\n * @param endDate End date\n * @returns Monthly player registrations data\n */\nconst generateMonthlyData = (startDate: string, endDate: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each month\n  const currentDate = new Date(start);\n  currentDate.setDate(1); // Start from the first day of the month\n  \n  while (currentDate <= end) {\n    const month = currentDate.toLocaleString('default', { month: 'long' });\n    const year = currentDate.getFullYear();\n    \n    // Generate a random number of registrations between 2000 and 8000\n    const registrations = Math.floor(Math.random() * 6000) + 2000;\n    \n    data.push({\n      month,\n      year,\n      date: `${year}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`,\n      registrations\n    });\n    \n    // Move to the next month\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n  \n  return {\n    data,\n    period: 'month',\n    startDate: startDate,\n    endDate: endDate,\n    total: data.reduce((sum, item) => sum + item.registrations, 0)\n  };\n};\n\n// Sample monthly data\nconst monthlyData = {\n  data: [\n    { month: 'January', year: 2023, date: '2023-01', registrations: 3500 },\n    { month: 'February', year: 2023, date: '2023-02', registrations: 4200 },\n    { month: 'March', year: 2023, date: '2023-03', registrations: 5100 },\n    { month: 'April', year: 2023, date: '2023-04', registrations: 4800 },\n    { month: 'May', year: 2023, date: '2023-05', registrations: 5500 },\n    { month: 'June', year: 2023, date: '2023-06', registrations: 6200 }\n  ],\n  period: 'month',\n  startDate: '2023-01-01',\n  endDate: '2023-06-30',\n  total: 29300\n};\n\nexport default {\n  getRegistrationsData,\n  monthlyData\n};\n","/**\n * Recent Transactions Mock Data\n */\n\n/**\n * Mock transaction types\n */\nconst transactionTypes = [\n  'deposit',\n  'withdrawal',\n  'bet',\n  'win',\n  'bonus',\n  'refund'\n];\n\n/**\n * Mock payment methods\n */\nconst paymentMethods = [\n  'Credit Card',\n  'PayPal',\n  'Bank Transfer',\n  'Skrill',\n  'Neteller',\n  'Bitcoin',\n  'Apple Pay',\n  'Google Pay'\n];\n\n/**\n * Mock transaction statuses\n */\nconst transactionStatuses = [\n  'completed',\n  'pending',\n  'failed',\n  'cancelled',\n  'processing'\n];\n\n/**\n * Generate a random transaction\n * @param index Index for generating unique ID\n * @returns Random transaction object\n */\nconst generateTransaction = (index: number) => {\n  const type = transactionTypes[Math.floor(Math.random() * transactionTypes.length)];\n  const amount = Math.floor(Math.random() * 1000) + 10;\n  const status = transactionStatuses[Math.floor(Math.random() * transactionStatuses.length)];\n  const paymentMethod = type === 'deposit' || type === 'withdrawal'\n    ? paymentMethods[Math.floor(Math.random() * paymentMethods.length)]\n    : null;\n\n  // Generate a random timestamp within the last 24 hours\n  const timestamp = new Date();\n  timestamp.setHours(timestamp.getHours() - Math.floor(Math.random() * 24));\n\n  return {\n    id: `tx-${Date.now()}-${index}`,\n    playerId: `player-${Math.floor(Math.random() * 1000) + 1}`,\n    playerUsername: `user${Math.floor(Math.random() * 1000) + 1}`,\n    type,\n    amount,\n    currency: 'USD',\n    status,\n    paymentMethod,\n    timestamp: timestamp.toISOString(),\n    gameId: type === 'bet' || type === 'win' ? `game-${Math.floor(Math.random() * 100) + 1}` : null,\n    gameName: type === 'bet' || type === 'win' ? `Game ${Math.floor(Math.random() * 100) + 1}` : null\n  };\n};\n\n/**\n * Generate mock transactions\n * @param count Number of transactions to generate\n * @returns Array of mock transactions\n */\nconst generateTransactions = (count: number) => {\n  const transactions = [];\n\n  for (let i = 0; i < count; i++) {\n    transactions.push(generateTransaction(i));\n  }\n\n  // Sort by timestamp (newest first)\n  return transactions.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n};\n\n/**\n * Mock recent transactions\n */\nconst transactions = {\n  data: generateTransactions(20),\n  total: 20,\n  page: 1,\n  pageSize: 20,\n  totalPages: 1\n};\n\nexport default {\n  transactions,\n  generateTransactions,\n  transactionTypes,\n  paymentMethods,\n  transactionStatuses\n};\n","/**\n * Top Games Mock Data\n */\n\n/**\n * Mock game categories\n */\nconst gameCategories = [\n  'slots',\n  'table',\n  'live',\n  'poker',\n  'sports',\n  'arcade'\n];\n\n/**\n * Mock game providers\n */\nconst gameProviders = [\n  'NetEnt',\n  'Microgaming',\n  'Playtech',\n  'Evolution Gaming',\n  'Pragmatic Play',\n  'Yggdrasil',\n  'Play\\'n GO',\n  'Red Tiger'\n];\n\n/**\n * Mock games data\n */\nconst games = [\n  {\n    id: 'game-1',\n    name: 'Starburst',\n    category: 'slots',\n    provider: 'NetEnt',\n    revenue: 125000,\n    players: 8500,\n    bets: 45000,\n    rtp: 0.96,\n    popularity: 9.8,\n    releaseDate: '2012-01-15',\n    image: 'https://via.placeholder.com/150?text=Starburst'\n  },\n  {\n    id: 'game-2',\n    name: 'Gonzo\\'s Quest',\n    category: 'slots',\n    provider: 'NetEnt',\n    revenue: 110000,\n    players: 7800,\n    bets: 42000,\n    rtp: 0.95,\n    popularity: 9.6,\n    releaseDate: '2013-05-20',\n    image: 'https://via.placeholder.com/150?text=Gonzo'\n  },\n  {\n    id: 'game-3',\n    name: 'Book of Dead',\n    category: 'slots',\n    provider: 'Play\\'n GO',\n    revenue: 95000,\n    players: 7200,\n    bets: 38000,\n    rtp: 0.94,\n    popularity: 9.5,\n    releaseDate: '2014-11-10',\n    image: 'https://via.placeholder.com/150?text=BookOfDead'\n  },\n  {\n    id: 'game-4',\n    name: 'Blackjack VIP',\n    category: 'table',\n    provider: 'Evolution Gaming',\n    revenue: 85000,\n    players: 5500,\n    bets: 32000,\n    rtp: 0.99,\n    popularity: 9.3,\n    releaseDate: '2015-03-25',\n    image: 'https://via.placeholder.com/150?text=BlackjackVIP'\n  },\n  {\n    id: 'game-5',\n    name: 'Lightning Roulette',\n    category: 'live',\n    provider: 'Evolution Gaming',\n    revenue: 78000,\n    players: 6200,\n    bets: 30000,\n    rtp: 0.97,\n    popularity: 9.4,\n    releaseDate: '2018-02-15',\n    image: 'https://via.placeholder.com/150?text=LightningRoulette'\n  },\n  {\n    id: 'game-6',\n    name: 'Mega Moolah',\n    category: 'slots',\n    provider: 'Microgaming',\n    revenue: 72000,\n    players: 5800,\n    bets: 28000,\n    rtp: 0.93,\n    popularity: 9.2,\n    releaseDate: '2008-11-28',\n    image: 'https://via.placeholder.com/150?text=MegaMoolah'\n  },\n  {\n    id: 'game-7',\n    name: 'Texas Hold\\'em',\n    category: 'poker',\n    provider: 'Playtech',\n    revenue: 68000,\n    players: 4900,\n    bets: 25000,\n    rtp: 0.98,\n    popularity: 9.0,\n    releaseDate: '2010-07-12',\n    image: 'https://via.placeholder.com/150?text=TexasHoldem'\n  },\n  {\n    id: 'game-8',\n    name: 'Football Studio',\n    category: 'live',\n    provider: 'Evolution Gaming',\n    revenue: 65000,\n    players: 5100,\n    bets: 24000,\n    rtp: 0.96,\n    popularity: 8.9,\n    releaseDate: '2019-06-05',\n    image: 'https://via.placeholder.com/150?text=FootballStudio'\n  },\n  {\n    id: 'game-9',\n    name: 'Sweet Bonanza',\n    category: 'slots',\n    provider: 'Pragmatic Play',\n    revenue: 62000,\n    players: 5300,\n    bets: 23000,\n    rtp: 0.95,\n    popularity: 9.1,\n    releaseDate: '2019-06-25',\n    image: 'https://via.placeholder.com/150?text=SweetBonanza'\n  },\n  {\n    id: 'game-10',\n    name: 'Immortal Romance',\n    category: 'slots',\n    provider: 'Microgaming',\n    revenue: 58000,\n    players: 4800,\n    bets: 22000,\n    rtp: 0.94,\n    popularity: 8.8,\n    releaseDate: '2011-12-05',\n    image: 'https://via.placeholder.com/150?text=ImmortalRomance'\n  },\n  {\n    id: 'game-11',\n    name: 'Crazy Time',\n    category: 'live',\n    provider: 'Evolution Gaming',\n    revenue: 55000,\n    players: 4600,\n    bets: 21000,\n    rtp: 0.95,\n    popularity: 9.0,\n    releaseDate: '2020-06-10',\n    image: 'https://via.placeholder.com/150?text=CrazyTime'\n  },\n  {\n    id: 'game-12',\n    name: 'Vikings Go Berzerk',\n    category: 'slots',\n    provider: 'Yggdrasil',\n    revenue: 52000,\n    players: 4400,\n    bets: 20000,\n    rtp: 0.96,\n    popularity: 8.7,\n    releaseDate: '2016-11-22',\n    image: 'https://via.placeholder.com/150?text=VikingsGoBerzerk'\n  },\n  {\n    id: 'game-13',\n    name: 'European Roulette',\n    category: 'table',\n    provider: 'Playtech',\n    revenue: 48000,\n    players: 4200,\n    bets: 19000,\n    rtp: 0.97,\n    popularity: 8.6,\n    releaseDate: '2009-03-15',\n    image: 'https://via.placeholder.com/150?text=EuropeanRoulette'\n  },\n  {\n    id: 'game-14',\n    name: 'Reactoonz',\n    category: 'slots',\n    provider: 'Play\\'n GO',\n    revenue: 45000,\n    players: 4000,\n    bets: 18000,\n    rtp: 0.96,\n    popularity: 8.9,\n    releaseDate: '2017-10-12',\n    image: 'https://via.placeholder.com/150?text=Reactoonz'\n  },\n  {\n    id: 'game-15',\n    name: 'Monopoly Live',\n    category: 'live',\n    provider: 'Evolution Gaming',\n    revenue: 42000,\n    players: 3800,\n    bets: 17000,\n    rtp: 0.96,\n    popularity: 8.8,\n    releaseDate: '2019-05-02',\n    image: 'https://via.placeholder.com/150?text=MonopolyLive'\n  }\n];\n\n/**\n * Get top games based on parameters\n * @param params Parameters for filtering and sorting\n * @returns Filtered and sorted top games\n */\nconst getTopGames = (params?: any): any => {\n  const metric = params?.metric || 'revenue';\n  const limit = params?.limit || 10;\n  const gameCategory = params?.gameCategory || null;\n  const minRevenue = params?.minRevenue || 0;\n  const maxRevenue = params?.maxRevenue || Number.MAX_SAFE_INTEGER;\n  \n  // Filter games\n  let filteredGames = [...games];\n  \n  if (gameCategory) {\n    filteredGames = filteredGames.filter(game => game.category === gameCategory);\n  }\n  \n  filteredGames = filteredGames.filter(game => \n    game.revenue >= minRevenue && game.revenue <= maxRevenue\n  );\n  \n  // Sort games based on metric\n  filteredGames.sort((a, b) => {\n    if (metric === 'revenue') {\n      return b.revenue - a.revenue;\n    } else if (metric === 'players') {\n      return b.players - a.players;\n    } else if (metric === 'bets') {\n      return b.bets - a.bets;\n    } else if (metric === 'popularity') {\n      return b.popularity - a.popularity;\n    } else {\n      return b.revenue - a.revenue; // Default to revenue\n    }\n  });\n  \n  // Limit the number of games\n  filteredGames = filteredGames.slice(0, limit);\n  \n  return {\n    data: filteredGames,\n    total: filteredGames.length,\n    metric,\n    category: gameCategory\n  };\n};\n\nexport default {\n  games,\n  getTopGames,\n  gameCategories,\n  gameProviders\n};\n","/**\n * Casino Revenue Mock Data\n */\n\n/**\n * Generate mock revenue data\n * @param params Parameters for customizing the data\n * @returns Mock revenue data\n */\nconst getRevenueData = (params?: any): any => {\n  const period = params?.period || 'month';\n  const startDate = params?.startDate || '2023-01-01';\n  const endDate = params?.endDate || '2023-06-30';\n  const gameCategory = params?.gameCategory || null;\n  \n  // Generate data based on the period\n  switch (period) {\n    case 'day':\n      return generateDailyData(startDate, endDate, gameCategory);\n    case 'week':\n      return generateWeeklyData(startDate, endDate, gameCategory);\n    case 'month':\n    default:\n      return generateMonthlyData(startDate, endDate, gameCategory);\n  }\n};\n\n/**\n * Generate daily revenue data\n * @param startDate Start date\n * @param endDate End date\n * @param gameCategory Game category filter\n * @returns Daily revenue data\n */\nconst generateDailyData = (startDate: string, endDate: string, gameCategory?: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each day\n  const currentDate = new Date(start);\n  while (currentDate <= end) {\n    // Generate random revenue between 10000 and 50000\n    const revenue = Math.floor(Math.random() * 40000) + 10000;\n    \n    // Generate random player count between 500 and 2000\n    const players = Math.floor(Math.random() * 1500) + 500;\n    \n    // Generate random bet count between 5000 and 20000\n    const bets = Math.floor(Math.random() * 15000) + 5000;\n    \n    data.push({\n      date: currentDate.toISOString().split('T')[0],\n      revenue,\n      players,\n      bets\n    });\n    \n    // Move to the next day\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  \n  return {\n    data,\n    period: 'day',\n    startDate: startDate,\n    endDate: endDate,\n    category: gameCategory,\n    total: {\n      revenue: data.reduce((sum, item) => sum + item.revenue, 0),\n      players: data.reduce((sum, item) => sum + item.players, 0),\n      bets: data.reduce((sum, item) => sum + item.bets, 0)\n    }\n  };\n};\n\n/**\n * Generate weekly revenue data\n * @param startDate Start date\n * @param endDate End date\n * @param gameCategory Game category filter\n * @returns Weekly revenue data\n */\nconst generateWeeklyData = (startDate: string, endDate: string, gameCategory?: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each week\n  const currentDate = new Date(start);\n  let weekNumber = 1;\n  \n  while (currentDate <= end) {\n    // Generate random revenue between 50000 and 200000\n    const revenue = Math.floor(Math.random() * 150000) + 50000;\n    \n    // Generate random player count between 2000 and 8000\n    const players = Math.floor(Math.random() * 6000) + 2000;\n    \n    // Generate random bet count between 20000 and 80000\n    const bets = Math.floor(Math.random() * 60000) + 20000;\n    \n    data.push({\n      week: weekNumber,\n      startDate: currentDate.toISOString().split('T')[0],\n      endDate: new Date(currentDate.getTime() + 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      revenue,\n      players,\n      bets\n    });\n    \n    // Move to the next week\n    currentDate.setDate(currentDate.getDate() + 7);\n    weekNumber++;\n  }\n  \n  return {\n    data,\n    period: 'week',\n    startDate: startDate,\n    endDate: endDate,\n    category: gameCategory,\n    total: {\n      revenue: data.reduce((sum, item) => sum + item.revenue, 0),\n      players: data.reduce((sum, item) => sum + item.players, 0),\n      bets: data.reduce((sum, item) => sum + item.bets, 0)\n    }\n  };\n};\n\n/**\n * Generate monthly revenue data\n * @param startDate Start date\n * @param endDate End date\n * @param gameCategory Game category filter\n * @returns Monthly revenue data\n */\nconst generateMonthlyData = (startDate: string, endDate: string, gameCategory?: string): any => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const data = [];\n  \n  // Generate data for each month\n  const currentDate = new Date(start);\n  currentDate.setDate(1); // Start from the first day of the month\n  \n  while (currentDate <= end) {\n    const month = currentDate.toLocaleString('default', { month: 'long' });\n    const year = currentDate.getFullYear();\n    \n    // Generate random revenue between 200000 and 800000\n    const revenue = Math.floor(Math.random() * 600000) + 200000;\n    \n    // Generate random player count between 8000 and 25000\n    const players = Math.floor(Math.random() * 17000) + 8000;\n    \n    // Generate random bet count between 80000 and 250000\n    const bets = Math.floor(Math.random() * 170000) + 80000;\n    \n    data.push({\n      month,\n      year,\n      date: `${year}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`,\n      revenue,\n      players,\n      bets\n    });\n    \n    // Move to the next month\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n  \n  return {\n    data,\n    period: 'month',\n    startDate: startDate,\n    endDate: endDate,\n    category: gameCategory,\n    total: {\n      revenue: data.reduce((sum, item) => sum + item.revenue, 0),\n      players: data.reduce((sum, item) => sum + item.players, 0),\n      bets: data.reduce((sum, item) => sum + item.bets, 0)\n    }\n  };\n};\n\n// Sample monthly data\nconst monthlyData = {\n  data: [\n    { month: 'January', year: 2023, date: '2023-01', revenue: 350000, players: 12000, bets: 120000 },\n    { month: 'February', year: 2023, date: '2023-02', revenue: 420000, players: 14500, bets: 145000 },\n    { month: 'March', year: 2023, date: '2023-03', revenue: 510000, players: 16800, bets: 168000 },\n    { month: 'April', year: 2023, date: '2023-04', revenue: 480000, players: 15500, bets: 155000 },\n    { month: 'May', year: 2023, date: '2023-05', revenue: 550000, players: 18200, bets: 182000 },\n    { month: 'June', year: 2023, date: '2023-06', revenue: 620000, players: 20500, bets: 205000 }\n  ],\n  period: 'month',\n  startDate: '2023-01-01',\n  endDate: '2023-06-30',\n  category: null,\n  total: {\n    revenue: 2930000,\n    players: 97500,\n    bets: 975000\n  }\n};\n\nexport default {\n  getRevenueData,\n  monthlyData\n};\n","/**\n * Player Journey Mock Data\n */\n\n/**\n * Mock player journey data\n */\nconst playerJourney = {\n  stages: [\n    {\n      name: 'Acquisition',\n      count: 12500,\n      percentage: 100,\n      conversion: 100,\n      channels: [\n        { name: 'Organic Search', count: 3750, percentage: 30 },\n        { name: 'Paid Search', count: 2500, percentage: 20 },\n        { name: 'Social Media', count: 2000, percentage: 16 },\n        { name: 'Referral', count: 1875, percentage: 15 },\n        { name: 'Direct', count: 1250, percentage: 10 },\n        { name: 'Other', count: 1125, percentage: 9 }\n      ]\n    },\n    {\n      name: 'Registration',\n      count: 5000,\n      percentage: 40,\n      conversion: 40,\n      devices: [\n        { name: 'Desktop', count: 2000, percentage: 40 },\n        { name: 'Mobile', count: 2500, percentage: 50 },\n        { name: 'Tablet', count: 500, percentage: 10 }\n      ],\n      countries: [\n        { name: 'United States', count: 1500, percentage: 30 },\n        { name: 'United Kingdom', count: 1000, percentage: 20 },\n        { name: 'Germany', count: 750, percentage: 15 },\n        { name: 'Canada', count: 500, percentage: 10 },\n        { name: 'Australia', count: 500, percentage: 10 },\n        { name: 'Other', count: 750, percentage: 15 }\n      ]\n    },\n    {\n      name: 'First Deposit',\n      count: 2500,\n      percentage: 20,\n      conversion: 50,\n      methods: [\n        { name: 'Credit Card', count: 1000, percentage: 40 },\n        { name: 'PayPal', count: 625, percentage: 25 },\n        { name: 'Bank Transfer', count: 375, percentage: 15 },\n        { name: 'Skrill', count: 250, percentage: 10 },\n        { name: 'Neteller', count: 125, percentage: 5 },\n        { name: 'Other', count: 125, percentage: 5 }\n      ],\n      amounts: [\n        { range: '0-50', count: 750, percentage: 30 },\n        { range: '51-100', count: 625, percentage: 25 },\n        { range: '101-200', count: 500, percentage: 20 },\n        { range: '201-500', count: 375, percentage: 15 },\n        { range: '501+', count: 250, percentage: 10 }\n      ]\n    },\n    {\n      name: 'First Game',\n      count: 2250,\n      percentage: 18,\n      conversion: 90,\n      categories: [\n        { name: 'Slots', count: 1125, percentage: 50 },\n        { name: 'Table Games', count: 450, percentage: 20 },\n        { name: 'Live Casino', count: 337, percentage: 15 },\n        { name: 'Poker', count: 225, percentage: 10 },\n        { name: 'Other', count: 113, percentage: 5 }\n      ],\n      timeToPlay: [\n        { range: '0-1 hour', count: 1125, percentage: 50 },\n        { range: '1-24 hours', count: 675, percentage: 30 },\n        { range: '1-3 days', count: 337, percentage: 15 },\n        { range: '3+ days', count: 113, percentage: 5 }\n      ]\n    },\n    {\n      name: 'Repeat Deposit',\n      count: 1500,\n      percentage: 12,\n      conversion: 66.7,\n      frequency: [\n        { range: 'Within 24 hours', count: 600, percentage: 40 },\n        { range: '1-3 days', count: 450, percentage: 30 },\n        { range: '4-7 days', count: 300, percentage: 20 },\n        { range: '8+ days', count: 150, percentage: 10 }\n      ],\n      amounts: [\n        { range: '0-50', count: 375, percentage: 25 },\n        { range: '51-100', count: 450, percentage: 30 },\n        { range: '101-200', count: 375, percentage: 25 },\n        { range: '201-500', count: 225, percentage: 15 },\n        { range: '501+', count: 75, percentage: 5 }\n      ]\n    },\n    {\n      name: 'Active Player',\n      count: 1000,\n      percentage: 8,\n      conversion: 66.7,\n      frequency: [\n        { range: 'Daily', count: 200, percentage: 20 },\n        { range: '2-3 times per week', count: 300, percentage: 30 },\n        { range: 'Weekly', count: 300, percentage: 30 },\n        { range: 'Monthly', count: 200, percentage: 20 }\n      ],\n      sessionLength: [\n        { range: '0-15 minutes', count: 200, percentage: 20 },\n        { range: '16-30 minutes', count: 300, percentage: 30 },\n        { range: '31-60 minutes', count: 300, percentage: 30 },\n        { range: '60+ minutes', count: 200, percentage: 20 }\n      ]\n    }\n  ],\n  dropoffs: [\n    {\n      fromStage: 'Acquisition',\n      toStage: 'Registration',\n      count: 7500,\n      percentage: 60,\n      reasons: [\n        { reason: 'Abandoned registration form', percentage: 40 },\n        { reason: 'No account creation intent', percentage: 30 },\n        { reason: 'Technical issues', percentage: 15 },\n        { reason: 'Other', percentage: 15 }\n      ]\n    },\n    {\n      fromStage: 'Registration',\n      toStage: 'First Deposit',\n      count: 2500,\n      percentage: 50,\n      reasons: [\n        { reason: 'Payment method issues', percentage: 35 },\n        { reason: 'Trust concerns', percentage: 25 },\n        { reason: 'Changed mind', percentage: 20 },\n        { reason: 'Other', percentage: 20 }\n      ]\n    },\n    {\n      fromStage: 'First Deposit',\n      toStage: 'First Game',\n      count: 250,\n      percentage: 10,\n      reasons: [\n        { reason: 'Technical issues', percentage: 40 },\n        { reason: 'Game selection issues', percentage: 30 },\n        { reason: 'Changed mind', percentage: 20 },\n        { reason: 'Other', percentage: 10 }\n      ]\n    },\n    {\n      fromStage: 'First Game',\n      toStage: 'Repeat Deposit',\n      count: 750,\n      percentage: 33.3,\n      reasons: [\n        { reason: 'Lost interest', percentage: 40 },\n        { reason: 'Lost money', percentage: 30 },\n        { reason: 'Found another site', percentage: 20 },\n        { reason: 'Other', percentage: 10 }\n      ]\n    },\n    {\n      fromStage: 'Repeat Deposit',\n      toStage: 'Active Player',\n      count: 500,\n      percentage: 33.3,\n      reasons: [\n        { reason: 'Infrequent play', percentage: 45 },\n        { reason: 'Lost interest', percentage: 25 },\n        { reason: 'Found another site', percentage: 20 },\n        { reason: 'Other', percentage: 10 }\n      ]\n    }\n  ],\n  timeframe: 'last 30 days'\n};\n\nexport default {\n  playerJourney\n};\n","/**\n * KPI Mock Data\n */\n\n/**\n * Mock KPI data\n */\nconst kpiData = {\n  revenue: {\n    current: 1250000,\n    previous: 1150000,\n    target: 1300000,\n    change: 0.087, // 8.7% increase\n    trend: 'up',\n    vsTarget: -0.038, // 3.8% below target\n    forecast: 1280000\n  },\n  ggr: {\n    current: 450000,\n    previous: 420000,\n    target: 480000,\n    change: 0.071, // 7.1% increase\n    trend: 'up',\n    vsTarget: -0.063, // 6.3% below target\n    forecast: 460000\n  },\n  ngr: {\n    current: 380000,\n    previous: 350000,\n    target: 400000,\n    change: 0.086, // 8.6% increase\n    trend: 'up',\n    vsTarget: -0.05, // 5% below target\n    forecast: 390000\n  },\n  deposits: {\n    current: 2500000,\n    previous: 2300000,\n    target: 2600000,\n    change: 0.087, // 8.7% increase\n    trend: 'up',\n    vsTarget: -0.038, // 3.8% below target\n    forecast: 2550000\n  },\n  withdrawals: {\n    current: 1800000,\n    previous: 1700000,\n    target: 1850000,\n    change: 0.059, // 5.9% increase\n    trend: 'up',\n    vsTarget: -0.027, // 2.7% below target\n    forecast: 1830000\n  },\n  activePlayers: {\n    current: 45000,\n    previous: 42000,\n    target: 48000,\n    change: 0.071, // 7.1% increase\n    trend: 'up',\n    vsTarget: -0.063, // 6.3% below target\n    forecast: 46500\n  },\n  newPlayers: {\n    current: 12500,\n    previous: 11800,\n    target: 13000,\n    change: 0.059, // 5.9% increase\n    trend: 'up',\n    vsTarget: -0.038, // 3.8% below target\n    forecast: 12800\n  },\n  firstTimeDepositors: {\n    current: 5500,\n    previous: 5200,\n    target: 5800,\n    change: 0.058, // 5.8% increase\n    trend: 'up',\n    vsTarget: -0.052, // 5.2% below target\n    forecast: 5650\n  },\n  conversionRate: {\n    current: 0.35,\n    previous: 0.33,\n    target: 0.38,\n    change: 0.061, // 6.1% increase\n    trend: 'up',\n    vsTarget: -0.079, // 7.9% below target\n    forecast: 0.36\n  },\n  averageDepositAmount: {\n    current: 120,\n    previous: 115,\n    target: 125,\n    change: 0.043, // 4.3% increase\n    trend: 'up',\n    vsTarget: -0.04, // 4% below target\n    forecast: 122\n  },\n  churnRate: {\n    current: 0.08,\n    previous: 0.09,\n    target: 0.07,\n    change: -0.111, // 11.1% decrease\n    trend: 'down', // Down is good for churn rate\n    vsTarget: 0.143, // 14.3% above target (bad)\n    forecast: 0.078\n  },\n  ltv: {\n    current: 850,\n    previous: 820,\n    target: 900,\n    change: 0.037, // 3.7% increase\n    trend: 'up',\n    vsTarget: -0.056, // 5.6% below target\n    forecast: 870\n  },\n  marketingCost: {\n    current: 250000,\n    previous: 240000,\n    target: 230000,\n    change: 0.042, // 4.2% increase\n    trend: 'up', // Up is bad for costs\n    vsTarget: 0.087, // 8.7% above target (bad)\n    forecast: 245000\n  },\n  cpa: {\n    current: 45,\n    previous: 48,\n    target: 42,\n    change: -0.063, // 6.3% decrease\n    trend: 'down', // Down is good for CPA\n    vsTarget: 0.071, // 7.1% above target (bad)\n    forecast: 44\n  },\n  roi: {\n    current: 3.2,\n    previous: 3.1,\n    target: 3.5,\n    change: 0.032, // 3.2% increase\n    trend: 'up',\n    vsTarget: -0.086, // 8.6% below target\n    forecast: 3.3\n  }\n};\n\nexport default {\n  kpiData\n};\n","/**\n * Dashboard Mock Data\n */\nimport statsMockData from './stats';\nimport playerRegistrationsMockData from './playerRegistrations';\nimport recentTransactionsMockData from './recentTransactions';\nimport topGamesMockData from './topGames';\nimport casinoRevenueMockData from './casinoRevenue';\nimport playerJourneyMockData from './playerJourney';\nimport kpiMockData from './kpi';\n\n/**\n * Get mock data for dashboard endpoints\n * @param endpoint The API endpoint\n * @param params Optional parameters for the request\n * @returns Mock data for the endpoint\n */\nconst getMockData = (endpoint: string, params?: any): any => {\n  // Handle different dashboard endpoints\n  if (endpoint.includes('dashboard/stats')) {\n    return statsMockData.stats;\n  } else if (endpoint.includes('dashboard/player-registrations')) {\n    return playerRegistrationsMockData.getRegistrationsData(params);\n  } else if (endpoint.includes('dashboard/recent-transactions')) {\n    return recentTransactionsMockData.transactions;\n  } else if (endpoint.includes('dashboard/top-games')) {\n    return topGamesMockData.getTopGames(params);\n  } else if (endpoint.includes('dashboard/casino-revenue')) {\n    return casinoRevenueMockData.getRevenueData(params);\n  } else if (endpoint.includes('dashboard/player-journey')) {\n    return playerJourneyMockData.playerJourney;\n  } else if (endpoint.includes('dashboard/kpi')) {\n    return kpiMockData.kpiData;\n  } else if (endpoint.includes('dashboard/preferences')) {\n    return { theme: 'light', layout: 'default', favorites: [] };\n  } else if (endpoint.includes('dashboard/query')) {\n    return { results: [], message: 'Query executed successfully' };\n  } else {\n    console.warn(`No mock data available for dashboard endpoint: ${endpoint}`);\n    return null;\n  }\n};\n\nexport default {\n  getMockData,\n  statsMockData,\n  playerRegistrationsMockData,\n  recentTransactionsMockData,\n  topGamesMockData,\n  casinoRevenueMockData,\n  playerJourneyMockData,\n  kpiMockData\n};\n","/**\n * Daily Actions Report Mock Data\n */\nimport { DailyAction } from '../../types/reportsData';\n\n/**\n * Mock action types\n */\nconst actionTypes = [\n  'login',\n  'deposit',\n  'withdrawal',\n  'bet',\n  'win',\n  'bonus',\n  'registration',\n  'profile_update',\n  'password_change',\n  'account_verification'\n];\n\n/**\n * Mock payment methods\n */\nconst paymentMethods = [\n  'Credit Card',\n  'PayPal',\n  'Bank Transfer',\n  'Skrill',\n  'Neteller',\n  'Bitcoin',\n  'Apple Pay',\n  'Google Pay'\n];\n\n/**\n * Mock statuses\n */\nconst statuses = [\n  'completed',\n  'pending',\n  'failed',\n  'cancelled',\n  'processing'\n];\n\n/**\n * Mock white labels\n */\nconst whiteLabels = [\n  'Casino Royale',\n  'Lucky Spin',\n  'Golden Bet',\n  'Diamond Play',\n  'Royal Flush'\n];\n\n/**\n * Mock countries\n */\nconst countries = [\n  'United States',\n  'United Kingdom',\n  'Germany',\n  'Canada',\n  'Australia',\n  'France',\n  'Spain',\n  'Italy',\n  'Netherlands',\n  'Sweden'\n];\n\n/**\n * Mock devices\n */\nconst devices = [\n  'Desktop',\n  'Mobile - Android',\n  'Mobile - iOS',\n  'Tablet - Android',\n  'Tablet - iOS'\n];\n\n/**\n * Generate a random daily action\n * @param index Index for generating unique ID\n * @returns Random daily action\n */\nconst generateDailyAction = (index: number): DailyAction => {\n  const actionType = actionTypes[Math.floor(Math.random() * actionTypes.length)];\n  const amount = actionType === 'deposit' || actionType === 'withdrawal' || actionType === 'bet' || actionType === 'win'\n    ? Math.floor(Math.random() * 1000) + 10\n    : 0;\n\n  const status = statuses[Math.floor(Math.random() * statuses.length)];\n  const whiteLabel = whiteLabels[Math.floor(Math.random() * whiteLabels.length)];\n  const country = countries[Math.floor(Math.random() * countries.length)];\n  const device = devices[Math.floor(Math.random() * devices.length)];\n\n  // Generate a random timestamp within the last 30 days\n  const date = new Date();\n  date.setDate(date.getDate() - Math.floor(Math.random() * 30));\n\n  const playerId = `player-${Math.floor(Math.random() * 1000) + 1}`;\n  const playerUsername = `user${Math.floor(Math.random() * 1000) + 1}`;\n\n  const paymentMethod = (actionType === 'deposit' || actionType === 'withdrawal')\n    ? paymentMethods[Math.floor(Math.random() * paymentMethods.length)]\n    : undefined;\n\n  const game = (actionType === 'bet' || actionType === 'win')\n    ? `Game ${Math.floor(Math.random() * 100) + 1}`\n    : undefined;\n\n  return {\n    id: `action-${Date.now()}-${index}`,\n    date: date.toISOString(),\n    playerId,\n    playerUsername,\n    actionType,\n    amount,\n    game,\n    paymentMethod,\n    status,\n    whiteLabel,\n    country,\n    device,\n    ipAddress: `192.168.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`,\n    location: country\n  };\n};\n\n/**\n * Generate mock daily actions\n * @param count Number of actions to generate\n * @returns Array of mock daily actions\n */\nconst generateDailyActions = (count: number): DailyAction[] => {\n  const actions: DailyAction[] = [];\n\n  for (let i = 0; i < count; i++) {\n    actions.push(generateDailyAction(i));\n  }\n\n  // Sort by date (newest first)\n  return actions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n/**\n * Get mock data for daily actions report\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated daily actions data\n */\nconst getData = (params?: any): any => {\n  console.log('[DAILY ACTIONS MOCK] Getting data with params:', params);\n\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const actionType = params?.actionType;\n  const startDate = params?.startDate;\n  const endDate = params?.endDate;\n  const whiteLabel = params?.whiteLabel;\n  const country = params?.country;\n  const status = params?.status;\n\n  // Generate 100 actions\n  let actions = generateDailyActions(100);\n\n  // Apply filters\n  console.log('[DAILY ACTIONS MOCK] Applying filters:', { actionType, startDate, endDate, whiteLabel, country, status });\n\n  if (actionType) {\n    actions = actions.filter(action => action.actionType === actionType);\n  }\n\n  if (startDate) {\n    console.log(`[DAILY ACTIONS MOCK] Start date filter: ${startDate} - ignoring for demo`);\n    // In a real implementation, we would filter by date:\n    // const start = new Date(startDate);\n    // actions = actions.filter(action => new Date(action.date) >= start);\n  }\n\n  if (endDate) {\n    console.log(`[DAILY ACTIONS MOCK] End date filter: ${endDate} - ignoring for demo`);\n    // In a real implementation, we would filter by date:\n    // const end = new Date(endDate);\n    // actions = actions.filter(action => new Date(action.date) <= end);\n  }\n\n  if (whiteLabel) {\n    actions = actions.filter(action => action.whiteLabel === whiteLabel);\n  }\n\n  if (country) {\n    actions = actions.filter(action => action.country === country);\n  }\n\n  if (status) {\n    actions = actions.filter(action => action.status === status);\n  }\n\n  // Calculate pagination\n  const total = actions.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedActions = actions.slice(startIndex, endIndex);\n\n  // Generate summary data\n  const totalRegistrations = Math.floor(Math.random() * 1000) + 100;\n  const totalFTD = Math.floor(Math.random() * 500) + 50;\n  const totalDeposits = Math.floor(Math.random() * 10000) + 1000;\n  const totalCashouts = Math.floor(Math.random() * 8000) + 800;\n  const totalGGR = Math.floor(Math.random() * 50000) + 5000;\n\n  // Create daily actions in the format expected by the page\n  const allDailyActions = [\n    {\n      id: 'day-1',\n      date: '2023-05-01',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 45,\n      ftd: 22,\n      deposits: 156,\n      paidCashouts: 89,\n      ggrCasino: 3450,\n      ggrSport: 1250,\n      ggrLive: 980,\n      totalGGR: 5680\n    },\n    {\n      id: 'day-2',\n      date: '2023-05-02',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 38,\n      ftd: 19,\n      deposits: 142,\n      paidCashouts: 76,\n      ggrCasino: 3120,\n      ggrSport: 1180,\n      ggrLive: 850,\n      totalGGR: 5150\n    },\n    {\n      id: 'day-3',\n      date: '2023-05-03',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 52,\n      ftd: 26,\n      deposits: 178,\n      paidCashouts: 95,\n      ggrCasino: 3780,\n      ggrSport: 1320,\n      ggrLive: 1050,\n      totalGGR: 6150\n    },\n    {\n      id: 'day-4',\n      date: '2023-05-01',\n      whiteLabelName: 'Lucky Spin',\n      whiteLabelId: 'lucky-spin',\n      registrations: 35,\n      ftd: 17,\n      deposits: 128,\n      paidCashouts: 65,\n      ggrCasino: 2850,\n      ggrSport: 980,\n      ggrLive: 720,\n      totalGGR: 4550\n    },\n    {\n      id: 'day-5',\n      date: '2023-05-02',\n      whiteLabelName: 'Lucky Spin',\n      whiteLabelId: 'lucky-spin',\n      registrations: 32,\n      ftd: 16,\n      deposits: 118,\n      paidCashouts: 59,\n      ggrCasino: 2650,\n      ggrSport: 920,\n      ggrLive: 680,\n      totalGGR: 4250\n    },\n    {\n      id: 'day-6',\n      date: '2023-05-01',\n      whiteLabelName: 'Golden Bet',\n      whiteLabelId: 'golden-bet',\n      registrations: 28,\n      ftd: 14,\n      deposits: 110,\n      paidCashouts: 55,\n      ggrCasino: 2200,\n      ggrSport: 850,\n      ggrLive: 650,\n      totalGGR: 3700\n    }\n  ];\n\n  // Filter by white label if specified\n  let dailyActions = [...allDailyActions];\n\n  if (params?.whiteLabelId && params.whiteLabelId !== '' && params.whiteLabelId !== 'all') {\n    console.log(`[DAILY ACTIONS MOCK] Filtering daily actions by white label ID: ${params.whiteLabelId}`);\n    dailyActions = dailyActions.filter(action => action.whiteLabelId === params.whiteLabelId);\n  }\n\n  // Calculate summary metrics from filtered data\n  const filteredTotalRegistrations = dailyActions.reduce((sum, item) => sum + item.registrations, 0);\n  const filteredTotalFTD = dailyActions.reduce((sum, item) => sum + item.ftd, 0);\n  const filteredTotalDeposits = dailyActions.reduce((sum, item) => sum + item.deposits, 0);\n  const filteredTotalCashouts = dailyActions.reduce((sum, item) => sum + item.paidCashouts, 0);\n  const filteredTotalGGR = dailyActions.reduce((sum, item) => sum + item.totalGGR, 0);\n\n  const result = {\n    data: paginatedActions,\n    dailyActions: dailyActions,\n    totalRegistrations: filteredTotalRegistrations,\n    totalFTD: filteredTotalFTD,\n    totalDeposits: filteredTotalDeposits,\n    totalCashouts: filteredTotalCashouts,\n    totalGGR: filteredTotalGGR,\n    total,\n    page,\n    pageSize,\n    totalPages,\n    summary: {\n      totalRegistrations: filteredTotalRegistrations,\n      totalFTD: filteredTotalFTD,\n      totalDeposits: filteredTotalDeposits,\n      totalCashouts: filteredTotalCashouts,\n      totalGGR: filteredTotalGGR\n    }\n  };\n\n  console.log('[DAILY ACTIONS MOCK] Returning data:', result);\n  return result;\n};\n\n/**\n * Get metadata for daily actions report\n * @returns Metadata for daily actions report\n */\nconst getMetadata = (): any => {\n  return {\n    filters: [\n      {\n        id: 'actionType',\n        label: 'Action Type',\n        type: 'select',\n        options: actionTypes.map(type => ({ value: type, label: type.charAt(0).toUpperCase() + type.slice(1) }))\n      },\n      {\n        id: 'dateRange',\n        label: 'Date Range',\n        type: 'dateRange'\n      },\n      {\n        id: 'whiteLabel',\n        label: 'White Label',\n        type: 'select',\n        options: whiteLabels.map(label => ({ value: label, label }))\n      },\n      {\n        id: 'country',\n        label: 'Country',\n        type: 'select',\n        options: countries.map(country => ({ value: country, label: country }))\n      },\n      {\n        id: 'status',\n        label: 'Status',\n        type: 'select',\n        options: statuses.map(status => ({ value: status, label: status.charAt(0).toUpperCase() + status.slice(1) }))\n      }\n    ],\n    columns: [\n      {\n        id: 'date',\n        label: 'Date',\n        type: 'date',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'playerUsername',\n        label: 'Player',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'actionType',\n        label: 'Action Type',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'amount',\n        label: 'Amount',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'game',\n        label: 'Game',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'paymentMethod',\n        label: 'Payment Method',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'status',\n        label: 'Status',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'whiteLabel',\n        label: 'White Label',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'country',\n        label: 'Country',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'device',\n        label: 'Device',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      }\n    ]\n  };\n};\n\nexport default {\n  getData,\n  getMetadata,\n  generateDailyActions,\n  actionTypes,\n  paymentMethods,\n  statuses,\n  whiteLabels,\n  countries,\n  devices\n};\n","/**\n * Daily Actions Summary Report Mock Data\n */\n\n/**\n * Generate mock summary data for daily actions report\n * @returns Summary data for daily actions report\n */\nconst getSummaryData = (params?: any): any => {\n  console.log('[DAILY ACTIONS SUMMARY MOCK] Getting summary data with params:', params);\n\n  // Define all daily actions\n  const allDailyActions = [\n    {\n      date: '2023-05-01',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 45,\n      ftd: 22,\n      deposits: 156,\n      paidCashouts: 89,\n      ggrCasino: 3450,\n      ggrSport: 1250,\n      ggrLive: 980,\n      totalGGR: 5680\n    },\n    {\n      date: '2023-05-02',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 38,\n      ftd: 19,\n      deposits: 142,\n      paidCashouts: 76,\n      ggrCasino: 3120,\n      ggrSport: 1180,\n      ggrLive: 850,\n      totalGGR: 5150\n    },\n    {\n      date: '2023-05-03',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 52,\n      ftd: 26,\n      deposits: 178,\n      paidCashouts: 95,\n      ggrCasino: 3780,\n      ggrSport: 1320,\n      ggrLive: 1050,\n      totalGGR: 6150\n    },\n    {\n      date: '2023-05-04',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 41,\n      ftd: 20,\n      deposits: 165,\n      paidCashouts: 82,\n      ggrCasino: 3550,\n      ggrSport: 1280,\n      ggrLive: 920,\n      totalGGR: 5750\n    },\n    {\n      date: '2023-05-05',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 49,\n      ftd: 24,\n      deposits: 172,\n      paidCashouts: 91,\n      ggrCasino: 3680,\n      ggrSport: 1310,\n      ggrLive: 990,\n      totalGGR: 5980\n    },\n    {\n      date: '2023-05-01',\n      whiteLabelName: 'Lucky Spin',\n      whiteLabelId: 'lucky-spin',\n      registrations: 35,\n      ftd: 17,\n      deposits: 128,\n      paidCashouts: 65,\n      ggrCasino: 2850,\n      ggrSport: 980,\n      ggrLive: 720,\n      totalGGR: 4550\n    },\n    {\n      date: '2023-05-02',\n      whiteLabelName: 'Lucky Spin',\n      whiteLabelId: 'lucky-spin',\n      registrations: 32,\n      ftd: 16,\n      deposits: 118,\n      paidCashouts: 59,\n      ggrCasino: 2650,\n      ggrSport: 920,\n      ggrLive: 680,\n      totalGGR: 4250\n    },\n    {\n      date: '2023-05-03',\n      whiteLabelName: 'Lucky Spin',\n      whiteLabelId: 'lucky-spin',\n      registrations: 39,\n      ftd: 19,\n      deposits: 135,\n      paidCashouts: 68,\n      ggrCasino: 2950,\n      ggrSport: 1050,\n      ggrLive: 750,\n      totalGGR: 4750\n    },\n    {\n      date: '2023-05-04',\n      whiteLabelName: 'Lucky Spin',\n      whiteLabelId: 'lucky-spin',\n      registrations: 36,\n      ftd: 18,\n      deposits: 125,\n      paidCashouts: 63,\n      ggrCasino: 2750,\n      ggrSport: 950,\n      ggrLive: 700,\n      totalGGR: 4400\n    },\n    {\n      date: '2023-05-05',\n      whiteLabelName: 'Lucky Spin',\n      whiteLabelId: 'lucky-spin',\n      registrations: 42,\n      ftd: 21,\n      deposits: 145,\n      paidCashouts: 73,\n      ggrCasino: 3150,\n      ggrSport: 1100,\n      ggrLive: 800,\n      totalGGR: 5050\n    },\n    // Add Golden Bet data\n    {\n      date: '2023-05-01',\n      whiteLabelName: 'Golden Bet',\n      whiteLabelId: 'golden-bet',\n      registrations: 28,\n      ftd: 14,\n      deposits: 110,\n      paidCashouts: 55,\n      ggrCasino: 2200,\n      ggrSport: 850,\n      ggrLive: 650,\n      totalGGR: 3700\n    },\n    {\n      date: '2023-05-02',\n      whiteLabelName: 'Golden Bet',\n      whiteLabelId: 'golden-bet',\n      registrations: 30,\n      ftd: 15,\n      deposits: 115,\n      paidCashouts: 58,\n      ggrCasino: 2300,\n      ggrSport: 900,\n      ggrLive: 700,\n      totalGGR: 3900\n    }\n  ];\n\n  // Filter daily actions based on params\n  let filteredActions = [...allDailyActions];\n\n  // Apply date filters - but for demo purposes, ignore the actual dates\n  // and just return data regardless of date range\n  if (params?.startDate) {\n    console.log(`[DAILY ACTIONS SUMMARY MOCK] Start date filter: ${params.startDate} - ignoring for demo`);\n    // In a real implementation, we would filter by date:\n    // const startDate = new Date(params.startDate);\n    // filteredActions = filteredActions.filter(action => new Date(action.date) >= startDate);\n  }\n\n  if (params?.endDate) {\n    console.log(`[DAILY ACTIONS SUMMARY MOCK] End date filter: ${params.endDate} - ignoring for demo`);\n    // In a real implementation, we would filter by date:\n    // const endDate = new Date(params.endDate);\n    // filteredActions = filteredActions.filter(action => new Date(action.date) <= endDate);\n  }\n\n  // Apply white label filter\n  if (params?.whiteLabelId && params.whiteLabelId !== 'all' && params.whiteLabelId !== '') {\n    console.log(`[DAILY ACTIONS SUMMARY MOCK] Filtering by white label ID: ${params.whiteLabelId}`);\n    filteredActions = filteredActions.filter(action => action.whiteLabelId === params.whiteLabelId);\n  }\n\n  // Calculate summary metrics from filtered data\n  const totalRegistrations = filteredActions.reduce((sum, item) => sum + item.registrations, 0);\n  const totalFTD = filteredActions.reduce((sum, item) => sum + item.ftd, 0);\n  const totalDeposits = filteredActions.reduce((sum, item) => sum + item.deposits, 0);\n  const totalCashouts = filteredActions.reduce((sum, item) => sum + item.paidCashouts, 0);\n  const totalGGR = filteredActions.reduce((sum, item) => sum + item.totalGGR, 0);\n\n  // Add unique IDs to each row\n  const dailyActions = filteredActions.map((action, index) => ({\n    ...action,\n    id: `day-${index + 1}`\n  }));\n\n  const result = {\n    totalRegistrations,\n    totalFTD,\n    totalDeposits,\n    totalCashouts,\n    totalGGR,\n    dailyActions\n  };\n\n  console.log('[DAILY ACTIONS SUMMARY MOCK] Returning filtered data:', result);\n  return result;\n};\n\n/**\n * Get metadata for daily actions summary report\n * @returns Metadata for daily actions summary report\n */\nconst getMetadata = (): any => {\n  return {\n    whiteLabels: [\n      { id: 'all', name: 'All White Labels' },\n      { id: 'casino-royale', name: 'Casino Royale' },\n      { id: 'lucky-spin', name: 'Lucky Spin' },\n      { id: 'golden-bet', name: 'Golden Bet' },\n      { id: 'diamond-play', name: 'Diamond Play' },\n      { id: 'royal-flush', name: 'Royal Flush' }\n    ]\n  };\n};\n\nexport default {\n  getSummaryData,\n  getMetadata\n};\n","/**\n * Player Activity Report Mock Data\n */\n\n/**\n * Get mock data for player activity report\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated player activity data\n */\nconst getData = (params?: any): any => {\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const startDate = params?.startDate;\n  const endDate = params?.endDate;\n  const playerId = params?.playerId;\n  const gameCategory = params?.gameCategory;\n\n  // Generate player activity data\n  let activities = generatePlayerActivities(100);\n\n  // Apply filters\n  if (startDate) {\n    const start = new Date(startDate);\n    activities = activities.filter(activity => new Date(activity.date) >= start);\n  }\n\n  if (endDate) {\n    const end = new Date(endDate);\n    activities = activities.filter(activity => new Date(activity.date) <= end);\n  }\n\n  if (playerId) {\n    activities = activities.filter(activity => activity.playerId === playerId);\n  }\n\n  if (gameCategory) {\n    activities = activities.filter(activity => activity.gameCategory === gameCategory);\n  }\n\n  // Calculate pagination\n  const total = activities.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedActivities = activities.slice(startIndex, endIndex);\n\n  return {\n    data: paginatedActivities,\n    total,\n    page,\n    pageSize,\n    totalPages\n  };\n};\n\n/**\n * Generate mock player activities\n * @param count Number of activities to generate\n * @returns Array of mock player activities\n */\nconst generatePlayerActivities = (count: number): any[] => {\n  const activities = [];\n  const today = new Date();\n\n  // Game categories\n  const gameCategories = ['slots', 'table', 'live', 'poker', 'sports', 'arcade'];\n\n  // Devices\n  const devices = ['Desktop', 'Mobile - Android', 'Mobile - iOS', 'Tablet - Android', 'Tablet - iOS'];\n\n  for (let i = 0; i < count; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - Math.floor(Math.random() * 30));\n\n    // Random player ID\n    const playerId = `player-${Math.floor(Math.random() * 1000) + 1}`;\n\n    // Random player username\n    const playerUsername = `user${Math.floor(Math.random() * 1000) + 1}`;\n\n    // Random session duration between 5 and 120 minutes\n    const sessionDuration = Math.floor(Math.random() * 115) + 5;\n\n    // Random game category\n    const gameCategory = gameCategories[Math.floor(Math.random() * gameCategories.length)] as 'slots' | 'table' | 'live' | 'poker' | 'sports' | 'arcade';\n\n    // Random game name\n    const gameNames: Record<string, string[]> = {\n      slots: ['Starburst', 'Gonzo\\'s Quest', 'Book of Dead', 'Mega Moolah', 'Reactoonz'],\n      table: ['Blackjack', 'Roulette', 'Baccarat', 'Craps', 'Poker'],\n      live: ['Live Blackjack', 'Live Roulette', 'Live Baccarat', 'Live Poker', 'Dream Catcher'],\n      poker: ['Texas Hold\\'em', 'Omaha', 'Seven Card Stud', 'Caribbean Stud', 'Three Card Poker'],\n      sports: ['Football', 'Basketball', 'Tennis', 'Baseball', 'Hockey'],\n      arcade: ['Crash', 'Plinko', 'Mines', 'Dice', 'Keno']\n    };\n\n    const gameName = gameNames[gameCategory][Math.floor(Math.random() * gameNames[gameCategory].length)];\n\n    // Random bet count between 10 and 100\n    const betCount = Math.floor(Math.random() * 90) + 10;\n\n    // Random bet amount between 10 and 500\n    const betAmount = Math.floor(Math.random() * 490) + 10;\n\n    // Random win amount between 0 and bet amount * 1.5\n    const winAmount = Math.floor(Math.random() * betAmount * 1.5);\n\n    // Random device\n    const device = devices[Math.floor(Math.random() * devices.length)];\n\n    activities.push({\n      id: `activity-${Date.now()}-${i}`,\n      date: date.toISOString(),\n      playerId,\n      playerUsername,\n      sessionDuration,\n      gameCategory,\n      gameName,\n      betCount,\n      betAmount,\n      winAmount,\n      netGaming: betAmount - winAmount,\n      device\n    });\n  }\n\n  // Sort by date (newest first)\n  return activities.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n/**\n * Get metadata for player activity report\n * @returns Metadata for player activity report\n */\nconst getMetadata = (): any => {\n  return {\n    filters: [\n      {\n        id: 'dateRange',\n        label: 'Date Range',\n        type: 'dateRange'\n      },\n      {\n        id: 'playerId',\n        label: 'Player ID',\n        type: 'text'\n      },\n      {\n        id: 'gameCategory',\n        label: 'Game Category',\n        type: 'select',\n        options: [\n          { value: 'slots', label: 'Slots' },\n          { value: 'table', label: 'Table Games' },\n          { value: 'live', label: 'Live Casino' },\n          { value: 'poker', label: 'Poker' },\n          { value: 'sports', label: 'Sports' },\n          { value: 'arcade', label: 'Arcade' }\n        ]\n      }\n    ],\n    columns: [\n      {\n        id: 'date',\n        label: 'Date',\n        type: 'date',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'playerUsername',\n        label: 'Player',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'sessionDuration',\n        label: 'Session Duration',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'gameCategory',\n        label: 'Game Category',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'gameName',\n        label: 'Game',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'betCount',\n        label: 'Bet Count',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'betAmount',\n        label: 'Bet Amount',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'winAmount',\n        label: 'Win Amount',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'netGaming',\n        label: 'Net Gaming',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'device',\n        label: 'Device',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      }\n    ]\n  };\n};\n\nexport default {\n  getData,\n  getMetadata,\n  generatePlayerActivities\n};\n","/**\n * Revenue Report Mock Data\n */\n\n/**\n * Get mock data for revenue report\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated revenue data\n */\nconst getData = (params?: any): any => {\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const startDate = params?.startDate;\n  const endDate = params?.endDate;\n  const gameCategory = params?.gameCategory;\n  const period = params?.period || 'day';\n  \n  // Generate revenue data based on period\n  let revenueData;\n  \n  switch (period) {\n    case 'day':\n      revenueData = generateDailyRevenueData(startDate, endDate, gameCategory);\n      break;\n    case 'week':\n      revenueData = generateWeeklyRevenueData(startDate, endDate, gameCategory);\n      break;\n    case 'month':\n      revenueData = generateMonthlyRevenueData(startDate, endDate, gameCategory);\n      break;\n    default:\n      revenueData = generateDailyRevenueData(startDate, endDate, gameCategory);\n  }\n  \n  // Calculate pagination\n  const total = revenueData.data.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedData = revenueData.data.slice(startIndex, endIndex);\n  \n  return {\n    ...revenueData,\n    data: paginatedData,\n    page,\n    pageSize,\n    totalPages\n  };\n};\n\n/**\n * Generate daily revenue data\n * @param startDate Start date\n * @param endDate End date\n * @param gameCategory Game category filter\n * @returns Daily revenue data\n */\nconst generateDailyRevenueData = (startDate?: string, endDate?: string, gameCategory?: string): any => {\n  const start = startDate ? new Date(startDate) : new Date(new Date().setDate(new Date().getDate() - 30));\n  const end = endDate ? new Date(endDate) : new Date();\n  const data = [];\n  \n  // Generate data for each day\n  const currentDate = new Date(start);\n  while (currentDate <= end) {\n    // Generate random revenue between 10000 and 50000\n    const revenue = Math.floor(Math.random() * 40000) + 10000;\n    \n    // Generate random GGR between 3000 and 15000\n    const ggr = Math.floor(Math.random() * 12000) + 3000;\n    \n    // Generate random NGR between 2000 and 10000\n    const ngr = Math.floor(Math.random() * 8000) + 2000;\n    \n    // Generate random player count between 500 and 2000\n    const players = Math.floor(Math.random() * 1500) + 500;\n    \n    // Generate random new player count between 50 and 200\n    const newPlayers = Math.floor(Math.random() * 150) + 50;\n    \n    // Generate random deposit amount between 20000 and 80000\n    const deposits = Math.floor(Math.random() * 60000) + 20000;\n    \n    // Generate random withdrawal amount between 15000 and 60000\n    const withdrawals = Math.floor(Math.random() * 45000) + 15000;\n    \n    data.push({\n      date: currentDate.toISOString().split('T')[0],\n      revenue,\n      ggr,\n      ngr,\n      players,\n      newPlayers,\n      deposits,\n      withdrawals,\n      netDeposits: deposits - withdrawals\n    });\n    \n    // Move to the next day\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  \n  return {\n    data,\n    period: 'day',\n    startDate: start.toISOString().split('T')[0],\n    endDate: end.toISOString().split('T')[0],\n    category: gameCategory,\n    total: {\n      revenue: data.reduce((sum, item) => sum + item.revenue, 0),\n      ggr: data.reduce((sum, item) => sum + item.ggr, 0),\n      ngr: data.reduce((sum, item) => sum + item.ngr, 0),\n      players: data.reduce((sum, item) => sum + item.players, 0),\n      newPlayers: data.reduce((sum, item) => sum + item.newPlayers, 0),\n      deposits: data.reduce((sum, item) => sum + item.deposits, 0),\n      withdrawals: data.reduce((sum, item) => sum + item.withdrawals, 0),\n      netDeposits: data.reduce((sum, item) => sum + item.netDeposits, 0)\n    }\n  };\n};\n\n/**\n * Generate weekly revenue data\n * @param startDate Start date\n * @param endDate End date\n * @param gameCategory Game category filter\n * @returns Weekly revenue data\n */\nconst generateWeeklyRevenueData = (startDate?: string, endDate?: string, gameCategory?: string): any => {\n  const start = startDate ? new Date(startDate) : new Date(new Date().setDate(new Date().getDate() - 90));\n  const end = endDate ? new Date(endDate) : new Date();\n  const data = [];\n  \n  // Generate data for each week\n  const currentDate = new Date(start);\n  let weekNumber = 1;\n  \n  while (currentDate <= end) {\n    // Generate random revenue between 50000 and 200000\n    const revenue = Math.floor(Math.random() * 150000) + 50000;\n    \n    // Generate random GGR between 15000 and 60000\n    const ggr = Math.floor(Math.random() * 45000) + 15000;\n    \n    // Generate random NGR between 10000 and 40000\n    const ngr = Math.floor(Math.random() * 30000) + 10000;\n    \n    // Generate random player count between 2000 and 8000\n    const players = Math.floor(Math.random() * 6000) + 2000;\n    \n    // Generate random new player count between 200 and 800\n    const newPlayers = Math.floor(Math.random() * 600) + 200;\n    \n    // Generate random deposit amount between 100000 and 400000\n    const deposits = Math.floor(Math.random() * 300000) + 100000;\n    \n    // Generate random withdrawal amount between 80000 and 320000\n    const withdrawals = Math.floor(Math.random() * 240000) + 80000;\n    \n    data.push({\n      week: weekNumber,\n      startDate: currentDate.toISOString().split('T')[0],\n      endDate: new Date(currentDate.getTime() + 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      revenue,\n      ggr,\n      ngr,\n      players,\n      newPlayers,\n      deposits,\n      withdrawals,\n      netDeposits: deposits - withdrawals\n    });\n    \n    // Move to the next week\n    currentDate.setDate(currentDate.getDate() + 7);\n    weekNumber++;\n  }\n  \n  return {\n    data,\n    period: 'week',\n    startDate: start.toISOString().split('T')[0],\n    endDate: end.toISOString().split('T')[0],\n    category: gameCategory,\n    total: {\n      revenue: data.reduce((sum, item) => sum + item.revenue, 0),\n      ggr: data.reduce((sum, item) => sum + item.ggr, 0),\n      ngr: data.reduce((sum, item) => sum + item.ngr, 0),\n      players: data.reduce((sum, item) => sum + item.players, 0),\n      newPlayers: data.reduce((sum, item) => sum + item.newPlayers, 0),\n      deposits: data.reduce((sum, item) => sum + item.deposits, 0),\n      withdrawals: data.reduce((sum, item) => sum + item.withdrawals, 0),\n      netDeposits: data.reduce((sum, item) => sum + item.netDeposits, 0)\n    }\n  };\n};\n\n/**\n * Generate monthly revenue data\n * @param startDate Start date\n * @param endDate End date\n * @param gameCategory Game category filter\n * @returns Monthly revenue data\n */\nconst generateMonthlyRevenueData = (startDate?: string, endDate?: string, gameCategory?: string): any => {\n  const start = startDate ? new Date(startDate) : new Date(new Date().setMonth(new Date().getMonth() - 12));\n  const end = endDate ? new Date(endDate) : new Date();\n  const data = [];\n  \n  // Generate data for each month\n  const currentDate = new Date(start);\n  currentDate.setDate(1); // Start from the first day of the month\n  \n  while (currentDate <= end) {\n    const month = currentDate.toLocaleString('default', { month: 'long' });\n    const year = currentDate.getFullYear();\n    \n    // Generate random revenue between 200000 and 800000\n    const revenue = Math.floor(Math.random() * 600000) + 200000;\n    \n    // Generate random GGR between 60000 and 240000\n    const ggr = Math.floor(Math.random() * 180000) + 60000;\n    \n    // Generate random NGR between 40000 and 160000\n    const ngr = Math.floor(Math.random() * 120000) + 40000;\n    \n    // Generate random player count between 8000 and 25000\n    const players = Math.floor(Math.random() * 17000) + 8000;\n    \n    // Generate random new player count between 800 and 2500\n    const newPlayers = Math.floor(Math.random() * 1700) + 800;\n    \n    // Generate random deposit amount between 400000 and 1600000\n    const deposits = Math.floor(Math.random() * 1200000) + 400000;\n    \n    // Generate random withdrawal amount between 320000 and 1280000\n    const withdrawals = Math.floor(Math.random() * 960000) + 320000;\n    \n    data.push({\n      month,\n      year,\n      date: `${year}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`,\n      revenue,\n      ggr,\n      ngr,\n      players,\n      newPlayers,\n      deposits,\n      withdrawals,\n      netDeposits: deposits - withdrawals\n    });\n    \n    // Move to the next month\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n  \n  return {\n    data,\n    period: 'month',\n    startDate: start.toISOString().split('T')[0],\n    endDate: end.toISOString().split('T')[0],\n    category: gameCategory,\n    total: {\n      revenue: data.reduce((sum, item) => sum + item.revenue, 0),\n      ggr: data.reduce((sum, item) => sum + item.ggr, 0),\n      ngr: data.reduce((sum, item) => sum + item.ngr, 0),\n      players: data.reduce((sum, item) => sum + item.players, 0),\n      newPlayers: data.reduce((sum, item) => sum + item.newPlayers, 0),\n      deposits: data.reduce((sum, item) => sum + item.deposits, 0),\n      withdrawals: data.reduce((sum, item) => sum + item.withdrawals, 0),\n      netDeposits: data.reduce((sum, item) => sum + item.netDeposits, 0)\n    }\n  };\n};\n\n/**\n * Get metadata for revenue report\n * @returns Metadata for revenue report\n */\nconst getMetadata = (): any => {\n  return {\n    filters: [\n      {\n        id: 'period',\n        label: 'Period',\n        type: 'select',\n        options: [\n          { value: 'day', label: 'Daily' },\n          { value: 'week', label: 'Weekly' },\n          { value: 'month', label: 'Monthly' }\n        ]\n      },\n      {\n        id: 'dateRange',\n        label: 'Date Range',\n        type: 'dateRange'\n      },\n      {\n        id: 'gameCategory',\n        label: 'Game Category',\n        type: 'select',\n        options: [\n          { value: 'slots', label: 'Slots' },\n          { value: 'table', label: 'Table Games' },\n          { value: 'live', label: 'Live Casino' },\n          { value: 'poker', label: 'Poker' },\n          { value: 'sports', label: 'Sports' },\n          { value: 'arcade', label: 'Arcade' }\n        ]\n      }\n    ],\n    columns: [\n      {\n        id: 'date',\n        label: 'Date',\n        type: 'date',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'revenue',\n        label: 'Revenue',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'ggr',\n        label: 'GGR',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'ngr',\n        label: 'NGR',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'players',\n        label: 'Players',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'newPlayers',\n        label: 'New Players',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'deposits',\n        label: 'Deposits',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'withdrawals',\n        label: 'Withdrawals',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'netDeposits',\n        label: 'Net Deposits',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      }\n    ]\n  };\n};\n\nexport default {\n  getData,\n  getMetadata,\n  generateDailyRevenueData,\n  generateWeeklyRevenueData,\n  generateMonthlyRevenueData\n};\n","/**\n * Promotional Report Mock Data\n */\n\n/**\n * Get mock data for promotional report\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated promotional data\n */\nconst getData = (params?: any): any => {\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const startDate = params?.startDate;\n  const endDate = params?.endDate;\n  const promotionType = params?.promotionType;\n  const status = params?.status;\n  \n  // Generate promotional data\n  let promotions = generatePromotions(50);\n  \n  // Apply filters\n  if (startDate) {\n    const start = new Date(startDate);\n    promotions = promotions.filter(promo => new Date(promo.startDate) >= start);\n  }\n  \n  if (endDate) {\n    const end = new Date(endDate);\n    promotions = promotions.filter(promo => new Date(promo.endDate) <= end);\n  }\n  \n  if (promotionType) {\n    promotions = promotions.filter(promo => promo.type === promotionType);\n  }\n  \n  if (status) {\n    promotions = promotions.filter(promo => promo.status === status);\n  }\n  \n  // Calculate pagination\n  const total = promotions.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedPromotions = promotions.slice(startIndex, endIndex);\n  \n  return {\n    data: paginatedPromotions,\n    total,\n    page,\n    pageSize,\n    totalPages\n  };\n};\n\n/**\n * Generate mock promotions\n * @param count Number of promotions to generate\n * @returns Array of mock promotions\n */\nconst generatePromotions = (count: number): any[] => {\n  const promotions = [];\n  const today = new Date();\n  \n  // Promotion types\n  const promotionTypes = [\n    'welcome_bonus',\n    'deposit_bonus',\n    'free_spins',\n    'cashback',\n    'loyalty_bonus',\n    'tournament',\n    'referral_bonus'\n  ];\n  \n  // Promotion statuses\n  const statuses = ['active', 'scheduled', 'completed', 'cancelled'];\n  \n  for (let i = 0; i < count; i++) {\n    // Random start date between 60 days ago and 30 days in the future\n    const startDate = new Date();\n    startDate.setDate(today.getDate() - Math.floor(Math.random() * 60) + Math.floor(Math.random() * 30));\n    \n    // Random end date between start date and 30 days after start date\n    const endDate = new Date(startDate);\n    endDate.setDate(startDate.getDate() + Math.floor(Math.random() * 30) + 1);\n    \n    // Random promotion type\n    const type = promotionTypes[Math.floor(Math.random() * promotionTypes.length)];\n    \n    // Random status based on dates\n    let status;\n    if (startDate > today) {\n      status = 'scheduled';\n    } else if (endDate < today) {\n      status = Math.random() > 0.2 ? 'completed' : 'cancelled';\n    } else {\n      status = 'active';\n    }\n    \n    // Random budget between 1000 and 50000\n    const budget = Math.floor(Math.random() * 49000) + 1000;\n    \n    // Random spent amount between 0 and budget\n    const spent = status === 'completed' || status === 'cancelled' \n      ? Math.floor(Math.random() * budget)\n      : status === 'active'\n        ? Math.floor(Math.random() * budget * 0.8)\n        : 0;\n    \n    // Random player count between 0 and 5000\n    const playerCount = Math.floor(Math.random() * 5000);\n    \n    // Random conversion rate between 0 and 100%\n    const conversionRate = Math.random();\n    \n    // Random ROI between -50% and 300%\n    const roi = (Math.random() * 3.5) - 0.5;\n    \n    promotions.push({\n      id: `promo-${Date.now()}-${i}`,\n      name: `Promotion ${i + 1}`,\n      type,\n      description: `Description for ${type} promotion ${i + 1}`,\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n      status,\n      budget,\n      spent,\n      remaining: budget - spent,\n      playerCount,\n      conversionRate,\n      roi\n    });\n  }\n  \n  // Sort by start date (newest first)\n  return promotions.sort((a, b) => new Date(b.startDate).getTime() - new Date(a.startDate).getTime());\n};\n\n/**\n * Get metadata for promotional report\n * @returns Metadata for promotional report\n */\nconst getMetadata = (): any => {\n  return {\n    filters: [\n      {\n        id: 'dateRange',\n        label: 'Date Range',\n        type: 'dateRange'\n      },\n      {\n        id: 'promotionType',\n        label: 'Promotion Type',\n        type: 'select',\n        options: [\n          { value: 'welcome_bonus', label: 'Welcome Bonus' },\n          { value: 'deposit_bonus', label: 'Deposit Bonus' },\n          { value: 'free_spins', label: 'Free Spins' },\n          { value: 'cashback', label: 'Cashback' },\n          { value: 'loyalty_bonus', label: 'Loyalty Bonus' },\n          { value: 'tournament', label: 'Tournament' },\n          { value: 'referral_bonus', label: 'Referral Bonus' }\n        ]\n      },\n      {\n        id: 'status',\n        label: 'Status',\n        type: 'select',\n        options: [\n          { value: 'active', label: 'Active' },\n          { value: 'scheduled', label: 'Scheduled' },\n          { value: 'completed', label: 'Completed' },\n          { value: 'cancelled', label: 'Cancelled' }\n        ]\n      }\n    ],\n    columns: [\n      {\n        id: 'name',\n        label: 'Name',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'type',\n        label: 'Type',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'startDate',\n        label: 'Start Date',\n        type: 'date',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'endDate',\n        label: 'End Date',\n        type: 'date',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'status',\n        label: 'Status',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'budget',\n        label: 'Budget',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'spent',\n        label: 'Spent',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'remaining',\n        label: 'Remaining',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'playerCount',\n        label: 'Players',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'conversionRate',\n        label: 'Conversion Rate',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'roi',\n        label: 'ROI',\n        type: 'number',\n        sortable: true,\n        filterable: true\n      }\n    ]\n  };\n};\n\nexport default {\n  getData,\n  getMetadata,\n  generatePromotions\n};\n","/**\n * Compliance Report Mock Data\n */\n\n/**\n * Get mock data for compliance report\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated compliance data\n */\nconst getData = (params?: any): any => {\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const startDate = params?.startDate;\n  const endDate = params?.endDate;\n  const complianceType = params?.complianceType;\n  const status = params?.status;\n  const severity = params?.severity;\n  \n  // Generate compliance data\n  let complianceItems = generateComplianceItems(100);\n  \n  // Apply filters\n  if (startDate) {\n    const start = new Date(startDate);\n    complianceItems = complianceItems.filter(item => new Date(item.date) >= start);\n  }\n  \n  if (endDate) {\n    const end = new Date(endDate);\n    complianceItems = complianceItems.filter(item => new Date(item.date) <= end);\n  }\n  \n  if (complianceType) {\n    complianceItems = complianceItems.filter(item => item.type === complianceType);\n  }\n  \n  if (status) {\n    complianceItems = complianceItems.filter(item => item.status === status);\n  }\n  \n  if (severity) {\n    complianceItems = complianceItems.filter(item => item.severity === severity);\n  }\n  \n  // Calculate pagination\n  const total = complianceItems.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedItems = complianceItems.slice(startIndex, endIndex);\n  \n  return {\n    data: paginatedItems,\n    total,\n    page,\n    pageSize,\n    totalPages\n  };\n};\n\n/**\n * Generate mock compliance items\n * @param count Number of compliance items to generate\n * @returns Array of mock compliance items\n */\nconst generateComplianceItems = (count: number): any[] => {\n  const complianceItems = [];\n  const today = new Date();\n  \n  // Compliance types\n  const complianceTypes = [\n    'kyc_verification',\n    'aml_check',\n    'responsible_gambling',\n    'underage_gambling',\n    'fraud_detection',\n    'self_exclusion',\n    'deposit_limit',\n    'regulatory_reporting'\n  ];\n  \n  // Compliance statuses\n  const statuses = ['open', 'in_progress', 'resolved', 'escalated', 'closed'];\n  \n  // Severity levels\n  const severityLevels = ['low', 'medium', 'high', 'critical'];\n  \n  // Countries\n  const countries = [\n    'United States',\n    'United Kingdom',\n    'Germany',\n    'Canada',\n    'Australia',\n    'France',\n    'Spain',\n    'Italy',\n    'Netherlands',\n    'Sweden'\n  ];\n  \n  for (let i = 0; i < count; i++) {\n    // Random date between 90 days ago and today\n    const date = new Date();\n    date.setDate(today.getDate() - Math.floor(Math.random() * 90));\n    \n    // Random compliance type\n    const type = complianceTypes[Math.floor(Math.random() * complianceTypes.length)];\n    \n    // Random status\n    const status = statuses[Math.floor(Math.random() * statuses.length)];\n    \n    // Random severity\n    const severity = severityLevels[Math.floor(Math.random() * severityLevels.length)];\n    \n    // Random player ID\n    const playerId = `player-${Math.floor(Math.random() * 1000) + 1}`;\n    \n    // Random player username\n    const playerUsername = `user${Math.floor(Math.random() * 1000) + 1}`;\n    \n    // Random country\n    const country = countries[Math.floor(Math.random() * countries.length)];\n    \n    // Random resolution date for resolved/closed items\n    let resolutionDate = null;\n    if (status === 'resolved' || status === 'closed') {\n      resolutionDate = new Date(date);\n      resolutionDate.setDate(date.getDate() + Math.floor(Math.random() * 14) + 1); // 1-14 days after detection\n      \n      // Ensure resolution date is not in the future\n      if (resolutionDate > today) {\n        resolutionDate = today;\n      }\n    }\n    \n    // Random assigned to\n    const assignedTo = status !== 'open' ? `agent-${Math.floor(Math.random() * 10) + 1}` : null;\n    \n    complianceItems.push({\n      id: `compliance-${Date.now()}-${i}`,\n      date: date.toISOString(),\n      type,\n      description: `${type.replace(/_/g, ' ')} compliance issue for player ${playerUsername}`,\n      playerId,\n      playerUsername,\n      country,\n      status,\n      severity,\n      resolutionDate: resolutionDate ? resolutionDate.toISOString() : null,\n      assignedTo,\n      notes: status !== 'open' ? `Notes for ${type} compliance issue` : null\n    });\n  }\n  \n  // Sort by date (newest first)\n  return complianceItems.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n/**\n * Get metadata for compliance report\n * @returns Metadata for compliance report\n */\nconst getMetadata = (): any => {\n  return {\n    filters: [\n      {\n        id: 'dateRange',\n        label: 'Date Range',\n        type: 'dateRange'\n      },\n      {\n        id: 'complianceType',\n        label: 'Compliance Type',\n        type: 'select',\n        options: [\n          { value: 'kyc_verification', label: 'KYC Verification' },\n          { value: 'aml_check', label: 'AML Check' },\n          { value: 'responsible_gambling', label: 'Responsible Gambling' },\n          { value: 'underage_gambling', label: 'Underage Gambling' },\n          { value: 'fraud_detection', label: 'Fraud Detection' },\n          { value: 'self_exclusion', label: 'Self Exclusion' },\n          { value: 'deposit_limit', label: 'Deposit Limit' },\n          { value: 'regulatory_reporting', label: 'Regulatory Reporting' }\n        ]\n      },\n      {\n        id: 'status',\n        label: 'Status',\n        type: 'select',\n        options: [\n          { value: 'open', label: 'Open' },\n          { value: 'in_progress', label: 'In Progress' },\n          { value: 'resolved', label: 'Resolved' },\n          { value: 'escalated', label: 'Escalated' },\n          { value: 'closed', label: 'Closed' }\n        ]\n      },\n      {\n        id: 'severity',\n        label: 'Severity',\n        type: 'select',\n        options: [\n          { value: 'low', label: 'Low' },\n          { value: 'medium', label: 'Medium' },\n          { value: 'high', label: 'High' },\n          { value: 'critical', label: 'Critical' }\n        ]\n      }\n    ],\n    columns: [\n      {\n        id: 'date',\n        label: 'Date',\n        type: 'date',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'type',\n        label: 'Type',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'description',\n        label: 'Description',\n        type: 'string',\n        sortable: false,\n        filterable: false\n      },\n      {\n        id: 'playerUsername',\n        label: 'Player',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'country',\n        label: 'Country',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'status',\n        label: 'Status',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'severity',\n        label: 'Severity',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'resolutionDate',\n        label: 'Resolution Date',\n        type: 'date',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'assignedTo',\n        label: 'Assigned To',\n        type: 'string',\n        sortable: true,\n        filterable: true\n      }\n    ]\n  };\n};\n\nexport default {\n  getData,\n  getMetadata,\n  generateComplianceItems\n};\n","/**\n * Export Report Mock Data\n */\n\n/**\n * Get mock data for export functionality\n * @param params Parameters for export\n * @returns Mock export response\n */\nconst getData = (params?: any): any => {\n  const reportId = params?.reportId;\n  const format = params?.format || 'csv';\n  const options = params?.options || {};\n  \n  // Simulate export process\n  return {\n    success: true,\n    message: `Report exported successfully in ${format.toUpperCase()} format`,\n    downloadUrl: `https://example.com/exports/${reportId}.${format}`,\n    format,\n    timestamp: new Date().toISOString(),\n    options\n  };\n};\n\n/**\n * Get export history\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated export history\n */\nconst getExportHistory = (params?: any): any => {\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const startDate = params?.startDate;\n  const endDate = params?.endDate;\n  const format = params?.format;\n  const userId = params?.userId;\n  \n  // Generate export history\n  let exports = generateExportHistory(50);\n  \n  // Apply filters\n  if (startDate) {\n    const start = new Date(startDate);\n    exports = exports.filter(item => new Date(item.timestamp) >= start);\n  }\n  \n  if (endDate) {\n    const end = new Date(endDate);\n    exports = exports.filter(item => new Date(item.timestamp) <= end);\n  }\n  \n  if (format) {\n    exports = exports.filter(item => item.format === format);\n  }\n  \n  if (userId) {\n    exports = exports.filter(item => item.userId === userId);\n  }\n  \n  // Calculate pagination\n  const total = exports.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedExports = exports.slice(startIndex, endIndex);\n  \n  return {\n    data: paginatedExports,\n    total,\n    page,\n    pageSize,\n    totalPages\n  };\n};\n\n/**\n * Generate mock export history\n * @param count Number of export history items to generate\n * @returns Array of mock export history items\n */\nconst generateExportHistory = (count: number): any[] => {\n  const exports = [];\n  const today = new Date();\n  \n  // Export formats\n  const formats = ['csv', 'excel', 'pdf', 'json'];\n  \n  // Report types\n  const reportTypes = [\n    'daily_actions',\n    'player_activity',\n    'revenue',\n    'promotional',\n    'compliance'\n  ];\n  \n  // User IDs\n  const userIds = [\n    'user-1',\n    'user-2',\n    'user-3',\n    'user-4',\n    'user-5'\n  ];\n  \n  // User names\n  const userNames = [\n    'Admin User',\n    'Regular User',\n    'Data Analyst',\n    'Team Manager',\n    'Guest User'\n  ];\n  \n  for (let i = 0; i < count; i++) {\n    // Random date between 30 days ago and today\n    const timestamp = new Date();\n    timestamp.setDate(today.getDate() - Math.floor(Math.random() * 30));\n    \n    // Random format\n    const format = formats[Math.floor(Math.random() * formats.length)];\n    \n    // Random report type\n    const reportType = reportTypes[Math.floor(Math.random() * reportTypes.length)];\n    \n    // Random report name\n    const reportName = `${reportType.replace(/_/g, ' ')} report`;\n    \n    // Random user\n    const userIndex = Math.floor(Math.random() * userIds.length);\n    const userId = userIds[userIndex];\n    const userName = userNames[userIndex];\n    \n    // Random file size between 10KB and 10MB\n    const fileSize = Math.floor(Math.random() * 10 * 1024 * 1024) + 10 * 1024;\n    \n    // Format file size\n    const formattedFileSize = formatFileSize(fileSize);\n    \n    exports.push({\n      id: `export-${Date.now()}-${i}`,\n      timestamp: timestamp.toISOString(),\n      reportId: `report-${Math.floor(Math.random() * 1000) + 1}`,\n      reportName,\n      reportType,\n      format,\n      fileSize,\n      formattedFileSize,\n      userId,\n      userName,\n      downloadUrl: `https://example.com/exports/${reportType}_${timestamp.getTime()}.${format}`\n    });\n  }\n  \n  // Sort by timestamp (newest first)\n  return exports.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n};\n\n/**\n * Format file size\n * @param bytes File size in bytes\n * @returns Formatted file size\n */\nconst formatFileSize = (bytes: number): string => {\n  if (bytes < 1024) {\n    return `${bytes} B`;\n  } else if (bytes < 1024 * 1024) {\n    return `${(bytes / 1024).toFixed(2)} KB`;\n  } else if (bytes < 1024 * 1024 * 1024) {\n    return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;\n  } else {\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(2)} GB`;\n  }\n};\n\n/**\n * Get metadata for export functionality\n * @returns Metadata for export functionality\n */\nconst getMetadata = (): any => {\n  return {\n    formats: [\n      { value: 'csv', label: 'CSV', icon: 'file-csv' },\n      { value: 'excel', label: 'Excel', icon: 'file-excel' },\n      { value: 'pdf', label: 'PDF', icon: 'file-pdf' },\n      { value: 'json', label: 'JSON', icon: 'file-code' }\n    ],\n    options: [\n      {\n        id: 'includeHeaders',\n        label: 'Include Headers',\n        type: 'boolean',\n        defaultValue: true,\n        applicableFormats: ['csv', 'excel']\n      },\n      {\n        id: 'delimiter',\n        label: 'Delimiter',\n        type: 'select',\n        defaultValue: ',',\n        options: [\n          { value: ',', label: 'Comma (,)' },\n          { value: ';', label: 'Semicolon (;)' },\n          { value: '\\t', label: 'Tab' },\n          { value: '|', label: 'Pipe (|)' }\n        ],\n        applicableFormats: ['csv']\n      },\n      {\n        id: 'includeMetadata',\n        label: 'Include Metadata',\n        type: 'boolean',\n        defaultValue: true,\n        applicableFormats: ['pdf', 'excel']\n      },\n      {\n        id: 'includeLogo',\n        label: 'Include Logo',\n        type: 'boolean',\n        defaultValue: true,\n        applicableFormats: ['pdf', 'excel']\n      },\n      {\n        id: 'orientation',\n        label: 'Orientation',\n        type: 'select',\n        defaultValue: 'portrait',\n        options: [\n          { value: 'portrait', label: 'Portrait' },\n          { value: 'landscape', label: 'Landscape' }\n        ],\n        applicableFormats: ['pdf']\n      },\n      {\n        id: 'pageSize',\n        label: 'Page Size',\n        type: 'select',\n        defaultValue: 'a4',\n        options: [\n          { value: 'a4', label: 'A4' },\n          { value: 'letter', label: 'Letter' },\n          { value: 'legal', label: 'Legal' }\n        ],\n        applicableFormats: ['pdf']\n      },\n      {\n        id: 'compress',\n        label: 'Compress',\n        type: 'boolean',\n        defaultValue: false,\n        applicableFormats: ['json']\n      }\n    ]\n  };\n};\n\nexport default {\n  getData,\n  getExportHistory,\n  getMetadata,\n  generateExportHistory\n};\n","/**\n * Schedule Report Mock Data\n */\n\n/**\n * Get mock data for report scheduling\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated schedule data\n */\nconst getData = (params?: any): any => {\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const reportId = params?.reportId;\n  const frequency = params?.frequency;\n  const status = params?.status;\n\n  // Generate schedule data\n  let schedules = generateSchedules(30);\n\n  // Apply filters\n  if (reportId) {\n    schedules = schedules.filter(schedule => schedule.reportId === reportId);\n  }\n\n  if (frequency) {\n    schedules = schedules.filter(schedule => schedule.frequency === frequency);\n  }\n\n  if (status !== undefined) {\n    schedules = schedules.filter(schedule => schedule.isActive === status);\n  }\n\n  // Calculate pagination\n  const total = schedules.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedSchedules = schedules.slice(startIndex, endIndex);\n\n  return {\n    data: paginatedSchedules,\n    total,\n    page,\n    pageSize,\n    totalPages\n  };\n};\n\n/**\n * Create a new schedule\n * @param params Schedule parameters\n * @returns Created schedule\n */\nconst createSchedule = (params?: any): any => {\n  const reportId = params?.reportId;\n  const reportName = params?.reportName;\n  const frequency = params?.frequency || 'daily';\n  const time = params?.time || '08:00';\n  const day = params?.day;\n  const recipients = params?.recipients || [];\n  const format = params?.format || 'pdf';\n  const isActive = params?.isActive !== undefined ? params?.isActive : true;\n\n  const newSchedule = {\n    id: `schedule-${Date.now()}`,\n    reportId,\n    reportName,\n    frequency,\n    time,\n    day,\n    recipients,\n    format,\n    isActive,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    lastRun: null,\n    nextRun: calculateNextRun(frequency, time, day)\n  };\n\n  return {\n    success: true,\n    message: 'Schedule created successfully',\n    schedule: newSchedule\n  };\n};\n\n/**\n * Update an existing schedule\n * @param params Schedule parameters\n * @returns Updated schedule\n */\nconst updateSchedule = (params?: any): any => {\n  const scheduleId = params?.id;\n  const frequency = params?.frequency;\n  const time = params?.time;\n  const day = params?.day;\n  const recipients = params?.recipients;\n  const format = params?.format;\n  const isActive = params?.isActive;\n\n  // Find the schedule in the mock data\n  const schedules = generateSchedules(30);\n  const schedule = schedules.find(s => s.id === scheduleId);\n\n  if (!schedule) {\n    return {\n      success: false,\n      message: 'Schedule not found'\n    };\n  }\n\n  // Update the schedule\n  const updatedSchedule = {\n    ...schedule,\n    frequency: frequency || schedule.frequency,\n    time: time || schedule.time,\n    day: day !== undefined ? day : schedule.day,\n    recipients: recipients || schedule.recipients,\n    format: format || schedule.format,\n    isActive: isActive !== undefined ? isActive : schedule.isActive,\n    updatedAt: new Date().toISOString(),\n    nextRun: calculateNextRun(\n      frequency || schedule.frequency,\n      time || schedule.time,\n      day !== undefined ? day : schedule.day\n    )\n  };\n\n  return {\n    success: true,\n    message: 'Schedule updated successfully',\n    schedule: updatedSchedule\n  };\n};\n\n/**\n * Delete a schedule\n * @param params Schedule parameters\n * @returns Delete result\n */\nconst deleteSchedule = (params?: any): any => {\n  const scheduleId = params?.id;\n\n  return {\n    success: true,\n    message: 'Schedule deleted successfully',\n    id: scheduleId\n  };\n};\n\n/**\n * Generate mock schedules\n * @param count Number of schedules to generate\n * @returns Array of mock schedules\n */\nconst generateSchedules = (count: number): any[] => {\n  const schedules = [];\n\n  // Frequencies\n  const frequencies = ['daily', 'weekly', 'monthly'];\n\n  // Formats\n  const formats = ['pdf', 'excel', 'csv'];\n\n  // Report types\n  const reportTypes = [\n    'daily_actions',\n    'player_activity',\n    'revenue',\n    'promotional',\n    'compliance'\n  ];\n\n  // Email domains\n  const emailDomains = ['example.com', 'test.com', 'casino.com', 'gaming.com', 'analytics.com'];\n\n  for (let i = 0; i < count; i++) {\n    // Random report type\n    const reportType = reportTypes[Math.floor(Math.random() * reportTypes.length)];\n\n    // Random report name\n    const reportName = `${reportType.replace(/_/g, ' ')} report`;\n\n    // Random frequency\n    const frequency = frequencies[Math.floor(Math.random() * frequencies.length)];\n\n    // Random time (00:00 - 23:59)\n    const hours = Math.floor(Math.random() * 24).toString().padStart(2, '0');\n    const minutes = Math.floor(Math.random() * 60).toString().padStart(2, '0');\n    const time = `${hours}:${minutes}`;\n\n    // Random day (for weekly and monthly)\n    const day = frequency === 'weekly'\n      ? Math.floor(Math.random() * 7) // 0-6 (Sunday-Saturday)\n      : frequency === 'monthly'\n        ? Math.floor(Math.random() * 28) + 1 // 1-28\n        : undefined;\n\n    // Random recipients (1-5)\n    const recipientCount = Math.floor(Math.random() * 5) + 1;\n    const recipients = [];\n\n    for (let j = 0; j < recipientCount; j++) {\n      const domain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\n      recipients.push(`recipient${i}${j}@${domain}`);\n    }\n\n    // Random format\n    const format = formats[Math.floor(Math.random() * formats.length)];\n\n    // Random active status\n    const isActive = Math.random() > 0.2; // 80% active\n\n    // Random created date between 90 days ago and today\n    const createdAt = new Date();\n    createdAt.setDate(createdAt.getDate() - Math.floor(Math.random() * 90));\n\n    // Random updated date between created date and today\n    const updatedAt = new Date();\n    updatedAt.setDate(updatedAt.getDate() - Math.floor(Math.random() * (new Date().getDate() - createdAt.getDate())));\n\n    // Random last run date (if active)\n    const lastRun = isActive ? new Date(updatedAt) : null;\n    if (lastRun) {\n      lastRun.setDate(lastRun.getDate() - Math.floor(Math.random() * 7) - 1); // 1-7 days ago\n    }\n\n    // Calculate next run\n    const nextRun = isActive ? calculateNextRun(frequency, time, day) : null;\n\n    schedules.push({\n      id: `schedule-${i + 1}`,\n      reportId: `report-${Math.floor(Math.random() * 1000) + 1}`,\n      reportName,\n      frequency,\n      time,\n      day,\n      recipients,\n      format,\n      isActive,\n      createdAt: createdAt.toISOString(),\n      updatedAt: updatedAt.toISOString(),\n      lastRun: lastRun ? lastRun.toISOString() : null,\n      nextRun: nextRun ? nextRun.toISOString() : null\n    });\n  }\n\n  // Sort by created date (newest first)\n  return schedules.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n};\n\n/**\n * Calculate the next run date based on frequency, time, and day\n * @param frequency Schedule frequency\n * @param time Schedule time\n * @param day Schedule day (for weekly and monthly)\n * @returns Next run date\n */\nconst calculateNextRun = (frequency: string, time: string, day?: number): Date => {\n  const now = new Date();\n  const [hours, minutes] = time.split(':').map(Number);\n  const nextRun = new Date();\n\n  nextRun.setHours(hours, minutes, 0, 0);\n\n  // If the time has already passed today, start from tomorrow\n  if (nextRun <= now) {\n    nextRun.setDate(nextRun.getDate() + 1);\n  }\n\n  if (frequency === 'weekly' && day !== undefined) {\n    // Set to the next occurrence of the specified day of the week\n    const currentDay = nextRun.getDay();\n    const daysUntilTargetDay = (day - currentDay + 7) % 7;\n\n    nextRun.setDate(nextRun.getDate() + daysUntilTargetDay);\n  } else if (frequency === 'monthly' && day !== undefined) {\n    // Set to the specified day of the current or next month\n    const currentDate = nextRun.getDate();\n\n    if (currentDate > day) {\n      // Move to next month\n      nextRun.setMonth(nextRun.getMonth() + 1);\n    }\n\n    // Set the day of the month\n    nextRun.setDate(day);\n\n    // If the day is invalid (e.g., February 30), it will roll over to the next month\n    // Adjust if needed\n    if (nextRun.getDate() !== day) {\n      // Set to the last day of the previous month\n      nextRun.setDate(0);\n    }\n  }\n\n  return nextRun;\n};\n\n/**\n * Get metadata for schedule functionality\n * @returns Metadata for schedule functionality\n */\nconst getMetadata = (): any => {\n  return {\n    frequencies: [\n      { value: 'daily', label: 'Daily' },\n      { value: 'weekly', label: 'Weekly' },\n      { value: 'monthly', label: 'Monthly' }\n    ],\n    formats: [\n      { value: 'pdf', label: 'PDF' },\n      { value: 'excel', label: 'Excel' },\n      { value: 'csv', label: 'CSV' }\n    ],\n    weekDays: [\n      { value: 0, label: 'Sunday' },\n      { value: 1, label: 'Monday' },\n      { value: 2, label: 'Tuesday' },\n      { value: 3, label: 'Wednesday' },\n      { value: 4, label: 'Thursday' },\n      { value: 5, label: 'Friday' },\n      { value: 6, label: 'Saturday' }\n    ]\n  };\n};\n\nexport default {\n  getData,\n  createSchedule,\n  updateSchedule,\n  deleteSchedule,\n  getMetadata,\n  generateSchedules\n};\n","/**\n * Reports Mock Data\n */\nimport dailyActionsMockData from './dailyActions';\nimport dailyActionsSummaryMockData from './dailyActionsSummary';\nimport playerActivityMockData from './playerActivity';\nimport revenueMockData from './revenue';\nimport promotionalMockData from './promotional';\nimport complianceMockData from './compliance';\nimport exportMockData from './export';\nimport scheduleMockData from './schedule';\n\n/**\n * Get mock data for reports endpoints\n * @param endpoint The API endpoint\n * @param params Optional parameters for the request\n * @returns Mock data for the endpoint\n */\nconst getMockData = (endpoint: string, params?: any): any => {\n  console.log('[REPORTS MOCK] Getting mock data for reports endpoint:', endpoint, params);\n\n  let result = null;\n\n  // Handle different reports endpoints\n  if (endpoint.includes('reports/daily-actions/summary')) {\n    console.log('[REPORTS MOCK] Using dailyActionsSummaryMockData.getSummaryData');\n    result = dailyActionsSummaryMockData.getSummaryData(params);\n  } else if (endpoint.includes('reports/daily-actions/metadata')) {\n    console.log('[REPORTS MOCK] Using dailyActionsSummaryMockData.getMetadata');\n    result = dailyActionsSummaryMockData.getMetadata();\n  } else if (endpoint.includes('reports/daily-actions/data')) {\n    console.log('[REPORTS MOCK] Using dailyActionsMockData.getData for /data endpoint');\n    result = dailyActionsMockData.getData(params);\n  } else if (endpoint.includes('reports/daily-actions')) {\n    console.log('[REPORTS MOCK] Using dailyActionsMockData.getData for general endpoint');\n    result = dailyActionsMockData.getData(params);\n  } else if (endpoint.includes('reports/player-activity')) {\n    result = playerActivityMockData.getData(params);\n  } else if (endpoint.includes('reports/revenue')) {\n    result = revenueMockData.getData(params);\n  } else if (endpoint.includes('reports/promotional')) {\n    result = promotionalMockData.getData(params);\n  } else if (endpoint.includes('reports/compliance')) {\n    result = complianceMockData.getData(params);\n  } else if (endpoint.includes('reports/export')) {\n    result = exportMockData.getData(params);\n  } else if (endpoint.includes('reports/schedule')) {\n    result = scheduleMockData.getData(params);\n  } else {\n    console.warn(`[REPORTS MOCK] No mock data available for reports endpoint: ${endpoint}`);\n  }\n\n  console.log(`[REPORTS MOCK] Result for ${endpoint}:`, result);\n  return result;\n};\n\nexport default {\n  getMockData,\n  dailyActionsMockData,\n  dailyActionsSummaryMockData,\n  playerActivityMockData,\n  revenueMockData,\n  promotionalMockData,\n  complianceMockData,\n  exportMockData,\n  scheduleMockData\n};\n","/**\n * Players Mock Data\n */\nimport { Player } from '../../types/reportsData';\n\n/**\n * Mock player statuses\n */\nconst playerStatuses = [\n  'active',\n  'inactive',\n  'suspended',\n  'pending',\n  'blocked'\n];\n\n/**\n * Mock countries\n */\nconst countries = [\n  'United States',\n  'United Kingdom',\n  'Germany',\n  'Canada',\n  'Australia',\n  'France',\n  'Spain',\n  'Italy',\n  'Netherlands',\n  'Sweden'\n];\n\n/**\n * Mock player tiers\n */\nconst playerTiers = [\n  'bronze',\n  'silver',\n  'gold',\n  'platinum',\n  'diamond'\n];\n\n/**\n * Mock KYC statuses\n */\nconst kycStatuses = [\n  'verified',\n  'pending',\n  'rejected',\n  'not_submitted'\n];\n\n/**\n * Generate a random player\n * @param index Index for generating unique ID\n * @returns Random player object\n */\nconst generatePlayer = (index: number): Player => {\n  const id = `player-${index + 1}`;\n  const username = `user${index + 1}`;\n  const email = `${username}@example.com`;\n  \n  // Generate a random registration date within the last 2 years\n  const registrationDate = new Date();\n  registrationDate.setFullYear(registrationDate.getFullYear() - Math.floor(Math.random() * 2));\n  registrationDate.setMonth(Math.floor(Math.random() * 12));\n  registrationDate.setDate(Math.floor(Math.random() * 28) + 1);\n  \n  const status = playerStatuses[Math.floor(Math.random() * playerStatuses.length)];\n  const country = countries[Math.floor(Math.random() * countries.length)];\n  const balance = Math.floor(Math.random() * 10000);\n  const tier = playerTiers[Math.floor(Math.random() * playerTiers.length)];\n  \n  // Generate a random last login date within the last 30 days\n  const lastLogin = new Date();\n  lastLogin.setDate(lastLogin.getDate() - Math.floor(Math.random() * 30));\n  \n  // Random device\n  const devices = ['Desktop', 'Mobile - Android', 'Mobile - iOS', 'Tablet - Android', 'Tablet - iOS'];\n  const device = devices[Math.floor(Math.random() * devices.length)];\n  \n  // Random white label\n  const whiteLabels = ['Casino Royale', 'Lucky Spin', 'Golden Bet', 'Diamond Play', 'Royal Flush'];\n  const whiteLabel = whiteLabels[Math.floor(Math.random() * whiteLabels.length)];\n  \n  // Random KYC status\n  const kycStatus = kycStatuses[Math.floor(Math.random() * kycStatuses.length)];\n  \n  // Random lifetime metrics\n  const lifetimeDeposits = Math.floor(Math.random() * 50000);\n  const lifetimeWithdrawals = Math.floor(Math.random() * lifetimeDeposits);\n  const lifetimeBets = Math.floor(Math.random() * 100000);\n  const lifetimeWins = Math.floor(Math.random() * lifetimeBets);\n  const lifetimeGGR = lifetimeBets - lifetimeWins;\n  \n  // Random tags\n  const allTags = ['VIP', 'High Roller', 'Bonus Hunter', 'Slot Player', 'Table Player', 'Live Casino', 'Sports Bettor', 'Poker Player', 'New Player', 'Returning Player'];\n  const numTags = Math.floor(Math.random() * 3);\n  const tags: string[] = [];\n  \n  for (let i = 0; i < numTags; i++) {\n    const tag = allTags[Math.floor(Math.random() * allTags.length)];\n    if (!tags.includes(tag)) {\n      tags.push(tag);\n    }\n  }\n  \n  // Random notes\n  const notes = Math.random() > 0.7 ? `Player notes for ${username}` : undefined;\n  \n  // Random risk score (1-100)\n  const riskScore = Math.floor(Math.random() * 100) + 1;\n  \n  // Random favorite games\n  const allGames = ['Starburst', 'Gonzo\\'s Quest', 'Book of Dead', 'Blackjack', 'Roulette', 'Poker', 'Baccarat', 'Craps', 'Slots', 'Mega Moolah'];\n  const numGames = Math.floor(Math.random() * 3);\n  const favoriteGames: string[] = [];\n  \n  for (let i = 0; i < numGames; i++) {\n    const game = allGames[Math.floor(Math.random() * allGames.length)];\n    if (!favoriteGames.includes(game)) {\n      favoriteGames.push(game);\n    }\n  }\n  \n  // Random preferred payment method\n  const paymentMethods = ['Credit Card', 'PayPal', 'Bank Transfer', 'Skrill', 'Neteller', 'Bitcoin', 'Apple Pay', 'Google Pay'];\n  const preferredPaymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];\n  \n  // Random marketing preferences\n  const marketingPreferences = {\n    email: Math.random() > 0.3,\n    sms: Math.random() > 0.5,\n    push: Math.random() > 0.4\n  };\n  \n  return {\n    id,\n    username,\n    email,\n    registrationDate: registrationDate.toISOString(),\n    status,\n    country,\n    balance,\n    tier,\n    lastLogin: lastLogin.toISOString(),\n    device,\n    whiteLabel,\n    kycStatus,\n    lifetimeDeposits,\n    lifetimeWithdrawals,\n    lifetimeBets,\n    lifetimeWins,\n    lifetimeGGR,\n    tags,\n    notes,\n    riskScore,\n    favoriteGames,\n    preferredPaymentMethod,\n    marketingPreferences\n  };\n};\n\n/**\n * Generate mock players\n * @param count Number of players to generate\n * @returns Array of mock players\n */\nconst generatePlayers = (count: number): Player[] => {\n  const players: Player[] = [];\n  \n  for (let i = 0; i < count; i++) {\n    players.push(generatePlayer(i));\n  }\n  \n  return players;\n};\n\n/**\n * Get mock players data\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated players data\n */\nconst getPlayers = (params?: any): any => {\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const status = params?.status;\n  const country = params?.country;\n  const tier = params?.tier;\n  const kycStatus = params?.kycStatus;\n  const searchTerm = params?.searchTerm;\n  \n  // Generate 100 players\n  let players = generatePlayers(100);\n  \n  // Apply filters\n  if (status) {\n    players = players.filter(player => player.status === status);\n  }\n  \n  if (country) {\n    players = players.filter(player => player.country === country);\n  }\n  \n  if (tier) {\n    players = players.filter(player => player.tier === tier);\n  }\n  \n  if (kycStatus) {\n    players = players.filter(player => player.kycStatus === kycStatus);\n  }\n  \n  if (searchTerm) {\n    const term = searchTerm.toLowerCase();\n    players = players.filter(player => \n      player.username.toLowerCase().includes(term) || \n      player.email.toLowerCase().includes(term)\n    );\n  }\n  \n  // Calculate pagination\n  const total = players.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedPlayers = players.slice(startIndex, endIndex);\n  \n  return {\n    data: paginatedPlayers,\n    total,\n    page,\n    pageSize,\n    totalPages\n  };\n};\n\nexport default {\n  getPlayers,\n  generatePlayers,\n  generatePlayer,\n  playerStatuses,\n  countries,\n  playerTiers,\n  kycStatuses\n};\n","/**\n * Player Details Mock Data\n */\nimport playersMockData from './players';\n\n/**\n * Get mock player details\n * @param playerId Player ID\n * @returns Mock player details\n */\nconst getPlayerDetails = (playerId?: string): any => {\n  // Generate a player if no ID is provided or the ID doesn't match any existing player\n  const player = playerId \n    ? playersMockData.generatePlayer(parseInt(playerId.replace('player-', '')) - 1)\n    : playersMockData.generatePlayer(0);\n  \n  // Add additional details\n  return {\n    ...player,\n    activityHistory: generateActivityHistory(),\n    depositHistory: generateDepositHistory(),\n    withdrawalHistory: generateWithdrawalHistory(),\n    gameHistory: generateGameHistory(),\n    bonusHistory: generateBonusHistory(),\n    notes: generateNotes()\n  };\n};\n\n/**\n * Generate mock activity history\n * @returns Mock activity history\n */\nconst generateActivityHistory = (): any => {\n  const activities = [];\n  const today = new Date();\n  \n  for (let i = 0; i < 30; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - i);\n    \n    // Random session count between 0 and 5\n    const sessionCount = Math.floor(Math.random() * 6);\n    \n    if (sessionCount > 0) {\n      // Random session duration between 5 and 120 minutes\n      const totalDuration = Math.floor(Math.random() * 115) + 5;\n      \n      // Random bet count between 10 and 100\n      const betCount = Math.floor(Math.random() * 90) + 10;\n      \n      // Random bet amount between 50 and 500\n      const betAmount = Math.floor(Math.random() * 450) + 50;\n      \n      // Random win amount between 0 and bet amount * 1.5\n      const winAmount = Math.floor(Math.random() * betAmount * 1.5);\n      \n      activities.push({\n        date: date.toISOString().split('T')[0],\n        sessionCount,\n        totalDuration,\n        betCount,\n        betAmount,\n        winAmount,\n        netGaming: betAmount - winAmount\n      });\n    } else {\n      activities.push({\n        date: date.toISOString().split('T')[0],\n        sessionCount: 0,\n        totalDuration: 0,\n        betCount: 0,\n        betAmount: 0,\n        winAmount: 0,\n        netGaming: 0\n      });\n    }\n  }\n  \n  return activities.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n/**\n * Generate mock deposit history\n * @returns Mock deposit history\n */\nconst generateDepositHistory = (): any => {\n  const deposits = [];\n  const today = new Date();\n  \n  // Random number of deposits between 5 and 15\n  const depositCount = Math.floor(Math.random() * 10) + 5;\n  \n  for (let i = 0; i < depositCount; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - Math.floor(Math.random() * 60));\n    \n    // Random amount between 20 and 500\n    const amount = Math.floor(Math.random() * 480) + 20;\n    \n    // Random payment method\n    const paymentMethods = ['Credit Card', 'PayPal', 'Bank Transfer', 'Skrill', 'Neteller', 'Bitcoin', 'Apple Pay', 'Google Pay'];\n    const paymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];\n    \n    // Random status\n    const statuses = ['completed', 'pending', 'failed', 'cancelled'];\n    const status = statuses[Math.floor(Math.random() * statuses.length)];\n    \n    deposits.push({\n      id: `deposit-${Date.now()}-${i}`,\n      date: date.toISOString(),\n      amount,\n      paymentMethod,\n      status,\n      transactionId: `tx-${Date.now()}-${i}`\n    });\n  }\n  \n  return deposits.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n/**\n * Generate mock withdrawal history\n * @returns Mock withdrawal history\n */\nconst generateWithdrawalHistory = (): any => {\n  const withdrawals = [];\n  const today = new Date();\n  \n  // Random number of withdrawals between 2 and 10\n  const withdrawalCount = Math.floor(Math.random() * 8) + 2;\n  \n  for (let i = 0; i < withdrawalCount; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - Math.floor(Math.random() * 60));\n    \n    // Random amount between 50 and 1000\n    const amount = Math.floor(Math.random() * 950) + 50;\n    \n    // Random payment method\n    const paymentMethods = ['Credit Card', 'PayPal', 'Bank Transfer', 'Skrill', 'Neteller', 'Bitcoin'];\n    const paymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];\n    \n    // Random status\n    const statuses = ['completed', 'pending', 'processing', 'cancelled'];\n    const status = statuses[Math.floor(Math.random() * statuses.length)];\n    \n    withdrawals.push({\n      id: `withdrawal-${Date.now()}-${i}`,\n      date: date.toISOString(),\n      amount,\n      paymentMethod,\n      status,\n      transactionId: `tx-${Date.now()}-${i + 100}`\n    });\n  }\n  \n  return withdrawals.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n/**\n * Generate mock game history\n * @returns Mock game history\n */\nconst generateGameHistory = (): any => {\n  const games = [];\n  const today = new Date();\n  \n  // Random number of game sessions between 10 and 30\n  const gameCount = Math.floor(Math.random() * 20) + 10;\n  \n  // List of game names\n  const gameNames = [\n    'Starburst',\n    'Gonzo\\'s Quest',\n    'Book of Dead',\n    'Mega Moolah',\n    'Reactoonz',\n    'Immortal Romance',\n    'Bonanza',\n    'Dead or Alive',\n    'Wolf Gold',\n    'Sweet Bonanza',\n    'Blackjack',\n    'Roulette',\n    'Baccarat',\n    'Poker',\n    'Craps'\n  ];\n  \n  for (let i = 0; i < gameCount; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - Math.floor(Math.random() * 30));\n    \n    // Random game\n    const gameName = gameNames[Math.floor(Math.random() * gameNames.length)];\n    \n    // Random session duration between 5 and 60 minutes\n    const duration = Math.floor(Math.random() * 55) + 5;\n    \n    // Random bet amount between 10 and 200\n    const betAmount = Math.floor(Math.random() * 190) + 10;\n    \n    // Random win amount between 0 and bet amount * 2\n    const winAmount = Math.floor(Math.random() * betAmount * 2);\n    \n    games.push({\n      id: `game-session-${Date.now()}-${i}`,\n      date: date.toISOString(),\n      gameName,\n      duration,\n      betAmount,\n      winAmount,\n      netGaming: betAmount - winAmount\n    });\n  }\n  \n  return games.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n/**\n * Generate mock bonus history\n * @returns Mock bonus history\n */\nconst generateBonusHistory = (): any => {\n  const bonuses = [];\n  const today = new Date();\n  \n  // Random number of bonuses between 3 and 10\n  const bonusCount = Math.floor(Math.random() * 7) + 3;\n  \n  // List of bonus types\n  const bonusTypes = [\n    'Welcome Bonus',\n    'Deposit Bonus',\n    'Free Spins',\n    'Cashback',\n    'Loyalty Bonus',\n    'Birthday Bonus',\n    'Referral Bonus'\n  ];\n  \n  for (let i = 0; i < bonusCount; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - Math.floor(Math.random() * 90));\n    \n    // Random bonus type\n    const bonusType = bonusTypes[Math.floor(Math.random() * bonusTypes.length)];\n    \n    // Random amount between 10 and 200\n    const amount = Math.floor(Math.random() * 190) + 10;\n    \n    // Random wagering requirement between 10 and 40\n    const wageringRequirement = Math.floor(Math.random() * 30) + 10;\n    \n    // Random status\n    const statuses = ['active', 'completed', 'expired', 'cancelled'];\n    const status = statuses[Math.floor(Math.random() * statuses.length)];\n    \n    // Random expiry date\n    const expiryDate = new Date(date);\n    expiryDate.setDate(expiryDate.getDate() + 30);\n    \n    bonuses.push({\n      id: `bonus-${Date.now()}-${i}`,\n      date: date.toISOString(),\n      bonusType,\n      amount,\n      wageringRequirement,\n      wageringCompleted: status === 'completed' ? wageringRequirement : Math.floor(Math.random() * wageringRequirement),\n      status,\n      expiryDate: expiryDate.toISOString()\n    });\n  }\n  \n  return bonuses.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n/**\n * Generate mock notes\n * @returns Mock notes\n */\nconst generateNotes = (): any => {\n  const notes = [];\n  const today = new Date();\n  \n  // Random number of notes between 0 and 5\n  const noteCount = Math.floor(Math.random() * 6);\n  \n  for (let i = 0; i < noteCount; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - Math.floor(Math.random() * 60));\n    \n    // Random author\n    const authors = ['John (Support)', 'Sarah (VIP Manager)', 'Mike (Compliance)', 'Lisa (Payments)', 'David (Admin)'];\n    const author = authors[Math.floor(Math.random() * authors.length)];\n    \n    // Random note content\n    const noteContents = [\n      'Player contacted support about withdrawal issues.',\n      'VIP status upgraded due to consistent play.',\n      'Player requested account verification documents.',\n      'Player reported issues with game freezing.',\n      'Bonus added to account as goodwill gesture.',\n      'Player requested self-exclusion for 30 days.',\n      'Payment method verified successfully.',\n      'Player reported unauthorized access attempt.'\n    ];\n    const content = noteContents[Math.floor(Math.random() * noteContents.length)];\n    \n    notes.push({\n      id: `note-${Date.now()}-${i}`,\n      date: date.toISOString(),\n      author,\n      content\n    });\n  }\n  \n  return notes.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\nexport default {\n  getPlayerDetails,\n  generateActivityHistory,\n  generateDepositHistory,\n  generateWithdrawalHistory,\n  generateGameHistory,\n  generateBonusHistory,\n  generateNotes\n};\n","/**\n * Players Mock Data\n */\nimport playersMockData from './players';\nimport playerDetailsMockData from './playerDetails';\n\n/**\n * Get mock data for players endpoints\n * @param endpoint The API endpoint\n * @param params Optional parameters for the request\n * @returns Mock data for the endpoint\n */\nconst getMockData = (endpoint: string, params?: any): any => {\n  // Handle different players endpoints\n  if (endpoint.includes('players') && endpoint.includes('details')) {\n    const playerId = endpoint.split('/').pop();\n    return playerDetailsMockData.getPlayerDetails(playerId);\n  } else if (endpoint.includes('players')) {\n    return playersMockData.getPlayers(params);\n  } else {\n    console.warn(`No mock data available for players endpoint: ${endpoint}`);\n    return null;\n  }\n};\n\nexport default {\n  getMockData,\n  playersMockData,\n  playerDetailsMockData\n};\n","/**\n * Games Mock Data\n */\nimport topGamesMockData from '../dashboard/topGames';\n\n/**\n * Get mock games data\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated games data\n */\nconst getGames = (params?: any): any => {\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const category = params?.category;\n  const provider = params?.provider;\n  const searchTerm = params?.searchTerm;\n  \n  // Use the games from topGamesMockData\n  let games = [...topGamesMockData.games];\n  \n  // Apply filters\n  if (category) {\n    games = games.filter(game => game.category === category);\n  }\n  \n  if (provider) {\n    games = games.filter(game => game.provider === provider);\n  }\n  \n  if (searchTerm) {\n    const term = searchTerm.toLowerCase();\n    games = games.filter(game => \n      game.name.toLowerCase().includes(term)\n    );\n  }\n  \n  // Calculate pagination\n  const total = games.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedGames = games.slice(startIndex, endIndex);\n  \n  return {\n    data: paginatedGames,\n    total,\n    page,\n    pageSize,\n    totalPages\n  };\n};\n\nexport default {\n  getGames,\n  gameCategories: topGamesMockData.gameCategories,\n  gameProviders: topGamesMockData.gameProviders\n};\n","/**\n * Games Mock Data\n */\nimport gamesMockData from './games';\n\n/**\n * Get mock data for games endpoints\n * @param endpoint The API endpoint\n * @param params Optional parameters for the request\n * @returns Mock data for the endpoint\n */\nconst getMockData = (endpoint: string, params?: any): any => {\n  // Handle different games endpoints\n  if (endpoint.includes('games')) {\n    return gamesMockData.getGames(params);\n  } else {\n    console.warn(`No mock data available for games endpoint: ${endpoint}`);\n    return null;\n  }\n};\n\nexport default {\n  getMockData,\n  gamesMockData\n};\n","/**\n * Transactions Mock Data\n */\nimport recentTransactionsMockData from '../dashboard/recentTransactions';\n\n/**\n * Get mock transactions data\n * @param params Parameters for filtering and pagination\n * @returns Filtered and paginated transactions data\n */\nconst getTransactions = (params?: any): any => {\n  const page = params?.page || 1;\n  const pageSize = params?.pageSize || 20;\n  const type = params?.type;\n  const status = params?.status;\n  const playerId = params?.playerId;\n  const startDate = params?.startDate;\n  const endDate = params?.endDate;\n  const minAmount = params?.minAmount;\n  const maxAmount = params?.maxAmount;\n  \n  // Generate 100 transactions\n  let transactions = recentTransactionsMockData.generateTransactions(100);\n  \n  // Apply filters\n  if (type) {\n    transactions = transactions.filter(tx => tx.type === type);\n  }\n  \n  if (status) {\n    transactions = transactions.filter(tx => tx.status === status);\n  }\n  \n  if (playerId) {\n    transactions = transactions.filter(tx => tx.playerId === playerId);\n  }\n  \n  if (startDate) {\n    const start = new Date(startDate);\n    transactions = transactions.filter(tx => new Date(tx.timestamp) >= start);\n  }\n  \n  if (endDate) {\n    const end = new Date(endDate);\n    transactions = transactions.filter(tx => new Date(tx.timestamp) <= end);\n  }\n  \n  if (minAmount !== undefined) {\n    transactions = transactions.filter(tx => tx.amount >= minAmount);\n  }\n  \n  if (maxAmount !== undefined) {\n    transactions = transactions.filter(tx => tx.amount <= maxAmount);\n  }\n  \n  // Calculate pagination\n  const total = transactions.length;\n  const totalPages = Math.ceil(total / pageSize);\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedTransactions = transactions.slice(startIndex, endIndex);\n  \n  return {\n    data: paginatedTransactions,\n    total,\n    page,\n    pageSize,\n    totalPages\n  };\n};\n\nexport default {\n  getTransactions,\n  transactionTypes: recentTransactionsMockData.transactionTypes,\n  paymentMethods: recentTransactionsMockData.paymentMethods,\n  transactionStatuses: recentTransactionsMockData.transactionStatuses\n};\n","/**\n * Transactions Mock Data\n */\nimport transactionsMockData from './transactions';\n\n/**\n * Get mock data for transactions endpoints\n * @param endpoint The API endpoint\n * @param params Optional parameters for the request\n * @returns Mock data for the endpoint\n */\nconst getMockData = (endpoint: string, params?: any): any => {\n  // Handle different transactions endpoints\n  if (endpoint.includes('transactions')) {\n    return transactionsMockData.getTransactions(params);\n  } else {\n    console.warn(`No mock data available for transactions endpoint: ${endpoint}`);\n    return null;\n  }\n};\n\nexport default {\n  getMockData,\n  transactionsMockData\n};\n","/**\n * Natural Language Query Mock Data\n */\n\n/**\n * Process a natural language query\n * @param params Query parameters\n * @returns Mock query result\n */\nconst processQuery = (params?: any): any => {\n  const query = params?.query || '';\n  \n  // Process the query based on keywords\n  if (query.toLowerCase().includes('revenue')) {\n    return generateRevenueResponse(query);\n  } else if (query.toLowerCase().includes('player') || query.toLowerCase().includes('user')) {\n    return generatePlayerResponse(query);\n  } else if (query.toLowerCase().includes('game')) {\n    return generateGameResponse(query);\n  } else if (query.toLowerCase().includes('transaction')) {\n    return generateTransactionResponse(query);\n  } else {\n    return generateGenericResponse(query);\n  }\n};\n\n/**\n * Generate a revenue-related response\n * @param query The original query\n * @returns Mock response for revenue query\n */\nconst generateRevenueResponse = (query: string): any => {\n  return {\n    query,\n    entities: {\n      metric: 'revenue',\n      timeframe: 'last 30 days',\n      filters: []\n    },\n    sql: 'SELECT date, SUM(amount) as revenue FROM transactions WHERE type = \"win\" AND date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY date ORDER BY date',\n    data: generateRevenueData(30),\n    visualization: 'line',\n    insights: [\n      'Revenue has increased by 15% compared to the previous period',\n      'Weekend days show higher revenue than weekdays',\n      'The highest revenue day was last Saturday'\n    ]\n  };\n};\n\n/**\n * Generate a player-related response\n * @param query The original query\n * @returns Mock response for player query\n */\nconst generatePlayerResponse = (query: string): any => {\n  return {\n    query,\n    entities: {\n      metric: 'players',\n      timeframe: 'last 30 days',\n      filters: []\n    },\n    sql: 'SELECT date, COUNT(DISTINCT player_id) as active_players FROM sessions WHERE date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY date ORDER BY date',\n    data: generatePlayerData(30),\n    visualization: 'line',\n    insights: [\n      'Active players have increased by 8% compared to the previous period',\n      'New player registrations are up 12% month-over-month',\n      'Player retention rate is 65% for the period'\n    ]\n  };\n};\n\n/**\n * Generate a game-related response\n * @param query The original query\n * @returns Mock response for game query\n */\nconst generateGameResponse = (query: string): any => {\n  return {\n    query,\n    entities: {\n      metric: 'games',\n      timeframe: 'last 30 days',\n      filters: []\n    },\n    sql: 'SELECT game_name, COUNT(*) as plays, SUM(bet_amount) as total_bets FROM game_sessions WHERE date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY game_name ORDER BY plays DESC LIMIT 10',\n    data: generateGameData(10),\n    visualization: 'bar',\n    insights: [\n      'Slot games are the most popular category with 65% of all plays',\n      'The top 5 games account for 40% of all bets',\n      'New games released this month have a 25% higher engagement rate'\n    ]\n  };\n};\n\n/**\n * Generate a transaction-related response\n * @param query The original query\n * @returns Mock response for transaction query\n */\nconst generateTransactionResponse = (query: string): any => {\n  return {\n    query,\n    entities: {\n      metric: 'transactions',\n      timeframe: 'last 30 days',\n      filters: []\n    },\n    sql: 'SELECT date, type, COUNT(*) as count, SUM(amount) as total_amount FROM transactions WHERE date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY date, type ORDER BY date',\n    data: generateTransactionData(30),\n    visualization: 'bar',\n    insights: [\n      'Deposit transactions have increased by 10% compared to the previous period',\n      'The average transaction amount is $85',\n      'Credit card remains the most popular payment method at 55% of all deposits'\n    ]\n  };\n};\n\n/**\n * Generate a generic response\n * @param query The original query\n * @returns Mock generic response\n */\nconst generateGenericResponse = (query: string): any => {\n  return {\n    query,\n    entities: {\n      metric: 'general',\n      timeframe: 'last 30 days',\n      filters: []\n    },\n    sql: 'SELECT * FROM dashboard_summary WHERE date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)',\n    data: generateGenericData(),\n    visualization: 'table',\n    insights: [\n      'Overall platform performance is up 12% compared to the previous period',\n      'Mobile usage has increased to 65% of all sessions',\n      'Peak usage time is between 8 PM and 11 PM daily'\n    ]\n  };\n};\n\n/**\n * Generate mock revenue data\n * @param days Number of days to generate data for\n * @returns Array of revenue data points\n */\nconst generateRevenueData = (days: number): any[] => {\n  const data = [];\n  const today = new Date();\n  \n  for (let i = 0; i < days; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - (days - i - 1));\n    \n    // Generate random revenue between 10000 and 50000\n    const revenue = Math.floor(Math.random() * 40000) + 10000;\n    \n    data.push({\n      date: date.toISOString().split('T')[0],\n      revenue\n    });\n  }\n  \n  return data;\n};\n\n/**\n * Generate mock player data\n * @param days Number of days to generate data for\n * @returns Array of player data points\n */\nconst generatePlayerData = (days: number): any[] => {\n  const data = [];\n  const today = new Date();\n  \n  for (let i = 0; i < days; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - (days - i - 1));\n    \n    // Generate random player counts between 1000 and 5000\n    const activePlayers = Math.floor(Math.random() * 4000) + 1000;\n    const newPlayers = Math.floor(activePlayers * (Math.random() * 0.2 + 0.05));\n    \n    data.push({\n      date: date.toISOString().split('T')[0],\n      activePlayers,\n      newPlayers\n    });\n  }\n  \n  return data;\n};\n\n/**\n * Generate mock game data\n * @param count Number of games to generate data for\n * @returns Array of game data points\n */\nconst generateGameData = (count: number): any[] => {\n  const games = [\n    'Starburst',\n    'Gonzo\\'s Quest',\n    'Book of Dead',\n    'Mega Moolah',\n    'Reactoonz',\n    'Immortal Romance',\n    'Bonanza',\n    'Dead or Alive',\n    'Wolf Gold',\n    'Sweet Bonanza'\n  ];\n  \n  const data = [];\n  \n  for (let i = 0; i < count; i++) {\n    // Generate random plays between 1000 and 10000\n    const plays = Math.floor(Math.random() * 9000) + 1000;\n    \n    // Generate random bets between 10000 and 100000\n    const totalBets = Math.floor(Math.random() * 90000) + 10000;\n    \n    data.push({\n      game: games[i],\n      plays,\n      totalBets\n    });\n  }\n  \n  // Sort by plays (descending)\n  return data.sort((a, b) => b.plays - a.plays);\n};\n\n/**\n * Generate mock transaction data\n * @param days Number of days to generate data for\n * @returns Array of transaction data points\n */\nconst generateTransactionData = (days: number): any[] => {\n  const data = [];\n  const today = new Date();\n  const transactionTypes = ['deposit', 'withdrawal', 'bet', 'win'];\n  \n  for (let i = 0; i < days; i++) {\n    const date = new Date();\n    date.setDate(today.getDate() - (days - i - 1));\n    const dateStr = date.toISOString().split('T')[0];\n    \n    for (const type of transactionTypes) {\n      // Generate random count between 100 and 1000\n      const count = Math.floor(Math.random() * 900) + 100;\n      \n      // Generate random amount between 10000 and 50000\n      const totalAmount = Math.floor(Math.random() * 40000) + 10000;\n      \n      data.push({\n        date: dateStr,\n        type,\n        count,\n        totalAmount\n      });\n    }\n  }\n  \n  return data;\n};\n\n/**\n * Generate mock generic data\n * @returns Generic dashboard data\n */\nconst generateGenericData = (): any => {\n  return {\n    revenue: 1250000,\n    players: {\n      active: 45000,\n      new: 12500\n    },\n    transactions: {\n      deposits: 85000,\n      withdrawals: 35000,\n      bets: 450000,\n      wins: 420000\n    },\n    games: {\n      mostPlayed: 'Starburst',\n      mostProfitable: 'Mega Moolah'\n    },\n    devices: {\n      mobile: 65,\n      desktop: 30,\n      tablet: 5\n    }\n  };\n};\n\nexport default {\n  processQuery,\n  generateRevenueResponse,\n  generatePlayerResponse,\n  generateGameResponse,\n  generateTransactionResponse,\n  generateGenericResponse\n};\n","/**\n * Natural Language Query History Mock Data\n */\n\n/**\n * Get mock query history\n * @returns Mock query history\n */\nconst getQueryHistory = (): any => {\n  return {\n    queries: [\n      {\n        id: 'query-1',\n        query: 'Show me revenue for the last 30 days',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago\n        result: {\n          visualization: 'line',\n          dataPoints: 30\n        }\n      },\n      {\n        id: 'query-2',\n        query: 'How many active players do we have this month?',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 5).toISOString(), // 5 hours ago\n        result: {\n          visualization: 'line',\n          dataPoints: 30\n        }\n      },\n      {\n        id: 'query-3',\n        query: 'What are our top 10 games by revenue?',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 day ago\n        result: {\n          visualization: 'bar',\n          dataPoints: 10\n        }\n      },\n      {\n        id: 'query-4',\n        query: 'Show me deposit transactions by payment method',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(), // 2 days ago\n        result: {\n          visualization: 'pie',\n          dataPoints: 8\n        }\n      },\n      {\n        id: 'query-5',\n        query: 'What is our player retention rate?',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3).toISOString(), // 3 days ago\n        result: {\n          visualization: 'number',\n          dataPoints: 1\n        }\n      },\n      {\n        id: 'query-6',\n        query: 'Compare revenue between desktop and mobile',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 4).toISOString(), // 4 days ago\n        result: {\n          visualization: 'bar',\n          dataPoints: 2\n        }\n      },\n      {\n        id: 'query-7',\n        query: 'Show me player registrations by country',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString(), // 5 days ago\n        result: {\n          visualization: 'map',\n          dataPoints: 20\n        }\n      },\n      {\n        id: 'query-8',\n        query: 'What is our average deposit amount?',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 6).toISOString(), // 6 days ago\n        result: {\n          visualization: 'number',\n          dataPoints: 1\n        }\n      },\n      {\n        id: 'query-9',\n        query: 'Show me revenue by game category',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(), // 7 days ago\n        result: {\n          visualization: 'pie',\n          dataPoints: 6\n        }\n      },\n      {\n        id: 'query-10',\n        query: 'What is our conversion rate from registration to first deposit?',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 8).toISOString(), // 8 days ago\n        result: {\n          visualization: 'number',\n          dataPoints: 1\n        }\n      }\n    ]\n  };\n};\n\nexport default {\n  getQueryHistory\n};\n","/**\n * Natural Language Query Suggestions Mock Data\n */\n\n/**\n * Get mock query suggestions\n * @returns Mock query suggestions\n */\nconst getSuggestions = (): any => {\n  return {\n    suggestions: [\n      {\n        id: 'suggestion-1',\n        query: 'Show me revenue for the last 30 days',\n        category: 'revenue',\n        popularity: 95\n      },\n      {\n        id: 'suggestion-2',\n        query: 'How many active players do we have this month?',\n        category: 'players',\n        popularity: 90\n      },\n      {\n        id: 'suggestion-3',\n        query: 'What are our top 10 games by revenue?',\n        category: 'games',\n        popularity: 85\n      },\n      {\n        id: 'suggestion-4',\n        query: 'Show me deposit transactions by payment method',\n        category: 'transactions',\n        popularity: 80\n      },\n      {\n        id: 'suggestion-5',\n        query: 'What is our player retention rate?',\n        category: 'players',\n        popularity: 75\n      },\n      {\n        id: 'suggestion-6',\n        query: 'Compare revenue between desktop and mobile',\n        category: 'revenue',\n        popularity: 70\n      },\n      {\n        id: 'suggestion-7',\n        query: 'Show me player registrations by country',\n        category: 'players',\n        popularity: 65\n      },\n      {\n        id: 'suggestion-8',\n        query: 'What is our average deposit amount?',\n        category: 'transactions',\n        popularity: 60\n      },\n      {\n        id: 'suggestion-9',\n        query: 'Show me revenue by game category',\n        category: 'revenue',\n        popularity: 55\n      },\n      {\n        id: 'suggestion-10',\n        query: 'What is our conversion rate from registration to first deposit?',\n        category: 'players',\n        popularity: 50\n      }\n    ]\n  };\n};\n\nexport default {\n  getSuggestions\n};\n","/**\n * Natural Language Mock Data\n */\nimport queryMockData from './query';\nimport historyMockData from './history';\nimport suggestionsMockData from './suggestions';\n\n/**\n * Get mock data for natural language endpoints\n * @param endpoint The API endpoint\n * @param params Optional parameters for the request\n * @returns Mock data for the endpoint\n */\nconst getMockData = (endpoint: string, params?: any): any => {\n  // Handle different natural language endpoints\n  if (endpoint.includes('natural-language/query')) {\n    return queryMockData.processQuery(params);\n  } else if (endpoint.includes('natural-language/history')) {\n    return historyMockData.getQueryHistory();\n  } else if (endpoint.includes('natural-language/suggestions')) {\n    return suggestionsMockData.getSuggestions();\n  } else {\n    console.warn(`No mock data available for natural language endpoint: ${endpoint}`);\n    return null;\n  }\n};\n\nexport default {\n  getMockData,\n  queryMockData,\n  historyMockData,\n  suggestionsMockData\n};\n","/**\n * Mock Data Service\n *\n * This service provides mock data for UI testing when the backend server is not available.\n * It intercepts API calls and returns appropriate mock data based on the endpoint.\n */\n\nimport { FEATURES } from '../config/constants';\nimport authMockData from './auth';\nimport dashboardMockData from './dashboard';\nimport reportsMockData from './reports';\nimport playersMockData from './players';\nimport gamesMockData from './games';\nimport transactionsMockData from './transactions';\nimport naturalLanguageMockData from './naturalLanguage';\n\n/**\n * Check if mock data should be used\n */\nexport const shouldUseMockData = (): boolean => {\n  return FEATURES.USE_MOCK_DATA_FOR_UI_TESTING;\n};\n\n/**\n * Get mock data for a specific endpoint\n * @param endpoint The API endpoint\n * @param params Optional parameters for the request\n * @returns Mock data for the endpoint\n */\nexport const getMockData = (endpoint: string, params?: any): any => {\n  console.log(`[MOCK] Getting mock data for endpoint: ${endpoint}`, params);\n\n  // Normalize the endpoint by removing leading slash and any API prefix\n  let normalizedEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;\n\n  // Remove api/ prefix if present (for proxy requests)\n  if (normalizedEndpoint.startsWith('api/')) {\n    normalizedEndpoint = normalizedEndpoint.substring(4);\n  }\n\n  // Split the endpoint into segments\n  const segments = normalizedEndpoint.split('/');\n  const category = segments[0];\n\n  console.log(`[MOCK] Category: ${category}, Segments:`, segments);\n\n  let result;\n\n  // Select the appropriate mock data based on the category\n  switch (category) {\n    case 'auth':\n      result = authMockData.getMockData(normalizedEndpoint, params);\n      break;\n    case 'dashboard':\n      result = dashboardMockData.getMockData(normalizedEndpoint, params);\n      break;\n    case 'reports':\n      result = reportsMockData.getMockData(normalizedEndpoint, params);\n      break;\n    case 'players':\n      result = playersMockData.getMockData(normalizedEndpoint, params);\n      break;\n    case 'games':\n      result = gamesMockData.getMockData(normalizedEndpoint, params);\n      break;\n    case 'transactions':\n      result = transactionsMockData.getMockData(normalizedEndpoint, params);\n      break;\n    case 'natural-language':\n      result = naturalLanguageMockData.getMockData(normalizedEndpoint, params);\n      break;\n    default:\n      console.warn(`[MOCK] No mock data available for endpoint: ${endpoint}`);\n      result = null;\n  }\n\n  console.log(`[MOCK] Result for ${endpoint}:`, result);\n  return result;\n};\n\n/**\n * Simulate API delay\n * @param min Minimum delay in milliseconds\n * @param max Maximum delay in milliseconds\n * @returns Promise that resolves after the delay\n */\nexport const simulateApiDelay = (min: number = 200, max: number = 800): Promise<void> => {\n  const delay = Math.floor(Math.random() * (max - min + 1)) + min;\n  return new Promise(resolve => setTimeout(resolve, delay));\n};\n\n/**\n * Mock data service\n */\nconst mockDataService = {\n  shouldUseMockData,\n  getMockData,\n  simulateApiDelay\n};\n\nexport default mockDataService;\n"],"names":["adminUser","id","username","email","firstName","lastName","role","permissions","createdAt","updatedAt","lastLogin","active","avatar","regularUser","analystUser","managerUser","successResponse","user","token","refreshToken","userResponse","analystResponse","managerResponse","refreshTokenResponse","googleResponse","Date","toISOString","microsoftResponse","newUser","userProfile","loginMockData","preferences","theme","language","notifications","push","sms","dashboardLayout","timezone","updateProfileResponse","success","message","handleLogin","credentials","password","Error","handleRegister","userData","registerMockData","getMockData","endpoint","params","includes","profileMockData","console","warn","stats","summary","totalRevenue","totalPlayers","activePlayersToday","newPlayersToday","depositAmount","withdrawalAmount","netGaming","conversionRate","averageSessionTime","churnRate","comparison","revenue","current","previous","change","trend","players","activePlayers","newPlayers","deposits","withdrawals","sessionTime","timeframe","generateDailyData","startDate","endDate","start","end","data","currentDate","registrations","Math","floor","random","date","split","setDate","getDate","period","total","reduce","sum","item","generateWeeklyData","weekNumber","week","getTime","generateMonthlyData","month","toLocaleString","year","getFullYear","String","getMonth","padStart","setMonth","getRegistrationsData","monthlyData","transactionTypes","paymentMethods","transactionStatuses","generateTransaction","index","type","length","amount","status","paymentMethod","timestamp","setHours","getHours","now","playerId","playerUsername","currency","gameId","gameName","generateTransactions","count","transactions","i","sort","a","b","page","pageSize","totalPages","games","name","category","provider","bets","rtp","popularity","releaseDate","image","getTopGames","metric","limit","gameCategory","minRevenue","maxRevenue","Number","MAX_SAFE_INTEGER","filteredGames","filter","game","slice","gameCategories","gameProviders","getRevenueData","playerJourney","stages","percentage","conversion","channels","devices","countries","methods","amounts","range","categories","timeToPlay","frequency","sessionLength","dropoffs","fromStage","toStage","reasons","reason","kpiData","target","vsTarget","forecast","ggr","ngr","firstTimeDepositors","averageDepositAmount","ltv","marketingCost","cpa","roi","statsMockData","playerRegistrationsMockData","recentTransactionsMockData","topGamesMockData","casinoRevenueMockData","playerJourneyMockData","kpiMockData","layout","favorites","results","actionTypes","statuses","whiteLabels","generateDailyAction","actionType","whiteLabel","country","device","undefined","ipAddress","location","generateDailyActions","actions","getData","log","action","ceil","startIndex","endIndex","paginatedActions","dailyActions","whiteLabelName","whiteLabelId","ftd","paidCashouts","ggrCasino","ggrSport","ggrLive","totalGGR","filteredTotalRegistrations","filteredTotalFTD","filteredTotalDeposits","filteredTotalCashouts","filteredTotalGGR","result","totalRegistrations","totalFTD","totalDeposits","totalCashouts","getMetadata","filters","label","options","map","value","charAt","toUpperCase","columns","sortable","filterable","getSummaryData","filteredActions","generatePlayerActivities","activities","today","sessionDuration","gameNames","slots","table","live","poker","sports","arcade","betCount","betAmount","winAmount","activity","generateDailyRevenueData","netDeposits","generateWeeklyRevenueData","generateMonthlyRevenueData","revenueData","paginatedData","generatePromotions","promotions","promotionTypes","budget","spent","playerCount","description","remaining","promotionType","promo","generateComplianceItems","complianceItems","complianceTypes","severityLevels","severity","resolutionDate","assignedTo","replace","notes","complianceType","generateExportHistory","exports","formats","reportTypes","userIds","userNames","format","reportType","reportName","userIndex","userId","userName","fileSize","formattedFileSize","formatFileSize","reportId","downloadUrl","bytes","toFixed","getExportHistory","icon","defaultValue","applicableFormats","generateSchedules","schedules","frequencies","emailDomains","time","toString","day","recipientCount","recipients","j","domain","isActive","lastRun","nextRun","calculateNextRun","hours","minutes","daysUntilTargetDay","getDay","schedule","createSchedule","updateSchedule","scheduleId","find","s","deleteSchedule","weekDays","dailyActionsSummaryMockData","dailyActionsMockData","playerActivityMockData","revenueMockData","promotionalMockData","complianceMockData","exportMockData","scheduleMockData","playerStatuses","playerTiers","kycStatuses","generatePlayer","registrationDate","setFullYear","balance","tier","kycStatus","lifetimeDeposits","lifetimeWithdrawals","lifetimeBets","lifetimeWins","lifetimeGGR","allTags","numTags","tags","tag","riskScore","allGames","numGames","favoriteGames","preferredPaymentMethod","marketingPreferences","generatePlayers","getPlayers","searchTerm","player","term","toLowerCase","generateActivityHistory","sessionCount","totalDuration","generateDepositHistory","depositCount","transactionId","generateWithdrawalHistory","withdrawalCount","generateGameHistory","gameCount","duration","generateBonusHistory","bonuses","bonusCount","bonusTypes","bonusType","wageringRequirement","expiryDate","wageringCompleted","generateNotes","noteCount","authors","author","noteContents","content","getPlayerDetails","playersMockData","parseInt","activityHistory","depositHistory","withdrawalHistory","gameHistory","bonusHistory","pop","playerDetailsMockData","getGames","gamesMockData","getTransactions","minAmount","maxAmount","tx","transactionsMockData","generateRevenueResponse","query","entities","sql","generateRevenueData","visualization","insights","generatePlayerResponse","generatePlayerData","generateGameResponse","generateGameData","generateTransactionResponse","generateTransactionData","generateGenericResponse","generateGenericData","days","plays","totalBets","dateStr","totalAmount","new","wins","mostPlayed","mostProfitable","mobile","desktop","tablet","processQuery","getQueryHistory","queries","dataPoints","getSuggestions","suggestions","queryMockData","historyMockData","suggestionsMockData","shouldUseMockData","FEATURES","USE_MOCK_DATA_FOR_UI_TESTING","normalizedEndpoint","startsWith","substring","segments","authMockData","dashboardMockData","reportsMockData","naturalLanguageMockData","simulateApiDelay","min","arguments","max","delay","Promise","resolve","setTimeout"],"sourceRoot":""}