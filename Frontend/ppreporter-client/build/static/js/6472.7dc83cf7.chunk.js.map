{"version":3,"file":"static/js/6472.7dc83cf7.chunk.js","mappings":"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","sources":["components/common/VirtualizedList.tsx","components/dashboard/TabPanel.tsx","components/dashboard/DashboardPreferences.tsx","components/dashboard/PlayerRegistrationsChart.tsx","components/dashboard/MultiDimensionalRadarChart.tsx","components/dashboard/MicroCharts.tsx","services/dashboardAnalyticsService.ts","services/api/contextualService.ts"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\nimport { Box, Typography } from '@mui/material';\nimport { SxProps, Theme } from '@mui/material/styles';\n\nexport interface VirtualizedListProps<T> {\n  data: T[];\n  renderRow: (props: { index: number; style: React.CSSProperties; data: T }) => React.ReactNode;\n  height?: number;\n  width?: number | string;\n  itemSize?: number;\n  loading?: boolean;\n  emptyMessage?: string;\n  sx?: SxProps<Theme>;\n}\n\n/**\n * VirtualizedList component\n * A reusable virtualized list component using react-window for efficient rendering of large data sets\n */\nfunction VirtualizedList<T>({\n  data = [],\n  renderRow,\n  height = 400,\n  width = '100%',\n  itemSize = 50,\n  loading = false,\n  emptyMessage = 'No data to display',\n  sx = {}\n}: VirtualizedListProps<T>): React.ReactElement {\n  // Memoized row renderer to prevent unnecessary re-renders\n  const Row = useCallback(\n    ({ index, style }: ListChildComponentProps) => {\n      if (!data || index >= data.length) return null;\n      return renderRow({ index, style, data: data[index] });\n    },\n    [data, renderRow]\n  );\n\n  // If loading, return a loading message\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Loading...\n        </Typography>\n      </Box>\n    );\n  }\n\n  // If no data, return an empty message\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyMessage}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ height, width, ...sx }}>\n      <FixedSizeList\n        height={height}\n        width={width}\n        itemCount={data.length}\n        itemSize={itemSize}\n        itemData={data}\n      >\n        {Row}\n      </FixedSizeList>\n    </Box>\n  );\n}\n\nexport default React.memo(VirtualizedList) as <T>(props: VirtualizedListProps<T>) => React.ReactElement;\n","import React, { useState, MouseEvent } from 'react';\nimport {\n  Box,\n  Tabs,\n  Tab,\n  Typography,\n  Divider,\n  useTheme,\n  useMediaQuery,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n  MoreVert as MoreVertIcon,\n  Fullscreen as FullscreenIcon,\n  FullscreenExit as FullscreenExitIcon,\n  Refresh as RefreshIcon,\n  Download as DownloadIcon,\n  Info as InfoIcon\n} from '@mui/icons-material';\nimport { TabPanelProps, Tab as TabType } from '../../types/tabPanel';\n\n// Styled components\nconst StyledTabPanel = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(3),\n  height: '100%',\n  overflowY: 'auto'\n}));\n\nconst StyledTabs = styled(Tabs)(({ theme }) => ({\n  borderBottom: `1px solid ${theme.palette.divider}`,\n  '& .MuiTabs-indicator': {\n    backgroundColor: theme.palette.primary.main,\n    height: 3\n  }\n}));\n\nconst StyledTab = styled(Tab)(({ theme }) => ({\n  textTransform: 'none',\n  fontWeight: theme.typography.fontWeightRegular,\n  fontSize: theme.typography.pxToRem(15),\n  marginRight: theme.spacing(1),\n  '&.Mui-selected': {\n    fontWeight: theme.typography.fontWeightMedium\n  }\n}));\n\nconst TabActions = styled(Box)(({ theme }) => ({\n  marginLeft: 'auto',\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1)\n}));\n\nconst TabPanelHeader = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  marginBottom: theme.spacing(3)\n}));\n\n/**\n * TabPanel component - A reusable tab panel system for organizing dashboard content\n */\nconst TabPanel: React.FC<TabPanelProps> = ({\n  tabs = [],\n  defaultTab,\n  onTabChange = () => {},\n  onRefresh = () => {},\n  onExport = () => {},\n  onFullscreen = () => {},\n  isFullscreen = false,\n  title = '',\n  subTitle = '',\n  helpText = '',\n  showControls = true,\n  sx\n}) => {\n  const initialTab = defaultTab || (tabs.length > 0 ? tabs[0].id : '');\n  const [selectedTab, setSelectedTab] = useState<string>(initialTab);\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // Handle tab change\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: string): void => {\n    setSelectedTab(newValue);\n    onTabChange(newValue);\n  };\n\n  // Handle menu open\n  const handleMenuClick = (event: MouseEvent<HTMLButtonElement>): void => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  // Handle menu close\n  const handleMenuClose = (): void => {\n    setAnchorEl(null);\n  };\n\n  // Get current tab content\n  const getCurrentTabContent = (): React.ReactNode => {\n    const currentTab = tabs.find(tab => tab.id === selectedTab);\n    return currentTab ? currentTab.content : null;\n  };\n\n  // Get current tab\n  const getCurrentTab = (): TabType | undefined => {\n    return tabs.find(tab => tab.id === selectedTab);\n  };\n\n  // Render tab controls for mobile\n  const renderMobileControls = (): React.ReactNode => (\n    <>\n      <IconButton\n        aria-label=\"more\"\n        aria-controls=\"tab-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleMenuClick}\n        size=\"small\"\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <Menu\n        id=\"tab-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem onClick={() => { onRefresh(); handleMenuClose(); }}>\n          Refresh\n        </MenuItem>\n        <MenuItem onClick={() => { onExport(); handleMenuClose(); }}>\n          Export\n        </MenuItem>\n        <MenuItem onClick={() => { onFullscreen(); handleMenuClose(); }}>\n          {isFullscreen ? 'Exit Fullscreen' : 'Fullscreen'}\n        </MenuItem>\n      </Menu>\n    </>\n  );\n\n  // Render tab controls for desktop\n  const renderDesktopControls = (): React.ReactNode => (\n    <>\n      <Tooltip title=\"Refresh data\">\n        <IconButton onClick={onRefresh} size=\"small\">\n          <RefreshIcon />\n        </IconButton>\n      </Tooltip>\n      <Tooltip title=\"Export data\">\n        <IconButton onClick={onExport} size=\"small\">\n          <DownloadIcon />\n        </IconButton>\n      </Tooltip>\n      <Tooltip title={isFullscreen ? 'Exit fullscreen' : 'Fullscreen'}>\n        <IconButton onClick={onFullscreen} size=\"small\">\n          {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n        </IconButton>\n      </Tooltip>\n      {helpText && (\n        <Tooltip title={helpText}>\n          <IconButton size=\"small\">\n            <InfoIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </>\n  );\n\n  return (\n    <Box sx={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column', ...sx }}>\n      {title && (\n        <TabPanelHeader>\n          <Box>\n            <Typography variant=\"h5\" component=\"h2\">\n              {title}\n            </Typography>\n            {subTitle && (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {subTitle}\n              </Typography>\n            )}\n          </Box>\n          {showControls && (\n            <TabActions>\n              {isMobile ? renderMobileControls() : renderDesktopControls()}\n            </TabActions>\n          )}\n        </TabPanelHeader>\n      )}\n\n      <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n        <StyledTabs\n          value={selectedTab}\n          onChange={handleTabChange}\n          aria-label=\"dashboard tabs\"\n          variant={isMobile ? 'scrollable' : 'standard'}\n          scrollButtons={isMobile ? 'auto' : 'auto'}\n          allowScrollButtonsMobile\n          sx={{ flexGrow: 1 }}\n        >\n          {tabs.map((tab) => (\n            <StyledTab\n              key={tab.id}\n              label={tab.label}\n              value={tab.id}\n              icon={tab.icon && (typeof tab.icon === 'string' || React.isValidElement(tab.icon)) ? tab.icon : undefined}\n              iconPosition=\"start\"\n              disabled={tab.disabled}\n            />\n          ))}\n        </StyledTabs>\n\n        {!title && showControls && (\n          <TabActions>\n            {isMobile ? renderMobileControls() : renderDesktopControls()}\n          </TabActions>\n        )}\n      </Box>\n\n      <StyledTabPanel>\n        {getCurrentTabContent()}\n      </StyledTabPanel>\n    </Box>\n  );\n};\n\nexport default TabPanel;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  Switch,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  Grid,\n  Slider,\n  Tabs,\n  Tab,\n  Tooltip,\n  IconButton,\n  useTheme,\n  SelectChangeEvent\n} from '@mui/material';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport UpdateIcon from '@mui/icons-material/Update';\nimport { TwitterPicker } from 'react-color';\nimport dashboardService from '../../services/api/dashboardService';\nimport { CommonProps } from '../../types/common';\nimport { DashboardPreferences as DashboardPreferencesType } from '../../types/dashboard';\n\ninterface ChartType {\n  label: string;\n  value: string;\n  icon: React.ReactNode;\n}\n\ninterface ColorScheme {\n  primary: string;\n  secondary: string;\n  success: string;\n  error: string;\n  warning: string;\n  info: string;\n}\n\ninterface DashboardPreferencesProps extends CommonProps {\n  onSave?: (preferences: any) => void;\n  onCancel?: () => void;\n  initialPreferences?: any;\n  loading?: boolean;\n}\n\nconst chartTypes: ChartType[] = [\n  { label: 'Line Chart', value: 'line', icon: <TimelineIcon color=\"primary\" /> },\n  { label: 'Bar Chart', value: 'bar', icon: <FormatListBulletedIcon color=\"primary\" /> },\n  { label: 'Area Chart', value: 'area', icon: <TimelineIcon color=\"primary\" /> },\n  { label: 'Scatter Plot', value: 'scatter', icon: <TimelineIcon color=\"primary\" /> }\n];\n\n/**\n * Dashboard Preferences component\n * Allows users to customize their dashboard experience\n */\nconst DashboardPreferences: React.FC<DashboardPreferencesProps> = ({\n  onSave,\n  onCancel,\n  initialPreferences,\n  loading = false,\n  sx\n}) => {\n  const theme = useTheme();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [preferences, setPreferences] = useState<DashboardPreferencesType>({\n    colorScheme: {\n      baseTheme: 'light',\n      colorMode: 'standard',\n      primaryColor: theme.palette.primary.main,\n      secondaryColor: theme.palette.secondary.main,\n      positiveColor: theme.palette.success.main,\n      negativeColor: theme.palette.error.main,\n      neutralColor: theme.palette.info.main,\n      contrastLevel: 1\n    },\n    informationDensity: 'medium',\n    preferredChartTypes: {\n      revenue: 'line',\n      registrations: 'bar',\n      topGames: 'pie',\n      transactions: 'table'\n    }\n  });\n\n  // Load initial preferences\n  useEffect(() => {\n    if (initialPreferences) {\n      setPreferences(prevPreferences => ({\n        ...prevPreferences,\n        ...initialPreferences\n      }));\n    }\n  }, [initialPreferences]);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number): void => {\n    setActiveTab(newValue);\n  };\n\n  const handleSwitchChange = (section: string, name: string) => (event: React.ChangeEvent<HTMLInputElement>): void => {\n    if (section === 'colorScheme') {\n      setPreferences({\n        ...preferences,\n        colorScheme: {\n          ...preferences.colorScheme,\n          [name]: event.target.checked ? 'high-contrast' : 'standard'\n        }\n      });\n    } else {\n      // For other sections\n      setPreferences({\n        ...preferences,\n        [section as keyof DashboardPreferencesType]: event.target.checked ? 'high' : 'medium'\n      });\n    }\n  };\n\n  const handleSelectChange = (section: string, name: string) => (event: SelectChangeEvent<string>): void => {\n    if (section === 'colorScheme') {\n      setPreferences({\n        ...preferences,\n        colorScheme: {\n          ...preferences.colorScheme,\n          [name]: event.target.value\n        }\n      });\n    } else if (section === 'preferredChartTypes') {\n      setPreferences({\n        ...preferences,\n        preferredChartTypes: {\n          ...preferences.preferredChartTypes,\n          [name]: event.target.value\n        }\n      });\n    } else {\n      // For informationDensity\n      setPreferences({\n        ...preferences,\n        informationDensity: event.target.value as 'low' | 'medium' | 'high'\n      });\n    }\n  };\n\n  const handleSliderChange = (section: string, name: string) => (event: Event, newValue: number | number[]): void => {\n    if (section === 'colorScheme') {\n      setPreferences({\n        ...preferences,\n        colorScheme: {\n          ...preferences.colorScheme,\n          [name]: newValue\n        }\n      });\n    }\n  };\n\n  const handleColorChange = (color: string, colorName: string): void => {\n    setPreferences({\n      ...preferences,\n      colorScheme: {\n        ...preferences.colorScheme,\n        [colorName]: color\n      }\n    });\n  };\n\n  const handleSave = async (): Promise<void> => {\n    if (onSave) {\n      onSave(preferences);\n    } else {\n      try {\n        await dashboardService.saveUserPreferences(preferences);\n        // Show success message or notification\n      } catch (error) {\n        console.error('Error saving preferences:', error);\n        // Show error message\n      }\n    }\n  };\n\n  return (\n    <Paper elevation={3} sx={{ p: 3, ...sx }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Dashboard Preferences\n      </Typography>\n      <Divider sx={{ mb: 3 }} />\n\n      <Tabs\n        value={activeTab}\n        onChange={handleTabChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        variant=\"fullWidth\"\n        sx={{ mb: 3 }}\n      >\n        <Tab label=\"Appearance\" />\n        <Tab label=\"Charts\" />\n      </Tabs>\n\n      {/* Appearance Tab */}\n      {activeTab === 0 && (\n        <Box>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth sx={{ mb: 3 }}>\n                <InputLabel id=\"theme-select-label\">Theme</InputLabel>\n                <Select\n                  labelId=\"theme-select-label\"\n                  id=\"theme-select\"\n                  value={preferences.colorScheme.baseTheme}\n                  label=\"Theme\"\n                  onChange={handleSelectChange('colorScheme', 'baseTheme')}\n                >\n                  <MenuItem value=\"light\">Light</MenuItem>\n                  <MenuItem value=\"dark\">Dark</MenuItem>\n                  <MenuItem value=\"system\">System Default</MenuItem>\n                </Select>\n              </FormControl>\n\n              <FormControl fullWidth sx={{ mb: 3 }}>\n                <InputLabel id=\"density-select-label\">Information Density</InputLabel>\n                <Select\n                  labelId=\"density-select-label\"\n                  id=\"density-select\"\n                  value={preferences.informationDensity}\n                  label=\"Information Density\"\n                  onChange={handleSelectChange('informationDensity', '')}\n                >\n                  <MenuItem value=\"low\">Low</MenuItem>\n                  <MenuItem value=\"medium\">Medium</MenuItem>\n                  <MenuItem value=\"high\">High</MenuItem>\n                </Select>\n              </FormControl>\n\n              <FormGroup>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={preferences.colorScheme.colorMode === 'high-contrast'}\n                      onChange={handleSwitchChange('colorScheme', 'colorMode')}\n                    />\n                  }\n                  label=\"High contrast mode\"\n                />\n              </FormGroup>\n\n              <Typography gutterBottom>\n                Contrast Level\n              </Typography>\n              <Box sx={{ px: 2 }}>\n                <Slider\n                  value={preferences.colorScheme.contrastLevel}\n                  onChange={handleSliderChange('colorScheme', 'contrastLevel')}\n                  step={0.1}\n                  marks={[\n                    { value: 0.5, label: 'Low' },\n                    { value: 1, label: 'Medium' },\n                    { value: 1.5, label: 'High' }\n                  ]}\n                  min={0.5}\n                  max={1.5}\n                  valueLabelDisplay=\"auto\"\n                />\n              </Box>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Color Scheme\n              </Typography>\n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"body2\" gutterBottom>\n                  Primary Color\n                </Typography>\n                <TwitterPicker\n                  color={preferences.colorScheme.primaryColor}\n                  onChangeComplete={(color) => handleColorChange(color.hex, 'primaryColor')}\n                  triangle=\"hide\"\n                />\n              </Box>\n              <Box>\n                <Typography variant=\"body2\" gutterBottom>\n                  Secondary Color\n                </Typography>\n                <TwitterPicker\n                  color={preferences.colorScheme.secondaryColor}\n                  onChangeComplete={(color) => handleColorChange(color.hex, 'secondaryColor')}\n                  triangle=\"hide\"\n                />\n              </Box>\n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"body2\" gutterBottom>\n                  Positive Color\n                </Typography>\n                <TwitterPicker\n                  color={preferences.colorScheme.positiveColor}\n                  onChangeComplete={(color) => handleColorChange(color.hex, 'positiveColor')}\n                  triangle=\"hide\"\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        </Box>\n      )}\n\n      {/* Charts Tab */}\n      {activeTab === 1 && (\n        <Box>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth sx={{ mb: 3 }}>\n                <InputLabel id=\"revenue-chart-type-select-label\">Revenue Chart Type</InputLabel>\n                <Select\n                  labelId=\"revenue-chart-type-select-label\"\n                  id=\"revenue-chart-type-select\"\n                  value={preferences.preferredChartTypes.revenue}\n                  label=\"Revenue Chart Type\"\n                  onChange={handleSelectChange('preferredChartTypes', 'revenue')}\n                >\n                  {chartTypes.map((type) => (\n                    <MenuItem key={type.value} value={type.value}>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        {type.icon}\n                        <Typography sx={{ ml: 1 }}>{type.label}</Typography>\n                      </Box>\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <FormControl fullWidth sx={{ mb: 3 }}>\n                <InputLabel id=\"registrations-chart-type-select-label\">Registrations Chart Type</InputLabel>\n                <Select\n                  labelId=\"registrations-chart-type-select-label\"\n                  id=\"registrations-chart-type-select\"\n                  value={preferences.preferredChartTypes.registrations}\n                  label=\"Registrations Chart Type\"\n                  onChange={handleSelectChange('preferredChartTypes', 'registrations')}\n                >\n                  {chartTypes.map((type) => (\n                    <MenuItem key={type.value} value={type.value}>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        {type.icon}\n                        <Typography sx={{ ml: 1 }}>{type.label}</Typography>\n                      </Box>\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth sx={{ mb: 3 }}>\n                <InputLabel id=\"topGames-chart-type-select-label\">Top Games Chart Type</InputLabel>\n                <Select\n                  labelId=\"topGames-chart-type-select-label\"\n                  id=\"topGames-chart-type-select\"\n                  value={preferences.preferredChartTypes.topGames}\n                  label=\"Top Games Chart Type\"\n                  onChange={handleSelectChange('preferredChartTypes', 'topGames')}\n                >\n                  {chartTypes.map((type) => (\n                    <MenuItem key={type.value} value={type.value}>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        {type.icon}\n                        <Typography sx={{ ml: 1 }}>{type.label}</Typography>\n                      </Box>\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <FormControl fullWidth sx={{ mb: 3 }}>\n                <InputLabel id=\"transactions-chart-type-select-label\">Transactions Display Type</InputLabel>\n                <Select\n                  labelId=\"transactions-chart-type-select-label\"\n                  id=\"transactions-chart-type-select\"\n                  value={preferences.preferredChartTypes.transactions}\n                  label=\"Transactions Display Type\"\n                  onChange={handleSelectChange('preferredChartTypes', 'transactions')}\n                >\n                  <MenuItem value=\"table\">Table</MenuItem>\n                  <MenuItem value=\"line\">Line Chart</MenuItem>\n                  <MenuItem value=\"bar\">Bar Chart</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </Box>\n      )}\n\n\n\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 4, gap: 2 }}>\n        <Button\n          variant=\"outlined\"\n          onClick={onCancel}\n          disabled={loading}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSave}\n          disabled={loading}\n          startIcon={loading ? <UpdateIcon /> : null}\n        >\n          {loading ? 'Saving...' : 'Save Preferences'}\n        </Button>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default DashboardPreferences;\n","import React, { memo, useMemo, useEffect } from 'react';\nimport { Box, CircularProgress, Typography, useTheme, useMediaQuery } from '@mui/material';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Line, ComposedChart } from 'recharts';\nimport { formatDate } from '../../utils/formatters';\nimport { RegistrationData } from '../../types/redux';\nimport { useDispatch } from 'react-redux';\nimport { fetchRegistrationsChart } from '../../store/slices/dashboardSlice';\n\ninterface PlayerRegistrationsChartProps {\n  data: RegistrationData[];\n  isLoading?: boolean;\n  height?: number;\n  showFTD?: boolean;\n}\n\n/**\n * Custom tooltip component for the chart\n */\nconst CustomTooltip: React.FC<any> = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return (\n      <Box\n        sx={{\n          bgcolor: 'background.paper',\n          p: 1.5,\n          border: '1px solid',\n          borderColor: 'divider',\n          borderRadius: 1,\n          boxShadow: 1,\n        }}\n      >\n        <Typography variant=\"subtitle2\" gutterBottom>\n          {label}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Registrations: {payload[0].value}\n        </Typography>\n        {payload.length > 1 && (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            First Time Deposits: {payload[1].value}\n          </Typography>\n        )}\n      </Box>\n    );\n  }\n\n  return null;\n};\n\n/**\n * Player Registrations Chart component\n * Displays a bar chart of player registrations over time\n */\nconst PlayerRegistrationsChart: React.FC<PlayerRegistrationsChartProps> = ({\n  data,\n  isLoading = false,\n  height = 300,\n  showFTD = true\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const dispatch = useDispatch();\n\n  // Fetch registrations chart data if not provided\n  useEffect(() => {\n    if (!data || data.length === 0) {\n      if (!isLoading) {\n        dispatch(fetchRegistrationsChart() as any);\n      }\n    }\n  }, [dispatch, data, isLoading]);\n\n  // Memoize the chart data to prevent unnecessary recalculations\n  const chartData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.map((item) => ({\n      date: formatDate(item.date),\n      registrations: item.registrations,\n      ftd: item.ftd\n    }));\n  }, [data]);\n\n  if (isLoading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          No registration data available\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ width: '100%', height }}>\n      <ResponsiveContainer>\n        <ComposedChart\n          data={chartData}\n          margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 50\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"date\"\n            angle={-45}\n            textAnchor=\"end\"\n            height={60}\n            tick={{ fontSize: 12 }}\n          />\n          <YAxis\n            yAxisId=\"left\"\n            tick={{ fontSize: 12 }}\n          />\n          {showFTD && (\n            <YAxis\n              yAxisId=\"right\"\n              orientation=\"right\"\n              tick={{ fontSize: 12 }}\n            />\n          )}\n          <Tooltip content={<CustomTooltip />} />\n          <Legend />\n          <Bar\n            yAxisId=\"left\"\n            dataKey=\"registrations\"\n            name=\"Registrations\"\n            fill={theme.palette.primary.main}\n            radius={[4, 4, 0, 0]}\n          />\n          {showFTD && (\n            <Line\n              yAxisId=\"right\"\n              type=\"monotone\"\n              dataKey=\"ftd\"\n              name=\"First Time Deposits\"\n              stroke={theme.palette.secondary.main}\n              strokeWidth={2}\n              dot={{ r: 4 }}\n              activeDot={{ r: 6 }}\n            />\n          )}\n        </ComposedChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(PlayerRegistrationsChart);\n","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  CircularProgress,\n  useTheme,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  IconButton,\n  Tooltip,\n  Button,\n  Paper,\n  Switch,\n  FormControlLabel,\n  Stack,\n  TextField,\n  InputAdornment,\n  SelectChangeEvent\n} from '@mui/material';\nimport {\n  Radar,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  ResponsiveContainer,\n  Legend\n} from 'recharts';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport FileDownloadIcon from '@mui/icons-material/FileDownload';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { formatPercentage, formatCurrency, formatNumber } from '../../utils/formatters';\nimport {\n  MultiDimensionalRadarChartProps,\n  Metric,\n  Entity,\n  DataItem,\n  RadarDataPoint,\n  LegendProps\n} from '../../types/multiDimensionalRadarChart';\n\n/**\n * MultiDimensionalRadarChart component\n *\n * Visualizes multi-dimensional data in a radar/spider chart format\n * Great for comparing entities across multiple dimensions simultaneously\n *\n * Features:\n * - Multiple entity comparison\n * - Custom metric selection\n * - Interactive tooltips with context\n * - Responsive design\n * - Accessibility support\n * - High-contrast mode\n */\nconst MultiDimensionalRadarChart: React.FC<MultiDimensionalRadarChartProps> = ({\n  data = [],\n  title = 'Multi-Dimensional Analysis',\n  isLoading = false,\n  metrics = [],\n  entities = [],\n  onRefresh = () => {},\n  onExport = () => {}\n}) => {\n  const theme = useTheme();\n  const [selectedMetrics, setSelectedMetrics] = useState<string[]>([]);\n  const [selectedEntities, setSelectedEntities] = useState<string[]>([]);\n  const [showLabels, setShowLabels] = useState<boolean>(true);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [filteredData, setFilteredData] = useState<RadarDataPoint[]>([]);\n  const [normalizeData, setNormalizeData] = useState<boolean>(true);\n  const [highContrastMode, setHighContrastMode] = useState<boolean>(false);\n\n  // Initialize with default selections\n  useEffect(() => {\n    if (metrics.length > 0 && selectedMetrics.length === 0) {\n      // Default to showing first 5 metrics or all if less than 5\n      setSelectedMetrics(metrics.slice(0, Math.min(5, metrics.length)).map(m => m.id));\n    }\n\n    if (entities.length > 0 && selectedEntities.length === 0) {\n      // Default to showing first 3 entities or all if less than 3\n      setSelectedEntities(entities.slice(0, Math.min(3, entities.length)).map(e => e.id));\n    }\n  }, [metrics, entities, selectedMetrics.length, selectedEntities.length]);\n\n  // Process data for the chart whenever selections change\n  useEffect(() => {\n    if (!data || data.length === 0) {\n      setFilteredData([]);\n      return;\n    }\n\n    // Filter entities by search term\n    let filteredEntities = entities;\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filteredEntities = entities.filter(entity =>\n        entity.name?.toLowerCase().includes(term) ||\n        entity.category?.toLowerCase().includes(term) ||\n        entity.id?.toString().toLowerCase().includes(term)\n      );\n    }\n\n    // Filter data by selected entities\n    const entityFilteredData = data.filter(item =>\n      selectedEntities.includes(item.entityId)\n    );\n\n    // Transform data for radar chart\n    // For a radar chart, we need data in the format:\n    // [{ subject: 'Metric A', Entity1: 20, Entity2: 30, ... }, ...]\n    const radarData = selectedMetrics.map(metricId => {\n      const metric = metrics.find(m => m.id === metricId);\n      if (!metric) return null;\n\n      const metricObj: RadarDataPoint = {\n        subject: metric.label\n      };\n\n      // Find min/max values for this metric (for normalization)\n      const metricValues = data.map(item =>\n        item.values && item.values[metricId] !== undefined ? item.values[metricId] : null\n      ).filter(val => val !== null && val !== undefined) as number[];\n\n      const minValue = Math.min(...metricValues);\n      const maxValue = Math.max(...metricValues);\n      const range = maxValue - minValue;\n\n      // Add values for each selected entity\n      selectedEntities.forEach(entityId => {\n        const entity = entities.find(e => e.id === entityId);\n        if (!entity) return;\n\n        const entityData = data.find(item => item.entityId === entityId);\n        let value: number | null = null;\n\n        if (entityData && entityData.values && entityData.values[metricId] !== undefined) {\n          value = entityData.values[metricId];\n\n          // Normalize if needed\n          if (normalizeData && range > 0) {\n            value = ((value - minValue) / range) * 100;\n          }\n        }\n\n        metricObj[entity.name] = value;\n      });\n\n      return metricObj;\n    }).filter(Boolean) as RadarDataPoint[];\n\n    setFilteredData(radarData);\n  }, [data, selectedMetrics, selectedEntities, normalizeData, searchTerm, metrics, entities]);\n\n  // Handle metric selection change\n  const handleMetricChange = (event: SelectChangeEvent<string[]>): void => {\n    const value = event.target.value;\n    setSelectedMetrics(typeof value === 'string' ? [value] : value);\n  };\n\n  // Handle entity selection change\n  const handleEntityChange = (event: SelectChangeEvent<string[]>): void => {\n    const value = event.target.value;\n    setSelectedEntities(typeof value === 'string' ? [value] : value);\n  };\n\n  // Generate color for each entity\n  const getEntityColor = (entityName: string, index: number): string => {\n    if (highContrastMode) {\n      const highContrastColors = [\n        '#FF0000', // Red\n        '#00FF00', // Green\n        '#0000FF', // Blue\n        '#FFFF00', // Yellow\n        '#FF00FF', // Magenta\n        '#00FFFF', // Cyan\n        '#000000', // Black\n        '#FFFFFF'  // White\n      ];\n      return highContrastColors[index % highContrastColors.length];\n    }\n\n    const colorPalettes = [\n      theme.palette.primary.main,\n      theme.palette.secondary.main,\n      theme.palette.success.main,\n      theme.palette.info.main,\n      theme.palette.warning.main,\n      theme.palette.error.main,\n      theme.palette.primary.light,\n      theme.palette.secondary.light,\n      theme.palette.primary.dark,\n      theme.palette.secondary.dark,\n    ];\n\n    return colorPalettes[index % colorPalettes.length];\n  };\n\n  // Format value for display\n  const formatValue = (value: number, metricId: string): string => {\n    if (value === null || value === undefined) return '-';\n\n    const metric = metrics.find(m => m.id === metricId);\n    if (!metric) return value.toString();\n\n    switch (metric.format) {\n      case 'currency':\n        return formatCurrency(value);\n      case 'percentage':\n        return formatPercentage(value);\n      case 'number':\n        return formatNumber(value);\n      default:\n        return value.toString();\n    }\n  };\n\n  // Custom tooltip formatter\n  const tooltipFormatter = (value: number, name: string, props: any): [string, string] => {\n    const metricId = selectedMetrics.find(m => {\n      const metric = metrics.find(metric => metric.id === m);\n      return metric && metric.label === props.payload.subject;\n    });\n\n    if (!metricId) return [value.toString(), name];\n\n    // If normalized, show both normalized and original value\n    if (normalizeData) {\n      const metric = metrics.find(m => m.id === metricId);\n      const entityId = entities.find(e => e.name === name)?.id;\n\n      if (entityId && metric) {\n        const entityData = data.find(item => item.entityId === entityId);\n        if (entityData && entityData.values && entityData.values[metricId] !== undefined) {\n          const originalValue = entityData.values[metricId];\n          return [\n            `${formatValue(originalValue, metricId)} (${value.toFixed(0)}%)`,\n            name\n          ];\n        }\n      }\n    }\n\n    return [formatValue(value, metricId), name];\n  };\n\n  // Create entity legend\n  const renderEntityLegend = (props: LegendProps): React.ReactNode => {\n    const { payload } = props;\n\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', mt: 2 }}>\n        {payload.map((entry, index) => (\n          <Box\n            key={`entity-legend-${index}`}\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              mx: 1,\n              my: 0.5\n            }}\n          >\n            <Box\n              sx={{\n                width: 10,\n                height: 10,\n                backgroundColor: entry.color,\n                mr: 1\n              }}\n            />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {entry.value}\n            </Typography>\n          </Box>\n        ))}\n      </Box>\n    );\n  };\n\n  // Create controls toolbar\n  const renderControls = (): React.ReactNode => {\n    return (\n      <Box sx={{ mb: 3 }}>\n        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} sx={{ mb: 2 }}>\n          <FormControl size=\"small\" sx={{ minWidth: 200, flexGrow: 1 }}>\n            <InputLabel id=\"metrics-select-label\">Metrics</InputLabel>\n            <Select\n              labelId=\"metrics-select-label\"\n              multiple\n              value={selectedMetrics}\n              onChange={handleMetricChange}\n              label=\"Metrics\"\n              renderValue={(selected) => `${selected.length} metrics selected`}\n            >\n              {metrics.map((metric) => (\n                <MenuItem key={metric.id} value={metric.id}>\n                  {metric.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          <FormControl size=\"small\" sx={{ minWidth: 200, flexGrow: 1 }}>\n            <InputLabel id=\"entities-select-label\">Entities</InputLabel>\n            <Select\n              labelId=\"entities-select-label\"\n              multiple\n              value={selectedEntities}\n              onChange={handleEntityChange}\n              label=\"Entities\"\n              renderValue={(selected) => `${selected.length} entities selected`}\n            >\n              {entities.map((entity) => (\n                <MenuItem key={entity.id} value={entity.id}>\n                  {entity.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          <TextField\n            size=\"small\"\n            label=\"Search Entities\"\n            value={searchTerm}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon fontSize=\"small\" />\n                </InputAdornment>\n              ),\n            }}\n            sx={{ flexGrow: { xs: 1, md: 0 }, width: { xs: '100%', md: 200 } }}\n          />\n        </Stack>\n\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={normalizeData}\n                onChange={(e) => setNormalizeData(e.target.checked)}\n                size=\"small\"\n              />\n            }\n            label=\"Normalize data\"\n          />\n\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showLabels}\n                onChange={(e) => setShowLabels(e.target.checked)}\n                size=\"small\"\n              />\n            }\n            label=\"Show labels\"\n          />\n\n          <FormControlLabel\n            control={\n              <Switch\n                checked={highContrastMode}\n                onChange={(e) => setHighContrastMode(e.target.checked)}\n                size=\"small\"\n              />\n            }\n            label=\"High contrast\"\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  // Render loading state\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent>\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 300 }}>\n            <CircularProgress />\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // If no data or no metrics/entities selected, show a message\n  if (filteredData.length === 0 || selectedMetrics.length === 0 || selectedEntities.length === 0) {\n    return (\n      <Card>\n        <CardContent>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\" component=\"div\">\n              {title}\n            </Typography>\n\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              <Tooltip title=\"Refresh data\">\n                <IconButton size=\"small\" onClick={onRefresh}>\n                  <RefreshIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          </Box>\n\n          {renderControls()}\n\n          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: 300 }}>\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n              No data to display\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {selectedMetrics.length === 0 ? 'Please select metrics to visualize.' :\n                selectedEntities.length === 0 ? 'Please select entities to compare.' :\n                'No data matches the current selection.'}\n            </Typography>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card elevation={1}>\n      <CardContent>\n        {/* Header with title and controls */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Typography variant=\"h6\" component=\"div\">\n              {title}\n            </Typography>\n            <Tooltip title=\"Compare multiple entities across various metrics in a radar chart visualization\">\n              <IconButton size=\"small\" sx={{ ml: 0.5 }}>\n                <InfoOutlinedIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Tooltip title=\"Refresh data\">\n              <IconButton size=\"small\" onClick={onRefresh}>\n                <RefreshIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n\n            <Tooltip title=\"Export chart\">\n              <IconButton size=\"small\" onClick={onExport}>\n                <FileDownloadIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n\n        {/* Configuration controls */}\n        {renderControls()}\n\n        {/* Radar chart */}\n        <Box sx={{ height: 400 }}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <RadarChart\n              cx=\"50%\"\n              cy=\"50%\"\n              outerRadius=\"80%\"\n              data={filteredData}\n              margin={{ top: 10, right: 30, bottom: 30, left: 30 }}\n            >\n              <PolarGrid stroke={theme.palette.divider} />\n              <PolarAngleAxis\n                dataKey=\"subject\"\n                tick={{\n                  fill: theme.palette.text.primary,\n                  fontSize: 12\n                }}\n                tickLine={false}\n                axisLine={{ stroke: theme.palette.divider }}\n              />\n              <PolarRadiusAxis\n                angle={30}\n                domain={normalizeData ? [0, 100] as [number, number] : 'auto' as any}\n                tick={{\n                  fill: theme.palette.text.secondary,\n                  fontSize: 10\n                }}\n                tickCount={5}\n                axisLine={false}\n                tickLine={false}\n              />\n\n              {/* Create radar lines for each selected entity */}\n              {selectedEntities.map((entityId, index) => {\n                const entity = entities.find(e => e.id === entityId);\n                if (!entity) return null;\n\n                const entityColor = getEntityColor(entity.name, index);\n\n                return (\n                  <Radar\n                    key={entityId}\n                    name={entity.name}\n                    dataKey={entity.name}\n                    stroke={entityColor}\n                    fill={entityColor}\n                    fillOpacity={0.2}\n                    dot\n                    activeDot={{ r: 5 }}\n                    isAnimationActive\n                  />\n                );\n              })}\n\n              {/* Using a custom legend component outside of recharts to avoid type errors */}\n              <Legend content={() => null} />\n            </RadarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        {/* Context information */}\n        <Paper\n          variant=\"outlined\"\n          sx={{ mt: 2, p: 1, backgroundColor: theme.palette.background.default }}\n          elevation={0}\n        >\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {normalizeData ?\n              'Data is normalized to a 0-100 scale for better comparison.' :\n              'Data is displayed in original units. Consider normalization for better comparison across metrics.'}\n          </Typography>\n        </Paper>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MultiDimensionalRadarChart;","import React from 'react';\nimport { Box, Tooltip, Typography, useTheme } from '@mui/material';\nimport { alpha } from '@mui/material/styles';\n\n// Type definitions\ninterface DataPoint {\n  [key: string]: any;\n  label?: string;\n}\n\ninterface MicroSparklineProps {\n  data?: DataPoint[];\n  width?: number;\n  height?: number;\n  color?: string | null;\n  showArea?: boolean;\n  tooltipFormat?: (value: number) => string;\n  accessibilityLabel?: string;\n  valueKey?: string;\n}\n\ninterface MicroBarChartProps {\n  data?: DataPoint[];\n  width?: number;\n  height?: number;\n  color?: string | null;\n  tooltipFormat?: (value: number) => string;\n  accessibilityLabel?: string;\n  valueKey?: string;\n}\n\ninterface MicroBulletChartProps {\n  actual: number;\n  target: number;\n  comparative?: number | null;\n  width?: number;\n  height?: number;\n  actualColor?: string | null;\n  targetColor?: string | null;\n  comparativeColor?: string | null;\n  tooltipFormat?: (value: number) => string;\n  accessibilityLabel?: string;\n}\n\n/**\n * MicroSparkline component to show a small inline trend line\n * Used for compact visualizations within tables and cards\n */\nconst MicroSparkline: React.FC<MicroSparklineProps> = ({\n  data = [],\n  width = 60,\n  height = 20,\n  color = null,\n  showArea = true,\n  tooltipFormat = value => value.toLocaleString(),\n  accessibilityLabel = \"Trend data\",\n  valueKey = 'value'\n}) => {\n  const theme = useTheme();\n\n  // Get chart color - either from props or based on trend\n  const getColor = (): string => {\n    if (color) return color;\n\n    if (data.length > 1) {\n      const firstValue = data[0][valueKey];\n      const lastValue = data[data.length - 1][valueKey];\n\n      if (lastValue > firstValue) {\n        return theme.palette.success.main;\n      } else if (lastValue < firstValue) {\n        return theme.palette.error.main;\n      }\n    }\n\n    return theme.palette.primary.main;\n  };\n\n  // If no data, render an empty box\n  if (!data || data.length === 0) {\n    return <Box sx={{ width, height, display: 'inline-block' }} />;\n  }\n\n  // Calculate the visualization parameters\n  const values = data.map(d => d[valueKey]);\n  const maxValue = Math.max(...values);\n  const minValue = Math.min(...values);\n  const range = maxValue - minValue;\n  const chartColor = getColor();\n\n  // Convert data to path coordinates\n  const getX = (index: number): number => index * (width / (data.length - 1));\n  const getY = (value: number): number => {\n    return range === 0\n      ? height / 2\n      : height - ((value - minValue) / range) * height;\n  };\n\n  // Generate SVG path for the sparkline\n  const generateLinePath = (): string => {\n    return data.map((d, i) => {\n      const x = getX(i);\n      const y = getY(d[valueKey]);\n      return `${i === 0 ? 'M' : 'L'}${x},${y}`;\n    }).join(' ');\n  };\n\n  // Generate SVG path for the area under the sparkline\n  const generateAreaPath = (): string => {\n    const linePath = generateLinePath();\n    const lastX = getX(data.length - 1);\n\n    return `${linePath} L${lastX},${height} L0,${height} Z`;\n  };\n\n  // Generate a summary of the trend for accessibility\n  const trendSummary = (): string => {\n    if (data.length < 2) return `Single value: ${tooltipFormat(data[0][valueKey])}`;\n\n    const firstValue = data[0][valueKey];\n    const lastValue = data[data.length - 1][valueKey];\n    const change = lastValue - firstValue;\n    const percentChange = (change / firstValue) * 100;\n\n    let trendDirection = 'unchanged';\n    if (change > 0) trendDirection = 'increasing';\n    else if (change < 0) trendDirection = 'decreasing';\n\n    return `Trend: ${trendDirection}, from ${tooltipFormat(firstValue)} to ${tooltipFormat(lastValue)}, change of ${percentChange.toFixed(1)}%`;\n  };\n\n  // Render the tooltip content\n  const tooltipContent = (): React.ReactNode => {\n    return (\n      <Box sx={{ p: 1 }}>\n        <Box sx={{ fontSize: 12, fontWeight: 'bold' }}>\n          {accessibilityLabel}\n        </Box>\n        {data.map((point, index) => (\n          <Box key={index} sx={{ fontSize: 11 }}>\n            {point.label || `Point ${index + 1}`}: {tooltipFormat(point[valueKey])}\n          </Box>\n        ))}\n      </Box>\n    );\n  };\n\n  return (\n    <Tooltip title={tooltipContent()} arrow>\n      <Box\n        component=\"span\"\n        sx={{\n          display: 'inline-block',\n          width,\n          height,\n          position: 'relative',\n          verticalAlign: 'middle'\n        }}\n        aria-label={`${accessibilityLabel}: ${trendSummary()}`}\n      >\n        <svg width={width} height={height} style={{ display: 'block' }}>\n          {showArea && (\n            <path\n              d={generateAreaPath()}\n              fill={alpha(chartColor, 0.2)}\n              stroke=\"none\"\n            />\n          )}\n          <path\n            d={generateLinePath()}\n            fill=\"none\"\n            stroke={chartColor}\n            strokeWidth={1.5}\n            strokeLinejoin=\"round\"\n            strokeLinecap=\"round\"\n          />\n          {/* Add dot for the last point */}\n          <circle\n            cx={getX(data.length - 1)}\n            cy={getY(data[data.length - 1][valueKey])}\n            r={2}\n            fill={chartColor}\n          />\n        </svg>\n      </Box>\n    </Tooltip>\n  );\n};\n\n/**\n * MicroBarChart component to show a small inline bar chart\n * Used for compact visualizations within tables and cards\n */\nconst MicroBarChart: React.FC<MicroBarChartProps> = ({\n  data = [],\n  width = 60,\n  height = 20,\n  color = null,\n  tooltipFormat = value => value.toLocaleString(),\n  accessibilityLabel = \"Bar chart data\",\n  valueKey = 'value'\n}) => {\n  const theme = useTheme();\n\n  // Get chart color - either from props or based on values\n  const getColor = (value: number, index: number): string => {\n    if (color) return color;\n\n    // Color by value (higher values are darker)\n    const maxValue = Math.max(...data.map(d => d[valueKey]));\n    const intensity = value / maxValue;\n\n    return alpha(theme.palette.primary.main, 0.4 + (intensity * 0.6));\n  };\n\n  // If no data, render an empty box\n  if (!data || data.length === 0) {\n    return <Box sx={{ width, height, display: 'inline-block' }} />;\n  }\n\n  // Calculate the visualization parameters\n  const values = data.map(d => d[valueKey]);\n  const maxValue = Math.max(...values);\n  const minValue = Math.min(...values);\n  const barWidth = width / data.length - 1;\n\n  // Generate a summary of the data for accessibility\n  const dataSummary = (): string => {\n    const average = values.reduce((sum, val) => sum + val, 0) / values.length;\n\n    return `${data.length} values, average: ${tooltipFormat(average)}, range: ${tooltipFormat(minValue)} to ${tooltipFormat(maxValue)}`;\n  };\n\n  // Render the tooltip content\n  const tooltipContent = (): React.ReactNode => {\n    return (\n      <Box sx={{ p: 1 }}>\n        <Box sx={{ fontSize: 12, fontWeight: 'bold' }}>\n          {accessibilityLabel}\n        </Box>\n        {data.map((point, index) => (\n          <Box key={index} sx={{ fontSize: 11 }}>\n            {point.label || `Item ${index + 1}`}: {tooltipFormat(point[valueKey])}\n          </Box>\n        ))}\n      </Box>\n    );\n  };\n\n  return (\n    <Tooltip title={tooltipContent()} arrow>\n      <Box\n        component=\"span\"\n        sx={{\n          display: 'inline-block',\n          width,\n          height,\n          position: 'relative',\n          verticalAlign: 'middle'\n        }}\n        aria-label={`${accessibilityLabel}: ${dataSummary()}`}\n      >\n        <svg width={width} height={height} style={{ display: 'block' }}>\n          {data.map((d, i) => {\n            const barHeight = (d[valueKey] / maxValue) * height;\n\n            return (\n              <rect\n                key={i}\n                x={i * (barWidth + 1)}\n                y={height - barHeight}\n                width={barWidth}\n                height={barHeight}\n                fill={getColor(d[valueKey], i)}\n                rx={1}\n                ry={1}\n              />\n            );\n          })}\n        </svg>\n      </Box>\n    </Tooltip>\n  );\n};\n\n/**\n * MicroBulletChart component to show target vs actual in a compact visualization\n * Useful for showing progress toward goals in tables and cards\n */\nconst MicroBulletChart: React.FC<MicroBulletChartProps> = ({\n  actual,\n  target,\n  comparative = null,\n  width = 80,\n  height = 16,\n  actualColor = null,\n  targetColor = null,\n  comparativeColor = null,\n  tooltipFormat = value => value.toLocaleString(),\n  accessibilityLabel = \"Progress toward target\"\n}) => {\n  const theme = useTheme();\n\n  // Get colors or use defaults\n  const getActualColor = (): string => {\n    if (actualColor) return actualColor;\n\n    if (actual >= target) {\n      return theme.palette.success.main;\n    } else if (actual >= 0.8 * target) {\n      return theme.palette.warning.main;\n    } else {\n      return theme.palette.error.main;\n    }\n  };\n\n  const getTargetColor = (): string => targetColor || theme.palette.grey[900];\n  const getComparativeColor = (): string => comparativeColor || theme.palette.grey[400];\n\n  // Calculate the percent of target achieved\n  const percentComplete = Math.min(actual / target * 100, 100);\n  const comparativePercent = comparative ? (comparative / target * 100) : null;\n\n  // Generate a summary of the data for accessibility\n  const progressSummary = (): string => {\n    const percentText = `${percentComplete.toFixed(1)}% of target`;\n    let statusText = '';\n\n    if (actual >= target) {\n      statusText = 'Target achieved';\n    } else if (actual >= 0.8 * target) {\n      statusText = 'Near target';\n    } else {\n      statusText = 'Below target';\n    }\n\n    let comparativeText = '';\n    if (comparative !== null) {\n      comparativeText = `, comparative value: ${tooltipFormat(comparative)}`;\n    }\n\n    return `${statusText}, ${tooltipFormat(actual)} of ${tooltipFormat(target)} (${percentText})${comparativeText}`;\n  };\n\n  // Render the tooltip content\n  const tooltipContent = (): React.ReactNode => {\n    return (\n      <Box sx={{ p: 1 }}>\n        <Box sx={{ fontSize: 12, fontWeight: 'bold' }}>\n          {accessibilityLabel}\n        </Box>\n        <Box sx={{ fontSize: 11 }}>\n          Actual: {tooltipFormat(actual)}\n        </Box>\n        <Box sx={{ fontSize: 11 }}>\n          Target: {tooltipFormat(target)}\n        </Box>\n        {comparative !== null && (\n          <Box sx={{ fontSize: 11 }}>\n            Comparative: {tooltipFormat(comparative)}\n          </Box>\n        )}\n        <Box sx={{ fontSize: 11, fontWeight: 'medium', mt: 0.5 }}>\n          {percentComplete.toFixed(1)}% complete\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Tooltip title={tooltipContent()} arrow>\n      <Box\n        component=\"span\"\n        sx={{\n          display: 'inline-block',\n          width,\n          height,\n          position: 'relative',\n          verticalAlign: 'middle'\n        }}\n        aria-label={`${accessibilityLabel}: ${progressSummary()}`}\n      >\n        <svg width={width} height={height} style={{ display: 'block' }}>\n          {/* Background bar (full width, representing 100%) */}\n          <rect\n            x={0}\n            y={0}\n            width={width}\n            height={height}\n            fill={theme.palette.grey[200]}\n            rx={2}\n            ry={2}\n          />\n\n          {/* Actual progress bar */}\n          <rect\n            x={0}\n            y={0}\n            width={(percentComplete / 100) * width}\n            height={height}\n            fill={getActualColor()}\n            rx={2}\n            ry={2}\n          />\n\n          {/* Comparative marker (if provided) */}\n          {comparative !== null && (\n            <rect\n              x={(comparativePercent! / 100) * width - 1}\n              y={0}\n              width={2}\n              height={height}\n              fill={getComparativeColor()}\n            />\n          )}\n\n          {/* Target marker */}\n          <rect\n            x={(target / target) * width - 2}\n            y={0}\n            width={2}\n            height={height}\n            fill={getTargetColor()}\n          />\n        </svg>\n      </Box>\n    </Tooltip>\n  );\n};\n\n// Named exports for individual components\nexport { MicroSparkline, MicroBarChart, MicroBulletChart };\n\n// Define the interface for the MicroChartsWrapper component with additional properties\ninterface MicroChartsWrapperComponent extends React.FC {\n  Sparkline: typeof MicroSparkline;\n  BarChart: typeof MicroBarChart;\n  BulletChart: typeof MicroBulletChart;\n}\n\n// Create a wrapper component that can be used as a default export for React.lazy\nconst MicroChartsWrapper: React.FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"h6\">MicroCharts Components</Typography>\n      <Box sx={{ mt: 2 }}>\n        <Typography variant=\"subtitle1\">MicroSparkline Example</Typography>\n        <MicroSparkline\n          data={[\n            { value: 10 },\n            { value: 25 },\n            { value: 15 },\n            { value: 30 },\n            { value: 20 }\n          ]}\n        />\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <Typography variant=\"subtitle1\">MicroBarChart Example</Typography>\n        <MicroBarChart\n          data={[\n            { value: 10 },\n            { value: 25 },\n            { value: 15 },\n            { value: 30 },\n            { value: 20 }\n          ]}\n        />\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <Typography variant=\"subtitle1\">MicroBulletChart Example</Typography>\n        <MicroBulletChart\n          actual={75}\n          target={100}\n          comparative={80}\n        />\n      </Box>\n    </Box>\n  );\n};\n\n// Cast the component to our extended interface type\nconst EnhancedMicroChartsWrapper = MicroChartsWrapper as MicroChartsWrapperComponent;\n\n// Add the individual components as properties\nEnhancedMicroChartsWrapper.Sparkline = MicroSparkline;\nEnhancedMicroChartsWrapper.BarChart = MicroBarChart;\nEnhancedMicroChartsWrapper.BulletChart = MicroBulletChart;\n\nexport default EnhancedMicroChartsWrapper;","/**\n * Dashboard Analytics Service\n * Handles API communication for data storytelling features\n */\n\nimport axios from 'axios';\n\n// Base API URL - should match your backend configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n/**\n * Types for dashboard analytics service\n */\nexport interface DashboardParams {\n  timeRange?: number;\n  [key: string]: any;\n}\n\nexport interface AnalyticsOptions {\n  includeForecast?: boolean;\n  forecastHorizon?: string;\n  includeSeasonality?: boolean;\n  [key: string]: any;\n}\n\nexport interface Annotation {\n  id: string;\n  metricId: string;\n  date: string;\n  value: number;\n  text: string;\n  createdBy: string;\n  createdAt: string;\n  [key: string]: any;\n}\n\nexport interface TrendData {\n  OutlierPoints: OutlierPoint[];\n  ForecastData?: OutlierPoint[];\n  TrendDirection: string;\n  PercentageChange: number;\n  SeasonalityDetected: boolean;\n  Seasonality?: any;\n  IdentifiedPatterns?: Pattern[];\n  [key: string]: any;\n}\n\nexport interface OutlierPoint {\n  Date: string;\n  Value: number;\n  isOutlier?: boolean;\n  isForecasted?: boolean;\n  [key: string]: any;\n}\n\nexport interface Pattern {\n  PatternType: string;\n  StartDate: string;\n  EndDate: string;\n  Description: string;\n  Confidence: number;\n  [key: string]: any;\n}\n\n/**\n * Service for handling dashboard analytics and data storytelling features\n */\nclass DashboardAnalyticsService {\n  /**\n   * Fetch personalized dashboard settings for the current user\n   * @param userId - The ID of the current user\n   * @returns The user's dashboard settings\n   */\n  async getUserDashboardSettings(userId: string): Promise<any> {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/dashboard/settings/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching dashboard settings:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Save user's dashboard personalization settings\n   * @param userId - The ID of the current user\n   * @param settings - The dashboard settings to save\n   * @returns The saved settings\n   */\n  async saveDashboardSettings(userId: string, settings: any): Promise<any> {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/dashboard/settings/${userId}`, settings);\n      return response.data;\n    } catch (error) {\n      console.error('Error saving dashboard settings:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get recommended dashboard components based on user profile and behavior\n   * @param userId - The ID of the current user\n   * @param userProfile - User profile information including role and experience level\n   * @returns Array of recommended components\n   */\n  async getRecommendedComponents(userId: string, userProfile: any): Promise<any[]> {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/dashboard/recommendations`, {\n        userId,\n        ...userProfile\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching component recommendations:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch contextual explanations for dashboard metrics\n   * @param metricId - The ID of the metric to explain\n   * @param context - Optional context information (e.g., user role, experience level)\n   * @returns Explanation data for the metric\n   */\n  async getMetricExplanation(metricId: string, context: any = {}): Promise<any> {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/metrics/explanation/${metricId}`, {\n        params: { ...context }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching metric explanation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get annotations for a specific data point or metric\n   * @param metricId - The ID of the metric\n   * @param dateRange - Optional date range for annotations\n   * @returns Array of annotations\n   */\n  async getAnnotations(metricId: string, dateRange?: string): Promise<Annotation[]> {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/annotations`, {\n        params: {\n          metricId,\n          dateRange\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching annotations:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Save an annotation for a data point\n   * @param annotation - The annotation to save\n   * @returns The saved annotation\n   */\n  async saveAnnotation(annotation: Partial<Annotation>): Promise<Annotation> {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/annotations`, annotation);\n      return response.data;\n    } catch (error) {\n      console.error('Error saving annotation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update an existing annotation\n   * @param annotationId - The ID of the annotation to update\n   * @param annotation - The updated annotation data\n   * @returns The updated annotation\n   */\n  async updateAnnotation(annotationId: string, annotation: Partial<Annotation>): Promise<Annotation> {\n    try {\n      const response = await axios.put(`${API_BASE_URL}/annotations/${annotationId}`, annotation);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating annotation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete an annotation\n   * @param annotationId - The ID of the annotation to delete\n   * @returns Success indicator\n   */\n  async deleteAnnotation(annotationId: string): Promise<boolean> {\n    try {\n      await axios.delete(`${API_BASE_URL}/annotations/${annotationId}`);\n      return true;\n    } catch (error) {\n      console.error('Error deleting annotation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get trend analysis for a specific metric\n   * @param metricId - The ID of the metric\n   * @param dateRange - Date range for the trend analysis\n   * @param options - Additional options for the analysis\n   * @returns Trend analysis data\n   */\n  async getTrendAnalysis(metricId: string, dateRange: string, options: AnalyticsOptions = {}): Promise<TrendData> {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/analytics/trends`, {\n        params: {\n          metricId,\n          dateRange,\n          ...options\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching trend analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get revenue trends data\n   * @param params - Dashboard parameters\n   * @param options - Analytics options\n   * @returns Trend data for revenue\n   */\n  async getRevenueTrends(params: DashboardParams, options: AnalyticsOptions = {}): Promise<TrendData> {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/analytics/trends/revenue`, {\n        params: {\n          ...params,\n          ...options\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching revenue trends:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get registration trends data\n   * @param params - Dashboard parameters\n   * @param options - Analytics options\n   * @returns Trend data for registrations\n   */\n  async getRegistrationTrends(params: DashboardParams, options: AnalyticsOptions = {}): Promise<TrendData> {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/analytics/trends/registrations`, {\n        params: {\n          ...params,\n          ...options\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching registration trends:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export instance\nconst dashboardAnalyticsService = new DashboardAnalyticsService();\nexport default dashboardAnalyticsService;\n","import apiClient from './apiClient';\nimport { Metric, DataPoint, InsightType, Explanation } from '../../types/contextualExplanation';\n\n/**\n * Parameters for contextual explanation request\n */\ninterface ContextualExplanationParams {\n  metric: Metric;\n  data: DataPoint[];\n  insightType?: InsightType;\n}\n\n/**\n * Parameters for detailed analysis request\n */\ninterface DetailedAnalysisParams {\n  metric: Metric;\n  data: DataPoint[];\n  analysisType: string;\n}\n\n/**\n * Parameters for insights with recommendations request\n */\ninterface InsightsRecommendationsParams {\n  metric: Metric;\n  data: DataPoint[];\n}\n\n/**\n * Sensitivity settings for anomaly detection\n */\ninterface SensitivitySettings {\n  threshold?: number;\n  windowSize?: number;\n  method?: string;\n}\n\n/**\n * Parameters for anomaly detection request\n */\ninterface AnomalyDetectionParams {\n  metric: Metric;\n  data: DataPoint[];\n  sensitivity?: SensitivitySettings;\n}\n\n/**\n * Parameters for forecast request\n */\ninterface ForecastParams {\n  metric: Metric;\n  data: DataPoint[];\n  forecastPeriods: number;\n}\n\n/**\n * Forecast data point\n */\ninterface ForecastDataPoint extends DataPoint {\n  confidence?: {\n    lower: number;\n    upper: number;\n  };\n  isForecast: boolean;\n}\n\n/**\n * Forecast response\n */\ninterface ForecastResponse {\n  forecast: ForecastDataPoint[];\n  accuracy: {\n    mape?: number;\n    rmse?: number;\n    mae?: number;\n  };\n  model: string;\n}\n\n/**\n * Get contextual explanation for a metric\n * @param params - Request parameters\n * @returns Promise object with explanation data\n */\nconst getContextualExplanation = async (params: ContextualExplanationParams): Promise<Explanation> => {\n  try {\n    const response = await apiClient.post<Explanation>('/contextual/explain', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get detailed analysis for a metric\n * @param params - Request parameters\n * @returns Promise object with detailed analysis\n */\nconst getDetailedAnalysis = async (params: DetailedAnalysisParams): Promise<any> => {\n  try {\n    const response = await apiClient.post('/contextual/detailed-analysis', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get metric insights with recommendations\n * @param params - Request parameters\n * @returns Promise object with insights and recommendations\n */\nconst getInsightsWithRecommendations = async (params: InsightsRecommendationsParams): Promise<any> => {\n  try {\n    const response = await apiClient.post('/contextual/insights-recommendations', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get anomaly detection for a metric\n * @param params - Request parameters\n * @returns Promise object with detected anomalies\n */\nconst getAnomalyDetection = async (params: AnomalyDetectionParams): Promise<DataPoint[]> => {\n  try {\n    const response = await apiClient.post<DataPoint[]>('/contextual/anomaly-detection', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get forecast for a metric\n * @param params - Request parameters\n * @returns Promise object with forecast data\n */\nconst getForecast = async (params: ForecastParams): Promise<ForecastResponse> => {\n  try {\n    const response = await apiClient.post<ForecastResponse>('/contextual/forecast', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default {\n  getContextualExplanation,\n  getDetailedAnalysis,\n  getInsightsWithRecommendations,\n  getAnomalyDetection,\n  getForecast\n};\n"],"names":["VirtualizedList","_ref","data","renderRow","height","width","itemSize","loading","emptyMessage","sx","Row","useCallback","_ref2","index","style","length","_jsx","Box","display","justifyContent","alignItems","children","Typography","variant","color","FixedSizeList","itemCount","itemData","React","styled","theme","padding","spacing","overflowY","Tabs","borderBottom","palette","divider","backgroundColor","primary","main","Tab","_ref3","textTransform","fontWeight","typography","fontWeightRegular","fontSize","pxToRem","marginRight","fontWeightMedium","_ref4","marginLeft","gap","_ref5","marginBottom","TimelineIcon","FormatListBulletedIcon","CustomTooltip","active","payload","label","_jsxs","bgcolor","p","border","borderColor","borderRadius","boxShadow","gutterBottom","value","PlayerRegistrationsChart","isLoading","showFTD","useTheme","dispatch","useMediaQuery","breakpoints","down","useDispatch","useEffect","fetchRegistrationsChart","chartData","useMemo","map","item","date","formatDate","registrations","ftd","CircularProgress","ResponsiveContainer","ComposedChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","angle","textAnchor","tick","YAxis","yAxisId","orientation","Tooltip","content","Legend","Bar","name","fill","radius","Line","type","stroke","secondary","strokeWidth","dot","r","activeDot","memo","title","metrics","entities","onRefresh","onExport","selectedMetrics","setSelectedMetrics","useState","selectedEntities","setSelectedEntities","showLabels","setShowLabels","searchTerm","setSearchTerm","filteredData","setFilteredData","normalizeData","setNormalizeData","highContrastMode","setHighContrastMode","slice","Math","min","m","id","e","filteredEntities","term","toLowerCase","filter","entity","_entity$name","_entity$category","_entity$id","includes","category","toString","entityId","radarData","metricId","metric","find","metricObj","subject","metricValues","values","undefined","val","minValue","range","max","forEach","entityData","Boolean","handleMetricChange","event","target","handleEntityChange","renderControls","mb","Stack","direction","xs","sm","FormControl","size","minWidth","flexGrow","InputLabel","Select","labelId","multiple","onChange","renderValue","selected","MenuItem","TextField","InputProps","startAdornment","InputAdornment","position","SearchIcon","md","flexWrap","FormControlLabel","control","Switch","checked","Card","CardContent","component","IconButton","onClick","RefreshIcon","flexDirection","elevation","ml","InfoOutlinedIcon","FileDownloadIcon","RadarChart","cx","cy","outerRadius","PolarGrid","PolarAngleAxis","text","tickLine","axisLine","PolarRadiusAxis","domain","tickCount","entityColor","getEntityColor","entityName","highContrastColors","colorPalettes","success","info","warning","error","light","dark","Radar","fillOpacity","isAnimationActive","Paper","mt","background","default","MicroSparkline","showArea","tooltipFormat","toLocaleString","accessibilityLabel","valueKey","d","maxValue","chartColor","getColor","firstValue","lastValue","getX","getY","generateLinePath","i","join","point","arrow","verticalAlign","trendSummary","change","percentChange","trendDirection","toFixed","alpha","strokeLinejoin","strokeLinecap","MicroBarChart","intensity","barWidth","dataSummary","average","reduce","sum","barHeight","x","y","rx","ry","MicroBulletChart","actual","comparative","actualColor","targetColor","comparativeColor","percentComplete","comparativePercent","progressSummary","percentText","statusText","comparativeText","grey","EnhancedMicroChartsWrapper","MicroChartsWrapper","Sparkline","BarChart","BulletChart","API_BASE_URL","process","REACT_APP_API_URL","getUserDashboardSettings","userId","axios","get","console","saveDashboardSettings","settings","post","getRecommendedComponents","userProfile","getMetricExplanation","context","arguments","params","getAnnotations","dateRange","saveAnnotation","annotation","updateAnnotation","annotationId","put","deleteAnnotation","delete","getTrendAnalysis","options","getRevenueTrends","getRegistrationTrends","getContextualExplanation","async","apiClient","getDetailedAnalysis","getInsightsWithRecommendations","getAnomalyDetection","getForecast"],"sourceRoot":""}