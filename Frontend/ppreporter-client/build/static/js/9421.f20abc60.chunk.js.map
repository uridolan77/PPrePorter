{"version":3,"file":"static/js/9421.f20abc60.chunk.js","mappings":"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","sources":["components/common/CardAccent.tsx","utils/formatters.js","components/common/Card.tsx","components/common/VirtualizedTable.tsx","components/dashboard/TopGamesChart.tsx","components/dashboard/RecentTransactionsTable.tsx","components/common/TabPanel.tsx","components/common/ErrorBoundary.tsx","components/dashboard/overview/RecentTransactionsSection.tsx","components/dashboard/tabs/EnhancedOverviewTab.tsx","components/dashboard/tabs/PerformanceTab.tsx","components/dashboard/tabs/PlayersTab.tsx","components/dashboard/tabs/GamesTab.tsx","components/dashboard/DashboardTabs.tsx","components/common/KPICard.tsx","components/dashboard/DashboardHeader.tsx","components/dashboard/DashboardCharts.tsx","components/common/EmptyState.tsx","components/dashboard/DashboardMetrics.tsx","components/dashboard/CasinoRevenueChart.tsx"],"sourcesContent":["import React from 'react';\nimport { Box, useTheme } from '@mui/material';\nimport { getWavePatternBackground } from '../../theme/flatModernTheme';\n\nexport type AccentPosition = 'left' | 'top' | 'right' | 'bottom';\nexport type AccentVariant = 'teal' | 'purple' | 'blue' | 'green' | 'amber' | 'red';\n\nexport interface CardAccentProps {\n  /**\n   * Position of the accent stripe\n   */\n  position?: AccentPosition;\n\n  /**\n   * Color variant of the accent\n   */\n  variant?: AccentVariant;\n\n  /**\n   * Whether to show a wave pattern background\n   */\n  showWavePattern?: boolean;\n\n  /**\n   * Thickness of the accent stripe in pixels\n   */\n  thickness?: number;\n\n  /**\n   * Custom color for the accent (overrides variant)\n   */\n  color?: string;\n\n  /**\n   * Opacity of the wave pattern (0-1)\n   */\n  patternOpacity?: number;\n}\n\n/**\n * CardAccent component\n * Adds an accent stripe and optional wave pattern to cards\n */\nconst CardAccent: React.FC<CardAccentProps> = ({\n  position = 'left',\n  variant = 'teal',\n  showWavePattern = false,\n  thickness = 8,\n  color,\n  patternOpacity = 0.1\n}) => {\n  const theme = useTheme();\n\n  // Get color based on variant\n  const getColor = (): string => {\n    if (color) return color;\n\n    const variantColors = {\n      teal: theme.palette.primary.main,\n      purple: theme.palette.secondary.main,\n      blue: theme.palette.info.main,\n      green: theme.palette.success.main,\n      amber: theme.palette.warning.main,\n      red: theme.palette.error.main\n    };\n\n    return variantColors[variant] || theme.palette.primary.main;\n  };\n\n  // Get position styles\n  const getPositionStyles = () => {\n    switch (position) {\n      case 'top':\n        return {\n          top: 0,\n          left: 0,\n          right: 0,\n          height: thickness,\n          width: '100%'\n        };\n      case 'right':\n        return {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          width: thickness,\n          height: '100%'\n        };\n      case 'bottom':\n        return {\n          bottom: 0,\n          left: 0,\n          right: 0,\n          height: thickness,\n          width: '100%'\n        };\n      case 'left':\n      default:\n        return {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          width: thickness,\n          height: '100%'\n        };\n    }\n  };\n\n  const accentColor = getColor();\n  // Extract position styles to avoid complex union type\n  const positionStyles = getPositionStyles();\n\n  // Create a style object instead of using sx prop\n  const accentStyle = {\n    position: 'absolute',\n    backgroundColor: accentColor,\n    zIndex: 1,\n    top: positionStyles.top,\n    right: positionStyles.right,\n    bottom: positionStyles.bottom,\n    left: positionStyles.left,\n    width: positionStyles.width,\n    height: positionStyles.height\n  } as React.CSSProperties;\n\n  return (\n    <>\n      {/* Accent stripe */}\n      <div style={accentStyle} />\n\n      {/* Wave pattern background */}\n      {showWavePattern && (\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            opacity: patternOpacity,\n            backgroundImage: getWavePatternBackground(accentColor),\n            backgroundSize: '100px 50px',\n            backgroundPosition: 'bottom',\n            backgroundRepeat: 'repeat-x',\n            zIndex: 0\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CardAccent;\n","/**\r\n * Utility functions for formatting values in the UI\r\n */\r\n\r\n/**\r\n * Format a number as currency\r\n * @param {number} value - The value to format\r\n * @param {string} currencyCode - Optional currency code (defaults to GBP)\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (value, currencyCode = 'GBP') => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return new Intl.NumberFormat('en-GB', {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a number with thousands separators\r\n * @param {number} value - The value to format\r\n * @param {number} decimals - Number of decimal places (default: 0)\r\n * @returns {string} Formatted number string\r\n */\r\nexport const formatNumber = (value, decimals = 0) => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return new Intl.NumberFormat('en-GB', {\r\n    minimumFractionDigits: decimals,\r\n    maximumFractionDigits: decimals\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a date in a localized format\r\n * @param {string|Date} date - The date to format\r\n * @returns {string} Formatted date string\r\n */\r\nexport const formatDate = (date) => {\r\n  if (!date) return '—';\r\n  \r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  return new Intl.DateTimeFormat('en-GB', {\r\n    day: '2-digit',\r\n    month: 'short',\r\n    year: 'numeric'\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Format a date with time\r\n * @param {string|Date} date - The date to format\r\n * @returns {string} Formatted date and time string\r\n */\r\nexport const formatDateTime = (date) => {\r\n  if (!date) return '—';\r\n  \r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  return new Intl.DateTimeFormat('en-GB', {\r\n    day: '2-digit',\r\n    month: 'short',\r\n    year: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    hour12: false\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Format a percentage value\r\n * @param {number} value - The percentage value to format\r\n * @returns {string} Formatted percentage string\r\n */\r\nexport const formatPercentage = (value) => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;\r\n};","import React, { useState } from 'react';\nimport { \n  Paper, \n  Typography, \n  Box, \n  Divider, \n  IconButton,\n  Collapse\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport { CardProps } from '../../types/common';\n\n/**\n * Card component for consistent UI elements across the application\n */\nconst Card: React.FC<CardProps> = ({\n  children,\n  title,\n  subheader,\n  action,\n  icon,\n  sx,\n  collapsible = false,\n  defaultExpanded = true,\n  variant = 'outlined'\n}) => {\n  const [expanded, setExpanded] = useState<boolean>(defaultExpanded);\n\n  const handleExpandToggle = (): void => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <Paper\n      variant={variant}\n      sx={{\n        borderRadius: 1,\n        overflow: 'hidden',\n        ...sx\n      }}\n    >\n      {/* Card Header */}\n      {(title || subheader) && (\n        <>\n          <Box\n            sx={{\n              px: 3,\n              py: 2,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between'\n            }}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {icon && (\n                <Box sx={{ mr: 1.5, display: 'flex', alignItems: 'center' }}>\n                  {icon}\n                </Box>\n              )}\n              <Box>\n                {title && (\n                  <Typography variant=\"h6\" component=\"div\">\n                    {title}\n                  </Typography>\n                )}\n                {subheader && (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {subheader}\n                  </Typography>\n                )}\n              </Box>\n            </Box>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {action}\n              {collapsible && (\n                <IconButton\n                  onClick={handleExpandToggle}\n                  sx={{ ml: action ? 1 : 0 }}\n                  size=\"small\"\n                >\n                  {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                </IconButton>\n              )}\n            </Box>\n          </Box>\n          <Divider />\n        </>\n      )}\n\n      {/* Card Content */}\n      {collapsible ? (\n        <Collapse in={expanded}>\n          <Box>{children}</Box>\n        </Collapse>\n      ) : (\n        <Box>{children}</Box>\n      )}\n    </Paper>\n  );\n};\n\nexport default Card;\n","import React, { useCallback, memo } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n  CircularProgress\n} from '@mui/material';\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\nimport { SxProps, Theme } from '@mui/material/styles';\nimport { ColumnDef } from '../../types/common';\n\nexport interface VirtualizedTableProps<T> {\n  data: T[];\n  columns: ColumnDef[];\n  height?: number;\n  width?: number | string;\n  rowHeight?: number;\n  loading?: boolean;\n  emptyMessage?: string;\n  onRowClick?: (row: T) => void;\n  headerHeight?: number;\n  sx?: SxProps<Theme>;\n}\n\n/**\n * VirtualizedTable component\n * A reusable virtualized table component using react-window for efficient rendering of large data sets\n */\nfunction VirtualizedTable<T extends Record<string, any>>({\n  data = [],\n  columns = [],\n  height = 400,\n  width = '100%',\n  rowHeight = 53,\n  loading = false,\n  emptyMessage = 'No data to display',\n  onRowClick,\n  headerHeight = 56,\n  sx = {}\n}: VirtualizedTableProps<T>): React.ReactElement {\n  // Memoized row renderer to prevent unnecessary re-renders\n  const Row = useCallback(\n    ({ index, style }: ListChildComponentProps) => {\n      const row = data[index];\n      return (\n        <TableRow\n          component=\"div\"\n          hover\n          onClick={onRowClick ? () => onRowClick(row) : undefined}\n          style={{\n            ...style,\n            display: 'flex',\n            alignItems: 'center',\n            boxSizing: 'border-box',\n            cursor: onRowClick ? 'pointer' : 'default'\n          }}\n        >\n          {columns.map((column) => {\n            const value = row[column.id];\n            const cellWidth = `${100 / columns.length}%`;\n\n            return (\n              <TableCell\n                component=\"div\"\n                key={column.id}\n                align={column.align || 'left'}\n                style={{\n                  width: cellWidth,\n                  display: 'flex',\n                  alignItems: 'center',\n                  boxSizing: 'border-box',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  whiteSpace: 'nowrap'\n                }}\n              >\n                {column.format ? column.format(value, row) : value}\n              </TableCell>\n            );\n          })}\n        </TableRow>\n      );\n    },\n    [data, columns, onRowClick]\n  );\n\n  // If loading, return a loading message\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // If no data, return an empty message\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyMessage}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Paper sx={{ height, width, overflow: 'hidden', ...sx }}>\n      <TableContainer component=\"div\" sx={{ height: '100%', width: '100%' }}>\n        <Table component=\"div\" sx={{ display: 'block', width: '100%', height: '100%' }}>\n          <TableHead component=\"div\" sx={{ display: 'block', width: '100%' }}>\n            <TableRow\n              component=\"div\"\n              sx={{\n                display: 'flex',\n                width: '100%',\n                height: headerHeight,\n                alignItems: 'center'\n              }}\n            >\n              {columns.map((column) => {\n                const cellWidth = `${100 / columns.length}%`;\n\n                return (\n                  <TableCell\n                    component=\"div\"\n                    key={column.id}\n                    align={column.align || 'left'}\n                    sx={{\n                      width: cellWidth,\n                      display: 'flex',\n                      alignItems: 'center',\n                      fontWeight: 'bold',\n                      boxSizing: 'border-box'\n                    }}\n                  >\n                    {column.label}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          </TableHead>\n\n          <TableBody\n            component=\"div\"\n            sx={{\n              display: 'block',\n              width: '100%',\n              height: `calc(${height}px - ${headerHeight}px)`,\n              overflow: 'hidden'\n            }}\n          >\n            <FixedSizeList\n              height={height - headerHeight}\n              width=\"100%\"\n              itemCount={data.length}\n              itemSize={rowHeight}\n              style={{ overflow: 'auto' }}\n            >\n              {Row}\n            </FixedSizeList>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}\n\nexport default memo(VirtualizedTable) as <T extends Record<string, any>>(props: VirtualizedTableProps<T>) => React.ReactElement;\n","import React, { memo, useMemo, useState, useEffect } from 'react';\nimport { Box, CircularProgress, Typography, useTheme, Tabs, Tab } from '@mui/material';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Cell } from 'recharts';\nimport { formatCurrency } from '../../utils/formatters';\nimport { GameData } from '../../types/redux';\nimport VirtualizedTable from '../common/VirtualizedTable';\nimport { useDispatch } from 'react-redux';\nimport { fetchTopGames } from '../../store/slices/dashboardSlice';\n\ninterface TopGamesChartProps {\n  data: GameData[];\n  isLoading?: boolean;\n  height?: number;\n  showLegend?: boolean;\n  error?: Error | null;\n  onRetry?: () => void;\n  sx?: any;\n  emptyStateMessage?: string;\n  errorFallback?: (error: Error) => React.ReactElement;\n  valueKey?: string;\n  nameKey?: string;\n}\n\n/**\n * Custom tooltip component for the chart\n */\nconst CustomTooltip: React.FC<any> = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return (\n      <div\n        style={{\n          backgroundColor: '#fff',\n          padding: '12px',\n          border: '1px solid #ddd',\n          borderRadius: '4px',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n        }}\n      >\n        <Typography variant=\"subtitle2\" gutterBottom>\n          {payload[0].payload.name}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Revenue: {formatCurrency(payload[0].value)}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Players: {payload[0].payload.players.toLocaleString()}\n        </Typography>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n/**\n * Top Games Chart component\n * Displays a bar chart of top games by revenue\n */\nconst TopGamesChart: React.FC<TopGamesChartProps> = ({\n  data,\n  isLoading = false,\n  height = 300,\n  showLegend = true,\n  error = null,\n  onRetry,\n  sx,\n  emptyStateMessage = \"No game data available\",\n  errorFallback,\n  valueKey = \"revenue\",\n  nameKey = \"name\"\n}) => {\n  const theme = useTheme();\n  const [viewMode, setViewMode] = useState<'chart' | 'table'>('chart');\n  const dispatch = useDispatch();\n\n  // Fetch top games data if not provided\n  useEffect(() => {\n    if (!data || data.length === 0) {\n      if (!isLoading && !error) {\n        dispatch(fetchTopGames() as any);\n      }\n    }\n  }, [dispatch, data, isLoading, error]);\n\n  // Handle view mode change\n  const handleViewModeChange = (event: React.SyntheticEvent, newValue: 'chart' | 'table') => {\n    setViewMode(newValue);\n  };\n\n  // Memoize the chart data to prevent unnecessary recalculations\n  const chartData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.map((game) => ({\n      name: game.name,\n      revenue: game.revenue,\n      players: game.players,\n      category: game.category\n    }));\n  }, [data]);\n\n  // Generate colors for the bars based on the theme\n  const colors = useMemo(() => {\n    return [\n      theme.palette.primary.main,\n      theme.palette.primary.light,\n      theme.palette.secondary.main,\n      theme.palette.secondary.light,\n      theme.palette.info.main,\n      theme.palette.info.light,\n      theme.palette.success.main,\n      theme.palette.success.light,\n      theme.palette.warning.main,\n      theme.palette.warning.light\n    ];\n  }, [theme]);\n\n  // Table columns\n  const tableColumns = useMemo(() => [\n    { id: 'name', label: 'Game Name', align: 'left' as const },\n    { id: 'category', label: 'Category', align: 'left' as const },\n    { id: 'revenue', label: 'Revenue', align: 'right' as const, format: (value: number) => formatCurrency(value) },\n    { id: 'players', label: 'Players', align: 'right' as const, format: (value: number) => value.toLocaleString() }\n  ], []);\n\n  if (isLoading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: height, width: '100%' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  if (error) {\n    if (errorFallback) {\n      return errorFallback(error);\n    }\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: height, width: '100%' }}>\n        <Typography variant=\"body1\" color=\"error\">\n          Error loading games data: {error.message}\n          {onRetry && (\n            <span style={{ marginLeft: 16, cursor: 'pointer', textDecoration: 'underline' }} onClick={onRetry}>\n              Retry\n            </span>\n          )}\n        </Typography>\n      </div>\n    );\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: height, width: '100%' }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyStateMessage}\n        </Typography>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ width: '100%' }}>\n      <div style={{ borderBottom: '1px solid rgba(0, 0, 0, 0.12)', marginBottom: 16 }}>\n        <Tabs value={viewMode} onChange={handleViewModeChange} aria-label=\"view mode tabs\">\n          <Tab label=\"Chart\" value=\"chart\" />\n          <Tab label=\"Table\" value=\"table\" />\n        </Tabs>\n      </div>\n\n      {viewMode === 'chart' ? (\n        // Chart view\n        <div style={{ width: '100%', height: height }}>\n          <ResponsiveContainer>\n            <BarChart\n              data={chartData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 70 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"name\"\n                angle={-45}\n                textAnchor=\"end\"\n                height={70}\n                tick={{ fontSize: 12 }}\n              />\n              <YAxis\n                tickFormatter={(value) => `£${value.toLocaleString()}`}\n                tick={{ fontSize: 12 }}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              {showLegend && <Legend />}\n              <Bar dataKey=\"revenue\" name=\"Revenue\" radius={[4, 4, 0, 0]}>\n                {chartData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      ) : (\n        // Table view with virtualization\n        <VirtualizedTable\n          data={data}\n          columns={tableColumns}\n          height={height}\n          rowHeight={53}\n          loading={isLoading}\n          emptyMessage=\"No games data available\"\n        />\n      )}\n    </div>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(TopGamesChart);\n","import React, { memo, useMemo, useEffect } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n  Chip,\n  CircularProgress,\n  Skeleton,\n  useTheme\n} from '@mui/material';\nimport { formatCurrency, formatDateTime } from '../../utils/formatters';\nimport { TransactionData } from '../../types/redux';\nimport { useDispatch } from 'react-redux';\nimport { fetchRecentTransactions } from '../../store/slices/dashboardSlice';\n\ninterface RecentTransactionsTableProps {\n  data: TransactionData[];\n  isLoading?: boolean;\n  maxHeight?: number | string;\n  showHeader?: boolean;\n  errorFallback?: (error: Error) => React.ReactElement;\n}\n\n/**\n * Recent Transactions Table component\n * Displays a table of recent transactions\n */\nconst RecentTransactionsTable: React.FC<RecentTransactionsTableProps> = ({\n  data,\n  isLoading = false,\n  maxHeight = 400,\n  showHeader = true\n}) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n\n  // Fetch recent transactions data if not provided\n  useEffect(() => {\n    if (!data || data.length === 0) {\n      if (!isLoading) {\n        dispatch(fetchRecentTransactions() as any);\n      }\n    }\n  }, [dispatch, data, isLoading]);\n\n  // Get status color based on transaction status\n  const getStatusColor = (status: string): string => {\n    switch (status.toLowerCase()) {\n      case 'completed':\n      case 'success':\n        return theme.palette.success.main;\n      case 'pending':\n      case 'processing':\n        return theme.palette.warning.main;\n      case 'failed':\n      case 'declined':\n        return theme.palette.error.main;\n      case 'refunded':\n        return theme.palette.info.main;\n      default:\n        return theme.palette.grey[500];\n    }\n  };\n\n  // Get transaction type color\n  const getTypeColor = (type: string): string => {\n    switch (type.toLowerCase()) {\n      case 'deposit':\n        return theme.palette.success.main;\n      case 'withdrawal':\n        return theme.palette.error.main;\n      case 'bonus':\n        return theme.palette.info.main;\n      case 'wager':\n        return theme.palette.warning.main;\n      case 'win':\n        return theme.palette.success.light;\n      default:\n        return theme.palette.grey[500];\n    }\n  };\n\n  // Loading skeleton\n  if (isLoading) {\n    return (\n      <TableContainer component={Paper} sx={{ maxHeight }}>\n        <Table stickyHeader size=\"small\">\n          {showHeader && (\n            <TableHead>\n              <TableRow>\n                <TableCell>Player</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell align=\"right\">Amount</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Status</TableCell>\n              </TableRow>\n            </TableHead>\n          )}\n          <TableBody>\n            {Array.from(new Array(5)).map((_, index) => (\n              <TableRow key={index}>\n                <TableCell><Skeleton width={120} /></TableCell>\n                <TableCell><Skeleton width={80} /></TableCell>\n                <TableCell align=\"right\"><Skeleton width={60} /></TableCell>\n                <TableCell><Skeleton width={100} /></TableCell>\n                <TableCell><Skeleton width={80} /></TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n\n  // No data state\n  if (!data || data.length === 0) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 200 }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          No transaction data available\n        </Typography>\n      </div>\n    );\n  }\n\n  return (\n    <TableContainer component={Paper} sx={{ maxHeight }}>\n      <Table stickyHeader size=\"small\">\n        {showHeader && (\n          <TableHead>\n            <TableRow>\n              <TableCell>Player</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell align=\"right\">Amount</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Status</TableCell>\n            </TableRow>\n          </TableHead>\n        )}\n        <TableBody>\n          {data.map((transaction) => (\n            <TableRow key={transaction.id} hover>\n              <TableCell>\n                <Typography variant=\"body2\" noWrap sx={{ maxWidth: 150 }}>\n                  {transaction.playerName}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Chip\n                  label={transaction.type}\n                  size=\"small\"\n                  sx={{\n                    bgcolor: `${getTypeColor(transaction.type)}20`,\n                    color: getTypeColor(transaction.type),\n                    fontWeight: 'medium',\n                    fontSize: '0.75rem'\n                  }}\n                />\n              </TableCell>\n              <TableCell align=\"right\">\n                <Typography\n                  variant=\"body2\"\n                  fontWeight=\"medium\"\n                  color={\n                    transaction.type.toLowerCase() === 'deposit' || transaction.type.toLowerCase() === 'win'\n                      ? 'success.main'\n                      : transaction.type.toLowerCase() === 'withdrawal'\n                      ? 'error.main'\n                      : 'text.primary'\n                  }\n                >\n                  {formatCurrency(transaction.amount, transaction.currency)}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {formatDateTime(transaction.timestamp)}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Chip\n                  label={transaction.status}\n                  size=\"small\"\n                  sx={{\n                    bgcolor: `${getStatusColor(transaction.status)}20`,\n                    color: getStatusColor(transaction.status),\n                    fontWeight: 'medium',\n                    fontSize: '0.75rem'\n                  }}\n                />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(RecentTransactionsTable);\n","import React from 'react';\nimport { Box } from '@mui/material';\nimport { TabPanelProps } from '../../types/common';\n\n/**\n * TabPanel component that displays content based on the active tab\n * Enhanced with proper accessibility attributes\n */\nconst TabPanel: React.FC<TabPanelProps> = ({\n  children,\n  value,\n  index,\n  label,\n  sx,\n  ...other\n}) => {\n  const isSelected = value === index;\n  \n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={!isSelected}\n      id={`tabpanel-${index}`}\n      aria-labelledby={`tab-${index}`}\n      aria-label={label}\n      {...other}\n    >\n      {isSelected && (\n        <Box sx={{ p: 3, ...sx }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n};\n\nexport default TabPanel;\n","import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { Box, Typography, Button } from '@mui/material';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport { ErrorBoundaryProps, ErrorBoundaryState, ErrorState } from '../../types/common';\n\n/**\n * ErrorBoundary component\n * Catches JavaScript errors in child components and displays a fallback UI\n */\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    // Update state so the next render will show the fallback UI\n    return {\n      hasError: true,\n      error: {\n        message: error.message,\n        stack: error.stack\n      }\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    // Log the error to an error reporting service\n    console.error('Error caught by ErrorBoundary:', error, errorInfo);\n\n    // You could also log the error to an error reporting service here\n    // logErrorToService(error, errorInfo);\n  }\n\n  handleReset = (): void => {\n    this.setState({ hasError: false, error: null });\n  };\n\n  render(): ReactNode {\n    const { fallback, children } = this.props;\n    const { hasError, error } = this.state;\n\n    if (hasError) {\n      // Custom fallback UI\n      if (fallback) {\n        if (typeof fallback === 'function' && error) {\n          const result = fallback(error);\n          return result as ReactNode;\n        } else {\n          return fallback as ReactNode;\n        }\n      }\n\n      // Default fallback UI\n      return (\n        <Box sx={{ p: 3, textAlign: 'center' }}>\n          <ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main', mb: 2 }} />\n          <Typography variant=\"h6\" color=\"error\" gutterBottom>\n            Something went wrong\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            {error?.message || 'An unexpected error occurred'}\n          </Typography>\n          <Button\n            variant=\"outlined\"\n            startIcon={<RefreshIcon />}\n            onClick={this.handleReset}\n          >\n            Try Again\n          </Button>\n        </Box>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  Tooltip,\n  Skeleton\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n// Common components\nimport Card from '../../common/Card';\nimport EmptyState from '../../common/EmptyState';\n\n// Dashboard components\nimport RecentTransactionsTable from '../RecentTransactionsTable';\n\n// Types\nimport { RecentTransactionsSectionProps, Transaction } from '../../../types/recentTransactionsSection';\n\n/**\n * Recent Transactions Section Component\n * Displays recent transactions in a table format\n */\nconst RecentTransactionsSection: React.FC<RecentTransactionsSectionProps> = ({\n  data,\n  isLoading = false,\n  onDownload = () => {},\n  onSettings = () => {}\n}) => {\n  // Memoize the transactions data to prevent unnecessary re-renders\n  const transactionsData: Transaction[] = useMemo(() => {\n    return data || [];\n  }, [data]);\n\n  return (\n    <div style={{ marginBottom: 32 }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>\n        <Typography variant=\"h5\">\n          Recent Transactions\n        </Typography>\n        <div>\n          <Tooltip title=\"Download report\">\n            <IconButton\n              size=\"small\"\n              sx={{ mr: 1 }}\n              onClick={onDownload}\n              aria-label=\"Download transactions report\"\n            >\n              <DownloadIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Settings\">\n            <IconButton\n              size=\"small\"\n              onClick={onSettings}\n              aria-label=\"Transactions settings\"\n            >\n              <SettingsIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </div>\n      <Card>\n        {isLoading && transactionsData.length === 0 ? (\n          <div style={{ padding: 24 }}>\n            <Skeleton variant=\"rectangular\" height={300} />\n          </div>\n        ) : !transactionsData.length ? (\n          <EmptyState\n            message=\"No recent transactions available\"\n            icon={<AttachMoneyIcon sx={{ fontSize: 48 }} />}\n          />\n        ) : (\n          <RecentTransactionsTable\n            data={transactionsData as any}\n            isLoading={isLoading}\n            errorFallback={(error: Error) => (\n              <EmptyState\n                message={`Error loading transactions: ${error.message}`}\n                icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n              />\n            )}\n          />\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport default RecentTransactionsSection;\n","import React, { memo, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n// Common components\nimport EmptyState from '../../common/EmptyState';\nimport ErrorBoundary from '../../common/ErrorBoundary';\n\n// Dashboard components\nimport DashboardMetrics from '../DashboardMetrics';\nimport DashboardCharts from '../DashboardCharts';\nimport RecentTransactionsSection from '../overview/RecentTransactionsSection';\n\n// Types\nimport {\n  EnhancedOverviewTabProps,\n  DashboardStats\n} from '../../../types/enhancedOverviewTab';\n\n/**\n * Enhanced Overview Tab component for the API Dashboard\n * Uses the new modular components for better organization and performance\n */\nconst EnhancedOverviewTab: React.FC<EnhancedOverviewTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  error = null\n}) => {\n  // State for time period filter\n  const [timePeriod, setTimePeriod] = useState<'day' | 'week' | 'month' | 'quarter' | 'year'>('week');\n\n  // Handle error state\n  if (error) {\n    return (\n      <div style={{ padding: 24, textAlign: 'center' }}>\n        <ErrorOutlineIcon style={{ fontSize: 48, color: '#f44336', marginBottom: 16 }} />\n        <Typography variant=\"h6\" color=\"error\" gutterBottom>\n          Error Loading Dashboard Data\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {error.message || \"An unexpected error occurred. Please try again later.\"}\n        </Typography>\n      </div>\n    );\n  }\n\n  // Prepare metrics data for DashboardMetrics component\n  const metricsData: DashboardStats = {\n    revenue: dashboardData?.stats?.revenue || { value: 0, change: 0 },\n    players: dashboardData?.stats?.players || { value: 0, change: 0 },\n    games: {\n      value: dashboardData?.topGames?.length || 0,\n      change: 0\n    },\n    engagement: {\n      value: dashboardData?.stats?.engagementRate || 0,\n      change: dashboardData?.stats?.engagementChange || 0\n    }\n  };\n\n  // Prepare charts data for DashboardCharts component\n  const chartsData = {\n    revenueByDay: (dashboardData?.charts?.revenueByDay || []).map(item => ({\n      day: item.date,\n      value: item.value\n    })),\n    playersByGame: (dashboardData?.charts?.playersByGame || []).map(item => ({\n      game: item.name,\n      value: item.players\n    }))\n  };\n\n  // Handle time period change\n  const handleTimePeriodChange = (period: 'day' | 'week' | 'month' | 'quarter' | 'year'): void => {\n    setTimePeriod(period);\n    // In a real app, you would fetch new data based on the time period\n    console.log(`Time period changed to ${period}`);\n  };\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Something went wrong loading the dashboard\" icon={<ErrorOutlineIcon />} />}>\n      <div>\n        {/* Metrics Section */}\n        <DashboardMetrics\n          stats={metricsData}\n          loading={isLoading}\n          error={error}\n          title=\"Key Performance Indicators\"\n        />\n\n        {/* Charts Section */}\n        <DashboardCharts\n          data={chartsData}\n          loading={isLoading}\n          error={error}\n          title=\"Performance Analytics\"\n          timePeriod={timePeriod}\n          onTimePeriodChange={handleTimePeriodChange}\n        />\n\n        {/* Recent Transactions Section */}\n        <RecentTransactionsSection\n          data={dashboardData?.recentTransactions}\n          isLoading={isLoading}\n          onDownload={() => console.log('Download transactions report')}\n          onSettings={() => console.log('Open transactions settings')}\n        />\n      </div>\n    </ErrorBoundary>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(EnhancedOverviewTab);\n","import React, { useState, useMemo, ChangeEvent, MouseEvent } from 'react';\nimport {\n  Grid,\n  Typography,\n  CircularProgress,\n  useTheme,\n  IconButton,\n  Tooltip,\n  ToggleButtonGroup,\n  ToggleButton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Skeleton,\n  Paper,\n  SelectChangeEvent,\n  Theme\n} from '@mui/material';\nimport SimpleBox from '../../common/SimpleBox';\nimport { createSx } from '../../../utils/styleUtils';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport ShowChartIcon from '@mui/icons-material/ShowChart';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport PieChartIcon from '@mui/icons-material/PieChart';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n// Utilities\nimport { formatCurrency, formatNumber, formatPercentage, formatDate } from '../../../utils/formatters';\n\n// Common components\nimport Card from '../../common/Card';\nimport KPICard from '../../common/KPICard';\nimport EmptyState from '../../common/EmptyState';\nimport LoadingOverlay from '../../common/LoadingOverlay';\nimport ErrorBoundary from '../../common/ErrorBoundary';\n\n// Dashboard components\nimport CasinoRevenueChart from '../CasinoRevenueChart';\nimport TopGamesChart from '../TopGamesChart';\nimport TrendAnalysis from '../TrendAnalysis';\n\nimport {\n  PieChart, Pie, Cell,\n  Legend, ResponsiveContainer,\n  Tooltip as RechartsTooltip\n} from 'recharts';\n\n// Types\nimport {\n  PerformanceTabProps,\n  RevenueDataPoint,\n  PlayerDistributionDataPoint,\n  KPIData\n} from '../../../types/performanceTab';\n\n/**\n * Performance Tab component for the API Dashboard\n * Displays performance metrics, charts, and analysis\n */\nconst PerformanceTab: React.FC<PerformanceTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  error = null,\n  theme\n}) => {\n  // Use theme from props or get it from useTheme hook\n  const defaultTheme = useTheme();\n  const currentTheme: Theme = theme || defaultTheme;\n\n  // State for chart type and time period\n  const [chartType, setChartType] = useState<string>('line');\n  const [timePeriod, setTimePeriod] = useState<string>('week');\n\n  // Chart colors - memoized to prevent recreation on each render\n  const COLORS = useMemo(() => [\n    currentTheme.palette.primary.main,\n    currentTheme.palette.secondary.main,\n    currentTheme.palette.success.main,\n    currentTheme.palette.error.main,\n    currentTheme.palette.warning.main,\n    currentTheme.palette.info.main\n  ], [currentTheme.palette]);\n\n  // Handle chart type change\n  const handleChartTypeChange = (_event: MouseEvent<HTMLElement>, newChartType: string | null): void => {\n    if (newChartType !== null) {\n      setChartType(newChartType);\n    }\n  };\n\n  // Handle time period change\n  const handleTimePeriodChange = (event: SelectChangeEvent): void => {\n    setTimePeriod(event.target.value);\n  };\n\n  // Memoize revenue data for charts\n  const revenueData: RevenueDataPoint[] = useMemo(() => {\n    return dashboardData?.charts?.revenueByDay || [\n      { day: 'Mon', value: 2100 },\n      { day: 'Tue', value: 2400 },\n      { day: 'Wed', value: 1800 },\n      { day: 'Thu', value: 2200 },\n      { day: 'Fri', value: 2600 },\n      { day: 'Sat', value: 3100 },\n      { day: 'Sun', value: 2500 }\n    ];\n  }, [dashboardData?.charts?.revenueByDay]);\n\n  // Memoize player distribution data for charts\n  const playerDistributionData: PlayerDistributionDataPoint[] = useMemo(() => {\n    return dashboardData?.charts?.playersByGame || [\n      { game: 'Poker', value: 450 },\n      { game: 'Slots', value: 380 },\n      { game: 'Roulette', value: 240 },\n      { game: 'Blackjack', value: 190 },\n      { game: 'Baccarat', value: 165 }\n    ];\n  }, [dashboardData?.charts?.playersByGame]);\n\n  // Memoize KPI data\n  const kpiData: KPIData = useMemo(() => {\n    return dashboardData?.kpis || {\n      averageSessionTime: 45,\n      conversionRate: 3.2,\n      churnRate: 5.7,\n      revenuePerUser: 87.5\n    };\n  }, [dashboardData?.kpis]);\n\n  // Prepare revenue data for the chart - memoized to prevent recalculation\n  const preparedRevenueData = useMemo(() => {\n    // Convert the revenueData to the format expected by CasinoRevenueChart\n    return revenueData.map(item => ({\n      date: item.day,\n      revenue: item.value\n    }));\n  }, [revenueData]);\n\n  // Handle error state\n  if (error) {\n    return (\n      <SimpleBox sx={createSx({ p: 3, textAlign: 'center' })}>\n        <ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main', mb: 2 }} />\n        <Typography variant=\"h6\" color=\"error\" gutterBottom>\n          Error Loading Performance Data\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {error.message || \"An unexpected error occurred. Please try again later.\"}\n        </Typography>\n      </SimpleBox>\n    );\n  }\n\n  // Render player distribution chart\n  const renderPlayerDistributionChart = (): React.ReactNode => {\n    if (isLoading) {\n      return (\n        <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'center', p: 3, height: 300 })}>\n          <CircularProgress />\n        </SimpleBox>\n      );\n    }\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={playerDistributionData}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            outerRadius={100}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n            nameKey=\"game\"\n            label={({ name, percent }: { name: string, percent: number }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n          >\n            {playerDistributionData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n            ))}\n          </Pie>\n          <RechartsTooltip formatter={(value: any, name: string | undefined, props: any) => [value, props.payload.game] as [any, any]} />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Something went wrong loading the performance data\" icon={<ErrorOutlineIcon />} />}>\n      <SimpleBox>\n        {/* Performance Metrics Section */}\n        <SimpleBox sx={createSx({ mb: 4 })}>\n          <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 })}>\n            <Typography variant=\"h5\">\n              Performance Metrics\n            </Typography>\n            <SimpleBox>\n              <Tooltip title=\"Download report\">\n                <IconButton size=\"small\" sx={{ mr: 1 }}>\n                  <DownloadIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Settings\">\n                <IconButton size=\"small\">\n                  <SettingsIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </SimpleBox>\n          </SimpleBox>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Card\n                title=\"Revenue Trends\"\n                action={\n                  <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center' })}>\n                    <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                      <InputLabel id=\"time-period-label\">Period</InputLabel>\n                      <Select\n                        labelId=\"time-period-label\"\n                        id=\"time-period-select\"\n                        value={timePeriod}\n                        label=\"Period\"\n                        onChange={handleTimePeriodChange}\n                      >\n                        <MenuItem value=\"day\">Day</MenuItem>\n                        <MenuItem value=\"week\">Week</MenuItem>\n                        <MenuItem value=\"month\">Month</MenuItem>\n                        <MenuItem value=\"quarter\">Quarter</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </SimpleBox>\n                }\n              >\n                {isLoading && revenueData.length === 0 ? (\n                  <SimpleBox sx={createSx({ p: 3 })}>\n                    <Skeleton variant=\"rectangular\" height={300} />\n                  </SimpleBox>\n                ) : (\n                  <CasinoRevenueChart\n                    data={preparedRevenueData}\n                    isLoading={isLoading}\n                  />\n                )}\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Card title=\"Player Distribution by Game\">\n                {isLoading && playerDistributionData.length === 0 ? (\n                  <SimpleBox sx={createSx({ p: 3 })}>\n                    <Skeleton variant=\"rectangular\" height={300} />\n                  </SimpleBox>\n                ) : (\n                  <TopGamesChart\n                    data={playerDistributionData.map((item, index) => ({\n                      id: `game-${index}`,\n                      name: item.game,\n                      revenue: item.value,\n                      players: item.value,\n                      sessions: 0,\n                      category: 'Game'\n                    }))}\n                    isLoading={isLoading}\n                    valueKey=\"revenue\"\n                    nameKey=\"name\"\n                    emptyStateMessage=\"No player distribution data available\"\n                  />\n                )}\n              </Card>\n            </Grid>\n          </Grid>\n        </SimpleBox>\n\n        {/* KPI Section */}\n        <SimpleBox sx={createSx({ mb: 4 })}>\n          <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 })}>\n            <Typography variant=\"h5\">\n              Key Performance Indicators\n            </Typography>\n          </SimpleBox>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Avg. Session Time\"\n                value={`${kpiData.averageSessionTime} min`}\n                icon={<TimelineIcon />}\n                loading={isLoading}\n                description=\"Average time users spend in a single session\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Conversion Rate\"\n                value={`${kpiData.conversionRate}%`}\n                icon={<TrendingUpIcon />}\n                loading={isLoading}\n                description=\"Percentage of visitors who register\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Churn Rate\"\n                value={`${kpiData.churnRate}%`}\n                icon={<TrendingDownIcon />}\n                loading={isLoading}\n                description=\"Percentage of users who stop using the platform\"\n                isInverse={true}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Revenue Per User\"\n                value={formatCurrency(kpiData.revenuePerUser)}\n                icon={<AttachMoneyIcon />}\n                loading={isLoading}\n                description=\"Average revenue generated per active user\"\n              />\n            </Grid>\n          </Grid>\n        </SimpleBox>\n      </SimpleBox>\n    </ErrorBoundary>\n  );\n};\n\nexport default PerformanceTab;\n","import React, { useState, useMemo, ChangeEvent } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Paper,\n  CircularProgress,\n  useTheme,\n  IconButton,\n  Tooltip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  Avatar,\n  Button,\n  Theme\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid,\n  Tooltip as RechartsTooltip, Legend, ResponsiveContainer,\n  PieChart, Pie, Cell\n} from 'recharts';\n\n// Types\nimport {\n  PlayersTabProps,\n  PlayerRegistrationDataPoint,\n  PlayerDemographicsDataPoint,\n  PlayerAgeDataPoint,\n  Player\n} from '../../../types/playersTab';\n\n/**\n * Players Tab component for the API Dashboard\n * Displays player analytics, demographics, and player list\n */\nconst PlayersTab: React.FC<PlayersTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  theme\n}) => {\n  // Use theme from props or get it from useTheme hook\n  const defaultTheme = useTheme();\n  const currentTheme: Theme = theme || defaultTheme;\n\n  // State for pagination\n  const [page, setPage] = useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = useState<number>(5);\n\n  // Chart colors\n  const COLORS = useMemo(() => [\n    currentTheme.palette.primary.main,\n    currentTheme.palette.secondary.main,\n    currentTheme.palette.success.main,\n    currentTheme.palette.error.main,\n    currentTheme.palette.warning.main,\n    currentTheme.palette.info.main\n  ], [currentTheme.palette]);\n\n  // Handle page change\n  const handleChangePage = (_event: unknown, newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle rows per page change\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>): void => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Player acquisition data\n  const playerAcquisitionData: PlayerRegistrationDataPoint[] = dashboardData?.playerRegistrations || [\n    { date: '2023-05-01', count: 45 },\n    { date: '2023-05-02', count: 38 },\n    { date: '2023-05-03', count: 52 },\n    { date: '2023-05-04', count: 41 },\n    { date: '2023-05-05', count: 37 },\n    { date: '2023-05-06', count: 29 },\n    { date: '2023-05-07', count: 33 }\n  ];\n\n  // Player demographics data\n  const playerDemographicsData: PlayerDemographicsDataPoint[] = dashboardData?.playerDemographics || [\n    { name: 'Male', value: 65 },\n    { name: 'Female', value: 30 },\n    { name: 'Other', value: 5 }\n  ];\n\n  // Player age distribution data\n  const playerAgeData: PlayerAgeDataPoint[] = dashboardData?.playerAgeData || [\n    { age: '18-24', count: 120 },\n    { age: '25-34', count: 280 },\n    { age: '35-44', count: 210 },\n    { age: '45-54', count: 150 },\n    { age: '55+', count: 90 }\n  ];\n\n  // Player list data\n  const playerListData: Player[] = dashboardData?.recentPlayers || [\n    { id: 1, name: 'John Doe', registeredAt: '2023-05-01T08:30:00Z', status: 'active', country: 'USA' },\n    { id: 2, name: 'Jane Smith', registeredAt: '2023-05-02T10:15:00Z', status: 'active', country: 'Canada' },\n    { id: 3, name: 'Mike Johnson', registeredAt: '2023-05-03T14:45:00Z', status: 'inactive', country: 'UK' },\n    { id: 4, name: 'Lisa Brown', registeredAt: '2023-05-04T09:20:00Z', status: 'active', country: 'Australia' },\n    { id: 5, name: 'Robert Wilson', registeredAt: '2023-05-05T16:10:00Z', status: 'pending', country: 'Germany' }\n  ];\n\n  // Format date for display\n  const formatDate = (dateString: string): string => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n  };\n\n  // Get status color\n  const getStatusColor = (status: string | undefined): \"success\" | \"error\" | \"warning\" | \"default\" => {\n    switch (status?.toLowerCase()) {\n      case 'active':\n        return 'success';\n      case 'inactive':\n        return 'error';\n      case 'pending':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  // Get initials from name\n  const getInitials = (name: string | undefined): string => {\n    if (!name) return '';\n    return name\n      .split(' ')\n      .map(part => part[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  return (\n    <Box>\n      {/* Player Acquisition Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Player Acquisition\n          </Typography>\n          <Box>\n            <Tooltip title=\"Download report\">\n              <IconButton size=\"small\" sx={{ mr: 1 }}>\n                <DownloadIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Settings\">\n              <IconButton size=\"small\">\n                <SettingsIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n        <Paper sx={{ p: 3, borderRadius: 2 }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={playerAcquisitionData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" tickFormatter={formatDate} />\n                <YAxis />\n                <RechartsTooltip\n                  formatter={(value: any) => [value, 'New Players']}\n                  labelFormatter={formatDate}\n                />\n                <Legend />\n                <Bar\n                  dataKey=\"count\"\n                  name=\"New Players\"\n                  fill={currentTheme.palette.primary.main}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </Paper>\n      </Box>\n\n      {/* Player Demographics Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Player Demographics\n          </Typography>\n        </Box>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Gender Distribution\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 250 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <PieChart>\n                    <Pie\n                      data={playerDemographicsData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      label={({ name, percent }: { name: string, percent: number }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {playerDemographicsData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip formatter={(value: any) => [`${value}%`, 'Percentage']} />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Age Distribution\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 250 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={playerAgeData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"age\" />\n                    <YAxis />\n                    <RechartsTooltip formatter={(value: any) => [value, 'Players']} />\n                    <Legend />\n                    <Bar\n                      dataKey=\"count\"\n                      name=\"Players\"\n                      fill={currentTheme.palette.secondary.main}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Player List Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Player List\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<PersonAddIcon />}\n            size=\"small\"\n          >\n            Add Player\n          </Button>\n        </Box>\n        <Paper sx={{ borderRadius: 2 }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Player</TableCell>\n                      <TableCell>Registration Date</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Country</TableCell>\n                      <TableCell align=\"right\">Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {playerListData\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((player) => (\n                        <TableRow key={player.id}>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <Avatar sx={{ mr: 2, bgcolor: currentTheme.palette.primary.main }}>\n                                {getInitials(player.name)}\n                              </Avatar>\n                              <Typography variant=\"body1\">\n                                {player.name}\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell>{formatDate(player.registeredAt)}</TableCell>\n                          <TableCell>\n                            <Chip\n                              label={player.status}\n                              color={getStatusColor(player.status)}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                          <TableCell>{player.country}</TableCell>\n                          <TableCell align=\"right\">\n                            <Tooltip title=\"View\">\n                              <IconButton size=\"small\">\n                                <VisibilityIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Edit\">\n                              <IconButton size=\"small\">\n                                <EditIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Delete\">\n                              <IconButton size=\"small\">\n                                <DeleteIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={playerListData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </>\n          )}\n        </Paper>\n      </Box>\n    </Box>\n  );\n};\n\nexport default PlayersTab;","import React, { useState, ChangeEvent } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Paper,\n  CircularProgress,\n  useTheme,\n  IconButton,\n  Tooltip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  Rating,\n  Button,\n  Card,\n  CardContent,\n  CardMedia,\n  Theme\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport AddIcon from '@mui/icons-material/Add';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\n\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid,\n  Tooltip as RechartsTooltip, Legend, ResponsiveContainer,\n  PieChart, Pie, Cell, RadarChart, Radar, PolarGrid,\n  PolarAngleAxis, PolarRadiusAxis\n} from 'recharts';\n\n// Types\nimport {\n  GamesTabProps,\n  GameCategoryDataPoint,\n  GamePerformanceDataPoint,\n  GameListItem,\n  FeaturedGame\n} from '../../../types/gamesTab';\n\n/**\n * Games Tab component for the API Dashboard\n * Displays game analytics, performance metrics, and game list\n */\nconst GamesTab: React.FC<GamesTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  theme\n}) => {\n  // Use theme from props or get it from useTheme hook\n  const defaultTheme = useTheme();\n  const currentTheme: Theme = theme || defaultTheme;\n\n  // State for pagination\n  const [page, setPage] = useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = useState<number>(5);\n\n  // Chart colors\n  const COLORS = [\n    currentTheme.palette.primary.main,\n    currentTheme.palette.secondary.main,\n    currentTheme.palette.success.main,\n    currentTheme.palette.error.main,\n    currentTheme.palette.warning.main,\n    currentTheme.palette.info.main\n  ];\n\n  // Handle page change\n  const handleChangePage = (_event: unknown, newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle rows per page change\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>): void => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Format currency for display\n  const formatCurrency = (value: number): string => {\n    return value ? `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}` : '$0.00';\n  };\n\n  // Game category distribution data\n  const gameCategoryData: GameCategoryDataPoint[] = dashboardData?.gameCategoryData || [\n    { name: 'Slots', value: 45 },\n    { name: 'Table Games', value: 25 },\n    { name: 'Poker', value: 15 },\n    { name: 'Live Casino', value: 10 },\n    { name: 'Specialty', value: 5 }\n  ];\n\n  // Game performance data\n  const gamePerformanceData: GamePerformanceDataPoint[] = dashboardData?.gamePerformanceData || [\n    { name: 'Engagement', game1: 80, game2: 90, game3: 70 },\n    { name: 'Retention', game1: 85, game2: 75, game3: 80 },\n    { name: 'Revenue', game1: 90, game2: 80, game3: 85 },\n    { name: 'Popularity', game1: 70, game2: 85, game3: 75 },\n    { name: 'Growth', game1: 75, game2: 70, game3: 90 }\n  ];\n\n  // Game list data\n  const gameListData: GameListItem[] = dashboardData?.topGames || [\n    { id: 1, name: 'Poker Pro', revenue: 3200.56, players: 432, rating: 4.5, category: 'Poker' },\n    { id: 2, name: 'Blackjack Masters', revenue: 2800.32, players: 387, rating: 4.2, category: 'Table Games' },\n    { id: 3, name: 'Slots Royale', revenue: 2300.18, players: 356, rating: 4.7, category: 'Slots' },\n    { id: 4, name: 'Roulette King', revenue: 1900.45, players: 289, rating: 4.0, category: 'Table Games' },\n    { id: 5, name: 'Baccarat Elite', revenue: 1450.67, players: 218, rating: 3.8, category: 'Table Games' }\n  ];\n\n  // Featured games data\n  const featuredGamesData: FeaturedGame[] = dashboardData?.featuredGames || [\n    {\n      id: 1,\n      name: 'Poker Pro',\n      description: 'The ultimate poker experience with multiple game modes and tournaments.',\n      image: 'https://via.placeholder.com/300x150',\n      category: 'Poker',\n      rating: 4.5,\n      players: 432\n    },\n    {\n      id: 2,\n      name: 'Slots Royale',\n      description: 'Exciting slot machine game with progressive jackpots and bonus rounds.',\n      image: 'https://via.placeholder.com/300x150',\n      category: 'Slots',\n      rating: 4.7,\n      players: 356\n    },\n    {\n      id: 3,\n      name: 'Blackjack Masters',\n      description: 'Classic blackjack with advanced features and realistic gameplay.',\n      image: 'https://via.placeholder.com/300x150',\n      category: 'Table Games',\n      rating: 4.2,\n      players: 387\n    }\n  ];\n\n  return (\n    <Box>\n      {/* Featured Games Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Featured Games\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            size=\"small\"\n          >\n            Add Game\n          </Button>\n        </Box>\n        <Grid container spacing={3}>\n          {featuredGamesData.map((game) => (\n            <Grid item xs={12} md={4} key={game.id}>\n              <Card sx={{ height: '100%' }}>\n                <CardMedia\n                  component=\"img\"\n                  height=\"140\"\n                  image={game.image}\n                  alt={game.name}\n                />\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    {game.name}\n                  </Typography>\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <Chip\n                      label={game.category}\n                      size=\"small\"\n                      color=\"primary\"\n                      sx={{ mr: 1 }}\n                    />\n                    <Rating\n                      value={game.rating}\n                      precision={0.5}\n                      size=\"small\"\n                      readOnly\n                    />\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                    {game.description}\n                  </Typography>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <Typography variant=\"body2\">\n                      <strong>{game.players}</strong> active players\n                    </Typography>\n                    <Button size=\"small\" variant=\"outlined\">\n                      Details\n                    </Button>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      {/* Game Analytics Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Game Analytics\n          </Typography>\n          <Box>\n            <Tooltip title=\"Download report\">\n              <IconButton size=\"small\" sx={{ mr: 1 }}>\n                <DownloadIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Settings\">\n              <IconButton size=\"small\">\n                <SettingsIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Game Category Distribution\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={gameCategoryData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      label={({ name, percent }: { name: string, percent: number }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {gameCategoryData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip formatter={(value: any) => [`${value}%`, 'Percentage']} />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Game Performance Comparison\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <RadarChart outerRadius={90} data={gamePerformanceData}>\n                    <PolarGrid />\n                    <PolarAngleAxis dataKey=\"name\" />\n                    <PolarRadiusAxis angle={30} domain={[0, 100]} />\n                    <Radar\n                      name=\"Poker Pro\"\n                      dataKey=\"game1\"\n                      stroke={currentTheme.palette.primary.main}\n                      fill={currentTheme.palette.primary.main}\n                      fillOpacity={0.6}\n                    />\n                    <Radar\n                      name=\"Slots Royale\"\n                      dataKey=\"game2\"\n                      stroke={currentTheme.palette.secondary.main}\n                      fill={currentTheme.palette.secondary.main}\n                      fillOpacity={0.6}\n                    />\n                    <Radar\n                      name=\"Blackjack Masters\"\n                      dataKey=\"game3\"\n                      stroke={currentTheme.palette.success.main}\n                      fill={currentTheme.palette.success.main}\n                      fillOpacity={0.6}\n                    />\n                    <Legend />\n                    <RechartsTooltip />\n                  </RadarChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Game List Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Game Performance\n          </Typography>\n        </Box>\n        <Paper sx={{ borderRadius: 2 }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Game</TableCell>\n                      <TableCell>Category</TableCell>\n                      <TableCell>Rating</TableCell>\n                      <TableCell align=\"right\">Players</TableCell>\n                      <TableCell align=\"right\">Revenue</TableCell>\n                      <TableCell align=\"right\">Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {gameListData\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((game) => (\n                        <TableRow key={game.id}>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <VideogameAssetIcon sx={{ mr: 1, color: currentTheme.palette.primary.main }} />\n                              <Typography variant=\"body1\">\n                                {game.name}\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell>\n                            <Chip\n                              label={game.category}\n                              size=\"small\"\n                              color=\"primary\"\n                              variant=\"outlined\"\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <Rating\n                                value={game.rating}\n                                precision={0.5}\n                                size=\"small\"\n                                readOnly\n                              />\n                              <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                                ({game.rating})\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell align=\"right\">{game.players.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(game.revenue)}</TableCell>\n                          <TableCell align=\"right\">\n                            <Tooltip title=\"View\">\n                              <IconButton size=\"small\">\n                                <VisibilityIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Edit\">\n                              <IconButton size=\"small\">\n                                <EditIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Delete\">\n                              <IconButton size=\"small\">\n                                <DeleteIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={gameListData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </>\n          )}\n        </Paper>\n      </Box>\n    </Box>\n  );\n};\n\nexport default GamesTab;","import React, { memo, useCallback, useMemo } from 'react';\nimport { Box, Tabs, Tab, Theme } from '@mui/material';\nimport TabPanel from '../common/TabPanel';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport EmptyState from '../common/EmptyState';\nimport { CommonProps } from '../../types/common';\nimport { DashboardStats } from '../../types/dashboard';\n\n// Tab components\nimport OverviewTab from './tabs/OverviewTab';\nimport EnhancedOverviewTab from './tabs/EnhancedOverviewTab';\nimport PerformanceTab from './tabs/PerformanceTab';\nimport PlayersTab from './tabs/PlayersTab';\nimport GamesTab from './tabs/GamesTab';\n\ninterface DashboardTabsProps extends CommonProps {\n  activeTab: number;\n  onTabChange: (event: React.SyntheticEvent, newValue: number) => void;\n  dashboardData: any; // This should be typed more specifically based on your data structure\n  isLoading: boolean;\n  error: Error | null;\n  theme: Theme;\n}\n\n// Tab interface\ninterface TabItem {\n  id: number;\n  label: string;\n  component: React.ReactNode;\n}\n\n/**\n * Dashboard Tabs Component\n * Manages tab navigation and content rendering\n * Optimized with memoization to prevent unnecessary re-renders\n */\nconst DashboardTabs: React.FC<DashboardTabsProps> = ({\n  activeTab,\n  onTabChange,\n  dashboardData,\n  isLoading,\n  error,\n  theme,\n  sx\n}) => {\n  // Memoized tab change handler\n  const handleTabChange = useCallback((event: React.SyntheticEvent, newValue: number) => {\n    if (onTabChange) {\n      onTabChange(event, newValue);\n    }\n  }, [onTabChange]);\n\n  // Memoized tab components to prevent unnecessary re-renders\n  const tabComponents = useMemo((): TabItem[] => [\n    {\n      id: 0,\n      label: \"Dashboard Overview\",\n      component: (\n        <EnhancedOverviewTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n          error={error}\n        />\n      )\n    },\n    {\n      id: 1,\n      label: \"Performance Metrics\",\n      component: (\n        <PerformanceTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n          error={error}\n        />\n      )\n    },\n    {\n      id: 2,\n      label: \"Player Analytics\",\n      component: (\n        <PlayersTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n        />\n      )\n    },\n    {\n      id: 3,\n      label: \"Game Analytics\",\n      component: (\n        <GamesTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n        />\n      )\n    }\n  ], [dashboardData, isLoading, error, theme]);\n\n  // Memoized error fallback component\n  const errorFallback = useCallback((message: string) => (\n    <EmptyState\n      message={message}\n      icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n    />\n  ), []);\n\n  return (\n    <div className=\"dashboard-tabs-container\">\n      {/* Dashboard Tabs */}\n      <div style={{ borderBottom: '1px solid rgba(0, 0, 0, 0.12)', marginBottom: 24 }}>\n        <Tabs\n          value={activeTab}\n          onChange={handleTabChange}\n          aria-label=\"dashboard tabs\"\n          role=\"tablist\"\n        >\n          {tabComponents.map((tab) => (\n            <Tab\n              key={tab.id}\n              label={tab.label.split(' ')[0]} // Just use the first word for the tab label\n              id={`tab-${tab.id}`}\n              aria-controls={`tabpanel-${tab.id}`}\n              tabIndex={activeTab === tab.id ? 0 : -1}\n            />\n          ))}\n        </Tabs>\n      </div>\n\n      {/* Tab Content */}\n      {tabComponents.map((tab) => (\n        <TabPanel key={tab.id} value={activeTab} index={tab.id} label={tab.label}>\n          <ErrorBoundary\n            fallback={errorFallback(`Something went wrong loading the ${tab.label.toLowerCase()}`)}\n          >\n            {tab.component}\n          </ErrorBoundary>\n        </TabPanel>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(DashboardTabs);\n","import React from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Tooltip,\n  CircularProgress,\n  Divider,\n  IconButton,\n  alpha\n} from '@mui/material';\nimport SimpleBox from './SimpleBox';\nimport { createSx } from '../../utils/styleUtils';\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\nimport TrendingFlatIcon from '@mui/icons-material/TrendingFlat';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { KPICardProps } from '../../types/common';\nimport CardAccent from './CardAccent';\nimport { getFlatModernCardSx } from '../../utils/applyFlatModernStyle';\n\n/**\n * KPI (Key Performance Indicator) card component for displaying metrics with trends\n */\nconst KPICard: React.FC<KPICardProps> = ({\n  title,\n  value,\n  subtitle,\n  description,\n  trend = null,\n  trendLabel = 'vs previous period',\n  icon = null,\n  loading = false,\n  onMoreClick,\n  color,\n  isInverse = false,\n  prefix = '',\n  valueFormatOptions,\n  sx\n}) => {\n  // Determine the trend direction and color\n  const getTrendInfo = () => {\n    if (trend === null) return { icon: null, color: 'text.secondary' };\n\n    if (trend > 0) {\n      return {\n        icon: <TrendingUpIcon fontSize=\"small\" />,\n        color: isInverse ? 'error.main' : 'success.main'\n      };\n    }\n\n    if (trend < 0) {\n      return {\n        icon: <TrendingDownIcon fontSize=\"small\" />,\n        color: isInverse ? 'success.main' : 'error.main'\n      };\n    }\n\n    return {\n      icon: <TrendingFlatIcon fontSize=\"small\" />,\n      color: 'text.secondary'\n    };\n  };\n\n  const trendInfo = getTrendInfo();\n\n  // Format the trend percentage\n  const formatTrend = (value: number | null): string => {\n    if (value === null || value === undefined) return '';\n    // Ensure value is a valid number\n    if (isNaN(Number(value))) return '';\n    // Ensure value is rounded to 2 decimal places\n    const roundedValue = parseFloat(Number(value).toFixed(2));\n    const prefix = roundedValue > 0 ? '+' : '';\n    return `${prefix}${roundedValue.toFixed(2)}%`;\n  };\n\n  // Format the main value\n  const formatValue = (value: string | number | undefined | null): string => {\n    // If value is undefined or null, return a default value\n    if (value === undefined || value === null) return '0';\n\n    // If value is already a string, return it as is\n    if (typeof value === 'string') return value;\n\n    // Ensure value is a valid number\n    if (isNaN(Number(value))) return '0';\n\n    // If we have format options, use them with Intl.NumberFormat\n    if (valueFormatOptions) {\n      return new Intl.NumberFormat('en-GB', valueFormatOptions).format(value);\n    }\n\n    // Default formatting with 2 decimal places\n    return new Intl.NumberFormat('en-GB', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(value);\n  };\n\n  // Determine the accent variant based on the trend\n  const getAccentVariant = (): 'teal' | 'green' | 'red' | 'blue' => {\n    if (trend === null) return 'blue';\n    if (trend > 0) return isInverse ? 'red' : 'green';\n    if (trend < 0) return isInverse ? 'green' : 'red';\n    return 'blue';\n  };\n\n  return (\n    <Card\n      sx={{\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        bgcolor: color,\n        position: 'relative',\n        overflow: 'hidden',\n        boxShadow: '0px 12px 24px rgba(0, 0, 0, 0.12), 0px 24px 32px rgba(0, 0, 0, 0.16)',\n        borderRadius: 2,\n        border: '1px solid rgba(0, 0, 0, 0.08)',\n        transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n        '&:hover': {\n          transform: 'translateY(-4px)',\n          boxShadow: '0px 16px 32px rgba(0, 0, 0, 0.16), 0px 32px 48px rgba(0, 0, 0, 0.2)',\n        },\n        ...sx\n      }}\n    >\n      <CardAccent\n        position=\"left\"\n        variant={getAccentVariant()}\n      />\n      <CardContent sx={{ flex: 1, position: 'relative', p: 3 }}>\n        {/* Card header with title and actions */}\n        <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 })}>\n          <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center' })}>\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\n              {title}\n            </Typography>\n\n            {description && (\n              <Tooltip title={description} arrow>\n                <IconButton size=\"small\" sx={{ ml: 0.5, p: 0 }}>\n                  <InfoOutlinedIcon fontSize=\"small\" color=\"action\" />\n                </IconButton>\n              </Tooltip>\n            )}\n          </SimpleBox>\n\n          {onMoreClick && (\n            <IconButton\n              size=\"small\"\n              onClick={(event) => onMoreClick(event)}\n              sx={{ marginRight: -1 }}\n            >\n              <MoreVertIcon fontSize=\"small\" />\n            </IconButton>\n          )}\n        </SimpleBox>\n\n        {/* Main content with value and icon */}\n        <SimpleBox\n          sx={createSx({\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            mt: 1\n          })}\n        >\n          <SimpleBox>\n            {loading ? (\n              <CircularProgress size={24} />\n            ) : (\n              <>\n                <Typography variant=\"h4\" component=\"div\" fontWeight=\"medium\">\n                  {prefix}{formatValue(value)}\n                </Typography>\n\n                {subtitle && (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {subtitle}\n                  </Typography>\n                )}\n              </>\n            )}\n          </SimpleBox>\n\n          {icon && (\n            <SimpleBox\n              sx={createSx({\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                bgcolor: (theme: any) => alpha(theme.palette.primary.main, 0.1),\n                color: 'primary.main',\n                borderRadius: '50%',\n                width: 48,\n                height: 48\n              })}\n            >\n              {icon}\n            </SimpleBox>\n          )}\n        </SimpleBox>\n\n        {/* Trend indicator */}\n        {trend !== null && (\n          <>\n            <Divider sx={{ my: 1.5, borderColor: 'divider' }} />\n\n            <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center' })}>\n              <SimpleBox\n                sx={createSx({\n                  display: 'flex',\n                  alignItems: 'center',\n                  color: trendInfo.color,\n                  mr: 1\n                })}\n              >\n                {trendInfo.icon}\n                <Typography\n                  variant=\"body2\"\n                  component=\"span\"\n                  fontWeight=\"medium\"\n                  sx={{ color: trendInfo.color, ml: 0.5 }}\n                >\n                  {formatTrend(trend)}\n                </Typography>\n              </SimpleBox>\n\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {trendLabel}\n              </Typography>\n            </SimpleBox>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default KPICard;\n","import React from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Paper,\n  Button,\n  IconButton,\n  Tooltip,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  useTheme\n} from '@mui/material';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport TuneIcon from '@mui/icons-material/Tune';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport BugReportIcon from '@mui/icons-material/BugReport';\nimport { CommonProps } from '../../types/common';\n\ninterface User {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  id?: string;\n}\n\ninterface DashboardHeaderProps extends CommonProps {\n  user?: User;\n  onRefresh?: () => void;\n  onToggleFilters?: () => void;\n  onFilterReset?: () => void;\n  onToggleTestPanel?: () => void;\n  filterMenuAnchor: HTMLElement | null;\n  onFilterMenuClick?: (event: React.MouseEvent<HTMLElement>) => void;\n  onFilterMenuClose?: () => void;\n  showTestPanel?: boolean;\n}\n\n/**\n * Dashboard Header Component\n * Contains welcome message, filter controls, and action buttons\n */\nconst DashboardHeader: React.FC<DashboardHeaderProps> = ({\n  user,\n  onRefresh,\n  onToggleFilters,\n  onFilterReset,\n  onToggleTestPanel,\n  filterMenuAnchor,\n  onFilterMenuClick,\n  onFilterMenuClose,\n  showTestPanel,\n  sx\n}) => {\n  const theme = useTheme();\n\n  return (\n    <ErrorBoundary\n      fallback={\n        <Paper\n          elevation={0}\n          sx={{\n            p: 3,\n            mb: 4,\n            bgcolor: theme.palette.error.light,\n            color: 'white',\n            borderRadius: 2\n          }}\n        >\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <ErrorOutlineIcon sx={{ mr: 2, fontSize: 32 }} />\n            <Typography variant=\"h6\">\n              Something went wrong loading the dashboard header\n            </Typography>\n          </Box>\n        </Paper>\n      }\n    >\n      <Paper\n        elevation={0}\n        sx={{\n          p: 3,\n          mb: 4,\n          bgcolor: theme.palette.primary.main,\n          color: 'white',\n          borderRadius: 2,\n          ...sx\n        }}\n      >\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={12} md={8}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            Welcome, {user?.firstName || 'User'}!\n          </Typography>\n          <Typography variant=\"body1\">\n            Here's an overview of your PP Reporter performance. Use the dashboard to monitor key metrics and gain insights.\n          </Typography>\n        </Grid>\n        <Grid item xs={12} md={4} sx={{ textAlign: 'right' }}>\n          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={onFilterMenuClick}\n              startIcon={<FilterListIcon />}\n              sx={{\n                bgcolor: 'white',\n                color: theme.palette.primary.main,\n                '&:hover': {\n                  bgcolor: theme.palette.grey[100]\n                }\n              }}\n              aria-label=\"Open filter menu\"\n            >\n              Filter\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={onRefresh}\n              startIcon={<RefreshIcon />}\n              sx={{\n                bgcolor: 'white',\n                color: theme.palette.primary.main,\n                '&:hover': {\n                  bgcolor: theme.palette.grey[100]\n                }\n              }}\n              aria-label=\"Refresh dashboard data\"\n            >\n              Refresh\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={onToggleTestPanel}\n              startIcon={<BugReportIcon />}\n              sx={{\n                bgcolor: 'white',\n                color: theme.palette.primary.main,\n                '&:hover': {\n                  bgcolor: theme.palette.grey[100]\n                }\n              }}\n              aria-label=\"Toggle test panel\"\n            >\n              Test\n            </Button>\n\n            {/* Filter Menu */}\n            <Menu\n              anchorEl={filterMenuAnchor}\n              open={Boolean(filterMenuAnchor)}\n              onClose={onFilterMenuClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n            >\n              <MenuItem onClick={onToggleFilters}>\n                <ListItemIcon>\n                  <TuneIcon fontSize=\"small\" />\n                </ListItemIcon>\n                <ListItemText>Advanced Filters</ListItemText>\n              </MenuItem>\n              <MenuItem onClick={onFilterReset}>\n                <ListItemIcon>\n                  <ClearIcon fontSize=\"small\" />\n                </ListItemIcon>\n                <ListItemText>Reset Filters</ListItemText>\n              </MenuItem>\n            </Menu>\n          </Box>\n        </Grid>\n      </Grid>\n    </Paper>\n    </ErrorBoundary>\n  );\n};\n\nexport default DashboardHeader;\n","import React, { memo, useMemo } from 'react';\nimport { Grid, Typography, FormControl, InputLabel, Select, MenuItem, Skeleton, SelectChangeEvent } from '@mui/material';\nimport SimpleBox from '../common/SimpleBox';\nimport { createSx } from '../../utils/styleUtils';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport EmptyState from '../common/EmptyState';\nimport Card from '../common/Card';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport CasinoRevenueChart from './CasinoRevenueChart';\nimport TopGamesChart from './TopGamesChart';\nimport { CommonProps } from '../../types/common';\nimport { DashboardChartData, TimePeriod } from '../../types/dashboard';\n\ninterface DashboardChartsProps extends CommonProps {\n  data?: DashboardChartData | null;\n  loading?: boolean;\n  error?: Error | null;\n  title?: string;\n  timePeriod?: TimePeriod;\n  onTimePeriodChange?: (period: TimePeriod) => void;\n}\n\n/**\n * DashboardCharts component\n * Displays charts and visualizations for dashboard data\n */\nconst DashboardCharts: React.FC<DashboardChartsProps> = ({\n  data,\n  loading,\n  error,\n  title = 'Performance Metrics',\n  timePeriod = 'week',\n  onTimePeriodChange,\n  sx\n}) => {\n  // Default data if none is provided\n  const chartsData: DashboardChartData = data || {\n    revenueByDay: [],\n    playersByGame: []\n  };\n\n  // Memoize the revenue data to prevent unnecessary transformations\n  const preparedRevenueData = useMemo(() => {\n    return chartsData.revenueByDay.map(item => ({\n      date: item.day,\n      revenue: item.value\n    }));\n  }, [chartsData.revenueByDay]);\n\n  // Memoize the games data to convert from GameDataPoint to GameData\n  const preparedGamesData = useMemo(() => {\n    return chartsData.playersByGame.map((item, index) => ({\n      id: `game-${index}`,\n      name: item.game,\n      revenue: item.value,\n      players: item.value,\n      sessions: 0,\n      category: 'Unknown'\n    }));\n  }, [chartsData.playersByGame]);\n\n  // Handle time period change\n  const handleTimePeriodChange = (event: SelectChangeEvent<string>) => {\n    if (onTimePeriodChange) {\n      onTimePeriodChange(event.target.value as TimePeriod);\n    }\n  };\n\n  // If there's an error, return an error message\n  if (error) {\n    return (\n      <EmptyState\n        message={`Error loading charts: ${error.message}`}\n        icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n      />\n    );\n  }\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Error displaying charts\" />}>\n      <SimpleBox sx={createSx({ mb: 4, ...sx })}>\n        <Typography variant=\"h5\" sx={{ mb: 2 }}>\n          {title}\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Card\n              title=\"Revenue Trends\"\n              action={\n                <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center' })}>\n                  <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                    <InputLabel id=\"time-period-label\">Period</InputLabel>\n                    <Select\n                      labelId=\"time-period-label\"\n                      id=\"time-period-select\"\n                      value={timePeriod}\n                      label=\"Period\"\n                      onChange={handleTimePeriodChange}\n                    >\n                      <MenuItem value=\"day\">Day</MenuItem>\n                      <MenuItem value=\"week\">Week</MenuItem>\n                      <MenuItem value=\"month\">Month</MenuItem>\n                      <MenuItem value=\"quarter\">Quarter</MenuItem>\n                    </Select>\n                  </FormControl>\n                </SimpleBox>\n              }\n            >\n              {loading ? (\n                <SimpleBox sx={createSx({ p: 3 })}>\n                  <Skeleton variant=\"rectangular\" height={300} />\n                </SimpleBox>\n              ) : (\n                <CasinoRevenueChart\n                  data={preparedRevenueData}\n                  isLoading={loading}\n                />\n              )}\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Card title=\"Player Distribution by Game\">\n              {loading ? (\n                <SimpleBox sx={createSx({ p: 3 })}>\n                  <Skeleton variant=\"rectangular\" height={300} />\n                </SimpleBox>\n              ) : (\n                <TopGamesChart\n                  data={preparedGamesData}\n                  isLoading={loading}\n                />\n              )}\n            </Card>\n          </Grid>\n        </Grid>\n      </SimpleBox>\n    </ErrorBoundary>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(DashboardCharts);\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\nimport InfoIcon from '@mui/icons-material/Info';\nimport { EmptyStateProps } from '../../types/common';\n\n/**\n * EmptyState component\n * Displays a message when no data is available\n */\nconst EmptyState: React.FC<EmptyStateProps> = ({ \n  message = 'No data available', \n  icon = <InfoIcon sx={{ fontSize: 48, color: 'text.secondary' }} />,\n  action,\n  description,\n  sx = {}\n}) => {\n  return (\n    <Box \n      sx={{ \n        display: 'flex', \n        flexDirection: 'column', \n        alignItems: 'center', \n        justifyContent: 'center', \n        p: 4,\n        ...sx\n      }}\n    >\n      {icon}\n      <Typography \n        variant=\"body1\" \n        color=\"text.secondary\" \n        sx={{ mt: 2, textAlign: 'center' }}\n      >\n        {message}\n      </Typography>\n      \n      {description && (\n        <Typography \n          variant=\"body2\" \n          color=\"text.secondary\" \n          sx={{ mt: 1, textAlign: 'center' }}\n        >\n          {description}\n        </Typography>\n      )}\n      \n      {action && (\n        <Box sx={{ mt: 2 }}>\n          {action}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default EmptyState;\n","import React, { memo, useEffect } from 'react';\nimport { Grid, Typography, Button } from '@mui/material';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport PeopleIcon from '@mui/icons-material/People';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport KPICard from '../common/KPICard';\nimport { formatCurrency } from '../../utils/formatters';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport EmptyState from '../common/EmptyState';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport { CommonProps } from '../../types/common';\nimport { DashboardStats } from '../../types/dashboard';\nimport { useDispatch } from 'react-redux';\nimport { fetchDashboardSummary } from '../../store/slices/dashboardSlice';\nimport SimpleBox from '../common/SimpleBox';\nimport { createSx } from '../../utils/styleUtils';\n\ninterface DashboardMetricsProps extends CommonProps {\n  stats?: DashboardStats | null;\n  loading?: boolean;\n  error?: Error | null;\n  title?: string;\n  onRetry?: () => void;\n}\n\n/**\n * DashboardMetrics component\n * Displays key performance indicators in a grid of cards\n */\nconst DashboardMetrics: React.FC<DashboardMetricsProps> = ({\n  stats,\n  loading = false,\n  error = null,\n  title = 'Key Metrics',\n  onRetry,\n  sx\n}) => {\n  const dispatch = useDispatch();\n\n  // Fetch dashboard summary data if not provided\n  useEffect(() => {\n    if (!stats && !loading && !error) {\n      dispatch(fetchDashboardSummary() as any);\n    }\n  }, [dispatch, stats, loading, error]);\n\n  // If there's an error, return an error message\n  if (error) {\n    return (\n      <EmptyState\n        message={`Error loading metrics: ${error.message}`}\n        icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n        action={onRetry ? <Button onClick={onRetry}>Retry</Button> : undefined}\n      />\n    );\n  }\n\n  // Default stats if none are provided\n  const metricsData: DashboardStats = stats || {\n    revenue: { value: 0, change: 0 },\n    players: { value: 0, change: 0 },\n    games: { value: 0, change: 0 },\n    engagement: { value: 0, change: 0 }\n  };\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Error displaying metrics\" />}>\n      <SimpleBox sx={createSx({ mb: 4, ...sx })}>\n        <Typography variant=\"h5\" sx={createSx({ mb: 2 })}>\n          {title}\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Total Revenue\"\n              value={formatCurrency(metricsData.revenue.value)}\n              trend={metricsData.revenue.change}\n              icon={<AttachMoneyIcon />}\n              loading={loading}\n              description=\"Total revenue across all games\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Active Players\"\n              value={metricsData.players.value.toLocaleString()}\n              trend={metricsData.players.change}\n              icon={<PeopleIcon />}\n              loading={loading}\n              description=\"Number of active players\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Popular Games\"\n              value={metricsData.games.value}\n              trend={metricsData.games.change}\n              icon={<VideogameAssetIcon />}\n              loading={loading}\n              description=\"Number of games with active players\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Engagement Rate\"\n              value={`${metricsData.engagement.value}%`}\n              trend={metricsData.engagement.change}\n              icon={<TimelineIcon />}\n              loading={loading}\n              description=\"Average player engagement rate\"\n            />\n          </Grid>\n        </Grid>\n      </SimpleBox>\n    </ErrorBoundary>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(DashboardMetrics);\n","import React, { memo, useMemo, useEffect } from 'react';\nimport { CircularProgress, Typography, useMediaQuery, useTheme } from '@mui/material';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line } from 'recharts';\nimport SimpleBox from '../common/SimpleBox';\nimport { createSx } from '../../utils/styleUtils';\nimport { formatCurrency, formatDate } from '../../utils/formatters';\nimport { CommonProps } from '../../types/common';\nimport { useDispatch } from 'react-redux';\nimport { fetchRevenueChart } from '../../store/slices/dashboardSlice';\n\n// Revenue data item interface\ninterface RevenueDataItem {\n  date: string;\n  revenue?: number;\n  value?: number;\n  [key: string]: any;\n}\n\n// Chart data item interface\ninterface ChartDataItem {\n  date: string;\n  fullDate: string;\n  revenue: number;\n  formattedValue: string;\n}\n\n// Component props interface\ninterface CasinoRevenueChartProps extends CommonProps {\n  data: RevenueDataItem[];\n  isLoading?: boolean;\n  height?: number;\n  error?: Error | null;\n  onRetry?: () => void;\n}\n\n/**\n * Casino Revenue Chart component that displays revenue data over time\n * with responsive behavior for mobile devices\n */\nconst CasinoRevenueChart: React.FC<CasinoRevenueChartProps> = ({\n  data,\n  isLoading = false,\n  height = 300,\n  error = null,\n  onRetry,\n  sx\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const dispatch = useDispatch();\n\n  // Fetch revenue chart data if not provided\n  useEffect(() => {\n    if (!data || data.length === 0) {\n      if (!isLoading && !error) {\n        dispatch(fetchRevenueChart() as any);\n      }\n    }\n  }, [dispatch, data, isLoading, error]);\n\n  // Format data for chart display - memoized to prevent unnecessary recalculations\n  const chartData: ChartDataItem[] = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.map(item => ({\n      date: formatDate(item.date),\n      fullDate: item.date,\n      revenue: parseFloat((item.revenue || item.value || 0).toString()),\n      formattedValue: formatCurrency(item.revenue || item.value || 0)\n    }));\n  }, [data]);\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx })}>\n        <CircularProgress />\n      </SimpleBox>\n    );\n  }\n\n  // Handle error state\n  if (error) {\n    return (\n      <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx })}>\n        <Typography variant=\"body1\" color=\"error\">\n          Error loading revenue data: {error.message}\n          {onRetry && (\n            <SimpleBox component=\"span\" sx={createSx({ ml: 2, cursor: 'pointer', textDecoration: 'underline' })} onClick={onRetry}>\n              Retry\n            </SimpleBox>\n          )}\n        </Typography>\n      </SimpleBox>\n    );\n  }\n\n  // Handle empty data state\n  if (!data || data.length === 0) {\n    return (\n      <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx })}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          No revenue data available\n        </Typography>\n      </SimpleBox>\n    );\n  }\n\n  // Mobile view - Line chart (simpler, less CPU intensive)\n  if (isMobile) {\n    return (\n      <SimpleBox sx={createSx({ width: '100%', height, ...sx })}>\n        <ResponsiveContainer>\n          <LineChart\n            data={chartData}\n            margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"date\"\n              tick={{ fontSize: 10 }}\n              interval=\"preserveStartEnd\"\n            />\n            <YAxis\n              tickFormatter={(value: number) => formatCurrency(value, 'GBP').replace('£', '')}\n              tick={{ fontSize: 10 }}\n              width={40}\n            />\n            <Tooltip\n              formatter={(value: number) => [formatCurrency(value), 'Revenue']}\n              labelFormatter={(label: string) => {\n                const item = chartData.find(d => d.date === label);\n                return item ? formatDate(item.fullDate) : label;\n              }}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"revenue\"\n              name=\"Revenue\"\n              stroke=\"#2e7d32\"\n              strokeWidth={2}\n              dot={{ r: 3 }}\n              activeDot={{ r: 5 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </SimpleBox>\n    );\n  }\n\n  // Desktop view - Area chart\n  return (\n    <SimpleBox sx={createSx({ width: '100%', height, ...sx })}>\n      <ResponsiveContainer>\n        <AreaChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis\n            tickFormatter={(value: number) => formatCurrency(value, 'GBP').replace('£', '')}\n          />\n          <Tooltip\n            formatter={(value: number) => [formatCurrency(value), 'Revenue']}\n          />\n          <Legend />\n          <Area\n            type=\"monotone\"\n            dataKey=\"revenue\"\n            name=\"Revenue\"\n            stroke=\"#2e7d32\"\n            fill=\"#4caf50\"\n            fillOpacity={0.3}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </SimpleBox>\n  );\n};\n\n// Export memoized component\nexport default memo(CasinoRevenueChart);\n"],"names":["_ref","position","variant","showWavePattern","thickness","color","patternOpacity","theme","useTheme","accentColor","getColor","teal","palette","primary","main","purple","secondary","blue","info","green","success","amber","warning","red","error","positionStyles","getPositionStyles","top","left","right","height","width","bottom","accentStyle","backgroundColor","zIndex","_jsxs","_Fragment","children","_jsx","style","opacity","backgroundImage","getWavePatternBackground","backgroundSize","backgroundPosition","backgroundRepeat","formatCurrency","value","currencyCode","arguments","length","undefined","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","format","formatNumber","decimals","formatDate","date","dateObj","Date","DateTimeFormat","day","month","year","formatDateTime","hour","minute","hour12","formatPercentage","toFixed","title","subheader","action","icon","sx","collapsible","defaultExpanded","expanded","setExpanded","useState","Paper","borderRadius","overflow","Box","px","py","display","alignItems","justifyContent","mr","Typography","component","IconButton","onClick","handleExpandToggle","ml","size","ExpandLessIcon","ExpandMoreIcon","Divider","Collapse","in","VirtualizedTable","data","columns","rowHeight","loading","emptyMessage","onRowClick","headerHeight","Row","useCallback","_ref2","index","row","TableRow","hover","boxSizing","cursor","map","column","id","cellWidth","TableCell","align","textOverflow","whiteSpace","CircularProgress","TableContainer","Table","TableHead","fontWeight","label","TableBody","FixedSizeList","itemCount","itemSize","memo","CustomTooltip","active","payload","padding","border","boxShadow","gutterBottom","name","players","toLocaleString","TopGamesChart","isLoading","showLegend","onRetry","emptyStateMessage","errorFallback","valueKey","nameKey","viewMode","setViewMode","dispatch","useDispatch","useEffect","fetchTopGames","chartData","useMemo","game","revenue","category","colors","light","tableColumns","message","marginLeft","textDecoration","borderBottom","marginBottom","Tabs","onChange","handleViewModeChange","event","newValue","Tab","ResponsiveContainer","BarChart","margin","CartesianGrid","strokeDasharray","XAxis","dataKey","angle","textAnchor","tick","fontSize","YAxis","tickFormatter","Tooltip","content","Legend","Bar","radius","entry","Cell","fill","RecentTransactionsTable","maxHeight","showHeader","fetchRecentTransactions","getStatusColor","status","toLowerCase","grey","getTypeColor","type","stickyHeader","Array","from","_","Skeleton","transaction","noWrap","maxWidth","playerName","Chip","bgcolor","amount","timestamp","other","isSelected","role","hidden","p","ErrorBoundary","Component","constructor","props","super","handleReset","this","setState","hasError","state","getDerivedStateFromError","stack","componentDidCatch","errorInfo","console","render","fallback","textAlign","ErrorOutlineIcon","mb","Button","startIcon","RefreshIcon","onDownload","onSettings","transactionsData","DownloadIcon","SettingsIcon","Card","EmptyState","AttachMoneyIcon","EnhancedOverviewTab","_dashboardData$stats","_dashboardData$stats2","_dashboardData$topGam","_dashboardData$stats3","_dashboardData$stats4","_dashboardData$charts","_dashboardData$charts2","dashboardData","timePeriod","setTimePeriod","metricsData","stats","change","games","topGames","engagement","engagementRate","engagementChange","chartsData","revenueByDay","charts","item","playersByGame","DashboardMetrics","DashboardCharts","onTimePeriodChange","period","log","RecentTransactionsSection","recentTransactions","_dashboardData$charts4","defaultTheme","currentTheme","chartType","setChartType","revenueData","playerDistributionData","_dashboardData$charts3","kpiData","kpis","averageSessionTime","conversionRate","churnRate","revenuePerUser","preparedRevenueData","SimpleBox","createSx","Grid","container","spacing","xs","md","FormControl","minWidth","InputLabel","Select","labelId","target","MenuItem","CasinoRevenueChart","sessions","sm","KPICard","TimelineIcon","description","TrendingUpIcon","TrendingDownIcon","isInverse","page","setPage","rowsPerPage","setRowsPerPage","COLORS","playerAcquisitionData","playerRegistrations","count","playerDemographicsData","playerDemographics","playerAgeData","age","playerListData","recentPlayers","registeredAt","country","dateString","toLocaleDateString","RechartsTooltip","formatter","labelFormatter","PieChart","Pie","cx","cy","labelLine","outerRadius","percent","PersonAddIcon","slice","player","Avatar","split","part","join","toUpperCase","VisibilityIcon","EditIcon","DeleteIcon","TablePagination","rowsPerPageOptions","onPageChange","handleChangePage","_event","newPage","onRowsPerPageChange","parseInt","gameCategoryData","gamePerformanceData","game1","game2","game3","gameListData","rating","featuredGamesData","featuredGames","image","AddIcon","CardMedia","alt","CardContent","Rating","precision","readOnly","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","domain","Radar","stroke","fillOpacity","VideogameAssetIcon","DashboardTabs","activeTab","onTabChange","handleTabChange","tabComponents","PerformanceTab","PlayersTab","GamesTab","className","tab","tabIndex","TabPanel","subtitle","trend","trendLabel","onMoreClick","prefix","valueFormatOptions","trendInfo","TrendingFlatIcon","flexDirection","transition","transform","CardAccent","flex","arrow","InfoOutlinedIcon","marginRight","MoreVertIcon","mt","isNaN","Number","formatValue","alpha","my","borderColor","roundedValue","parseFloat","formatTrend","user","onRefresh","onToggleFilters","onFilterReset","onToggleTestPanel","filterMenuAnchor","onFilterMenuClick","onFilterMenuClose","showTestPanel","elevation","firstName","gap","FilterListIcon","BugReportIcon","Menu","anchorEl","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","ListItemIcon","TuneIcon","ListItemText","ClearIcon","preparedGamesData","InfoIcon","fetchDashboardSummary","PeopleIcon","isMobile","useMediaQuery","breakpoints","down","fetchRevenueChart","fullDate","toString","formattedValue","LineChart","interval","replace","find","d","Line","strokeWidth","dot","r","activeDot","AreaChart","Area"],"sourceRoot":""}