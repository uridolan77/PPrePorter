{"version":3,"file":"static/js/8908.e1bd84c9.chunk.js","mappings":"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","sources":["pages/reports/FinancialPage.tsx","../node_modules/@mui/icons-material/Download.js","../node_modules/@mui/icons-material/InfoOutlined.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Collapse\n} from '@mui/material';\nimport { EnhancedTable } from '../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../components/tables/enhanced/types';\nimport MultiSelect, { MultiSelectOption } from '../../components/common/MultiSelect';\nimport { format as formatDate } from 'date-fns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport { FinancialData, FinancialSummary, FinancialFilters } from '../../types/financial';\nimport api from '../../services/api';\nimport { formatCurrency, formatNumber, formatPercentage } from '../../utils/formatters';\nimport { ReportAreaChart, ReportBarChart } from '../../components/reports/charts/ReportCharts';\n\n/**\n * FinancialPage component\n * Displays a comprehensive financial report with filtering and data visualization\n */\nconst FinancialPage: React.FC = () => {\n  // State for filters\n  const [startDate, setStartDate] = useState<Date>(new Date(new Date().setDate(new Date().getDate() - 30)));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [selectedWhiteLabels, setSelectedWhiteLabels] = useState<(string | number)[]>([]);\n  const [selectedCountries, setSelectedCountries] = useState<(string | number)[]>([]);\n  const [groupBy, setGroupBy] = useState<string>('day');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState<boolean>(false);\n  const [advancedFilters, setAdvancedFilters] = useState<Record<string, any>>({});\n\n  // State for data\n  const [financialData, setFinancialData] = useState<FinancialData[]>([]);\n  const [summary, setSummary] = useState<FinancialSummary | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState<number>(0);\n\n  // State for metadata\n  const [whiteLabels, setWhiteLabels] = useState<Array<{ id: string; name: string }>>([]);\n  const [countries, setCountries] = useState<Array<{ id: string; name: string }>>([]);\n  const [whiteLabelsLoading, setWhiteLabelsLoading] = useState<boolean>(false);\n  const [countriesLoading, setCountriesLoading] = useState<boolean>(false);\n  const [whiteLabelsOptions, setWhiteLabelsOptions] = useState<MultiSelectOption[]>([]);\n  const [countriesOptions, setCountriesOptions] = useState<MultiSelectOption[]>([]);\n\n  // State for table\n  const [page, setPage] = useState<number>(0);\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [sortBy, setSortBy] = useState<string>('date');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n\n  // State for export dialog\n  const [exportDialogOpen, setExportDialogOpen] = useState<boolean>(false);\n  const [exportFormat, setExportFormat] = useState<string>('excel');\n\n  // Fetch metadata (white labels and countries) on component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        console.log('[FINANCIAL PAGE] Fetching metadata');\n        setWhiteLabelsLoading(true);\n        setCountriesLoading(true);\n\n        // Get metadata from API\n        const data = await api.financial.getMetadata();\n        console.log('[FINANCIAL PAGE] Got metadata from service:', data);\n\n        // Handle white labels\n        if (data && data.whiteLabels) {\n          console.log('[FINANCIAL PAGE] Got white labels from service:', data.whiteLabels);\n          const fetchedWhiteLabels = data.whiteLabels || [];\n          setWhiteLabels(fetchedWhiteLabels);\n\n          // Convert white labels to MultiSelect options\n          const whiteLabelsOptions = fetchedWhiteLabels.map((whiteLabel) => ({\n            value: whiteLabel.id,\n            label: whiteLabel.name\n          }));\n          setWhiteLabelsOptions(whiteLabelsOptions);\n        } else {\n          console.log('[FINANCIAL PAGE] No white labels found in API response');\n          setWhiteLabels([]);\n          setWhiteLabelsOptions([]);\n        }\n        setWhiteLabelsLoading(false);\n\n        // Handle countries\n        if (data && data.countries) {\n          console.log('[FINANCIAL PAGE] Got countries from service:', data.countries);\n          const fetchedCountries = data.countries || [];\n          setCountries(fetchedCountries);\n\n          // Convert countries to MultiSelect options\n          const countryOptions = fetchedCountries.map((country) => ({\n            value: country.id,\n            label: country.name\n          }));\n          setCountriesOptions(countryOptions);\n        } else {\n          console.log('[FINANCIAL PAGE] No countries found in API response');\n          setCountries([]);\n          setCountriesOptions([]);\n        }\n        setCountriesLoading(false);\n      } catch (err) {\n        console.error('[FINANCIAL PAGE] Error fetching metadata:', err);\n        setError('Failed to load metadata. Please try again later.');\n      }\n    };\n\n    fetchMetadata();\n  }, []);\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    // Define a function to fetch data on mount to avoid dependency issues\n    const fetchInitialData = async () => {\n      console.log('[FINANCIAL PAGE] Fetching initial data');\n      await fetchFinancialData();\n    };\n\n    // Set a small delay to ensure the component is fully mounted\n    const timer = setTimeout(() => {\n      fetchInitialData();\n    }, 100);\n\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Fetch financial data based on filters\n  const fetchFinancialData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Prepare filters\n      const filters: FinancialFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => String(id)) : undefined,\n        countryIds: selectedCountries.length > 0 ? selectedCountries.map(id => String(id)) : undefined,\n        groupBy: groupBy as any,\n        ...advancedFilters\n      };\n\n      console.log('[FINANCIAL PAGE] Fetching data with filters:', filters);\n\n      // Add pagination and sorting\n      const params = {\n        page: page + 1, // API uses 1-based indexing\n        pageSize,\n        sortBy,\n        sortDirection\n      };\n\n      // Fetch financial data from API\n      const response = await api.financial.getData({ ...filters, ...params });\n\n      if (response && response.data) {\n        setFinancialData(response.data);\n        setTotalCount(response.meta?.totalCount || response.data.length);\n\n        // Process summary data if available\n        if (response.summary) {\n          console.log('[FINANCIAL PAGE] Using summary from response:', response.summary);\n          setSummary(response.summary);\n        } else {\n          // If no summary in response, fetch it separately\n          try {\n            const summaryResponse = await api.financial.getSummary(filters);\n            if (summaryResponse) {\n              setSummary(summaryResponse);\n            }\n          } catch (summaryError) {\n            console.error('[FINANCIAL PAGE] Error fetching summary:', summaryError);\n          }\n        }\n      } else {\n        console.log('[FINANCIAL PAGE] No data returned from API');\n        setFinancialData([]);\n        setSummary(null);\n        setTotalCount(0);\n      }\n    } catch (err) {\n      console.error('[FINANCIAL PAGE] Error fetching data:', err);\n      setError('Failed to load financial data. Please try again later.');\n      setFinancialData([]);\n      setSummary(null);\n      setTotalCount(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = () => {\n    setPage(0); // Reset to first page when filters change\n    fetchFinancialData();\n  };\n\n  // Handle reset filters\n  const handleResetFilters = () => {\n    setStartDate(new Date(new Date().setDate(new Date().getDate() - 30)));\n    setEndDate(new Date());\n    setSelectedWhiteLabels([]);\n    setSelectedCountries([]);\n    setGroupBy('day');\n    setAdvancedFilters({});\n    setPage(0);\n    setSortBy('date');\n    setSortDirection('desc');\n  };\n\n  // Handle export\n  const handleExport = (format: ExportFormat) => {\n    setExportFormat(format);\n    setExportDialogOpen(true);\n  };\n\n  // Handle export confirmation\n  const handleExportConfirm = async () => {\n    try {\n      setLoading(true);\n\n      // Prepare filters\n      const filters: FinancialFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => String(id)) : undefined,\n        countryIds: selectedCountries.length > 0 ? selectedCountries.map(id => String(id)) : undefined,\n        groupBy: groupBy as any,\n        ...advancedFilters\n      };\n\n      // Export data\n      const blob = await api.financial.exportData(filters, exportFormat);\n\n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `financial-report-${formatDate(new Date(), 'yyyy-MM-dd')}.${exportFormat}`;\n      document.body.appendChild(a);\n      a.click();\n\n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      setExportDialogOpen(false);\n    } catch (err) {\n      console.error('[FINANCIAL PAGE] Error exporting data:', err);\n      setError('Failed to export data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Define table columns\n  const columns: ColumnDef[] = [\n    {\n      id: 'date',\n      label: 'Date',\n      type: 'date',\n      align: 'left',\n      format: (value) => formatDate(new Date(value), 'yyyy-MM-dd')\n    },\n    {\n      id: 'whiteLabelName',\n      label: 'White Label',\n      type: 'text',\n      align: 'left'\n    },\n    {\n      id: 'revenue',\n      label: 'Revenue',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'ggr',\n      label: 'GGR',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'ngr',\n      label: 'NGR',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'deposits',\n      label: 'Deposits',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'withdrawals',\n      label: 'Withdrawals',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'netDeposits',\n      label: 'Net Deposits',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'bonusAmount',\n      label: 'Bonus Amount',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value || 0)\n    },\n    {\n      id: 'netProfit',\n      label: 'Net Profit',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value || 0)\n    }\n  ];\n\n  return (\n    <Container maxWidth=\"xl\">\n      <div style={{ marginBottom: '2rem', display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <div>\n          <Typography variant=\"h4\" gutterBottom>\n            Financial Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze financial data, revenue, and profitability metrics\n          </Typography>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <div style={{ marginBottom: '1rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">Filters</Typography>\n          <div>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              startIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n              sx={{ mr: 1 }}\n            >\n              {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={handleResetFilters}\n              sx={{ mr: 1 }}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleApplyFilters}\n              startIcon={<FilterListIcon />}\n            >\n              Apply Filters\n            </Button>\n          </div>\n        </div>\n\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true, variant: 'outlined' } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true, variant: 'outlined' } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth variant=\"outlined\">\n              <InputLabel id=\"group-by-label\">Group By</InputLabel>\n              <Select\n                labelId=\"group-by-label\"\n                value={groupBy}\n                onChange={(e) => setGroupBy(e.target.value)}\n                label=\"Group By\"\n              >\n                <MenuItem value=\"day\">Day</MenuItem>\n                <MenuItem value=\"week\">Week</MenuItem>\n                <MenuItem value=\"month\">Month</MenuItem>\n                <MenuItem value=\"whiteLabel\">White Label</MenuItem>\n                <MenuItem value=\"country\">Country</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"White Labels\"\n              options={whiteLabelsOptions}\n              value={selectedWhiteLabels}\n              onChange={setSelectedWhiteLabels}\n              loading={whiteLabelsLoading}\n              fullWidth\n            />\n          </Grid>\n        </Grid>\n\n        <Collapse in={showAdvancedFilters}>\n          <div style={{ marginTop: '1rem' }}>\n            <Divider sx={{ my: 2 }} />\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n            <Grid container spacing={2}>\n              <Grid item xs={12} md={3}>\n                <MultiSelect\n                  label=\"Countries\"\n                  options={countriesOptions}\n                  value={selectedCountries}\n                  onChange={setSelectedCountries}\n                  loading={countriesLoading}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </Collapse>\n      </Paper>\n\n      {/* Summary Cards */}\n      {summary && (\n        <Grid container spacing={3} sx={{ mb: 4 }}>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Total Revenue\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatCurrency(summary.totalRevenue)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Total GGR\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatCurrency(summary.totalGGR)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Total NGR\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatCurrency(summary.totalNGR)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Net Profit\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatCurrency(summary.totalNetProfit || 0)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Data Table */}\n      <Paper sx={{ p: 0, mb: 4, overflow: 'hidden' }}>\n        <EnhancedTable\n          columns={columns}\n          data={financialData}\n          loading={loading}\n          title=\"Financial Data\"\n          emptyMessage=\"No financial data available\"\n          idField=\"id\"\n          onExport={handleExport}\n          features={{\n            sorting: true,\n            filtering: {\n              enabled: true,\n              quickFilter: true,\n              advancedFilter: true\n            },\n            pagination: {\n              enabled: true,\n              defaultPageSize: pageSize,\n              pageSizeOptions: [10, 25, 50, 100]\n            },\n            columnManagement: {\n              enabled: true,\n              allowReordering: true,\n              allowHiding: true,\n              allowResizing: true\n            },\n            export: {\n              enabled: true,\n              formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n            }\n          }}\n        />\n      </Paper>\n\n      {/* Export Dialog */}\n      <Dialog open={exportDialogOpen} onClose={() => setExportDialogOpen(false)}>\n        <DialogTitle>Export Financial Data</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\" paragraph>\n            Please confirm that you want to export the financial data with the current filters.\n          </Typography>\n          <FormControl fullWidth sx={{ mt: 2 }}>\n            <InputLabel id=\"export-format-label\">Export Format</InputLabel>\n            <Select\n              labelId=\"export-format-label\"\n              value={exportFormat}\n              onChange={(e) => setExportFormat(e.target.value)}\n              label=\"Export Format\"\n            >\n              <MenuItem value=\"excel\">Excel</MenuItem>\n              <MenuItem value=\"csv\">CSV</MenuItem>\n              <MenuItem value=\"pdf\">PDF</MenuItem>\n            </Select>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setExportDialogOpen(false)}>Cancel</Button>\n          <Button\n            onClick={handleExportConfirm}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<DownloadIcon />}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Export'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default FinancialPage;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z\"\n}), 'Download');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8\"\n}), 'InfoOutlined');"],"names":["FinancialPage","startDate","setStartDate","useState","Date","setDate","getDate","endDate","setEndDate","selectedWhiteLabels","setSelectedWhiteLabels","selectedCountries","setSelectedCountries","groupBy","setGroupBy","showAdvancedFilters","setShowAdvancedFilters","advancedFilters","setAdvancedFilters","financialData","setFinancialData","summary","setSummary","loading","setLoading","error","setError","totalCount","setTotalCount","whiteLabels","setWhiteLabels","countries","setCountries","whiteLabelsLoading","setWhiteLabelsLoading","countriesLoading","setCountriesLoading","whiteLabelsOptions","setWhiteLabelsOptions","countriesOptions","setCountriesOptions","page","setPage","pageSize","setPageSize","sortBy","setSortBy","sortDirection","setSortDirection","exportDialogOpen","setExportDialogOpen","exportFormat","setExportFormat","useEffect","async","console","log","data","api","financial","getMetadata","fetchedWhiteLabels","map","whiteLabel","value","id","label","name","fetchedCountries","countryOptions","country","err","fetchMetadata","timer","setTimeout","fetchFinancialData","fetchInitialData","clearTimeout","filters","formatDate","whiteLabelIds","length","String","undefined","countryIds","params","response","getData","_response$meta","meta","summaryResponse","getSummary","summaryError","columns","type","align","format","formatCurrency","_jsxs","Container","maxWidth","children","_jsx","style","marginBottom","display","justifyContent","alignItems","Typography","variant","gutterBottom","color","Paper","sx","p","mb","Button","onClick","startIcon","ExpandLessIcon","ExpandMoreIcon","mr","handleResetFilters","handleApplyFilters","FilterListIcon","Grid","container","spacing","item","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","onChange","newValue","slotProps","textField","fullWidth","FormControl","InputLabel","Select","labelId","e","target","MenuItem","MultiSelect","options","Collapse","in","marginTop","Divider","my","Card","CardContent","totalRevenue","totalGGR","totalNGR","totalNetProfit","overflow","EnhancedTable","title","emptyMessage","idField","onExport","features","sorting","filtering","enabled","quickFilter","advancedFilter","pagination","defaultPageSize","pageSizeOptions","columnManagement","allowReordering","allowHiding","allowResizing","export","formats","ExportFormat","CSV","EXCEL","PDF","Dialog","open","onClose","DialogTitle","DialogContent","paragraph","mt","DialogActions","blob","exportData","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","DownloadIcon","disabled","CircularProgress","size","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}