{"version":3,"file":"static/js/8696.81341fe9.chunk.js","mappings":"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","sources":["components/common/SimpleBox.tsx","utils/styleUtils.ts","components/common/DragDropWrapper.tsx","components/tables/enhanced/features/Filtering.tsx","components/tables/enhanced/features/ColumnManagement.tsx","components/tables/enhanced/features/Pagination.tsx","components/tables/enhanced/features/Grouping.tsx","components/tables/enhanced/features/HierarchicalGrouping.tsx","components/tables/enhanced/features/Aggregation.tsx","components/tables/enhanced/utils.ts","components/tables/enhanced/features/DrillDown.tsx","components/tables/enhanced/features/ExpandableRows.tsx","components/tables/enhanced/features/Export.tsx","components/tables/enhanced/features/Sorting.tsx","components/tables/enhanced/features/TableContent.tsx","components/tables/enhanced/features/HierarchicalTableContent.tsx","components/tables/enhanced/EnhancedTable.tsx","components/tables/enhanced/types.ts"],"sourcesContent":["import React from 'react';\nimport { Box } from '@mui/material';\n\n/**\n * SimpleBox component\n * A simple div component that replaces MUI Box to avoid TypeScript union type complexity issues\n */\ninterface SimpleBoxProps {\n  component?: any;\n  sx?: any;\n  style?: React.CSSProperties;\n  children?: React.ReactNode;\n  [key: string]: any;\n}\n\n/**\n * Convert MUI spacing units to pixels\n * @param value - The spacing value in MUI units\n * @returns The spacing value in pixels\n */\nconst convertSpacing = (value: any): string | undefined => {\n  if (typeof value === 'number') {\n    return `${value * 8}px`;\n  }\n  return value;\n};\n\n/**\n * SimpleBox component\n * A simple replacement for MUI Box that avoids TypeScript union type issues\n */\nconst SimpleBox: React.FC<SimpleBoxProps> = (props) => {\n  const { component, sx, style, children, ...otherProps } = props;\n\n  // Create a simplified inline style object from sx prop\n  const inlineStyle: React.CSSProperties = {\n    ...(style || {}),\n    display: sx?.display,\n    flexDirection: sx?.flexDirection,\n    justifyContent: sx?.justifyContent,\n    alignItems: sx?.alignItems,\n    flexWrap: sx?.flexWrap,\n    gap: convertSpacing(sx?.gap),\n    marginBottom: convertSpacing(sx?.mb),\n    marginTop: convertSpacing(sx?.mt),\n    marginRight: convertSpacing(sx?.mr),\n    marginLeft: convertSpacing(sx?.ml),\n    padding: convertSpacing(sx?.p),\n    paddingTop: convertSpacing(sx?.pt),\n    paddingBottom: convertSpacing(sx?.pb),\n    paddingLeft: convertSpacing(sx?.pl),\n    paddingRight: convertSpacing(sx?.pr),\n    height: sx?.height,\n    width: sx?.width,\n    minWidth: sx?.minWidth,\n    maxWidth: sx?.maxWidth,\n    minHeight: sx?.minHeight,\n    maxHeight: sx?.maxHeight,\n    position: sx?.position,\n    top: sx?.top,\n    left: sx?.left,\n    right: sx?.right,\n    bottom: sx?.bottom,\n    borderRadius: sx?.borderRadius,\n    border: sx?.border,\n    borderColor: sx?.borderColor,\n    borderBottom: sx?.borderBottom,\n    backgroundColor: sx?.bgcolor,\n    color: sx?.color,\n    flexGrow: sx?.flexGrow,\n    overflow: sx?.overflow,\n    boxSizing: 'border-box',\n  };\n\n  // Filter out undefined values\n  Object.keys(inlineStyle).forEach(key => {\n    if (inlineStyle[key as keyof React.CSSProperties] === undefined) {\n      delete inlineStyle[key as keyof React.CSSProperties];\n    }\n  });\n\n  // If component prop is provided, render a div with the as attribute\n  if (component) {\n    const elementProps = {\n      ...otherProps,\n      style: inlineStyle,\n      as: component\n    };\n\n    return <div {...elementProps}>{children}</div>;\n  }\n\n  // Otherwise, render a regular div\n  return <div style={inlineStyle} {...otherProps}>{children}</div>;\n};\n\nexport default SimpleBox;\n","import { SxProps, Theme } from '@mui/material';\n\n/**\n * A utility function to create sx props without TypeScript union type complexity issues.\n * This function simply returns the input object but with a type assertion that avoids\n * the \"union type too complex to represent\" error.\n *\n * @param styles The styles object to be used as sx props\n * @returns The same styles object with the correct type\n */\nexport const createSx = (styles: Record<string, any>): any => {\n  return styles;\n};\n\n/**\n * A utility function to create a style function that returns an object\n * This approach avoids TypeScript's complex union type issues\n *\n * @param stylesFn A function that returns a styles object\n * @returns A function that returns the styles object\n */\nexport const createStyleFn = <T extends any[]>(stylesFn: (...args: T) => Record<string, any>) => {\n  return (...args: T): any => stylesFn(...args);\n};\n\n/**\n * Style functions for common components\n * These functions return style objects directly to avoid TypeScript union type issues\n */\nexport const styles = {\n  card: () => ({\n    bgcolor: 'background.paper',\n    p: 2,\n    border: '1px solid',\n    borderColor: 'divider',\n    borderRadius: 1,\n    boxShadow: 1,\n  }),\n\n  panel: () => ({\n    bgcolor: 'background.paper',\n    p: 1.5,\n    border: '1px solid',\n    borderColor: 'divider',\n    borderRadius: 1,\n    boxShadow: 1,\n  }),\n\n  flexRow: () => ({\n    display: 'flex',\n    alignItems: 'center',\n    gap: 1,\n  }),\n\n  flexColumn: () => ({\n    display: 'flex',\n    flexDirection: 'column',\n    gap: 1,\n  }),\n\n  flexBetween: () => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n\n  flexCenter: () => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }),\n\n  marginBottom: (value: number) => ({\n    mb: value,\n  }),\n\n  padding: (value: number) => ({\n    p: value,\n  }),\n\n  fullWidth: () => ({\n    width: '100%',\n  }),\n\n  fullHeight: () => ({\n    height: '100%',\n  }),\n};\n","import React, { forwardRef } from 'react';\nimport SimpleBox from './SimpleBox';\nimport { createSx } from '../../utils/styleUtils';\n\n/**\n * DragDropWrapper component\n * \n * This component is a wrapper for react-beautiful-dnd to fix the innerRef issue\n * It ensures that the ref is properly passed to a DOM element\n */\ninterface DragDropWrapperProps {\n  children: React.ReactNode;\n  style?: React.CSSProperties;\n  className?: string;\n  sx?: any;\n  [key: string]: any;\n}\n\nconst DragDropWrapper = forwardRef<HTMLDivElement, DragDropWrapperProps>(\n  ({ children, style, className, sx, ...props }, ref) => {\n    return (\n      <SimpleBox\n        ref={ref}\n        sx={createSx(sx || {})}\n        style={style}\n        className={className}\n        {...props}\n      >\n        {children}\n      </SimpleBox>\n    );\n  }\n);\n\nDragDropWrapper.displayName = 'DragDropWrapper';\n\nexport default DragDropWrapper;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  IconButton,\n  InputAdornment,\n  Menu,\n  MenuItem,\n  Popover,\n  TextField,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { ColumnDef, FilteringConfig } from '../types';\n\ninterface QuickFilterProps {\n  value: string;\n  onChange: (value: string) => void;\n}\n\n/**\n * Quick filter component\n */\nexport const QuickFilter: React.FC<QuickFilterProps> = ({ value, onChange }) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n\n  const handleClear = () => {\n    onChange('');\n  };\n\n  return (\n    <TextField\n      size=\"small\"\n      placeholder=\"Search...\"\n      value={value}\n      onChange={handleChange}\n      InputProps={{\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <SearchIcon fontSize=\"small\" />\n          </InputAdornment>\n        ),\n        endAdornment: value ? (\n          <InputAdornment position=\"end\">\n            <IconButton\n              size=\"small\"\n              onClick={handleClear}\n              edge=\"end\"\n              aria-label=\"clear search\"\n            >\n              <ClearIcon fontSize=\"small\" />\n            </IconButton>\n          </InputAdornment>\n        ) : null\n      }}\n      sx={{ width: { xs: 120, sm: 200 } }}\n    />\n  );\n};\n\ninterface AdvancedFilterProps {\n  columns: ColumnDef[];\n  filters: Record<string, any>;\n  onChange: (filters: Record<string, any>) => void;\n}\n\n/**\n * Advanced filter component\n */\nexport const AdvancedFilter: React.FC<AdvancedFilterProps> = ({\n  columns,\n  filters,\n  onChange\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [localFilters, setLocalFilters] = useState<Record<string, any>>(filters);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n    setLocalFilters({ ...filters });\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleApply = () => {\n    onChange(localFilters);\n    handleClose();\n  };\n\n  const handleReset = () => {\n    setLocalFilters({});\n    onChange({});\n    handleClose();\n  };\n\n  const handleFilterChange = (columnId: string, value: any) => {\n    setLocalFilters(prev => ({\n      ...prev,\n      [columnId]: value\n    }));\n  };\n\n  const filterableColumns = columns.filter(col => col.filterable !== false);\n\n  return (\n    <>\n      <Tooltip title=\"Advanced filters\">\n        <IconButton size=\"small\" onClick={handleOpen}>\n          <FilterListIcon\n            fontSize=\"small\"\n            color={Object.keys(filters).length > 0 ? 'primary' : 'inherit'}\n          />\n        </IconButton>\n      </Tooltip>\n\n      <Popover\n        open={Boolean(anchorEl)}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right'\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right'\n        }}\n      >\n        <div style={{ padding: 16, width: 300 }}>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Advanced Filters\n          </Typography>\n\n          {filterableColumns.map(column => (\n            <div key={column.id} style={{ marginBottom: 16 }}>\n              <Typography variant=\"caption\">{column.label}</Typography>\n              {renderFilterInput(column, localFilters[column.id], value => {\n                handleFilterChange(column.id, value);\n              })}\n            </div>\n          ))}\n\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 16 }}>\n            <Button size=\"small\" onClick={handleReset}>\n              Reset\n            </Button>\n            <Button size=\"small\" variant=\"contained\" onClick={handleApply}>\n              Apply\n            </Button>\n          </div>\n        </div>\n      </Popover>\n    </>\n  );\n};\n\n/**\n * Render appropriate filter input based on column type\n */\nconst renderFilterInput = (\n  column: ColumnDef,\n  value: any,\n  onChange: (value: any) => void\n) => {\n  switch (column.type) {\n    case 'number':\n    case 'currency':\n      return (\n        <div style={{ display: 'flex', gap: 8 }}>\n          <TextField\n            size=\"small\"\n            type=\"number\"\n            placeholder=\"Min\"\n            value={value?.min || ''}\n            onChange={e => {\n              const min = e.target.value ? Number(e.target.value) : undefined;\n              onChange({ ...value, min });\n            }}\n            sx={{ flex: 1 }}\n          />\n          <TextField\n            size=\"small\"\n            type=\"number\"\n            placeholder=\"Max\"\n            value={value?.max || ''}\n            onChange={e => {\n              const max = e.target.value ? Number(e.target.value) : undefined;\n              onChange({ ...value, max });\n            }}\n            sx={{ flex: 1 }}\n          />\n        </div>\n      );\n\n    case 'text':\n    case 'link':\n    default:\n      return (\n        <TextField\n          size=\"small\"\n          placeholder=\"Filter...\"\n          value={value || ''}\n          onChange={e => onChange(e.target.value)}\n          fullWidth\n        />\n      );\n  }\n};\n\ninterface FilteringComponentProps {\n  columns: ColumnDef[];\n  config: FilteringConfig;\n  quickFilterValue: string;\n  advancedFilters: Record<string, any>;\n  onQuickFilterChange: (value: string) => void;\n  onAdvancedFiltersChange: (filters: Record<string, any>) => void;\n}\n\n/**\n * Main filtering component\n */\nconst Filtering: React.FC<FilteringComponentProps> = ({\n  columns,\n  config,\n  quickFilterValue,\n  advancedFilters,\n  onQuickFilterChange,\n  onAdvancedFiltersChange\n}) => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n      {config.quickFilter && (\n        <QuickFilter value={quickFilterValue} onChange={onQuickFilterChange} />\n      )}\n\n      {config.advancedFilter && (\n        <AdvancedFilter\n          columns={columns}\n          filters={advancedFilters}\n          onChange={onAdvancedFiltersChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Filtering;\n","import React, { useState } from 'react';\nimport {\n  Checkbox,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport SimpleBox from '../../../common/SimpleBox';\nimport { createSx } from '../../../../utils/styleUtils';\nimport ViewColumnIcon from '@mui/icons-material/ViewColumn';\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\nimport PushPinIcon from '@mui/icons-material/PushPin';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { ColumnDef, ColumnManagementConfig } from '../types';\nimport DragDropWrapper from '../../../common/DragDropWrapper';\n\ninterface ColumnManagementProps {\n  columns: ColumnDef[];\n  config: ColumnManagementConfig;\n  visibleColumns: string[];\n  columnOrder: string[];\n  stickyColumns: string[];\n  onVisibilityChange: (columnId: string, visible: boolean) => void;\n  onOrderChange: (newOrder: string[]) => void;\n  onStickyChange: (columnId: string, sticky: boolean) => void;\n}\n\n/**\n * Column management component\n */\nconst ColumnManagement: React.FC<ColumnManagementProps> = ({\n  columns,\n  config,\n  visibleColumns,\n  columnOrder,\n  stickyColumns,\n  onVisibilityChange,\n  onOrderChange,\n  onStickyChange\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleVisibilityChange = (columnId: string) => {\n    const isVisible = visibleColumns.includes(columnId);\n    onVisibilityChange(columnId, !isVisible);\n  };\n\n  const handleStickyChange = (columnId: string) => {\n    const isSticky = stickyColumns.includes(columnId);\n    onStickyChange(columnId, !isSticky);\n  };\n\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n\n    const sourceIndex = result.source.index;\n    const destinationIndex = result.destination.index;\n\n    const newOrder = [...columnOrder];\n    const [removed] = newOrder.splice(sourceIndex, 1);\n    newOrder.splice(destinationIndex, 0, removed);\n\n    onOrderChange(newOrder);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Manage columns\">\n        <IconButton size=\"small\" onClick={handleOpen}>\n          <ViewColumnIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            maxHeight: 400,\n            width: 250\n          }\n        }}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Manage Columns\n        </Typography>\n        <Divider />\n\n        {config.allowReordering ? (\n          <DragDropContext onDragEnd={handleDragEnd}>\n            <Droppable droppableId=\"column-manager\">\n              {(provided) => (\n                <DragDropWrapper\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {columnOrder.map((columnId, index) => {\n                    const column = columns.find(col => col.id === columnId);\n                    if (!column) return null;\n\n                    return (\n                      <Draggable\n                        key={column.id}\n                        draggableId={column.id}\n                        index={index}\n                      >\n                        {(provided) => (\n                          <DragDropWrapper\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            <MenuItem\n                              dense\n                              sx={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'space-between'\n                              }}\n                            >\n                              <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center' })}>\n                                <DragIndicatorIcon\n                                  fontSize=\"small\"\n                                  sx={{ mr: 1, color: 'text.secondary' }}\n                                />\n                                <FormControlLabel\n                                  control={\n                                    <Checkbox\n                                      size=\"small\"\n                                      checked={visibleColumns.includes(column.id)}\n                                      onChange={() => handleVisibilityChange(column.id)}\n                                      disabled={visibleColumns.length === 1 && visibleColumns.includes(column.id)}\n                                    />\n                                  }\n                                  label={column.label}\n                                  sx={{ m: 0 }}\n                                />\n                              </SimpleBox>\n                              {config.allowPinning && (\n                                <Tooltip title={stickyColumns.includes(column.id) ? \"Unpin column\" : \"Pin column\"}>\n                                  <IconButton\n                                    size=\"small\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleStickyChange(column.id);\n                                    }}\n                                    color={stickyColumns.includes(column.id) ? \"primary\" : \"default\"}\n                                  >\n                                    <PushPinIcon fontSize=\"small\" />\n                                  </IconButton>\n                                </Tooltip>\n                              )}\n                            </MenuItem>\n                          </DragDropWrapper>\n                        )}\n                      </Draggable>\n                    );\n                  })}\n                  {provided.placeholder}\n                </DragDropWrapper>\n              )}\n            </Droppable>\n          </DragDropContext>\n        ) : (\n          columns.map(column => (\n            <MenuItem key={column.id} dense>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    size=\"small\"\n                    checked={visibleColumns.includes(column.id)}\n                    onChange={() => handleVisibilityChange(column.id)}\n                    disabled={visibleColumns.length === 1 && visibleColumns.includes(column.id)}\n                  />\n                }\n                label={column.label}\n                sx={{ width: '100%' }}\n              />\n              {config.allowPinning && (\n                <Tooltip title={stickyColumns.includes(column.id) ? \"Unpin column\" : \"Pin column\"}>\n                  <IconButton\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleStickyChange(column.id);\n                    }}\n                    color={stickyColumns.includes(column.id) ? \"primary\" : \"default\"}\n                  >\n                    <PushPinIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              )}\n            </MenuItem>\n          ))\n        )}\n      </Menu>\n    </>\n  );\n};\n\nexport default ColumnManagement;\n","import React from 'react';\nimport { TablePagination } from '@mui/material';\nimport { PaginationConfig } from '../types';\n\ninterface PaginationProps {\n  config: PaginationConfig;\n  totalCount: number;\n  page: number;\n  pageSize: number;\n  onPageChange: (page: number) => void;\n  onPageSizeChange: (pageSize: number) => void;\n}\n\n/**\n * Pagination component for tables\n */\nconst Pagination: React.FC<PaginationProps> = ({\n  config,\n  totalCount,\n  page,\n  pageSize,\n  onPageChange,\n  onPageSizeChange\n}) => {\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number\n  ) => {\n    onPageChange(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    onPageSizeChange(parseInt(event.target.value, 10));\n  };\n\n  return (\n    <TablePagination\n      component=\"div\"\n      count={totalCount}\n      page={page}\n      onPageChange={handleChangePage}\n      rowsPerPage={pageSize}\n      onRowsPerPageChange={handleChangeRowsPerPage}\n      rowsPerPageOptions={config.pageSizeOptions || [10, 25, 50, 100]}\n      labelDisplayedRows={({ from, to, count }) => `${from}-${to} of ${count}`}\n      labelRowsPerPage=\"Rows per page:\"\n      sx={{\n        '.MuiTablePagination-selectLabel, .MuiTablePagination-displayedRows': {\n          margin: 0\n        }\n      }}\n    />\n  );\n};\n\nexport default Pagination;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Chip,\n  Divider,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport GroupWorkIcon from '@mui/icons-material/GroupWork';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { ColumnDef, GroupingConfig } from '../types';\n\ninterface GroupingProps {\n  columns: ColumnDef[];\n  config: GroupingConfig;\n  groupByColumn: string | null;\n  onGroupingChange: (columnId: string | null) => void;\n}\n\n/**\n * Grouping component for tables\n */\nconst Grouping: React.FC<GroupingProps> = ({\n  columns,\n  config,\n  groupByColumn,\n  onGroupingChange\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleGroupingChange = (columnId: string | null) => {\n    onGroupingChange(columnId);\n    handleClose();\n  };\n\n  // Filter columns that can be grouped\n  const groupableColumns = columns.filter(col => col.groupable !== false);\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Tooltip title={groupByColumn ? \"Change grouping\" : \"Group by column\"}>\n          <IconButton\n            size=\"small\"\n            onClick={handleOpen}\n            color={groupByColumn ? \"primary\" : \"default\"}\n          >\n            <GroupWorkIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n\n        {groupByColumn && (\n          <Chip\n            size=\"small\"\n            label={`Grouped by: ${columns.find(col => col.id === groupByColumn)?.label || groupByColumn}`}\n            onDelete={() => onGroupingChange(null)}\n            sx={{ ml: 1 }}\n          />\n        )}\n      </Box>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Group By Column\n        </Typography>\n        <Divider />\n        <MenuItem\n          onClick={() => handleGroupingChange(null)}\n          selected={groupByColumn === null}\n        >\n          <Typography color={!groupByColumn ? 'primary' : 'inherit'}>\n            None (No Grouping)\n          </Typography>\n        </MenuItem>\n        {groupableColumns.map(column => (\n          <MenuItem\n            key={column.id}\n            onClick={() => handleGroupingChange(column.id)}\n            selected={groupByColumn === column.id}\n          >\n            {column.label}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default Grouping;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Chip,\n  Divider,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Checkbox,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions\n} from '@mui/material';\nimport GroupWorkIcon from '@mui/icons-material/GroupWork';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight';\nimport { ColumnDef, GroupingConfig } from '../types';\n\ninterface HierarchicalGroupingProps {\n  columns: ColumnDef[];\n  config: GroupingConfig;\n  groupByLevels: string[];\n  onGroupingLevelsChange: (columnIds: string[]) => void;\n}\n\n/**\n * Hierarchical Grouping component for tables\n * Allows selecting multiple grouping levels in a specific order\n */\nconst HierarchicalGrouping: React.FC<HierarchicalGroupingProps> = ({\n  columns,\n  config,\n  groupByLevels,\n  onGroupingLevelsChange\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // Filter columns that can be grouped\n  const groupableColumns = columns.filter(col => col.groupable !== false);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleOpenDialog = () => {\n    setDialogOpen(true);\n    handleClose();\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n  };\n\n  const handleToggleGroupLevel = (columnId: string) => {\n    const newGroupByLevels = [...groupByLevels];\n    const index = newGroupByLevels.indexOf(columnId);\n    \n    if (index === -1) {\n      // Add to the end of the list\n      newGroupByLevels.push(columnId);\n    } else {\n      // Remove from the list\n      newGroupByLevels.splice(index, 1);\n    }\n    \n    onGroupingLevelsChange(newGroupByLevels);\n  };\n\n  const handleMoveUp = (index: number) => {\n    if (index <= 0) return;\n    \n    const newGroupByLevels = [...groupByLevels];\n    const temp = newGroupByLevels[index];\n    newGroupByLevels[index] = newGroupByLevels[index - 1];\n    newGroupByLevels[index - 1] = temp;\n    \n    onGroupingLevelsChange(newGroupByLevels);\n  };\n\n  const handleMoveDown = (index: number) => {\n    if (index >= groupByLevels.length - 1) return;\n    \n    const newGroupByLevels = [...groupByLevels];\n    const temp = newGroupByLevels[index];\n    newGroupByLevels[index] = newGroupByLevels[index + 1];\n    newGroupByLevels[index + 1] = temp;\n    \n    onGroupingLevelsChange(newGroupByLevels);\n  };\n\n  const handleClearAll = () => {\n    onGroupingLevelsChange([]);\n    handleCloseDialog();\n  };\n\n  const handleApply = () => {\n    handleCloseDialog();\n  };\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Tooltip title=\"Configure hierarchical grouping\">\n          <IconButton\n            size=\"small\"\n            onClick={handleOpen}\n            color={groupByLevels.length > 0 ? \"primary\" : \"default\"}\n          >\n            <GroupWorkIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n\n        {groupByLevels.length > 0 && (\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, ml: 1 }}>\n            {groupByLevels.map((columnId, index) => {\n              const column = columns.find(col => col.id === columnId);\n              return (\n                <Box key={columnId} sx={{ display: 'flex', alignItems: 'center' }}>\n                  {index > 0 && <ArrowRightIcon fontSize=\"small\" sx={{ mx: 0.5 }} />}\n                  <Chip\n                    size=\"small\"\n                    label={column?.label || columnId}\n                    onDelete={() => {\n                      const newLevels = [...groupByLevels];\n                      newLevels.splice(index, 1);\n                      onGroupingLevelsChange(newLevels);\n                    }}\n                  />\n                </Box>\n              );\n            })}\n          </Box>\n        )}\n      </Box>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Hierarchical Grouping\n        </Typography>\n        <Divider />\n        <MenuItem onClick={handleOpenDialog}>\n          Configure Group Levels\n        </MenuItem>\n        {groupByLevels.length > 0 && (\n          <MenuItem onClick={() => onGroupingLevelsChange([])}>\n            Clear All Grouping\n          </MenuItem>\n        )}\n      </Menu>\n\n      <Dialog \n        open={dialogOpen} \n        onClose={handleCloseDialog}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>Configure Hierarchical Grouping</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" sx={{ mb: 2 }}>\n            Select columns to group by and arrange them in the desired order. Data will be grouped by the first level, then by the second level within each first-level group, and so on.\n          </Typography>\n          \n          <List sx={{ width: '100%' }}>\n            {groupableColumns.map(column => {\n              const isSelected = groupByLevels.includes(column.id);\n              const index = groupByLevels.indexOf(column.id);\n              \n              return (\n                <ListItem \n                  key={column.id}\n                  secondaryAction={\n                    isSelected && (\n                      <Box>\n                        <IconButton \n                          edge=\"end\" \n                          onClick={() => handleMoveUp(index)}\n                          disabled={index <= 0}\n                          size=\"small\"\n                        >\n                          ↑\n                        </IconButton>\n                        <IconButton \n                          edge=\"end\" \n                          onClick={() => handleMoveDown(index)}\n                          disabled={index >= groupByLevels.length - 1}\n                          size=\"small\"\n                        >\n                          ↓\n                        </IconButton>\n                      </Box>\n                    )\n                  }\n                >\n                  <ListItemIcon>\n                    <Checkbox\n                      edge=\"start\"\n                      checked={isSelected}\n                      onChange={() => handleToggleGroupLevel(column.id)}\n                    />\n                  </ListItemIcon>\n                  <ListItemText \n                    primary={column.label} \n                    secondary={isSelected ? `Level ${index + 1}` : null}\n                  />\n                </ListItem>\n              );\n            })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClearAll}>Clear All</Button>\n          <Button onClick={handleCloseDialog}>Cancel</Button>\n          <Button onClick={handleApply} variant=\"contained\">Apply</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default HierarchicalGrouping;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Checkbox,\n  Chip,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  Menu,\n  MenuItem,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport SummarizeIcon from '@mui/icons-material/Summarize';\nimport { AggregationConfig, AggregationDefinition, AggregationFunction, ColumnDef } from '../types';\nimport { calculateAggregation } from '../utils';\n\ninterface AggregationMenuProps {\n  columns: ColumnDef[];\n  aggregations: AggregationDefinition[];\n  enabledAggregations: string[];\n  onAggregationToggle: (aggregationId: string) => void;\n}\n\n/**\n * Aggregation menu component\n */\nconst AggregationMenu: React.FC<AggregationMenuProps> = ({\n  columns,\n  aggregations,\n  enabledAggregations,\n  onAggregationToggle\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleToggle = (aggregationId: string) => {\n    onAggregationToggle(aggregationId);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Summary calculations\">\n        <IconButton\n          size=\"small\"\n          onClick={handleOpen}\n          color={enabledAggregations.length > 0 ? \"primary\" : \"default\"}\n        >\n          <SummarizeIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            maxHeight: 400,\n            width: 250\n          }\n        }}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Summary Calculations\n        </Typography>\n        <Divider />\n        {aggregations.map(agg => {\n          const column = columns.find(col => col.id === agg.columnId);\n          if (!column) return null;\n          \n          const aggregationId = `${agg.columnId}_${agg.function}`;\n          \n          return (\n            <MenuItem key={aggregationId} dense>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    size=\"small\"\n                    checked={enabledAggregations.includes(aggregationId)}\n                    onChange={() => handleToggle(aggregationId)}\n                  />\n                }\n                label={agg.label || `${column.label} (${agg.function.toUpperCase()})`}\n                sx={{ width: '100%' }}\n              />\n            </MenuItem>\n          );\n        })}\n      </Menu>\n    </>\n  );\n};\n\ninterface AggregationRowProps {\n  columns: ColumnDef[];\n  data: any[];\n  enabledAggregations: string[];\n  visibleColumns: string[];\n}\n\n/**\n * Aggregation row component\n */\nexport const AggregationRow: React.FC<AggregationRowProps> = ({\n  columns,\n  data,\n  enabledAggregations,\n  visibleColumns\n}) => {\n  if (!data.length || !enabledAggregations.length) return null;\n\n  // Calculate aggregations\n  const aggregationResults: Record<string, any> = {};\n  \n  enabledAggregations.forEach(aggId => {\n    const [columnId, func] = aggId.split('_');\n    aggregationResults[aggId] = calculateAggregation(\n      data,\n      columnId,\n      func as AggregationFunction\n    );\n  });\n\n  return (\n    <Paper\n      elevation={0}\n      variant=\"outlined\"\n      sx={{\n        mt: 1,\n        p: 1,\n        backgroundColor: theme => theme.palette.mode === 'dark'\n          ? theme.palette.grey[800]\n          : theme.palette.grey[100]\n      }}\n    >\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n        <SummarizeIcon fontSize=\"small\" sx={{ mr: 1 }} />\n        <Typography variant=\"subtitle2\">Summary</Typography>\n      </Box>\n      <Table size=\"small\">\n        <TableBody>\n          <TableRow>\n            {visibleColumns.map(columnId => {\n              const column = columns.find(col => col.id === columnId);\n              if (!column) return null;\n\n              // Find aggregations for this column\n              const columnAggs = enabledAggregations\n                .filter(aggId => aggId.startsWith(column.id + '_'))\n                .map(aggId => {\n                  const [_, func] = aggId.split('_');\n                  return {\n                    function: func as AggregationFunction,\n                    value: aggregationResults[aggId]\n                  };\n                });\n\n              if (columnAggs.length === 0) {\n                return (\n                  <TableCell key={column.id} align={column.align || 'left'}>\n                    -\n                  </TableCell>\n                );\n              }\n\n              return (\n                <TableCell key={column.id} align={column.align || 'left'}>\n                  {columnAggs.map(agg => {\n                    let displayValue = agg.value;\n                    \n                    // Format the value based on column type\n                    if (column.format && typeof displayValue === 'number') {\n                      displayValue = column.format(displayValue, {});\n                    } else if (column.type === 'currency' && typeof displayValue === 'number') {\n                      displayValue = new Intl.NumberFormat('en-US', {\n                        style: 'currency',\n                        currency: 'USD'\n                      }).format(displayValue);\n                    } else if (column.type === 'number' && typeof displayValue === 'number') {\n                      displayValue = displayValue.toLocaleString();\n                    }\n                    \n                    return (\n                      <Box key={agg.function} sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>\n                        <Chip\n                          size=\"small\"\n                          label={agg.function.toUpperCase()}\n                          sx={{ mr: 1, fontSize: '0.7rem' }}\n                        />\n                        <Typography variant=\"body2\">{displayValue}</Typography>\n                      </Box>\n                    );\n                  })}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n};\n\ninterface AggregationProps {\n  columns: ColumnDef[];\n  config: AggregationConfig;\n  data: any[];\n  enabledAggregations: string[];\n  visibleColumns: string[];\n  onAggregationToggle: (aggregationId: string) => void;\n}\n\n/**\n * Main aggregation component\n */\nconst Aggregation: React.FC<AggregationProps> = ({\n  columns,\n  config,\n  data,\n  enabledAggregations,\n  visibleColumns,\n  onAggregationToggle\n}) => {\n  // Create aggregation definitions from columns\n  const aggregations = columns\n    .filter(col => col.aggregatable !== false && (col.type === 'number' || col.type === 'currency'))\n    .flatMap(col => {\n      const funcs: AggregationFunction[] = ['sum', 'avg'];\n      return funcs.map(func => ({\n        columnId: col.id,\n        function: func,\n        label: `${col.label} (${func.toUpperCase()})`\n      }));\n    });\n\n  return (\n    <AggregationMenu\n      columns={columns}\n      aggregations={aggregations}\n      enabledAggregations={enabledAggregations}\n      onAggregationToggle={onAggregationToggle}\n    />\n  );\n};\n\nexport default Aggregation;\n","import { AggregationFunction, TableState, ColumnDef, HierarchicalGroup } from './types';\n\n/**\n * Format a number as currency\n */\nexport const formatCurrency = (value: number): string => {\n  return new Intl.NumberFormat('en-GB', {\n    style: 'currency',\n    currency: 'GBP',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(value);\n};\n\n/**\n * Format a number with thousands separators\n */\nexport const formatNumber = (value: number): string => {\n  return new Intl.NumberFormat('en-GB', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(value);\n};\n\n/**\n * Format a number as a percentage\n */\nexport const formatPercentage = (value: number): string => {\n  // Ensure value is rounded to 2 decimal places\n  const roundedValue = parseFloat(value.toFixed(2));\n  return `${roundedValue.toFixed(2)}%`;\n};\n\n/**\n * Calculate aggregation for a column\n */\nexport const calculateAggregation = (\n  data: any[],\n  columnId: string,\n  aggregationFunction: AggregationFunction\n): number => {\n  if (!data.length) return 0;\n\n  switch (aggregationFunction) {\n    case 'sum':\n      return data.reduce((sum, row) => {\n        const value = Number(row[columnId]) || 0;\n        return sum + value;\n      }, 0);\n\n    case 'avg':\n      const sum = data.reduce((acc, row) => {\n        const value = Number(row[columnId]) || 0;\n        return acc + value;\n      }, 0);\n      return sum / data.length;\n\n    case 'min':\n      return Math.min(...data.map(row => Number(row[columnId]) || 0));\n\n    case 'max':\n      return Math.max(...data.map(row => Number(row[columnId]) || 0));\n\n    case 'count':\n      return data.length;\n\n    default:\n      return 0;\n  }\n};\n\n/**\n * Group data by a column\n */\nexport const groupData = (data: any[], groupByColumn: string): Record<string, any[]> => {\n  const groups: Record<string, any[]> = {};\n\n  data.forEach(row => {\n    const groupValue = String(row[groupByColumn] || 'Unknown');\n    if (!groups[groupValue]) {\n      groups[groupValue] = [];\n    }\n    groups[groupValue].push(row);\n  });\n\n  return groups;\n};\n\n/**\n * Sort data by a column\n */\nexport const sortData = (\n  data: any[],\n  columnId: string,\n  direction: 'asc' | 'desc'\n): any[] => {\n  return [...data].sort((a, b) => {\n    const valueA = a[columnId];\n    const valueB = b[columnId];\n\n    // Handle null/undefined values\n    if (valueA === null || valueA === undefined) return direction === 'asc' ? -1 : 1;\n    if (valueB === null || valueB === undefined) return direction === 'asc' ? 1 : -1;\n\n    // Compare based on type\n    if (typeof valueA === 'number' && typeof valueB === 'number') {\n      return direction === 'asc' ? valueA - valueB : valueB - valueA;\n    }\n\n    // Default string comparison\n    return direction === 'asc'\n      ? String(valueA).localeCompare(String(valueB))\n      : String(valueB).localeCompare(String(valueA));\n  });\n};\n\n/**\n * Filter data based on quick filter and advanced filters\n */\nexport const filterData = (\n  data: any[],\n  quickFilter: string,\n  advancedFilters: Record<string, any>\n): any[] => {\n  let filteredData = data;\n\n  // Apply quick filter\n  if (quickFilter) {\n    const lowerCaseSearchTerm = quickFilter.toLowerCase();\n    filteredData = filteredData.filter(row => {\n      return Object.keys(row).some(key => {\n        const value = row[key];\n        if (value === null || value === undefined) return false;\n        if (typeof value === 'object') return false;\n        return String(value).toLowerCase().includes(lowerCaseSearchTerm);\n      });\n    });\n  }\n\n  // Apply advanced filters\n  if (Object.keys(advancedFilters).length > 0) {\n    filteredData = filteredData.filter(row => {\n      return Object.entries(advancedFilters).every(([key, value]) => {\n        if (value === null || value === undefined) return true;\n\n        // Handle different filter types\n        if (typeof value === 'object') {\n          if ('min' in value && row[key] < value.min) return false;\n          if ('max' in value && row[key] > value.max) return false;\n          if ('values' in value && !value.values.includes(row[key])) return false;\n          return true;\n        }\n\n        return row[key] === value;\n      });\n    });\n  }\n\n  return filteredData;\n};\n\n/**\n * Encode table state to URL parameters\n */\nexport const encodeStateToUrl = (state: TableState): string => {\n  const params = new URLSearchParams();\n\n  // Encode sorting\n  params.set('sort', `${state.sorting.column},${state.sorting.direction}`);\n\n  // Encode filtering\n  if (state.filtering.quickFilter) {\n    params.set('q', state.filtering.quickFilter);\n  }\n\n  if (Object.keys(state.filtering.advancedFilters).length > 0) {\n    params.set('filters', JSON.stringify(state.filtering.advancedFilters));\n  }\n\n  // Encode pagination\n  params.set('page', state.pagination.page.toString());\n  params.set('pageSize', state.pagination.pageSize.toString());\n\n  // Encode grouping\n  if (state.grouping.groupByColumn) {\n    params.set('groupBy', state.grouping.groupByColumn);\n  }\n\n  // Encode columns\n  params.set('columns', state.columns.visible.join(','));\n  params.set('columnOrder', state.columns.order.join(','));\n  params.set('stickyColumns', state.columns.sticky.join(','));\n\n  // Encode aggregation\n  if (state.aggregation.enabled.length > 0) {\n    params.set('aggregations', state.aggregation.enabled.join(','));\n  }\n\n  return params.toString();\n};\n\n/**\n * Decode table state from URL parameters\n */\nexport const decodeStateFromUrl = (url: string, defaultState: TableState): TableState => {\n  const params = new URLSearchParams(url);\n  const state = { ...defaultState };\n\n  // Decode sorting\n  const sort = params.get('sort');\n  if (sort) {\n    const [column, direction] = sort.split(',');\n    state.sorting.column = column;\n    state.sorting.direction = direction as 'asc' | 'desc';\n  }\n\n  // Decode filtering\n  const quickFilter = params.get('q');\n  if (quickFilter) {\n    state.filtering.quickFilter = quickFilter;\n  }\n\n  const filters = params.get('filters');\n  if (filters) {\n    try {\n      state.filtering.advancedFilters = JSON.parse(filters);\n    } catch (e) {\n      console.error('Error parsing filters from URL', e);\n    }\n  }\n\n  // Decode pagination\n  const page = params.get('page');\n  if (page) {\n    state.pagination.page = parseInt(page, 10);\n  }\n\n  const pageSize = params.get('pageSize');\n  if (pageSize) {\n    state.pagination.pageSize = parseInt(pageSize, 10);\n  }\n\n  // Decode grouping\n  const groupBy = params.get('groupBy');\n  if (groupBy) {\n    state.grouping.groupByColumn = groupBy;\n  }\n\n  // Decode hierarchical grouping\n  const groupByLevels = params.get('groupByLevels');\n  if (groupByLevels) {\n    state.grouping.groupByLevels = groupByLevels.split(',');\n  }\n\n  // Decode columns\n  const columns = params.get('columns');\n  if (columns) {\n    state.columns.visible = columns.split(',');\n  }\n\n  const columnOrder = params.get('columnOrder');\n  if (columnOrder) {\n    state.columns.order = columnOrder.split(',');\n  }\n\n  const stickyColumns = params.get('stickyColumns');\n  if (stickyColumns) {\n    state.columns.sticky = stickyColumns.split(',');\n  }\n\n  // Decode aggregation\n  const aggregations = params.get('aggregations');\n  if (aggregations) {\n    state.aggregation.enabled = aggregations.split(',');\n  }\n\n  return state;\n};\n\n/**\n * Creates hierarchical data structure from flat data\n * @param data Flat data array\n * @param groupByField Field to group by\n * @param level Current hierarchy level (0-based)\n * @param columns Column definitions\n * @param parentPath Path to the parent node\n * @returns Hierarchical data structure\n */\nexport const createHierarchicalData = (\n  data: any[],\n  groupByField: string,\n  level: number = 0,\n  columns: ColumnDef[],\n  parentPath: string = ''\n): HierarchicalGroup[] => {\n  if (!data || data.length === 0) {\n    return [];\n  }\n\n  // Group data by the specified field\n  const groups: Record<string, any[]> = {};\n\n  data.forEach(item => {\n    const key = item[groupByField]?.toString() || 'Unknown';\n    if (!groups[key]) {\n      groups[key] = [];\n    }\n    groups[key].push(item);\n  });\n\n  // Convert groups to hierarchical structure\n  return Object.entries(groups).map(([value, items]) => {\n    // Generate a unique path for this group\n    const path = parentPath\n      ? `${parentPath}/${groupByField}:${value}`\n      : `${groupByField}:${value}`;\n\n    // Calculate metrics for this group\n    const metrics: Record<string, number> = {};\n\n    // Sum numeric values for all columns\n    columns.forEach(column => {\n      if (column.type === 'number' || column.type === 'currency' || column.type === 'percentage') {\n        metrics[column.id] = items.reduce((sum, item) => {\n          const val = parseFloat(item[column.id]) || 0;\n          return sum + val;\n        }, 0);\n      }\n    });\n\n    // Create the hierarchical group\n    return {\n      id: `group_${level}_${value}`,\n      key: columns.find(col => col.id === groupByField)?.label || groupByField,\n      value,\n      path,\n      level,\n      children: [],\n      data: items,\n      metrics,\n      hasChildren: true,\n      childrenLoaded: false\n    };\n  });\n};\n","import React, { useState } from 'react';\nimport {\n  Divider,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport ZoomInIcon from '@mui/icons-material/ZoomIn';\nimport { DrillDownConfigItem } from '../types';\n\ninterface DrillDownProps {\n  configs: DrillDownConfigItem[];\n  sourceGrouping: string | null;\n  selectedRow: any | null;\n  onDrillDown: (row: any, sourceGrouping: string, targetGrouping: string, filters: Record<string, any>) => void;\n}\n\n/**\n * DrillDown component for tables\n */\nconst DrillDown: React.FC<DrillDownProps> = ({\n  configs,\n  sourceGrouping,\n  selectedRow,\n  onDrillDown\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (selectedRow) {\n      setAnchorEl(event.currentTarget);\n    }\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleDrillDown = (config: DrillDownConfigItem) => {\n    if (!selectedRow || !sourceGrouping) return;\n\n    const filters = config.transformFilter\n      ? config.transformFilter(selectedRow)\n      : { [sourceGrouping]: selectedRow[sourceGrouping] };\n\n    onDrillDown(selectedRow, config.sourceGrouping, config.targetGrouping, filters);\n    handleClose();\n  };\n\n  // Filter applicable drill-down configurations\n  const applicableConfigs = sourceGrouping\n    ? configs.filter(config => config.sourceGrouping === sourceGrouping)\n    : [];\n\n  if (applicableConfigs.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      <Tooltip title=\"Drill down options\">\n        <IconButton\n          size=\"small\"\n          onClick={handleOpen}\n          color=\"primary\"\n          disabled={!selectedRow}\n        >\n          <ZoomInIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Drill Down Options\n        </Typography>\n        <Divider />\n        {applicableConfigs.map((config, index) => (\n          <MenuItem\n            key={`drill-down-${index}`}\n            onClick={() => handleDrillDown(config)}\n          >\n            {config.label || `View by ${config.targetGrouping}`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default DrillDown;\n","import React from 'react';\nimport {\n  Box,\n  Collapse,\n  IconButton,\n  TableCell,\n  TableRow,\n  Tooltip\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport { ExpandableRowsConfig, RowDetailRenderer } from '../types';\n\ninterface ExpandButtonProps {\n  expanded: boolean;\n  onClick: (event?: React.MouseEvent) => void;\n}\n\n/**\n * Expand/collapse button component\n */\nexport const ExpandButton: React.FC<ExpandButtonProps> = ({\n  expanded,\n  onClick\n}) => {\n  return (\n    <Tooltip title={expanded ? \"Collapse\" : \"Expand\"}>\n      <IconButton\n        size=\"small\"\n        onClick={onClick}\n        sx={{ ml: 1 }}\n      >\n        {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\ninterface ExpandedRowProps {\n  colSpan: number;\n  expanded: boolean;\n  renderDetail: RowDetailRenderer;\n  row: any;\n}\n\n/**\n * Expanded row content component\n */\nexport const ExpandedRow: React.FC<ExpandedRowProps> = ({\n  colSpan,\n  expanded,\n  renderDetail,\n  row\n}) => {\n  return (\n    <TableRow>\n      <TableCell\n        colSpan={colSpan}\n        sx={{\n          py: 0,\n          borderBottom: expanded ? undefined : 'none'\n        }}\n      >\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <Box sx={{ py: 2, px: 1 }}>\n            {renderDetail(row)}\n          </Box>\n        </Collapse>\n      </TableCell>\n    </TableRow>\n  );\n};\n\ninterface ExpandAllButtonProps {\n  config: ExpandableRowsConfig;\n  expandedRows: string[];\n  totalRows: number;\n  onExpandAll: () => void;\n  onCollapseAll: () => void;\n}\n\n/**\n * Expand/collapse all button component\n */\nexport const ExpandAllButton: React.FC<ExpandAllButtonProps> = ({\n  config,\n  expandedRows,\n  totalRows,\n  onExpandAll,\n  onCollapseAll\n}) => {\n  const allExpanded = expandedRows.length === totalRows && totalRows > 0;\n\n  return (\n    <Tooltip title={allExpanded ? \"Collapse all rows\" : \"Expand all rows\"}>\n      <IconButton\n        size=\"small\"\n        onClick={allExpanded ? onCollapseAll : onExpandAll}\n        color={expandedRows.length > 0 ? \"primary\" : \"default\"}\n      >\n        {allExpanded ? <ExpandLessIcon fontSize=\"small\" /> : <ExpandMoreIcon fontSize=\"small\" />}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default {\n  ExpandButton,\n  ExpandedRow,\n  ExpandAllButton\n};\n","import React, { useState } from 'react';\nimport {\n  Divider,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport GetAppIcon from '@mui/icons-material/GetApp';\nimport { ExportConfig, ExportFormat } from '../types';\n\ninterface ExportProps {\n  config: ExportConfig;\n  onExport: (format: ExportFormat) => void;\n}\n\n/**\n * Export component for tables\n */\nconst Export: React.FC<ExportProps> = ({\n  config,\n  onExport\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleExport = (format: ExportFormat) => {\n    onExport(format);\n    handleClose();\n  };\n\n  // Use configured formats or default to all formats\n  const formats = config.formats || [\n    ExportFormat.CSV,\n    ExportFormat.EXCEL,\n    ExportFormat.PDF,\n    ExportFormat.JSON\n  ];\n\n  return (\n    <>\n      <Tooltip title=\"Export data\">\n        <IconButton size=\"small\" onClick={handleOpen}>\n          <GetAppIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1 }}>\n          Export Format\n        </Typography>\n        <Divider />\n        {formats.includes(ExportFormat.CSV) && (\n          <MenuItem onClick={() => handleExport(ExportFormat.CSV)}>\n            CSV\n          </MenuItem>\n        )}\n        {formats.includes(ExportFormat.EXCEL) && (\n          <MenuItem onClick={() => handleExport(ExportFormat.EXCEL)}>\n            Excel\n          </MenuItem>\n        )}\n        {formats.includes(ExportFormat.PDF) && (\n          <MenuItem onClick={() => handleExport(ExportFormat.PDF)}>\n            PDF\n          </MenuItem>\n        )}\n        {formats.includes(ExportFormat.JSON) && (\n          <MenuItem onClick={() => handleExport(ExportFormat.JSON)}>\n            JSON\n          </MenuItem>\n        )}\n      </Menu>\n    </>\n  );\n};\n\nexport default Export;\n","import React from 'react';\nimport { TableSortLabel, Tooltip } from '@mui/material';\nimport { ColumnDef, SortingConfig } from '../types';\n\ninterface SortingProps {\n  column: ColumnDef;\n  config: SortingConfig;\n  activeColumn: string;\n  direction: 'asc' | 'desc';\n  onSort: (columnId: string) => void;\n}\n\n/**\n * Sorting component for table headers\n */\nconst Sorting: React.FC<SortingProps> = ({\n  column,\n  config,\n  activeColumn,\n  direction,\n  onSort\n}) => {\n  // Don't render sorting for non-sortable columns\n  if (column.sortable === false) {\n    return <>{column.label}</>;\n  }\n\n  const handleSort = () => {\n    onSort(column.id);\n  };\n\n  return (\n    <Tooltip title={`Sort by ${column.label}`}>\n      <TableSortLabel\n        active={activeColumn === column.id}\n        direction={activeColumn === column.id ? direction : 'asc'}\n        onClick={handleSort}\n      >\n        {column.label}\n      </TableSortLabel>\n    </Tooltip>\n  );\n};\n\nexport default Sorting;\n","import React, { useRef, useEffect } from 'react';\nimport {\n  Box,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography\n} from '@mui/material';\nimport { ColumnDef, KeyboardNavigationConfig, RowDetailRenderer, StickyColumnsConfig } from '../types';\nimport Sorting from './Sorting';\nimport { ExpandButton, ExpandedRow } from './ExpandableRows';\n\ninterface TableContentProps {\n  data: any[];\n  columns: ColumnDef[];\n  visibleColumns: string[];\n  stickyColumns: string[];\n  orderBy: string;\n  order: 'asc' | 'desc';\n  page: number;\n  pageSize: number;\n  idField: string;\n  emptyMessage: string;\n  expandedRows: string[];\n  selectedRow: any | null;\n  keyboardNavConfig: KeyboardNavigationConfig;\n  stickyColumnsConfig: StickyColumnsConfig;\n  renderRowDetail?: RowDetailRenderer;\n  onSort: (columnId: string) => void;\n  onRowClick?: (row: any) => void;\n  onRowExpand: (rowId: string) => void;\n  onKeyDown: (event: React.KeyboardEvent, rowIndex: number, colIndex: number) => void;\n  onSetSelectedRow: (row: any) => void;\n}\n\n/**\n * Table content component\n */\nconst TableContent: React.FC<TableContentProps> = ({\n  data,\n  columns,\n  visibleColumns,\n  stickyColumns,\n  orderBy,\n  order,\n  page,\n  pageSize,\n  idField,\n  emptyMessage,\n  expandedRows,\n  selectedRow,\n  keyboardNavConfig,\n  stickyColumnsConfig,\n  renderRowDetail,\n  onSort,\n  onRowClick,\n  onRowExpand,\n  onKeyDown,\n  onSetSelectedRow\n}) => {\n  const tableRef = useRef<HTMLDivElement>(null);\n\n  // Get visible columns in the correct order\n  const visibleOrderedColumns = columns.filter(col => visibleColumns.includes(col.id));\n\n  // Calculate paginated data\n  const startIndex = page * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedData = data.slice(startIndex, endIndex);\n\n  // Handle row click\n  const handleRowClick = (row: any) => {\n    onSetSelectedRow(row);\n    if (onRowClick) {\n      onRowClick(row);\n    }\n  };\n\n  // Handle row expansion\n  const handleRowExpand = (event: React.MouseEvent, rowId: string) => {\n    event.stopPropagation();\n    onRowExpand(rowId);\n  };\n\n  // Render cell content\n  const renderCellContent = (column: ColumnDef, row: any) => {\n    const value = row[column.id];\n\n    // If column has a custom formatter, use it\n    if (column.format) {\n      return column.format(value, row);\n    }\n\n    // Handle different column types\n    switch (column.type) {\n      case 'number':\n        return value?.toLocaleString() || '-';\n\n      case 'currency':\n        return value !== undefined && value !== null\n          ? new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: 'USD'\n            }).format(value)\n          : '-';\n\n      case 'percentage':\n        return value !== undefined && value !== null\n          ? `${value}%`\n          : '-';\n\n      case 'link':\n        if (!column.linkConfig) return value;\n\n        let url = '';\n        let displayText = value;\n\n        // Determine URL\n        if (column.linkConfig.urlBuilder) {\n          url = column.linkConfig.urlBuilder(row);\n        } else if (column.linkConfig.urlField) {\n          url = row[column.linkConfig.urlField] || '';\n          if (column.linkConfig.urlPrefix) url = column.linkConfig.urlPrefix + url;\n          if (column.linkConfig.urlSuffix) url = url + column.linkConfig.urlSuffix;\n        } else {\n          url = String(value);\n        }\n\n        // Determine display text\n        if (column.linkConfig.displayField) {\n          displayText = row[column.linkConfig.displayField] || value;\n        }\n\n        return (\n          <Link\n            href={url}\n            target={column.linkConfig.openInNewTab ? '_blank' : '_self'}\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener noreferrer\"\n            sx={{ textDecoration: 'none', color: 'primary.main' }}\n          >\n            {displayText}\n          </Link>\n        );\n\n      default:\n        return value !== undefined && value !== null ? value : '-';\n    }\n  };\n\n  // Debug data\n  console.log('TableContent data:', {\n    dataType: typeof data,\n    isArray: Array.isArray(data),\n    dataLength: Array.isArray(data) ? data.length : 'N/A',\n    paginatedDataLength: paginatedData.length,\n    firstItem: paginatedData.length > 0 ? paginatedData[0] : null\n  });\n\n  // If no data, show empty message\n  if (!Array.isArray(data) || data.length === 0) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyMessage}\n        </Typography>\n        {process.env.NODE_ENV === 'development' && (\n          <Typography variant=\"body2\" color=\"error\" sx={{ mt: 2 }}>\n            Debug: Data is {Array.isArray(data) ? 'an empty array' : `not an array (${typeof data})`}\n          </Typography>\n        )}\n      </Box>\n    );\n  }\n\n  return (\n    <TableContainer ref={tableRef}>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            {/* Expand column if row details are enabled */}\n            {renderRowDetail && (\n              <TableCell padding=\"checkbox\" />\n            )}\n\n            {/* Render column headers */}\n            {visibleOrderedColumns.map((column, colIndex) => (\n              <TableCell\n                key={column.id}\n                align={column.align || 'left'}\n                sx={{\n                  ...(stickyColumnsConfig.enabled && stickyColumns.includes(column.id) ? {\n                    position: 'sticky',\n                    left: 0,\n                    zIndex: 2,\n                    backgroundColor: theme => theme.palette.background.paper,\n                    boxShadow: '2px 0 5px rgba(0,0,0,0.1)'\n                  } : {})\n                }}\n              >\n                <Sorting\n                  column={column}\n                  config={{ enabled: true }}\n                  activeColumn={orderBy}\n                  direction={order}\n                  onSort={onSort}\n                />\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {paginatedData.map((row, rowIndex) => {\n            const rowId = row[idField];\n            const isExpanded = expandedRows.includes(rowId);\n            const isSelected = selectedRow && selectedRow[idField] === rowId;\n\n            return (\n              <React.Fragment key={rowId || `row-${rowIndex}`}>\n                <TableRow\n                  hover\n                  onClick={() => handleRowClick(row)}\n                  selected={isSelected}\n                  sx={{ cursor: onRowClick ? 'pointer' : 'default' }}\n                >\n                  {/* Expand button if row details are enabled */}\n                  {renderRowDetail && (\n                    <TableCell padding=\"checkbox\">\n                      <ExpandButton\n                        expanded={isExpanded}\n                        onClick={(e) => {\n                          if (e) handleRowExpand(e, rowId);\n                          else handleRowExpand({} as React.MouseEvent, rowId);\n                        }}\n                      />\n                    </TableCell>\n                  )}\n\n                  {/* Render cells */}\n                  {visibleOrderedColumns.map((column, colIndex) => (\n                    <TableCell\n                      key={column.id}\n                      align={column.align || 'left'}\n                      sx={{\n                        whiteSpace: column.wrap ? 'normal' : 'nowrap',\n                        maxWidth: column.maxWidth || 'auto',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        ...(stickyColumnsConfig.enabled && stickyColumns.includes(column.id) ? {\n                          position: 'sticky',\n                          left: 0,\n                          zIndex: 1,\n                          backgroundColor: theme => theme.palette.background.paper,\n                          boxShadow: '2px 0 5px rgba(0,0,0,0.1)'\n                        } : {})\n                      }}\n                      tabIndex={keyboardNavConfig.enabled ? 0 : -1}\n                      onKeyDown={(e) => keyboardNavConfig.enabled && onKeyDown(e, rowIndex, colIndex)}\n                      id={`cell-${rowIndex}-${colIndex}`}\n                    >\n                      {renderCellContent(column, row)}\n                    </TableCell>\n                  ))}\n                </TableRow>\n\n                {/* Expanded row content */}\n                {renderRowDetail && (\n                  <ExpandedRow\n                    colSpan={visibleOrderedColumns.length + 1}\n                    expanded={isExpanded}\n                    renderDetail={renderRowDetail}\n                    row={row}\n                  />\n                )}\n              </React.Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default TableContent;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  IconButton,\n  Tooltip,\n  CircularProgress,\n  Collapse\n} from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\nimport { ColumnDef, HierarchicalGroup } from '../types';\n\ninterface HierarchicalTableContentProps {\n  columns: ColumnDef[];\n  groupByLevels: string[];\n  hierarchicalData: HierarchicalGroup[];\n  expandedGroups: string[];\n  loading: boolean;\n  emptyMessage: string;\n  onToggleGroup: (path: string) => void;\n  onLoadChildren: (parentPath: string, childLevel: number, groupBy: string) => Promise<void>;\n}\n\n/**\n * Hierarchical Table Content component\n * Displays data in a hierarchical structure with expandable groups\n */\nconst HierarchicalTableContent: React.FC<HierarchicalTableContentProps> = ({\n  columns,\n  groupByLevels,\n  hierarchicalData,\n  expandedGroups,\n  loading,\n  emptyMessage,\n  onToggleGroup,\n  onLoadChildren\n}) => {\n  const [loadingGroups, setLoadingGroups] = useState<string[]>([]);\n\n  // Handle expanding/collapsing a group\n  const handleToggleGroup = async (group: HierarchicalGroup) => {\n    const isExpanded = expandedGroups.includes(group.path);\n    \n    if (!isExpanded && !group.childrenLoaded && group.hasChildren) {\n      // If expanding and children not loaded yet, load them\n      setLoadingGroups(prev => [...prev, group.path]);\n      \n      try {\n        // Get the next level in the hierarchy\n        const childLevel = group.level + 1;\n        const childGroupBy = childLevel < groupByLevels.length ? groupByLevels[childLevel] : null;\n        \n        if (childGroupBy) {\n          await onLoadChildren(group.path, childLevel, childGroupBy);\n        }\n      } finally {\n        setLoadingGroups(prev => prev.filter(path => path !== group.path));\n      }\n    }\n    \n    // Toggle the group expansion state\n    onToggleGroup(group.path);\n  };\n\n  // Render a group row\n  const renderGroupRow = (group: HierarchicalGroup, indent: number = 0) => {\n    const isExpanded = expandedGroups.includes(group.path);\n    const isLoading = loadingGroups.includes(group.path);\n    const hasNextLevel = group.level < groupByLevels.length - 1;\n    const canExpand = group.hasChildren && hasNextLevel;\n    \n    return (\n      <React.Fragment key={group.path}>\n        <TableRow \n          hover\n          sx={{ \n            backgroundColor: theme => \n              `rgba(${theme.palette.primary.main}, ${0.05 + (group.level * 0.05)})`\n          }}\n        >\n          {/* First cell with expand/collapse button */}\n          <TableCell \n            sx={{ \n              pl: 1 + (indent * 2),\n              fontWeight: 'bold'\n            }}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {canExpand ? (\n                <IconButton\n                  size=\"small\"\n                  onClick={() => handleToggleGroup(group)}\n                  disabled={isLoading}\n                >\n                  {isLoading ? (\n                    <CircularProgress size={20} />\n                  ) : isExpanded ? (\n                    <KeyboardArrowDownIcon fontSize=\"small\" />\n                  ) : (\n                    <KeyboardArrowRightIcon fontSize=\"small\" />\n                  )}\n                </IconButton>\n              ) : (\n                <Box sx={{ width: 28 }} /> // Spacer for alignment\n              )}\n              <Typography variant=\"body2\" component=\"span\">\n                {group.key}: {group.value}\n              </Typography>\n            </Box>\n          </TableCell>\n          \n          {/* Metrics cells */}\n          {columns.filter(col => col.id !== groupByLevels[group.level]).map(column => (\n            <TableCell \n              key={column.id}\n              align={column.align || 'left'}\n            >\n              {renderMetricValue(group, column)}\n            </TableCell>\n          ))}\n        </TableRow>\n        \n        {/* Render children if expanded */}\n        {isExpanded && group.children && group.children.length > 0 && (\n          <TableRow>\n            <TableCell colSpan={columns.length} sx={{ p: 0, border: 0 }}>\n              <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\n                <Box sx={{ pl: 2 }}>\n                  {group.children.map(child => renderGroupRow(child, indent + 1))}\n                </Box>\n              </Collapse>\n            </TableCell>\n          </TableRow>\n        )}\n      </React.Fragment>\n    );\n  };\n\n  // Render a metric value with appropriate formatting\n  const renderMetricValue = (group: HierarchicalGroup, column: ColumnDef) => {\n    const value = group.metrics[column.id];\n    \n    if (value === undefined || value === null) {\n      return '-';\n    }\n    \n    // Apply column formatting if available\n    if (column.format) {\n      return column.format(value, group);\n    }\n    \n    // Format based on column type\n    switch (column.type) {\n      case 'number':\n        return value.toLocaleString();\n      \n      case 'currency':\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD'\n        }).format(value);\n      \n      case 'percentage':\n        return `${value}%`;\n      \n      default:\n        return value.toString();\n    }\n  };\n\n  // If no data, show empty message\n  if (hierarchicalData.length === 0 && !loading) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyMessage}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // If loading, show loading indicator\n  if (loading && hierarchicalData.length === 0) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <CircularProgress size={40} />\n      </Box>\n    );\n  }\n\n  // Get visible columns (excluding the first grouping level which is shown in the first column)\n  const visibleColumns = columns.filter(col => col.id !== groupByLevels[0]);\n\n  return (\n    <TableContainer>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>\n              {groupByLevels.length > 0 && columns.find(col => col.id === groupByLevels[0])?.label}\n            </TableCell>\n            {visibleColumns.map(column => (\n              <TableCell\n                key={column.id}\n                align={column.align || 'left'}\n              >\n                {column.label}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {hierarchicalData.map(group => renderGroupRow(group))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default HierarchicalTableContent;\n","import React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport {\n  Box,\n  Paper,\n  Toolbar,\n  Typography,\n  CircularProgress,\n  IconButton,\n  Tooltip,\n  useTheme,\n  useMediaQuery,\n  Alert,\n  Button\n} from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { EnhancedTableProps, TableState, ColumnDef, ExportFormat, HierarchicalGroup } from './types';\nimport { decodeStateFromUrl, encodeStateToUrl, filterData, sortData, groupData, createHierarchicalData } from './utils';\nimport Sorting from './features/Sorting';\nimport Filtering, { AdvancedFilter, QuickFilter } from './features/Filtering';\nimport ColumnManagement from './features/ColumnManagement';\nimport Pagination from './features/Pagination';\nimport Grouping from './features/Grouping';\nimport HierarchicalGrouping from './features/HierarchicalGrouping';\nimport Aggregation, { AggregationRow } from './features/Aggregation';\nimport DrillDown from './features/DrillDown';\nimport { ExpandAllButton } from './features/ExpandableRows';\nimport Export from './features/Export';\nimport TableContent from './features/TableContent';\nimport HierarchicalTableContent from './features/HierarchicalTableContent';\n\n// Default table state\nconst DEFAULT_TABLE_STATE: TableState = {\n  sorting: {\n    column: '',\n    direction: 'asc'\n  },\n  filtering: {\n    quickFilter: '',\n    advancedFilters: {}\n  },\n  pagination: {\n    page: 0,\n    pageSize: 10\n  },\n  grouping: {\n    groupByColumn: null,\n    groupByLevels: [],\n    expandedGroups: []\n  },\n  columns: {\n    visible: [],\n    order: [],\n    sticky: [],\n    widths: {}\n  },\n  aggregation: {\n    enabled: []\n  },\n  expandedRows: [],\n  selectedRows: [],\n  treeData: {\n    expandedNodes: []\n  },\n  infiniteScroll: {\n    loadedPages: 0\n  },\n  history: {\n    undoStack: [],\n    redoStack: []\n  },\n  calculatedColumns: {\n    values: {}\n  }\n};\n\n/**\n * Enhanced table component with advanced features\n */\nconst EnhancedTable: React.FC<EnhancedTableProps> = ({\n  // Base props\n  data = [],\n  columns = [],\n  title = '',\n  loading = false,\n  emptyMessage = 'No data to display',\n  idField = 'id',\n  sx,\n\n  // Event handlers\n  onRowClick,\n  onRefresh,\n  onExport,\n  onStateChange,\n  onDrillDown,\n  onLoadGroupChildren,\n\n  // Feature configurations\n  features = {},\n\n  // Feature-specific props\n  renderRowDetail,\n  initialState,\n  stateFromUrl = false,\n\n  // Legacy EnhancedUnifiedDataTable compatibility props\n  enableColumnSelection,\n  enableAdvancedFiltering,\n  enableExportOptions,\n  enableColumnReordering,\n  enableRowGrouping,\n  enableSummaryRow,\n  enableExpandableRows,\n  enableKeyboardNavigation,\n  enableStickyColumns,\n  enableResponsiveDesign,\n  enableDrillDown,\n  filterDefinitions,\n  groupableColumns,\n  stickyColumnIds,\n  drillDownConfig: drillDownConfigProp,\n  aggregations,\n  onExportFormat,\n  onApplyAdvancedFilters,\n  onColumnOrderChange,\n  onGroupingChange,\n  onRowExpand\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Initialize feature configurations with defaults, using legacy props if provided\n  const sortingConfig = useMemo(() => {\n    if (typeof features.sorting === 'boolean') {\n      return features.sorting ? { enabled: true } : { enabled: false };\n    }\n    return features.sorting || { enabled: false };\n  }, [features.sorting]);\n\n  const filteringConfig = useMemo(() => {\n    // Use enableAdvancedFiltering if provided\n    if (enableAdvancedFiltering !== undefined) {\n      return { enabled: true, quickFilter: true, advancedFilter: enableAdvancedFiltering };\n    }\n    if (typeof features.filtering === 'boolean') {\n      return features.filtering ? { enabled: true, quickFilter: true, advancedFilter: true } : { enabled: false };\n    }\n    return features.filtering || { enabled: false };\n  }, [features.filtering, enableAdvancedFiltering]);\n\n  const paginationConfig = useMemo(() => {\n    if (typeof features.pagination === 'boolean') {\n      return features.pagination ? { enabled: true, pageSizeOptions: [10, 25, 50, 100] } : { enabled: false };\n    }\n    return features.pagination || { enabled: false };\n  }, [features.pagination]);\n\n  const groupingConfig = useMemo(() => {\n    // Use enableRowGrouping if provided\n    if (enableRowGrouping !== undefined) {\n      return { enabled: enableRowGrouping };\n    }\n    if (typeof features.grouping === 'boolean') {\n      return features.grouping ? { enabled: true } : { enabled: false };\n    }\n    return features.grouping || { enabled: false };\n  }, [features.grouping, enableRowGrouping]);\n\n  const aggregationConfig = useMemo(() => {\n    // Use enableSummaryRow if provided\n    if (enableSummaryRow !== undefined) {\n      return { enabled: enableSummaryRow, showInFooter: true };\n    }\n    if (typeof features.aggregation === 'boolean') {\n      return features.aggregation ? { enabled: true, showInFooter: true } : { enabled: false };\n    }\n    return features.aggregation || { enabled: false };\n  }, [features.aggregation, enableSummaryRow]);\n\n  const columnManagementConfig = useMemo(() => {\n    // Use enableColumnSelection and enableColumnReordering if provided\n    if (enableColumnSelection !== undefined || enableColumnReordering !== undefined) {\n      return {\n        enabled: enableColumnSelection || enableColumnReordering || false,\n        allowReordering: enableColumnReordering || false,\n        allowHiding: enableColumnSelection || false,\n        allowPinning: false,\n        allowResizing: false\n      };\n    }\n    if (typeof features.columnManagement === 'boolean') {\n      return features.columnManagement ? { enabled: true, allowReordering: true, allowHiding: true, allowPinning: true, allowResizing: true } : { enabled: false };\n    }\n    return features.columnManagement || { enabled: false };\n  }, [features.columnManagement, enableColumnSelection, enableColumnReordering]);\n\n  const columnResizingConfig = useMemo(() => {\n    if (typeof features.columnResizing === 'boolean') {\n      return features.columnResizing ? { enabled: true, minWidth: 50, maxWidth: 500, persistWidths: true } : { enabled: false };\n    }\n    return features.columnResizing || { enabled: false };\n  }, [features.columnResizing]);\n\n  const expandableRowsConfig = useMemo(() => {\n    // Use enableExpandableRows if provided\n    if (enableExpandableRows !== undefined) {\n      return { enabled: enableExpandableRows };\n    }\n    if (typeof features.expandableRows === 'boolean') {\n      return features.expandableRows ? { enabled: true } : { enabled: false };\n    }\n    return features.expandableRows || { enabled: false };\n  }, [features.expandableRows, enableExpandableRows]);\n\n  const keyboardNavigationConfig = useMemo(() => {\n    // Use enableKeyboardNavigation if provided\n    if (enableKeyboardNavigation !== undefined) {\n      return { enabled: enableKeyboardNavigation, allowCellNavigation: true };\n    }\n    if (typeof features.keyboardNavigation === 'boolean') {\n      return features.keyboardNavigation ? { enabled: true, allowCellNavigation: true } : { enabled: false };\n    }\n    return features.keyboardNavigation || { enabled: false };\n  }, [features.keyboardNavigation, enableKeyboardNavigation]);\n\n  const stickyColumnsConfig = useMemo(() => {\n    // Use enableStickyColumns if provided\n    if (enableStickyColumns !== undefined) {\n      return { enabled: enableStickyColumns };\n    }\n    if (typeof features.stickyColumns === 'boolean') {\n      return features.stickyColumns ? { enabled: true } : { enabled: false };\n    }\n    return features.stickyColumns || { enabled: false };\n  }, [features.stickyColumns, enableStickyColumns]);\n\n  const responsiveConfig = useMemo(() => {\n    // Use enableResponsiveDesign if provided\n    if (enableResponsiveDesign !== undefined) {\n      return { enabled: enableResponsiveDesign };\n    }\n    if (typeof features.responsive === 'boolean') {\n      return features.responsive ? { enabled: true } : { enabled: false };\n    }\n    return features.responsive || { enabled: false };\n  }, [features.responsive, enableResponsiveDesign]);\n\n  const drillDownConfig = useMemo(() => {\n    // Use enableDrillDown and drillDownConfigProp if provided\n    if (enableDrillDown !== undefined) {\n      return {\n        enabled: enableDrillDown,\n        configs: drillDownConfigProp || []\n      };\n    }\n    if (typeof features.drillDown === 'boolean') {\n      return features.drillDown ? { enabled: true } : { enabled: false };\n    }\n    return features.drillDown || { enabled: false };\n  }, [features.drillDown, enableDrillDown, drillDownConfigProp]);\n\n  const exportConfig = useMemo(() => {\n    // Use enableExportOptions if provided\n    if (enableExportOptions !== undefined) {\n      return { enabled: enableExportOptions };\n    }\n    if (typeof features.export === 'boolean') {\n      return features.export ? { enabled: true } : { enabled: false };\n    }\n    return features.export || { enabled: false };\n  }, [features.export, enableExportOptions]);\n\n  // Initialize state\n  const [tableState, setTableState] = useState<TableState>(() => {\n    // Start with default state\n    const defaultState = {\n      ...DEFAULT_TABLE_STATE,\n      columns: {\n        visible: columns.map(col => col.id),\n        order: columns.map(col => col.id),\n        sticky: stickyColumnIds || columns.filter(col => col.pinned).map(col => col.id),\n        widths: columns.reduce((acc, col) => ({ ...acc, [col.id]: col.width || 150 }), {})\n      }\n    };\n\n    // Apply initial state from props\n    const state = initialState ? { ...defaultState, ...initialState } : defaultState;\n\n    // Apply state from URL if enabled\n    if (stateFromUrl) {\n      return decodeStateFromUrl(location.search, state);\n    }\n\n    return state;\n  });\n\n  // Update URL when state changes\n  useEffect(() => {\n    if (stateFromUrl && onStateChange) {\n      const queryString = encodeStateToUrl(tableState);\n      navigate({ search: queryString }, { replace: true });\n      onStateChange(tableState);\n    } else if (onStateChange) {\n      onStateChange(tableState);\n    }\n  }, [tableState, stateFromUrl, navigate, onStateChange]);\n\n  // State for hierarchical data\n  const [hierarchicalData, setHierarchicalData] = useState<HierarchicalGroup[]>([]);\n  const [isLoadingHierarchicalData, setIsLoadingHierarchicalData] = useState(false);\n\n  // Process data based on current state\n  const processedData = useMemo(() => {\n    // Ensure data is an array\n    let result = Array.isArray(data) ? [...data] : [];\n\n    // Log data processing\n    console.log('EnhancedTable processing data:', {\n      dataIsArray: Array.isArray(data),\n      dataLength: Array.isArray(data) ? data.length : 'N/A',\n      resultLength: result.length\n    });\n\n    // Apply filtering\n    if (filteringConfig.enabled) {\n      result = filterData(\n        result,\n        tableState.filtering.quickFilter,\n        tableState.filtering.advancedFilters\n      );\n      console.log('After filtering:', { resultLength: result.length });\n    }\n\n    // Apply sorting\n    if (sortingConfig.enabled && tableState.sorting.column) {\n      result = sortData(\n        result,\n        tableState.sorting.column,\n        tableState.sorting.direction\n      );\n      console.log('After sorting:', { resultLength: result.length });\n    }\n\n    return result;\n  }, [data, filteringConfig.enabled, sortingConfig.enabled, tableState.filtering, tableState.sorting]);\n\n  // Generate hierarchical data when groupByLevels change\n  useEffect(() => {\n    if (groupingConfig.hierarchical && tableState.grouping.groupByLevels.length > 0) {\n      setIsLoadingHierarchicalData(true);\n\n      // Create hierarchical data structure from flat data\n      const firstLevelGroupBy = tableState.grouping.groupByLevels[0];\n      if (firstLevelGroupBy) {\n        const hierarchical = createHierarchicalData(\n          processedData,\n          firstLevelGroupBy,\n          0,\n          columns\n        );\n        setHierarchicalData(hierarchical);\n      }\n\n      setIsLoadingHierarchicalData(false);\n    }\n  }, [processedData, tableState.grouping.groupByLevels, groupingConfig.hierarchical, columns]);\n\n  // Handle sorting\n  const handleSort = useCallback((columnId: string) => {\n    setTableState(prevState => {\n      const isAsc = prevState.sorting.column === columnId && prevState.sorting.direction === 'asc';\n      return {\n        ...prevState,\n        sorting: {\n          column: columnId,\n          direction: isAsc ? 'desc' : 'asc'\n        },\n        // Reset to first page when sorting changes\n        pagination: {\n          ...prevState.pagination,\n          page: 0\n        }\n      };\n    });\n  }, []);\n\n  // Handle quick filter change\n  const handleQuickFilterChange = useCallback((value: string) => {\n    setTableState(prevState => ({\n      ...prevState,\n      filtering: {\n        ...prevState.filtering,\n        quickFilter: value\n      },\n      // Reset to first page when filter changes\n      pagination: {\n        ...prevState.pagination,\n        page: 0\n      }\n    }));\n  }, []);\n\n  // Handle advanced filters change\n  const handleAdvancedFiltersChange = useCallback((filters: Record<string, any>) => {\n    setTableState(prevState => ({\n      ...prevState,\n      filtering: {\n        ...prevState.filtering,\n        advancedFilters: filters\n      },\n      // Reset to first page when filter changes\n      pagination: {\n        ...prevState.pagination,\n        page: 0\n      }\n    }));\n\n    // Call legacy callback if provided\n    if (onApplyAdvancedFilters) {\n      onApplyAdvancedFilters(filters);\n    }\n  }, [onApplyAdvancedFilters]);\n\n  // Handle column visibility change\n  const handleColumnVisibilityChange = useCallback((columnId: string, visible: boolean) => {\n    setTableState(prevState => {\n      const newVisibleColumns = visible\n        ? [...prevState.columns.visible, columnId]\n        : prevState.columns.visible.filter(id => id !== columnId);\n\n      return {\n        ...prevState,\n        columns: {\n          ...prevState.columns,\n          visible: newVisibleColumns\n        }\n      };\n    });\n  }, []);\n\n  // Handle column order change\n  const handleColumnOrderChange = useCallback((newOrder: string[]) => {\n    setTableState(prevState => ({\n      ...prevState,\n      columns: {\n        ...prevState.columns,\n        order: newOrder\n      }\n    }));\n\n    // Call legacy callback if provided\n    if (onColumnOrderChange) {\n      onColumnOrderChange(newOrder.map(id => ({ id })));\n    }\n  }, [onColumnOrderChange]);\n\n  // Handle sticky column change\n  const handleStickyColumnChange = useCallback((columnId: string, sticky: boolean) => {\n    setTableState(prevState => {\n      const newStickyColumns = sticky\n        ? [...prevState.columns.sticky, columnId]\n        : prevState.columns.sticky.filter(id => id !== columnId);\n\n      return {\n        ...prevState,\n        columns: {\n          ...prevState.columns,\n          sticky: newStickyColumns\n        }\n      };\n    });\n  }, []);\n\n  // Handle column resize\n  const handleColumnResize = useCallback((columnId: string, width: number) => {\n    setTableState(prevState => ({\n      ...prevState,\n      columns: {\n        ...prevState.columns,\n        widths: {\n          ...prevState.columns.widths,\n          [columnId]: width\n        }\n      }\n    }));\n  }, []);\n\n  // Handle page change\n  const handlePageChange = useCallback((page: number) => {\n    setTableState(prevState => ({\n      ...prevState,\n      pagination: {\n        ...prevState.pagination,\n        page\n      }\n    }));\n  }, []);\n\n  // Handle page size change\n  const handlePageSizeChange = useCallback((pageSize: number) => {\n    setTableState(prevState => ({\n      ...prevState,\n      pagination: {\n        ...prevState.pagination,\n        page: 0, // Reset to first page\n        pageSize\n      }\n    }));\n  }, []);\n\n  // Handle grouping change\n  const handleGroupingChange = useCallback((columnId: string | null) => {\n    setTableState(prevState => ({\n      ...prevState,\n      grouping: {\n        ...prevState.grouping,\n        groupByColumn: columnId\n      }\n    }));\n\n    // Call legacy callback if provided\n    if (onGroupingChange) {\n      onGroupingChange(columnId);\n    }\n  }, [onGroupingChange]);\n\n  // Handle hierarchical grouping levels change\n  const handleGroupingLevelsChange = useCallback((columnIds: string[]) => {\n    setTableState(prevState => ({\n      ...prevState,\n      grouping: {\n        ...prevState.grouping,\n        groupByLevels: columnIds,\n        expandedGroups: [] // Reset expanded groups when levels change\n      }\n    }));\n  }, []);\n\n  // Handle toggle group expansion in hierarchical view\n  const handleToggleGroup = useCallback((path: string) => {\n    setTableState(prevState => {\n      const expandedGroups = [...prevState.grouping.expandedGroups];\n      const index = expandedGroups.indexOf(path);\n\n      if (index === -1) {\n        // Expand group\n        expandedGroups.push(path);\n      } else {\n        // Collapse group\n        expandedGroups.splice(index, 1);\n      }\n\n      return {\n        ...prevState,\n        grouping: {\n          ...prevState.grouping,\n          expandedGroups\n        }\n      };\n    });\n  }, []);\n\n  // Handle loading children for a hierarchical group\n  const handleLoadGroupChildren = useCallback(async (parentPath: string, childLevel: number, groupBy: string) => {\n    if (!onLoadGroupChildren) return;\n\n    try {\n      // Call the provided callback to load children\n      const children = await onLoadGroupChildren(parentPath, childLevel, groupBy);\n\n      // Update hierarchical data with the loaded children\n      setHierarchicalData(prevData => {\n        // Find the parent group by path and update its children\n        const updateChildren = (groups: HierarchicalGroup[]): HierarchicalGroup[] => {\n          return groups.map(group => {\n            if (group.path === parentPath) {\n              return {\n                ...group,\n                children,\n                childrenLoaded: true\n              };\n            } else if (group.children && group.children.length > 0) {\n              return {\n                ...group,\n                children: updateChildren(group.children)\n              };\n            }\n            return group;\n          });\n        };\n\n        return updateChildren(prevData);\n      });\n    } catch (error) {\n      console.error('Error loading group children:', error);\n    }\n  }, [onLoadGroupChildren]);\n\n  // Handle aggregation toggle\n  const handleAggregationToggle = useCallback((aggregationId: string) => {\n    setTableState(prevState => {\n      const currentEnabledAggregations = [...prevState.aggregation.enabled];\n      const aggregationIndex = currentEnabledAggregations.indexOf(aggregationId);\n\n      if (aggregationIndex === -1) {\n        // Add aggregation\n        currentEnabledAggregations.push(aggregationId);\n      } else {\n        // Remove aggregation\n        currentEnabledAggregations.splice(aggregationIndex, 1);\n      }\n\n      return {\n        ...prevState,\n        aggregation: {\n          ...prevState.aggregation,\n          enabled: currentEnabledAggregations\n        }\n      };\n    });\n  }, []);\n\n  // Handle row expansion\n  const handleRowExpand = useCallback((rowId: string) => {\n    setTableState(prevState => {\n      const currentExpandedRows = [...prevState.expandedRows];\n      const rowIndex = currentExpandedRows.indexOf(rowId);\n      const isExpanded = rowIndex === -1;\n\n      // Call legacy callback if provided\n      if (onRowExpand) {\n        onRowExpand(rowId, isExpanded);\n      }\n\n      if (isExpanded) {\n        // Expand row\n        if (expandableRowsConfig.singleExpand) {\n          // If single expand, replace the array\n          return {\n            ...prevState,\n            expandedRows: [rowId]\n          };\n        } else {\n          // Otherwise add to the array\n          return {\n            ...prevState,\n            expandedRows: [...currentExpandedRows, rowId]\n          };\n        }\n      } else {\n        // Collapse row\n        currentExpandedRows.splice(rowIndex, 1);\n        return {\n          ...prevState,\n          expandedRows: currentExpandedRows\n        };\n      }\n    });\n  }, [expandableRowsConfig, onRowExpand]);\n\n  // Handle expand all rows\n  const handleExpandAllRows = useCallback(() => {\n    setTableState(prevState => ({\n      ...prevState,\n      expandedRows: processedData.map(row => row[idField])\n    }));\n  }, [processedData, idField]);\n\n  // Handle collapse all rows\n  const handleCollapseAllRows = useCallback(() => {\n    setTableState(prevState => ({\n      ...prevState,\n      expandedRows: []\n    }));\n  }, []);\n\n  // Get visible and ordered columns\n  const visibleOrderedColumns = useMemo(() => {\n    return columns\n      .filter(col => tableState.columns.visible.includes(col.id))\n      .sort((a, b) => {\n        const indexA = tableState.columns.order.indexOf(a.id);\n        const indexB = tableState.columns.order.indexOf(b.id);\n        return indexA - indexB;\n      });\n  }, [columns, tableState.columns.visible, tableState.columns.order]);\n\n  // Handle keyboard navigation\n  const handleKeyDown = useCallback((event: React.KeyboardEvent, rowIndex: number, colIndex: number) => {\n    if (!keyboardNavigationConfig.enabled) return;\n\n    const maxRowIndex = processedData.length - 1;\n    const maxColIndex = visibleOrderedColumns.length - 1;\n\n    let newRowIndex = rowIndex;\n    let newColIndex = colIndex;\n\n    switch (event.key) {\n      case 'ArrowUp':\n        newRowIndex = Math.max(0, rowIndex - 1);\n        event.preventDefault();\n        break;\n      case 'ArrowDown':\n        newRowIndex = Math.min(maxRowIndex, rowIndex + 1);\n        event.preventDefault();\n        break;\n      case 'ArrowLeft':\n        newColIndex = Math.max(0, colIndex - 1);\n        event.preventDefault();\n        break;\n      case 'ArrowRight':\n        newColIndex = Math.min(maxColIndex, colIndex + 1);\n        event.preventDefault();\n        break;\n      case 'Home':\n        newColIndex = 0;\n        event.preventDefault();\n        break;\n      case 'End':\n        newColIndex = maxColIndex;\n        event.preventDefault();\n        break;\n      case 'PageUp':\n        newRowIndex = Math.max(0, rowIndex - 10);\n        event.preventDefault();\n        break;\n      case 'PageDown':\n        newRowIndex = Math.min(maxRowIndex, rowIndex + 10);\n        event.preventDefault();\n        break;\n      case 'Enter':\n        // Handle row selection or expansion\n        const rowId = processedData[rowIndex][idField];\n        if (tableState.expandedRows.includes(rowId)) {\n          handleRowExpand(rowId);\n        } else if (onRowClick) {\n          onRowClick(processedData[rowIndex]);\n        }\n        event.preventDefault();\n        break;\n    }\n\n    // Focus the cell\n    if (newRowIndex !== rowIndex || newColIndex !== colIndex) {\n      const cellId = `cell-${newRowIndex}-${newColIndex}`;\n      const cellElement = document.getElementById(cellId);\n      if (cellElement) {\n        cellElement.focus();\n      }\n    }\n  }, [keyboardNavigationConfig.enabled, processedData, visibleOrderedColumns.length, idField, tableState.expandedRows, handleRowExpand, onRowClick]);\n\n  // Handle export\n  const handleExport = useCallback((format: ExportFormat) => {\n    // Get all data or just visible columns\n    const exportData = processedData.map(row => {\n      const exportRow: Record<string, any> = {};\n\n      // Include only visible columns if configured\n      const columnsToExport = exportConfig.includeHiddenColumns\n        ? columns\n        : columns.filter(col => tableState.columns.visible.includes(col.id));\n\n      columnsToExport.forEach(column => {\n        exportRow[column.label] = row[column.id];\n      });\n\n      return exportRow;\n    });\n\n    // Call legacy callback if provided\n    if (onExportFormat) {\n      onExportFormat(format.toString());\n    }\n\n    // Call standard callback if provided\n    if (onExport) {\n      onExport(format, exportData);\n    }\n  }, [onExport, onExportFormat, processedData, columns, tableState.columns.visible, exportConfig]);\n\n  // Handle drill down\n  const handleDrillDown = useCallback((row: any, sourceGrouping: string, targetGrouping: string, filters: Record<string, any>) => {\n    if (onDrillDown) {\n      onDrillDown(row, sourceGrouping, targetGrouping, filters);\n    }\n  }, [onDrillDown]);\n\n  // Set selected row\n  const [selectedRow, setSelectedRow] = useState<any | null>(null);\n\n  // Process data for grouping\n  const groupedData = useMemo(() => {\n    if (!groupingConfig.enabled || !tableState.grouping.groupByColumn) {\n      return null;\n    }\n\n    const groups = groupData(processedData, tableState.grouping.groupByColumn);\n\n    // Convert groups to array of objects\n    return Object.entries(groups).map(([groupValue, rows]) => {\n      const groupRow: Record<string, any> = {\n        [tableState.grouping.groupByColumn!]: groupValue,\n        _groupRows: rows.length,\n        _isGroupRow: true,\n        [idField]: `group_${groupValue}`\n      };\n\n      // Calculate aggregations for numeric columns\n      columns.forEach(column => {\n        if (column.id !== tableState.grouping.groupByColumn && (column.type === 'number' || column.type === 'currency')) {\n          // Sum numeric values\n          groupRow[column.id] = rows.reduce((sum, row) => {\n            const value = Number(row[column.id]) || 0;\n            return sum + value;\n          }, 0);\n        }\n      });\n\n      return groupRow;\n    });\n  }, [groupingConfig.enabled, tableState.grouping.groupByColumn, processedData, columns, idField]);\n\n  // Determine which data to display\n  const displayData = groupingConfig.enabled && tableState.grouping.groupByColumn && groupedData\n    ? groupedData\n    : processedData;\n\n  // Debug data\n  const debugData = () => {\n    console.log('EnhancedTable data:', data);\n    console.log('EnhancedTable processedData:', processedData);\n    console.log('EnhancedTable displayData:', displayData);\n    console.log('EnhancedTable columns:', columns);\n    console.log('EnhancedTable tableState:', tableState);\n  };\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div style={{ padding: 24, display: 'flex', alignItems: 'center', justifyContent: 'center', height: 200 }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n\n\n  return (\n    <Paper elevation={0} variant=\"outlined\" sx={{ width: '100%', mb: 2, ...sx }}>\n\n      {/* Table header with title, search, and actions */}\n      <Toolbar\n        sx={{\n          pl: { sm: 2 },\n          pr: { xs: 1, sm: 1 },\n          display: 'flex',\n          justifyContent: 'space-between'\n        }}\n      >\n        <Typography variant=\"h6\" component=\"div\">\n          {title}\n        </Typography>\n\n        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          {/* Filtering */}\n          {filteringConfig.enabled && (\n            <Filtering\n              columns={columns}\n              config={filteringConfig}\n              quickFilterValue={tableState.filtering.quickFilter}\n              advancedFilters={tableState.filtering.advancedFilters}\n              onQuickFilterChange={handleQuickFilterChange}\n              onAdvancedFiltersChange={handleAdvancedFiltersChange}\n            />\n          )}\n\n          {/* Column Management */}\n          {columnManagementConfig.enabled && (\n            <ColumnManagement\n              columns={columns}\n              config={columnManagementConfig}\n              visibleColumns={tableState.columns.visible}\n              columnOrder={tableState.columns.order}\n              stickyColumns={tableState.columns.sticky}\n              onVisibilityChange={handleColumnVisibilityChange}\n              onOrderChange={handleColumnOrderChange}\n              onStickyChange={handleStickyColumnChange}\n            />\n          )}\n\n          {/* Grouping */}\n          {groupingConfig.enabled && !groupingConfig.hierarchical && (\n            <Grouping\n              columns={columns}\n              config={groupingConfig}\n              groupByColumn={tableState.grouping.groupByColumn}\n              onGroupingChange={handleGroupingChange}\n            />\n          )}\n\n          {/* Hierarchical Grouping */}\n          {groupingConfig.enabled && groupingConfig.hierarchical && (\n            <HierarchicalGrouping\n              columns={columns}\n              config={groupingConfig}\n              groupByLevels={tableState.grouping.groupByLevels}\n              onGroupingLevelsChange={handleGroupingLevelsChange}\n            />\n          )}\n\n          {/* Aggregation */}\n          {aggregationConfig.enabled && (\n            <Aggregation\n              columns={columns}\n              config={aggregationConfig}\n              data={processedData}\n              enabledAggregations={tableState.aggregation.enabled}\n              visibleColumns={tableState.columns.visible}\n              onAggregationToggle={handleAggregationToggle}\n            />\n          )}\n\n          {/* Expandable Rows */}\n          {expandableRowsConfig.enabled && renderRowDetail && (\n            <ExpandAllButton\n              config={expandableRowsConfig}\n              expandedRows={tableState.expandedRows}\n              totalRows={displayData.length}\n              onExpandAll={handleExpandAllRows}\n              onCollapseAll={handleCollapseAllRows}\n            />\n          )}\n\n          {/* Drill Down */}\n          {drillDownConfig.enabled && onDrillDown && (\n            <DrillDown\n              configs={(drillDownConfig as any).configs || []}\n              sourceGrouping={tableState.grouping.groupByColumn}\n              selectedRow={selectedRow}\n              onDrillDown={handleDrillDown}\n            />\n          )}\n\n          {/* Export */}\n          {exportConfig.enabled && onExport && (\n            <Export\n              config={exportConfig}\n              onExport={handleExport}\n            />\n          )}\n\n          {/* Refresh Button */}\n          {onRefresh && (\n            <Tooltip title=\"Refresh\">\n              <IconButton size=\"small\" onClick={onRefresh}>\n                <RefreshIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          )}\n        </div>\n      </Toolbar>\n\n      {/* Table content */}\n      <div\n        style={{\n          width: '100%',\n          overflowX: responsiveConfig.enabled ? 'auto' : undefined\n        }}\n      >\n        {displayData.length === 0 && !groupingConfig.hierarchical ? (\n          <div style={{ padding: 24, textAlign: 'center' }}>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              {emptyMessage}\n            </Typography>\n          </div>\n        ) : groupingConfig.hierarchical && tableState.grouping.groupByLevels.length > 0 ? (\n          <HierarchicalTableContent\n            columns={columns}\n            groupByLevels={tableState.grouping.groupByLevels.map(id => id)}\n            hierarchicalData={hierarchicalData}\n            expandedGroups={tableState.grouping.expandedGroups}\n            loading={isLoadingHierarchicalData}\n            emptyMessage={emptyMessage}\n            onToggleGroup={handleToggleGroup}\n            onLoadChildren={handleLoadGroupChildren}\n          />\n        ) : (\n          <TableContent\n            data={displayData}\n            columns={columns}\n            visibleColumns={tableState.columns.visible}\n            stickyColumns={tableState.columns.sticky}\n            orderBy={tableState.sorting.column}\n            order={tableState.sorting.direction}\n            page={tableState.pagination.page}\n            pageSize={tableState.pagination.pageSize}\n            idField={idField}\n            emptyMessage={emptyMessage}\n            expandedRows={tableState.expandedRows}\n            selectedRow={selectedRow}\n            keyboardNavConfig={keyboardNavigationConfig}\n            stickyColumnsConfig={stickyColumnsConfig}\n            renderRowDetail={renderRowDetail}\n            onSort={handleSort}\n            onRowClick={onRowClick}\n            onRowExpand={handleRowExpand}\n            onKeyDown={handleKeyDown}\n            onSetSelectedRow={setSelectedRow}\n          />\n        )}\n      </div>\n\n      {/* Aggregation Row */}\n      {aggregationConfig.enabled && aggregationConfig.showInFooter && tableState.aggregation.enabled.length > 0 && (\n        <AggregationRow\n          columns={columns}\n          data={processedData}\n          enabledAggregations={tableState.aggregation.enabled}\n          visibleColumns={tableState.columns.visible}\n        />\n      )}\n\n      {/* Pagination */}\n      {paginationConfig.enabled && (\n        <Pagination\n          config={paginationConfig}\n          totalCount={processedData.length}\n          page={tableState.pagination.page}\n          pageSize={tableState.pagination.pageSize}\n          onPageChange={handlePageChange}\n          onPageSizeChange={handlePageSizeChange}\n        />\n      )}\n    </Paper>\n  );\n};\n\nexport default EnhancedTable;\n","import type { TableFeatures } from '../UnifiedDataTable';\nimport { SxProps, Theme, TooltipProps } from '@mui/material';\nimport React from 'react';\n\n// Base column definition\nexport interface BaseColumnDef {\n  id: string;\n  label: string;\n  align?: 'left' | 'right' | 'center';\n  format?: (value: any, row: any) => React.ReactNode;\n  type?: 'text' | 'number' | 'currency' | 'percentage' | 'status' | 'sparkline' | 'progress' | 'bars' | 'link' |\n         'user' | 'rating' | 'badge' | 'boolean' | 'date' | 'tags' | 'microChart';\n  wrap?: boolean;\n  maxWidth?: string | number;\n  minWidth?: number;\n  valueKey?: string;\n  comparativeKey?: string;\n  target?: number;\n  sortable?: boolean;\n  cellProps?: Record<string, any>;\n  linkConfig?: {\n    urlField?: string;\n    urlPrefix?: string;\n    urlSuffix?: string;\n    urlBuilder?: (row: any) => string;\n    openInNewTab?: boolean;\n    displayField?: string;\n  };\n\n  // Additional properties for enhanced features\n  groupable?: boolean;\n  filterable?: boolean;\n  aggregatable?: boolean;\n  drillDownTarget?: string;\n  hidden?: boolean;\n  pinned?: boolean;\n  width?: number;\n  resizable?: boolean;\n\n  // New properties for additional features\n  spanConfig?: CellSpanConfig;\n  tooltip?: TooltipConfig;\n  calculated?: boolean;\n  formula?: (row: any) => any;\n\n  // Tree data properties\n  treeColumn?: boolean;\n\n  // Advanced feature properties\n  microChartConfig?: MicroChartConfig;\n  heatmap?: HeatmapConfig;\n  ratingMax?: number;\n  progressColor?: 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';\n  showProgressValue?: boolean;\n  badgeColor?: 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';\n  badgeMax?: number;\n  badgeContent?: string;\n  showZeroBadge?: boolean;\n  trueIcon?: string;\n  falseIcon?: string;\n  trueColor?: string;\n  falseColor?: string;\n  dateFormat?: 'short' | 'medium' | 'long' | 'relative' | 'datetime' | 'time';\n}\n\n// Export formats\nexport enum ExportFormat {\n  CSV = 'csv',\n  EXCEL = 'excel',\n  PDF = 'pdf',\n  JSON = 'json'\n}\n\n// Aggregation function type\nexport type AggregationFunction = 'sum' | 'avg' | 'min' | 'max' | 'count';\n\n// Aggregation definition interface\nexport interface AggregationDefinition {\n  columnId: string;\n  function: AggregationFunction;\n  label?: string;\n}\n\n// Row detail renderer function type\nexport type RowDetailRenderer = (row: any) => React.ReactNode;\n\n// Drill-down configuration interface\nexport interface DrillDownConfigItem {\n  // The source grouping level (e.g., 'Month', 'Label')\n  sourceGrouping: string;\n  // The target grouping level (e.g., 'Day', 'Player')\n  targetGrouping: string;\n  // Optional filter transformation function\n  transformFilter?: (row: any) => Record<string, any>;\n  // Label for the drill-down action\n  label?: string;\n  // Required for compatibility\n  enabled?: boolean;\n}\n\n// Cell spanning configuration\nexport interface CellSpanConfig {\n  rowSpan?: number | ((row: any, rowIndex: number, data: any[]) => number);\n  colSpan?: number | ((row: any, rowIndex: number, data: any[]) => number);\n}\n\n// Tooltip configuration\nexport interface TooltipConfig {\n  enabled: boolean;\n  content?: React.ReactNode | ((value: any, row: any) => React.ReactNode);\n  placement?: 'top' | 'right' | 'bottom' | 'left';\n  props?: Partial<TooltipProps>;\n}\n\n// Extended column definition with additional properties\nexport interface ColumnDef extends BaseColumnDef {\n  // All properties are now in BaseColumnDef\n}\n\n// Feature configuration interfaces\nexport interface SortingConfig {\n  enabled: boolean;\n  defaultColumn?: string;\n  defaultDirection?: 'asc' | 'desc';\n  multiColumn?: boolean;\n  serverSide?: boolean;\n}\n\nexport interface FilteringConfig {\n  enabled: boolean;\n  serverSide?: boolean;\n  quickFilter?: boolean;\n  advancedFilter?: boolean;\n  filterTypes?: string[];\n}\n\nexport interface PaginationConfig {\n  enabled: boolean;\n  defaultPageSize?: number;\n  pageSizeOptions?: number[];\n  serverSide?: boolean;\n}\n\nexport interface GroupingConfig {\n  enabled: boolean;\n  defaultGroupBy?: string | null;\n  defaultGroupByLevels?: string[];\n  allowMultipleGroups?: boolean;\n  expandByDefault?: boolean;\n  hierarchical?: boolean;\n}\n\nexport interface AggregationConfig {\n  enabled: boolean;\n  defaultAggregations?: string[];\n  showInFooter?: boolean;\n  showInGroupHeader?: boolean;\n}\n\nexport interface ColumnManagementConfig {\n  enabled: boolean;\n  allowReordering?: boolean;\n  allowHiding?: boolean;\n  allowPinning?: boolean;\n  allowResizing?: boolean;\n}\n\nexport interface ExpandableRowsConfig {\n  enabled: boolean;\n  expandByDefault?: boolean;\n  singleExpand?: boolean;\n}\n\nexport interface KeyboardNavigationConfig {\n  enabled: boolean;\n  allowCellNavigation?: boolean;\n  allowRowNavigation?: boolean;\n  allowPageNavigation?: boolean;\n}\n\nexport interface StickyColumnsConfig {\n  enabled: boolean;\n  defaultStickyColumns?: string[];\n  allowUserCustomization?: boolean;\n}\n\nexport interface ResponsiveConfig {\n  enabled: boolean;\n  breakpoints?: {\n    xs?: string[];\n    sm?: string[];\n    md?: string[];\n    lg?: string[];\n    xl?: string[];\n  };\n  priorityColumns?: string[];\n}\n\nexport interface DrillDownConfig {\n  enabled: boolean;\n  configs?: DrillDownConfigItem[];\n}\n\nexport interface StateManagementConfig {\n  enabled: boolean;\n  persistInLocalStorage?: boolean;\n  persistInUrl?: boolean;\n  stateKey?: string;\n}\n\nexport interface ExportConfig {\n  enabled: boolean;\n  formats?: ExportFormat[];\n  includeHiddenColumns?: boolean;\n  fileName?: string;\n}\n\nexport interface TreeDataConfig {\n  enabled: boolean;\n  childField: string;\n  expandByDefault?: boolean;\n  levelIndent?: number;\n  labelField?: string;\n}\n\nexport interface CellSpanningConfig {\n  enabled: boolean;\n  defaultRowSpan?: number;\n  defaultColSpan?: number;\n}\n\nexport interface InfiniteScrollConfig {\n  enabled: boolean;\n  loadMoreThreshold?: number;\n  pageSize?: number;\n  initialLoad?: number;\n}\n\nexport interface ColumnResizingConfig {\n  enabled: boolean;\n  minWidth?: number;\n  maxWidth?: number;\n  persistWidths?: boolean;\n  resizeMode?: 'fit' | 'expand';\n}\n\nexport interface SearchHighlightingConfig {\n  enabled: boolean;\n  highlightStyle?: React.CSSProperties;\n  caseSensitive?: boolean;\n}\n\nexport interface HistoryConfig {\n  enabled: boolean;\n  maxHistoryLength?: number;\n  trackChanges?: ('sorting' | 'filtering' | 'pagination' | 'grouping' | 'columns' | 'aggregation')[];\n}\n\nexport interface BulkImportConfig {\n  enabled: boolean;\n  formats: ('csv' | 'json' | 'excel')[];\n  validateRow?: (row: any) => { valid: boolean; errors: string[] };\n  headerMapping?: Record<string, string>;\n}\n\nexport interface ColumnCalculationsConfig {\n  enabled: boolean;\n  recalculateOnDataChange?: boolean;\n}\n\nexport interface PivotTableConfig {\n  enabled: boolean;\n  rowFields: string[];\n  columnFields: string[];\n  valueField: string;\n  aggregationFunction: AggregationFunction;\n  valueFormat?: 'number' | 'currency' | 'percentage';\n  showTotals?: boolean;\n  midPoint?: number;\n}\n\nexport interface CustomAggregationsConfig {\n  enabled: boolean;\n  functions?: Record<string, (values: number[], context?: any) => number>;\n}\n\nexport interface MicroChartConfig {\n  type: 'sparkline' | 'bar' | 'pie';\n  dataField: string;\n  width?: number;\n  height?: number;\n  color?: string;\n  fillColor?: string;\n  showArea?: boolean;\n  showPoints?: boolean;\n  barSpacing?: number;\n  borderRadius?: number;\n  showValues?: boolean;\n  colors?: string[];\n  donut?: boolean;\n  innerRadius?: number;\n}\n\nexport interface HeatmapConfig {\n  enabled: boolean;\n  minValue?: number;\n  maxValue?: number;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  midPoint?: number;\n  adaptiveText?: boolean;\n  padding?: number;\n  borderRadius?: number;\n  align?: 'left' | 'right' | 'center';\n}\n\nexport interface GanttChartConfig {\n  enabled: boolean;\n  startField: string;\n  endField: string;\n  taskField: string;\n  dependenciesField?: string;\n  progressField?: string;\n  colorField?: string;\n  defaultColor?: string;\n  showDependencies?: boolean;\n  showProgress?: boolean;\n  showToday?: boolean;\n  showWeekends?: boolean;\n}\n\nexport interface RealtimeConfig {\n  enabled: boolean;\n  websocketUrl: string;\n  messageTypes?: {\n    rowAdded?: string;\n    rowUpdated?: string;\n    rowDeleted?: string;\n    refresh?: string;\n  };\n  reconnectStrategy?: {\n    maxRetries?: number;\n    backoffFactor?: number;\n  };\n  customMessageHandlers?: Record<string, (data: any[], message: any) => any[] | null>;\n}\n\nexport interface WorkerProcessingConfig {\n  enabled: boolean;\n  workerUrl: string;\n  operations?: ('sort' | 'filter' | 'aggregate')[];\n}\n\nexport interface ProgressiveLoadingConfig {\n  enabled: boolean;\n  priorityColumns?: string[];\n  deferredColumns?: string[];\n  loadDelay?: number;\n  placeholders?: Record<string, React.ReactNode>;\n}\n\nexport interface ThemingConfig {\n  enabled: boolean;\n  theme?: 'light' | 'dark' | 'highContrast' | string;\n  customTheme?: {\n    header?: {\n      backgroundColor?: string;\n      textColor?: string;\n      borderColor?: string;\n    };\n    row?: {\n      evenBackgroundColor?: string;\n      oddBackgroundColor?: string;\n      hoverBackgroundColor?: string;\n      selectedBackgroundColor?: string;\n      textColor?: string;\n      borderColor?: string;\n    };\n    footer?: {\n      backgroundColor?: string;\n      textColor?: string;\n      borderColor?: string;\n    };\n    pagination?: {\n      backgroundColor?: string;\n      textColor?: string;\n      activeColor?: string;\n    };\n    scrollbar?: {\n      trackColor?: string;\n      thumbColor?: string;\n      thumbHoverColor?: string;\n    };\n  };\n  componentStyles?: Record<string, (props: any) => Record<string, any>>;\n}\n\nexport interface CustomRenderersConfig {\n  enabled: boolean;\n  renderers?: Record<string, (value: any, row: any, column: any) => React.ReactNode>;\n  conditionalRenderers?: {\n    condition: (value: any, row: any, column: any) => boolean;\n    renderer: (value: any, row: any, column: any) => React.ReactNode;\n  }[];\n}\n\nexport interface LayoutTemplatesConfig {\n  enabled: boolean;\n  template?: 'standard' | 'compact' | 'comfortable' | 'dashboard' | 'report' | 'admin' | 'minimal' | string;\n  customLayouts?: Record<string, {\n    headerHeight?: number;\n    rowHeight?: number;\n    footerHeight?: number;\n    density?: 'compact' | 'standard' | 'comfortable';\n    showBorders?: boolean;\n    borderRadius?: number;\n    elevation?: number;\n    padding?: number;\n    headerFontSize?: number;\n    bodyFontSize?: number;\n    footerFontSize?: number;\n    headerFontWeight?: number;\n    bodyFontWeight?: number;\n    footerFontWeight?: number;\n    headerTextTransform?: string;\n    rowHoverEffect?: 'background' | 'shadow' | 'none';\n    rowSelectedEffect?: 'background' | 'border' | 'none';\n    animation?: boolean;\n  }>;\n}\n\n// Table state interface\nexport interface TableState {\n  sorting: {\n    column: string;\n    direction: 'asc' | 'desc';\n  };\n  filtering: {\n    quickFilter: string;\n    advancedFilters: Record<string, any>;\n  };\n  pagination: {\n    page: number;\n    pageSize: number;\n  };\n  grouping: {\n    groupByColumn: string | null;\n    groupByLevels: string[];\n    expandedGroups: string[]; // Paths of expanded groups in hierarchical mode\n    hierarchical?: boolean;\n    currentLevel?: number;\n    parentPath?: string;\n  };\n  columns: {\n    visible: string[];\n    order: string[];\n    sticky: string[];\n    widths: Record<string, number>;\n  };\n  aggregation: {\n    enabled: string[];\n  };\n  expandedRows: string[];\n  selectedRows: string[];\n  treeData: {\n    expandedNodes: string[];\n  };\n  infiniteScroll: {\n    loadedPages: number;\n  };\n  history: {\n    undoStack: Partial<TableState>[];\n    redoStack: Partial<TableState>[];\n  };\n  calculatedColumns: {\n    values: Record<string, any>;\n  };\n}\n\n// Enhanced table props interface\n// Hierarchical data interfaces\nexport interface HierarchicalGroup {\n  id: string;\n  key: string;\n  value: string;\n  path: string;\n  level: number;\n  children: HierarchicalGroup[];\n  data: any[];\n  metrics: Record<string, number>;\n  hasChildren: boolean;\n  childrenLoaded: boolean;\n  groupData?: any; // Additional data related to the group\n}\n\nexport interface EnhancedTableProps {\n  // Base props\n  data: any[];\n  columns: ColumnDef[];\n  title?: string;\n  loading?: boolean;\n  emptyMessage?: string;\n  idField?: string;\n  sx?: SxProps<Theme>;\n\n  // Event handlers\n  onRowClick?: (row: any) => void;\n  onRefresh?: () => void;\n  onExport?: (format: ExportFormat, data: any[]) => void;\n  onStateChange?: (state: TableState) => void;\n  onDrillDown?: (row: any, sourceGrouping: string, targetGrouping: string, filters: Record<string, any>) => void;\n  onLoadGroupChildren?: (parentPath: string, childLevel: number, groupBy: string) => Promise<HierarchicalGroup[]>;\n\n  // Feature configurations\n  features?: {\n    sorting?: boolean | SortingConfig;\n    filtering?: boolean | FilteringConfig;\n    pagination?: boolean | PaginationConfig;\n    grouping?: boolean | GroupingConfig;\n    aggregation?: boolean | AggregationConfig;\n    columnManagement?: boolean | ColumnManagementConfig;\n    expandableRows?: boolean | ExpandableRowsConfig;\n    keyboardNavigation?: boolean | KeyboardNavigationConfig;\n    stickyColumns?: boolean | StickyColumnsConfig;\n    responsive?: boolean | ResponsiveConfig;\n    drillDown?: boolean | DrillDownConfig;\n    stateManagement?: boolean | StateManagementConfig;\n    export?: boolean | ExportConfig;\n\n    // New features\n    treeData?: boolean | TreeDataConfig;\n    cellSpanning?: boolean | CellSpanningConfig;\n    infiniteScroll?: boolean | InfiniteScrollConfig;\n    columnResizing?: boolean | ColumnResizingConfig;\n    searchHighlighting?: boolean | SearchHighlightingConfig;\n    history?: boolean | HistoryConfig;\n    bulkImport?: boolean | BulkImportConfig;\n    columnCalculations?: boolean | ColumnCalculationsConfig;\n\n    // Advanced features\n    pivotTable?: boolean | PivotTableConfig;\n    customAggregations?: boolean | CustomAggregationsConfig;\n    microCharts?: boolean;\n    heatmap?: boolean | HeatmapConfig;\n    ganttChart?: boolean | GanttChartConfig;\n    realtime?: boolean | RealtimeConfig;\n    workerProcessing?: boolean | WorkerProcessingConfig;\n    progressiveLoading?: boolean | ProgressiveLoadingConfig;\n    theming?: boolean | ThemingConfig;\n    customRenderers?: boolean | CustomRenderersConfig;\n    layoutTemplates?: boolean | LayoutTemplatesConfig;\n  };\n\n  // Feature-specific props\n  renderRowDetail?: RowDetailRenderer;\n  initialState?: Partial<TableState>;\n  stateFromUrl?: boolean;\n\n  // New event handlers\n  onColumnResize?: (columnId: string, width: number) => void;\n  onLoadMore?: (page: number) => void;\n  onUndo?: () => void;\n  onRedo?: () => void;\n  onImport?: (data: any[]) => void;\n  onCalculatedColumnChange?: (columnId: string, values: Record<string, any>) => void;\n\n  // Legacy EnhancedUnifiedDataTable compatibility props\n  enableColumnSelection?: boolean;\n  enableAdvancedFiltering?: boolean;\n  enableExportOptions?: boolean;\n  enableColumnReordering?: boolean;\n  enableRowGrouping?: boolean;\n  enableSummaryRow?: boolean;\n  enableExpandableRows?: boolean;\n  enableKeyboardNavigation?: boolean;\n  enableStickyColumns?: boolean;\n  enableResponsiveDesign?: boolean;\n  enableDrillDown?: boolean;\n  filterDefinitions?: any[];\n  groupableColumns?: string[];\n  stickyColumnIds?: string[];\n  drillDownConfig?: any[];\n  aggregations?: any[];\n  onExportFormat?: (format: string) => void;\n  onApplyAdvancedFilters?: (filters: Record<string, any>) => void;\n  onColumnOrderChange?: (columns: Array<{id: string}>) => void;\n  onGroupingChange?: (groupBy: string | null) => void;\n  onRowExpand?: (rowId: string, expanded: boolean) => void;\n}\n"],"names":["convertSpacing","value","props","component","sx","style","children","otherProps","inlineStyle","display","flexDirection","justifyContent","alignItems","flexWrap","gap","marginBottom","mb","marginTop","mt","marginRight","mr","marginLeft","ml","padding","p","paddingTop","pt","paddingBottom","pb","paddingLeft","pl","paddingRight","pr","height","width","minWidth","maxWidth","minHeight","maxHeight","position","top","left","right","bottom","borderRadius","border","borderColor","borderBottom","backgroundColor","bgcolor","color","flexGrow","overflow","boxSizing","Object","keys","forEach","key","undefined","elementProps","as","_jsx","createSx","styles","DragDropWrapper","forwardRef","_ref","ref","className","SimpleBox","displayName","QuickFilter","onChange","TextField","size","placeholder","event","target","InputProps","startAdornment","InputAdornment","SearchIcon","fontSize","endAdornment","IconButton","onClick","handleClear","edge","ClearIcon","xs","sm","AdvancedFilter","_ref2","columns","filters","anchorEl","setAnchorEl","useState","localFilters","setLocalFilters","handleClose","filterableColumns","filter","col","filterable","_jsxs","_Fragment","Tooltip","title","currentTarget","FilterListIcon","length","Popover","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","variant","gutterBottom","map","column","label","renderFilterInput","id","handleFilterChange","columnId","prev","Button","handleReset","handleApply","type","min","e","Number","flex","max","fullWidth","_ref3","config","quickFilterValue","advancedFilters","onQuickFilterChange","onAdvancedFiltersChange","quickFilter","advancedFilter","visibleColumns","columnOrder","stickyColumns","onVisibilityChange","onOrderChange","onStickyChange","handleVisibilityChange","isVisible","includes","handleStickyChange","isSticky","ViewColumnIcon","Menu","PaperProps","px","py","Divider","allowReordering","DragDropContext","onDragEnd","result","destination","sourceIndex","source","index","destinationIndex","newOrder","removed","splice","Droppable","droppableId","provided","droppableProps","innerRef","find","Draggable","draggableId","draggableProps","dragHandleProps","MenuItem","dense","DragIndicatorIcon","FormControlLabel","control","Checkbox","checked","disabled","m","allowPinning","stopPropagation","PushPinIcon","totalCount","page","pageSize","onPageChange","onPageSizeChange","TablePagination","count","handleChangePage","newPage","rowsPerPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","pageSizeOptions","labelDisplayedRows","from","to","labelRowsPerPage","margin","_columns$find","groupByColumn","onGroupingChange","handleGroupingChange","groupableColumns","groupable","Box","GroupWorkIcon","Chip","onDelete","selected","groupByLevels","onGroupingLevelsChange","dialogOpen","setDialogOpen","handleCloseDialog","ArrowRightIcon","mx","newLevels","handleOpenDialog","Dialog","DialogTitle","DialogContent","List","isSelected","indexOf","ListItem","secondaryAction","newGroupByLevels","temp","handleMoveUp","handleMoveDown","ListItemIcon","push","handleToggleGroupLevel","ListItemText","primary","secondary","DialogActions","handleClearAll","AggregationMenu","aggregations","enabledAggregations","onAggregationToggle","SummarizeIcon","agg","aggregationId","function","handleToggle","toUpperCase","AggregationRow","data","aggregationResults","aggId","func","split","calculateAggregation","aggregationFunction","reduce","sum","row","acc","Math","Paper","elevation","theme","palette","mode","grey","Table","TableBody","TableRow","columnAggs","startsWith","_","TableCell","align","displayValue","format","Intl","NumberFormat","currency","toLocaleString","aggregatable","flatMap","configs","sourceGrouping","selectedRow","onDrillDown","applicableConfigs","ZoomInIcon","transformFilter","targetGrouping","handleDrillDown","ExpandButton","expanded","ExpandLessIcon","ExpandMoreIcon","ExpandedRow","colSpan","renderDetail","Collapse","in","timeout","unmountOnExit","ExpandAllButton","expandedRows","totalRows","onExpandAll","onCollapseAll","allExpanded","onExport","handleExport","formats","ExportFormat","CSV","EXCEL","PDF","JSON","GetAppIcon","activeColumn","direction","onSort","sortable","TableSortLabel","active","handleSort","orderBy","order","idField","emptyMessage","keyboardNavConfig","stickyColumnsConfig","renderRowDetail","onRowClick","onRowExpand","onKeyDown","onSetSelectedRow","tableRef","useRef","visibleOrderedColumns","startIndex","endIndex","paginatedData","slice","handleRowExpand","rowId","renderCellContent","linkConfig","url","displayText","urlBuilder","urlField","urlPrefix","urlSuffix","String","displayField","Link","href","openInNewTab","rel","textDecoration","console","log","dataType","isArray","Array","dataLength","paginatedDataLength","firstItem","TableContainer","TableHead","colIndex","enabled","zIndex","background","paper","boxShadow","Sorting","rowIndex","isExpanded","React","hover","handleRowClick","cursor","whiteSpace","wrap","textOverflow","tabIndex","textAlign","process","hierarchicalData","expandedGroups","loading","onToggleGroup","onLoadChildren","loadingGroups","setLoadingGroups","renderGroupRow","group","indent","arguments","path","isLoading","hasNextLevel","level","canExpand","hasChildren","main","fontWeight","async","childrenLoaded","childLevel","childGroupBy","handleToggleGroup","CircularProgress","KeyboardArrowDownIcon","KeyboardArrowRightIcon","renderMetricValue","child","metrics","toString","DEFAULT_TABLE_STATE","sorting","filtering","pagination","grouping","visible","sticky","widths","aggregation","selectedRows","treeData","expandedNodes","infiniteScroll","loadedPages","history","undoStack","redoStack","calculatedColumns","values","onRefresh","onStateChange","onLoadGroupChildren","features","initialState","stateFromUrl","enableColumnSelection","enableAdvancedFiltering","enableExportOptions","enableColumnReordering","enableRowGrouping","enableSummaryRow","enableExpandableRows","enableKeyboardNavigation","enableStickyColumns","enableResponsiveDesign","enableDrillDown","filterDefinitions","stickyColumnIds","drillDownConfig","drillDownConfigProp","onExportFormat","onApplyAdvancedFilters","onColumnOrderChange","useTheme","location","useMediaQuery","breakpoints","down","useLocation","navigate","useNavigate","sortingConfig","useMemo","filteringConfig","paginationConfig","groupingConfig","aggregationConfig","showInFooter","columnManagementConfig","allowHiding","allowResizing","columnManagement","expandableRowsConfig","columnResizing","persistWidths","expandableRows","keyboardNavigationConfig","allowCellNavigation","keyboardNavigation","responsiveConfig","responsive","drillDown","exportConfig","export","tableState","setTableState","defaultState","pinned","state","decodeStateFromUrl","params","URLSearchParams","sort","get","parse","error","groupBy","search","useEffect","queryString","set","stringify","join","encodeStateToUrl","replace","setHierarchicalData","isLoadingHierarchicalData","setIsLoadingHierarchicalData","processedData","dataIsArray","resultLength","filterData","filteredData","lowerCaseSearchTerm","toLowerCase","some","entries","every","sortData","a","b","valueA","valueB","localeCompare","hierarchical","firstLevelGroupBy","groupByField","parentPath","groups","item","_item$groupByField","items","parseFloat","createHierarchicalData","useCallback","prevState","isAsc","handleQuickFilterChange","handleAdvancedFiltersChange","handleColumnVisibilityChange","newVisibleColumns","handleColumnOrderChange","handleStickyColumnChange","newStickyColumns","handlePageChange","handlePageSizeChange","handleGroupingLevelsChange","columnIds","handleLoadGroupChildren","prevData","updateChildren","handleAggregationToggle","currentEnabledAggregations","aggregationIndex","currentExpandedRows","singleExpand","handleExpandAllRows","handleCollapseAllRows","handleKeyDown","maxRowIndex","maxColIndex","newRowIndex","newColIndex","preventDefault","cellId","cellElement","document","getElementById","focus","exportData","exportRow","includeHiddenColumns","setSelectedRow","groupedData","groupData","groupValue","rows","groupRow","_groupRows","_isGroupRow","displayData","Toolbar","Filtering","ColumnManagement","Grouping","HierarchicalGrouping","Aggregation","DrillDown","Export","RefreshIcon","overflowX","HierarchicalTableContent","TableContent","Pagination"],"sourceRoot":""}