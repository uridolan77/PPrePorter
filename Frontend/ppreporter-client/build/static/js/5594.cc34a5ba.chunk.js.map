{"version":3,"file":"static/js/5594.cc34a5ba.chunk.js","mappings":"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","sources":["components/common/SimpleBox.tsx","utils/styleUtils.ts","components/common/FilterPanel.tsx","components/dashboard/TestPanel.tsx","pages/ApiDashboard.tsx","utils/testDataGenerator.ts","components/common/DateRangePicker.tsx"],"sourcesContent":["import React from 'react';\nimport { Box } from '@mui/material';\n\n/**\n * SimpleBox component\n * A simple div component that replaces MUI Box to avoid TypeScript union type complexity issues\n */\ninterface SimpleBoxProps {\n  component?: any;\n  sx?: any;\n  style?: React.CSSProperties;\n  children?: React.ReactNode;\n  [key: string]: any;\n}\n\n/**\n * Convert MUI spacing units to pixels\n * @param value - The spacing value in MUI units\n * @returns The spacing value in pixels\n */\nconst convertSpacing = (value: any): string | undefined => {\n  if (typeof value === 'number') {\n    return `${value * 8}px`;\n  }\n  return value;\n};\n\n/**\n * SimpleBox component\n * A simple replacement for MUI Box that avoids TypeScript union type issues\n */\nconst SimpleBox: React.FC<SimpleBoxProps> = (props) => {\n  const { component, sx, style, children, ...otherProps } = props;\n\n  // Create a simplified inline style object from sx prop\n  const inlineStyle: React.CSSProperties = {\n    ...(style || {}),\n    display: sx?.display,\n    flexDirection: sx?.flexDirection,\n    justifyContent: sx?.justifyContent,\n    alignItems: sx?.alignItems,\n    flexWrap: sx?.flexWrap,\n    gap: convertSpacing(sx?.gap),\n    marginBottom: convertSpacing(sx?.mb),\n    marginTop: convertSpacing(sx?.mt),\n    marginRight: convertSpacing(sx?.mr),\n    marginLeft: convertSpacing(sx?.ml),\n    padding: convertSpacing(sx?.p),\n    paddingTop: convertSpacing(sx?.pt),\n    paddingBottom: convertSpacing(sx?.pb),\n    paddingLeft: convertSpacing(sx?.pl),\n    paddingRight: convertSpacing(sx?.pr),\n    height: sx?.height,\n    width: sx?.width,\n    minWidth: sx?.minWidth,\n    maxWidth: sx?.maxWidth,\n    minHeight: sx?.minHeight,\n    maxHeight: sx?.maxHeight,\n    position: sx?.position,\n    top: sx?.top,\n    left: sx?.left,\n    right: sx?.right,\n    bottom: sx?.bottom,\n    borderRadius: sx?.borderRadius,\n    border: sx?.border,\n    borderColor: sx?.borderColor,\n    borderBottom: sx?.borderBottom,\n    backgroundColor: sx?.bgcolor,\n    color: sx?.color,\n    flexGrow: sx?.flexGrow,\n    overflow: sx?.overflow,\n    boxSizing: 'border-box',\n  };\n\n  // Filter out undefined values\n  Object.keys(inlineStyle).forEach(key => {\n    if (inlineStyle[key as keyof React.CSSProperties] === undefined) {\n      delete inlineStyle[key as keyof React.CSSProperties];\n    }\n  });\n\n  // If component prop is provided, render a div with the as attribute\n  if (component) {\n    const elementProps = {\n      ...otherProps,\n      style: inlineStyle,\n      as: component\n    };\n\n    return <div {...elementProps}>{children}</div>;\n  }\n\n  // Otherwise, render a regular div\n  return <div style={inlineStyle} {...otherProps}>{children}</div>;\n};\n\nexport default SimpleBox;\n","import { SxProps, Theme } from '@mui/material';\n\n/**\n * A utility function to create sx props without TypeScript union type complexity issues.\n * This function simply returns the input object but with a type assertion that avoids\n * the \"union type too complex to represent\" error.\n *\n * @param styles The styles object to be used as sx props\n * @returns The same styles object with the correct type\n */\nexport const createSx = (styles: Record<string, any>): any => {\n  return styles;\n};\n\n/**\n * A utility function to create a style function that returns an object\n * This approach avoids TypeScript's complex union type issues\n *\n * @param stylesFn A function that returns a styles object\n * @returns A function that returns the styles object\n */\nexport const createStyleFn = <T extends any[]>(stylesFn: (...args: T) => Record<string, any>) => {\n  return (...args: T): any => stylesFn(...args);\n};\n\n/**\n * Style functions for common components\n * These functions return style objects directly to avoid TypeScript union type issues\n */\nexport const styles = {\n  card: () => ({\n    bgcolor: 'background.paper',\n    p: 2,\n    border: '1px solid',\n    borderColor: 'divider',\n    borderRadius: 1,\n    boxShadow: 1,\n  }),\n\n  panel: () => ({\n    bgcolor: 'background.paper',\n    p: 1.5,\n    border: '1px solid',\n    borderColor: 'divider',\n    borderRadius: 1,\n    boxShadow: 1,\n  }),\n\n  flexRow: () => ({\n    display: 'flex',\n    alignItems: 'center',\n    gap: 1,\n  }),\n\n  flexColumn: () => ({\n    display: 'flex',\n    flexDirection: 'column',\n    gap: 1,\n  }),\n\n  flexBetween: () => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n\n  flexCenter: () => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }),\n\n  marginBottom: (value: number) => ({\n    mb: value,\n  }),\n\n  padding: (value: number) => ({\n    p: value,\n  }),\n\n  fullWidth: () => ({\n    width: '100%',\n  }),\n\n  fullHeight: () => ({\n    height: '100%',\n  }),\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Chip,\n  Divider,\n  FormControl,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Typography,\n  Collapse,\n  Tooltip,\n  Grid,\n  SelectChangeEvent\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport SaveIcon from '@mui/icons-material/Save';\nimport { CommonProps } from '../../types/common';\n\n// Filter type enum\nexport enum FilterType {\n  TEXT = 'text',\n  SELECT = 'select',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  NUMBER = 'number',\n  RANGE = 'range'\n}\n\n// Filter option interface\nexport interface FilterOption {\n  value: string | number;\n  label: string;\n}\n\n// Filter definition interface\nexport interface FilterDefinition {\n  id: string;\n  label: string;\n  type: FilterType | string;\n  options?: FilterOption[];\n  defaultValue?: any;\n  placeholder?: string;\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\n// Component props interface\nexport interface FilterPanelProps extends CommonProps {\n  title?: string;\n  filters: FilterDefinition[];\n  values: Record<string, any>;\n  onChange: (id: string, value: any) => void;\n  onApply?: () => void;\n  onReset?: () => void;\n  onFilterSave?: () => void;\n  expanded?: boolean;\n  defaultExpanded?: boolean;\n}\n\n/**\n * FilterPanel component for filtering data in reports and dashboards\n */\nconst FilterPanel: React.FC<FilterPanelProps> = ({\n  title = 'Filters',\n  filters = [],\n  values = {},\n  onChange,\n  onApply,\n  onReset,\n  onFilterSave,\n  expanded: controlledExpanded,\n  defaultExpanded = true,\n  sx\n}) => {\n  // State for uncontrolled expansion\n  const [internalExpanded, setInternalExpanded] = useState<boolean>(defaultExpanded);\n  \n  // Determine if component is controlled or uncontrolled\n  const isControlled = controlledExpanded !== undefined;\n  const expanded = isControlled ? controlledExpanded : internalExpanded;\n  \n  // Get active filters count\n  const activeFilters = Object.keys(values).filter(key => {\n    const value = values[key];\n    return value !== undefined && value !== null && value !== '';\n  });\n  \n  // Toggle expansion state\n  const toggleExpand = (): void => {\n    if (!isControlled) {\n      setInternalExpanded(!internalExpanded);\n    }\n  };\n  \n  // Handle filter change\n  const handleFilterChange = (id: string, value: any): void => {\n    if (onChange) {\n      onChange(id, value);\n    }\n  };\n  \n  // Handle apply filters\n  const handleApplyFilters = (): void => {\n    if (onApply) {\n      onApply();\n    }\n  };\n  \n  // Handle reset filters\n  const handleResetFilters = (): void => {\n    if (onReset) {\n      onReset();\n    }\n  };\n  \n  // Handle save filters\n  const handleSaveFilters = (): void => {\n    if (onFilterSave) {\n      onFilterSave();\n    }\n  };\n  \n  // Render filter input based on type\n  const renderFilterInput = (filter: FilterDefinition): React.ReactNode => {\n    const value = values[filter.id] !== undefined ? values[filter.id] : filter.defaultValue || '';\n    \n    switch (filter.type) {\n      case FilterType.SELECT:\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel id={`filter-${filter.id}-label`}>{filter.label}</InputLabel>\n            <Select\n              labelId={`filter-${filter.id}-label`}\n              id={`filter-${filter.id}`}\n              value={value}\n              label={filter.label}\n              onChange={(e: SelectChangeEvent<any>) => handleFilterChange(filter.id, e.target.value)}\n            >\n              <MenuItem value=\"\">\n                <em>Any</em>\n              </MenuItem>\n              {filter.options?.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n      \n      case FilterType.DATE:\n        return (\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <DatePicker\n              label={filter.label}\n              value={value || null}\n              onChange={(newValue) => handleFilterChange(filter.id, newValue)}\n              slotProps={{ textField: { size: 'small', fullWidth: true } }}\n            />\n          </LocalizationProvider>\n        );\n      \n      case FilterType.BOOLEAN:\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel id={`filter-${filter.id}-label`}>{filter.label}</InputLabel>\n            <Select\n              labelId={`filter-${filter.id}-label`}\n              id={`filter-${filter.id}`}\n              value={value}\n              label={filter.label}\n              onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            >\n              <MenuItem value=\"\">\n                <em>Any</em>\n              </MenuItem>\n              <MenuItem value=\"true\">Yes</MenuItem>\n              <MenuItem value=\"false\">No</MenuItem>\n            </Select>\n          </FormControl>\n        );\n      \n      case FilterType.NUMBER:\n        return (\n          <TextField\n            fullWidth\n            label={filter.label}\n            type=\"number\"\n            value={value}\n            onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            size=\"small\"\n            inputProps={{\n              min: filter.min,\n              max: filter.max,\n              step: filter.step || 1\n            }}\n          />\n        );\n      \n      case FilterType.RANGE:\n        // Range filter would be implemented here\n        return (\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <TextField\n              label={`Min ${filter.label}`}\n              type=\"number\"\n              value={value?.min || ''}\n              onChange={(e) => handleFilterChange(filter.id, { ...value, min: e.target.value })}\n              size=\"small\"\n              sx={{ flex: 1 }}\n            />\n            <TextField\n              label={`Max ${filter.label}`}\n              type=\"number\"\n              value={value?.max || ''}\n              onChange={(e) => handleFilterChange(filter.id, { ...value, max: e.target.value })}\n              size=\"small\"\n              sx={{ flex: 1 }}\n            />\n          </Box>\n        );\n      \n      // Default to text input\n      default:\n        return (\n          <TextField\n            fullWidth\n            label={filter.label}\n            value={value}\n            onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            size=\"small\"\n            placeholder={filter.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <Paper variant=\"outlined\" sx={{ mb: 2, ...sx }}>\n      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <FilterListIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\" component=\"div\">\n            {title}\n          </Typography>\n          \n          {activeFilters.length > 0 && (\n            <Chip\n              label={`${activeFilters.length} active`}\n              color=\"primary\"\n              size=\"small\"\n              sx={{ ml: 1 }}\n            />\n          )}\n        </Box>\n        \n        <Box>\n          <IconButton onClick={toggleExpand} size=\"small\">\n            {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          </IconButton>\n        </Box>\n      </Box>\n      \n      <Collapse in={expanded}>\n        <Divider />\n        \n        <Box sx={{ p: 2 }}>\n          <Grid container spacing={2}>\n            {filters.map((filter) => (\n              <Grid item xs={12} sm={6} md={4} key={filter.id}>\n                {renderFilterInput(filter)}\n              </Grid>\n            ))}\n          </Grid>\n          \n          {activeFilters.length > 0 && (\n            <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                Active filters:\n              </Typography>\n              \n              {activeFilters.map((key) => {\n                const filter = filters.find(f => f.id === key);\n                let displayValue = values[key];\n                \n                if (filter?.type === FilterType.SELECT && filter.options) {\n                  const option = filter.options.find(o => o.value === displayValue);\n                  displayValue = option ? option.label : displayValue;\n                }\n                \n                if (filter?.type === FilterType.BOOLEAN) {\n                  displayValue = displayValue === 'true' ? 'Yes' : 'No';\n                }\n                \n                if (filter?.type === FilterType.DATE && displayValue instanceof Date) {\n                  displayValue = displayValue.toLocaleDateString();\n                }\n                \n                return (\n                  <Chip\n                    key={key}\n                    label={`${filter?.label || key}: ${displayValue}`}\n                    onDelete={() => handleFilterChange(key, '')}\n                    size=\"small\"\n                  />\n                );\n              })}\n              \n              <Chip\n                label=\"Clear All\"\n                onDelete={handleResetFilters}\n                deleteIcon={<ClearIcon />}\n                size=\"small\"\n                color=\"secondary\"\n              />\n            </Box>\n          )}\n        </Box>\n        \n        <Divider />\n        \n        <Box sx={{ p: 2, display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\n          <Button variant=\"outlined\" onClick={handleResetFilters} startIcon={<ClearIcon />}>\n            Reset\n          </Button>\n          \n          {onFilterSave && (\n            <Tooltip title=\"Save these filters\">\n              <Button \n                variant=\"outlined\" \n                color=\"secondary\" \n                onClick={handleSaveFilters}\n                startIcon={<SaveIcon />}\n              >\n                Save\n              </Button>\n            </Tooltip>\n          )}\n          \n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onClick={handleApplyFilters}\n            startIcon={<FilterListIcon />}\n          >\n            Apply Filters\n          </Button>\n        </Box>\n      </Collapse>\n    </Paper>\n  );\n};\n\nexport default FilterPanel;\n","import React from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  IconButton,\n  Divider\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\ninterface TestPanelProps {\n  /**\n   * Current test scenario\n   */\n  testScenario: string;\n  \n  /**\n   * Handler for test scenario change\n   */\n  onTestScenarioChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  \n  /**\n   * Handler for closing the panel\n   */\n  onClose: () => void;\n}\n\n/**\n * Test panel component for simulating different data scenarios\n */\nconst TestPanel: React.FC<TestPanelProps> = ({\n  testScenario,\n  onTestScenarioChange,\n  onClose\n}) => {\n  return (\n    <Card sx={{ mb: 3, border: '1px dashed #999' }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n          <Typography variant=\"h6\" color=\"primary\">\n            Test Panel\n          </Typography>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Box>\n        \n        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n          This panel allows you to simulate different data scenarios for testing purposes.\n        </Typography>\n        \n        <Divider sx={{ my: 2 }} />\n        \n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Data Scenario</FormLabel>\n          <RadioGroup\n            aria-label=\"test-scenario\"\n            name=\"test-scenario\"\n            value={testScenario}\n            onChange={onTestScenarioChange}\n          >\n            <FormControlLabel \n              value=\"normal\" \n              control={<Radio />} \n              label=\"Normal - Fetch real data from API\" \n            />\n            <FormControlLabel \n              value=\"empty\" \n              control={<Radio />} \n              label=\"Empty - No data available\" \n            />\n            <FormControlLabel \n              value=\"partial\" \n              control={<Radio />} \n              label=\"Partial - Some data missing\" \n            />\n            <FormControlLabel \n              value=\"large\" \n              control={<Radio />} \n              label=\"Large - Large dataset for performance testing\" \n            />\n            <FormControlLabel \n              value=\"error\" \n              control={<Radio />} \n              label=\"Error - Simulate API error\" \n            />\n            <FormControlLabel \n              value=\"loading\" \n              control={<Radio />} \n              label=\"Loading - Perpetual loading state\" \n            />\n          </RadioGroup>\n        </FormControl>\n        \n        <Box sx={{ mt: 2, p: 1, bgcolor: 'info.light', borderRadius: 1 }}>\n          <Typography variant=\"caption\" color=\"info.contrastText\">\n            Note: This panel is for development and testing purposes only and should be removed in production.\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TestPanel;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Box,\n  Container,\n  CircularProgress,\n  Button,\n  Alert,\n  Typography,\n  useTheme\n} from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport { format, subDays, startOfDay, endOfDay } from 'date-fns';\n\nimport { useAuth } from '../hooks/useAuth';\nimport { fetchDashboardData } from '../store/slices/dashboardSlice';\nimport DateRangePicker from '../components/common/DateRangePicker';\nimport FilterPanel from '../components/common/FilterPanel';\nimport dashboardService from '../services/api/dashboardService';\n\n// Test data generators\nimport {\n  generateEmptyData,\n  generatePartialData,\n  generateLargeData,\n  generateErrorData\n} from '../utils/testDataGenerator';\n\n// Dashboard components\nimport DashboardHeader from '../components/dashboard/DashboardHeader';\nimport DashboardTabs from '../components/dashboard/DashboardTabs';\nimport TestPanel from '../components/dashboard/TestPanel';\nimport DashboardMetrics from '../components/dashboard/DashboardMetrics';\nimport DashboardCharts from '../components/dashboard/DashboardCharts';\n\n// Types\nimport { DashboardStats, DashboardChartData, RevenueDataPoint, GameDataPoint } from '../types/dashboard';\nimport { DashboardFilters } from '../types/redux';\n\n// Filter definition type\ninterface FilterDefinition {\n  id: string;\n  label: string;\n  type: 'select' | 'multiselect' | 'text' | 'number' | 'date' | 'daterange' | 'boolean' | 'radio';\n  options?: Array<{ value: string; label: string }>;\n}\n\n// Dashboard data interface\ninterface DashboardData {\n  stats?: DashboardStats;\n  playerRegistrations?: any[];\n  recentTransactions?: any[];\n  topGames?: any[];\n  casinoRevenue?: any;\n  kpis?: any;\n  charts?: DashboardChartData;\n}\n\n/**\n * API Dashboard component that connects to the backend API\n */\nconst ApiDashboard: React.FC = () => {\n  const theme = useTheme();\n  const { user } = useAuth();\n  const dispatch = useDispatch();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [showFilters, setShowFilters] = useState<boolean>(false);\n  const [filterMenuAnchor, setFilterMenuAnchor] = useState<HTMLElement | null>(null);\n\n  // Test data scenario state\n  const [testScenario, setTestScenario] = useState<string>('normal');\n  const [showTestPanel, setShowTestPanel] = useState<boolean>(false);\n\n  // Date range state\n  const [dateRange, setDateRange] = useState<{\n    start: Date;\n    end: Date;\n  }>({\n    start: startOfDay(subDays(new Date(), 30)),\n    end: endOfDay(new Date())\n  });\n\n  // Filter state\n  const [filters, setFilters] = useState<{\n    gameCategory: string;\n    playerStatus: string;\n    country: string;\n    minRevenue: string;\n    maxRevenue: string;\n  }>({\n    gameCategory: '',\n    playerStatus: '',\n    country: '',\n    minRevenue: '',\n    maxRevenue: ''\n  });\n\n  // Filter definitions\n  const filterDefinitions: FilterDefinition[] = [\n    {\n      id: 'gameCategory',\n      label: 'Game Category',\n      type: 'select',\n      options: [\n        { value: 'casino', label: 'Casino' },\n        { value: 'sports', label: 'Sports' },\n        { value: 'poker', label: 'Poker' },\n        { value: 'bingo', label: 'Bingo' },\n        { value: 'lottery', label: 'Lottery' }\n      ]\n    },\n    {\n      id: 'playerStatus',\n      label: 'Player Status',\n      type: 'select',\n      options: [\n        { value: 'active', label: 'Active' },\n        { value: 'inactive', label: 'Inactive' },\n        { value: 'new', label: 'New' },\n        { value: 'vip', label: 'VIP' }\n      ]\n    },\n    {\n      id: 'country',\n      label: 'Country',\n      type: 'select',\n      options: [\n        { value: 'us', label: 'United States' },\n        { value: 'uk', label: 'United Kingdom' },\n        { value: 'ca', label: 'Canada' },\n        { value: 'au', label: 'Australia' },\n        { value: 'de', label: 'Germany' }\n      ]\n    },\n    {\n      id: 'minRevenue',\n      label: 'Min Revenue',\n      type: 'number'\n    },\n    {\n      id: 'maxRevenue',\n      label: 'Max Revenue',\n      type: 'number'\n    }\n  ];\n\n  // Load dashboard data\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Handle tab change\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number): void => {\n    setActiveTab(newValue);\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (newRange: { start: Date | null; end: Date | null }): void => {\n    if (newRange.start && newRange.end) {\n      setDateRange({\n        start: newRange.start,\n        end: newRange.end\n      });\n      fetchData({\n        start: newRange.start,\n        end: newRange.end\n      }, filters);\n    }\n  };\n\n  // Handle filter change\n  const handleFilterChange = (filterId: string, value: string): void => {\n    setFilters(prev => ({\n      ...prev,\n      [filterId]: value\n    }));\n  };\n\n  // Handle filter apply\n  const handleFilterApply = (): void => {\n    fetchData(dateRange, filters);\n    setShowFilters(false);\n  };\n\n  // Handle filter reset\n  const handleFilterReset = (): void => {\n    const resetFilters = {\n      gameCategory: '',\n      playerStatus: '',\n      country: '',\n      minRevenue: '',\n      maxRevenue: ''\n    };\n    setFilters(resetFilters);\n    fetchData(dateRange, resetFilters);\n  };\n\n  // Toggle filter menu\n  const handleFilterMenuClick = (event: React.MouseEvent<HTMLElement>): void => {\n    setFilterMenuAnchor(event.currentTarget);\n  };\n\n  // Close filter menu\n  const handleFilterMenuClose = (): void => {\n    setFilterMenuAnchor(null);\n  };\n\n  // Toggle filter panel\n  const handleToggleFilters = (): void => {\n    setShowFilters(!showFilters);\n    handleFilterMenuClose();\n  };\n\n  // Fetch dashboard data from API or use test data\n  const fetchData = async (\n    dateRangeParam = dateRange,\n    filtersParam = filters\n  ): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n\n    // Handle test scenarios\n    if (testScenario !== 'normal') {\n      setTimeout(() => {\n        switch (testScenario) {\n          case 'empty':\n            setDashboardData(generateEmptyData());\n            setIsLoading(false);\n            break;\n          case 'partial':\n            setDashboardData(generatePartialData());\n            setIsLoading(false);\n            break;\n          case 'large':\n            setDashboardData(generateLargeData());\n            setIsLoading(false);\n            break;\n          case 'error':\n            const errorObj = generateErrorData();\n            setError(new Error(`Error connecting to API: ${errorObj.message}. This is a simulated error for testing.`));\n            setDashboardData(generatePartialData()); // Show partial data with error\n            setIsLoading(false);\n            break;\n          case 'loading':\n            // Keep loading state active for testing\n            break;\n          default:\n            setIsLoading(false);\n        }\n      }, 2000); // Simulate network delay\n\n      // If we're testing loading state, don't proceed with the rest\n      if (testScenario === 'loading') {\n        return;\n      }\n    } else {\n      try {\n        // Prepare date parameters\n        const startDate = dateRangeParam?.start ? format(dateRangeParam.start, 'yyyy-MM-dd') : null;\n        const endDate = dateRangeParam?.end ? format(dateRangeParam.end, 'yyyy-MM-dd') : null;\n\n        // Prepare filter parameters\n        const filterParams: DashboardFilters = {\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined,\n          minRevenue: filtersParam.minRevenue ? Number(filtersParam.minRevenue) : undefined,\n          maxRevenue: filtersParam.maxRevenue ? Number(filtersParam.maxRevenue) : undefined\n        };\n\n        // Get dashboard stats with filters\n        const stats = await dashboardService.getDashboardSummary(filterParams);\n\n        // Get player registrations data with date range\n        const playerRegistrations = await dashboardService.getRegistrationsChart({\n          startDate,\n          endDate,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined\n        });\n\n        // Get recent transactions with filters\n        const recentTransactions = await dashboardService.getRecentTransactions({\n          limit: 10,\n          startDate,\n          endDate,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined\n        });\n\n        // Get top games with filters\n        const topGames = await dashboardService.getTopGames({\n          metric: 'revenue',\n          limit: 5,\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined,\n          minRevenue: filtersParam.minRevenue ? Number(filtersParam.minRevenue) : undefined,\n          maxRevenue: filtersParam.maxRevenue ? Number(filtersParam.maxRevenue) : undefined\n        });\n\n        // Get casino revenue with date range\n        const casinoRevenue = await dashboardService.getRevenueChart({\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined\n        });\n\n        // Get KPI data with filters - using dashboard summary as a fallback\n        const kpis = await dashboardService.getDashboardSummary({\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined\n        });\n\n        // Combine all data\n        const apiData: DashboardData = {\n          stats,\n          playerRegistrations,\n          recentTransactions,\n          topGames,\n          casinoRevenue,\n          kpis,\n          charts: {\n            revenueByDay: Array.isArray(casinoRevenue)\n              ? casinoRevenue.map((item: any) => ({\n                  ...item,\n                  day: item.day || (item.date ? format(new Date(item.date), 'EEE') : ''),\n                  value: item.value || item.revenue || 0\n                }))\n              : [],\n            playersByGame: topGames?.map(game => ({\n              game: game.name,\n              value: game.players\n            })) || []\n          }\n        };\n\n        setDashboardData(apiData);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n\n        // If API fails, fall back to mock data for demonstration\n        const mockData: DashboardData = {\n          stats: {\n            revenue: {\n              value: 12567.89,\n              change: 15.2,\n              period: 'vs last week'\n            },\n            players: {\n              value: 1432,\n              change: 7.5,\n              period: 'vs last week'\n            },\n            games: {\n              value: 256,\n              change: 12.8,\n              period: 'vs last week'\n            },\n            engagement: {\n              value: 5621,\n              change: -3.2,\n              period: 'vs last week'\n            }\n          },\n          topGames: [\n            { name: 'Poker Pro', revenue: 3200.56, players: 432 },\n            { name: 'Blackjack Masters', revenue: 2800.32, players: 387 },\n            { name: 'Slots Royale', revenue: 2300.18, players: 356 },\n            { name: 'Roulette King', revenue: 1900.45, players: 289 },\n            { name: 'Baccarat Elite', revenue: 1450.67, players: 218 }\n          ],\n          charts: {\n            revenueByDay: [\n              { day: 'Mon', value: 2100 },\n              { day: 'Tue', value: 2400 },\n              { day: 'Wed', value: 1800 },\n              { day: 'Thu', value: 2200 },\n              { day: 'Fri', value: 2600 },\n              { day: 'Sat', value: 3100 },\n              { day: 'Sun', value: 2500 }\n            ],\n            playersByGame: [\n              { game: 'Poker', value: 450 },\n              { game: 'Slots', value: 380 },\n              { game: 'Roulette', value: 240 },\n              { game: 'Blackjack', value: 190 },\n              { game: 'Baccarat', value: 165 }\n            ]\n          },\n          recentTransactions: [\n            { id: 1, playerId: 101, playerName: 'John Doe', amount: 100.00, type: 'deposit', timestamp: '2023-05-01T08:30:00Z' },\n            { id: 2, playerId: 102, playerName: 'Jane Smith', amount: 50.00, type: 'withdrawal', timestamp: '2023-05-02T10:15:00Z' },\n            { id: 3, playerId: 103, playerName: 'Mike Johnson', amount: 75.50, type: 'bet', timestamp: '2023-05-03T14:45:00Z' },\n            { id: 4, playerId: 104, playerName: 'Lisa Brown', amount: 120.25, type: 'win', timestamp: '2023-05-04T09:20:00Z' },\n            { id: 5, playerId: 105, playerName: 'Robert Wilson', amount: 200.00, type: 'deposit', timestamp: '2023-05-05T16:10:00Z' }\n          ]\n        };\n\n        // Show error message but still display mock data\n        setError(new Error(`Error connecting to API: ${(error as Error).message || 'Unknown error'}. Showing mock data instead.`));\n        setDashboardData(mockData);\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // Handle test scenario change\n  const handleTestScenarioChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const newScenario = event.target.value;\n    setTestScenario(newScenario);\n    fetchData(); // Refetch with new scenario\n  };\n\n  // Toggle test panel\n  const handleToggleTestPanel = (): void => {\n    setShowTestPanel(!showTestPanel);\n  };\n\n  // Handle refresh\n  const handleRefresh = (): void => {\n    fetchData();\n  };\n\n  // Render loading state\n  if (isLoading && !dashboardData) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '64px' }}>\n          <CircularProgress size={60} />\n          <Typography variant=\"h6\" sx={{ mt: 2 }}>\n            Loading dashboard...\n          </Typography>\n        </div>\n      </Container>\n    );\n  }\n\n  // We'll show error as an alert but still display the dashboard with mock data\n  // This is different from the loading state where we show a loading spinner\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      {/* Error Alert */}\n      {error && (\n        <Alert\n          severity=\"warning\"\n          sx={{ mb: 3 }}\n          action={\n            <Button\n              color=\"inherit\"\n              size=\"small\"\n              onClick={handleRefresh}\n              startIcon={<RefreshIcon />}\n            >\n              Retry\n            </Button>\n          }\n        >\n          {error.message}\n        </Alert>\n      )}\n\n      {/* Dashboard Header */}\n      <DashboardHeader\n        user={user || undefined}\n        onRefresh={handleRefresh}\n        onToggleFilters={handleToggleFilters}\n        onFilterReset={handleFilterReset}\n        onToggleTestPanel={handleToggleTestPanel}\n        filterMenuAnchor={filterMenuAnchor}\n        onFilterMenuClick={handleFilterMenuClick}\n        onFilterMenuClose={handleFilterMenuClose}\n        showTestPanel={showTestPanel}\n      />\n\n      {/* Test Panel */}\n      {showTestPanel && (\n        <TestPanel\n          testScenario={testScenario}\n          onTestScenarioChange={handleTestScenarioChange}\n          onClose={handleToggleTestPanel}\n        />\n      )}\n\n      {/* Date Range Picker */}\n      <div style={{ marginBottom: 24, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <DateRangePicker\n          startDate={dateRange.start}\n          endDate={dateRange.end}\n          onChange={handleDateRangeChange}\n          buttonLabel=\"Select Date Range\"\n        />\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Showing data from {dateRange.start ? format(dateRange.start, 'MMM d, yyyy') : 'all time'} to {dateRange.end ? format(dateRange.end, 'MMM d, yyyy') : 'present'}\n        </Typography>\n      </div>\n\n      {/* Filter Panel */}\n      {showFilters && (\n        <FilterPanel\n          filters={filterDefinitions}\n          values={filters}\n          onChange={handleFilterChange}\n          onApply={() => handleFilterApply()}\n          onReset={handleFilterReset}\n          title=\"Dashboard Filters\"\n        />\n      )}\n\n      {/* Dashboard Tabs */}\n      <DashboardTabs\n        activeTab={activeTab}\n        onTabChange={handleTabChange}\n        dashboardData={dashboardData}\n        isLoading={isLoading}\n        error={error}\n        theme={theme}\n      />\n    </Container>\n  );\n};\n\nexport default ApiDashboard;\n","/**\n * Test data generator utility\n * Provides functions to generate different test data scenarios\n */\n\n/**\n * Generate empty data for testing empty state handling\n * @returns Empty dashboard data\n */\nexport const generateEmptyData = () => {\n  return {\n    stats: {\n      revenue: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      },\n      players: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      },\n      games: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      },\n      engagement: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      }\n    },\n    topGames: [],\n    recentTransactions: [],\n    playerRegistrations: [],\n    charts: {\n      revenueByDay: [],\n      playersByGame: []\n    }\n  };\n};\n\n/**\n * Generate partial data for testing partial data handling\n * @returns Partial dashboard data\n */\nexport const generatePartialData = () => {\n  return {\n    stats: {\n      revenue: {\n        value: 8765.43,\n        change: 5.2,\n        period: 'vs last week'\n      },\n      players: {\n        value: 876,\n        change: -2.1,\n        period: 'vs last week'\n      },\n      games: {\n        value: 45,\n        change: 3.5,\n        period: 'vs last week'\n      },\n      engagement: {\n        value: 67.8,\n        change: 1.2,\n        period: 'vs last week'\n      }\n    },\n    topGames: [\n      { id: 'poker-pro', name: 'Poker Pro', category: 'poker', revenue: 2100.56, players: 321 },\n      { id: 'blackjack-masters', name: 'Blackjack Masters', category: 'table', revenue: 1800.32, players: 287 },\n      // Other games are missing\n    ],\n    // recentTransactions is missing\n    recentTransactions: [],\n    playerRegistrations: [],\n    charts: {\n      revenueByDay: [\n        { day: 'Mon', value: 1100 },\n        { day: 'Tue', value: 1400 },\n        { day: 'Wed', value: 1200 },\n        // Other days are missing\n      ],\n      playersByGame: [\n        { game: 'Poker', value: 321 },\n        { game: 'Blackjack', value: 287 }\n      ]\n    }\n  };\n};\n\n/**\n * Generate large data for testing performance\n * @returns Large dashboard data\n */\nexport const generateLargeData = () => {\n  // Generate large arrays of data\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  const revenueByDay = [];\n  const recentTransactions = [];\n  const topGames = [];\n\n  // Generate 100 days of revenue data\n  for (let i = 0; i < 100; i++) {\n    const day = days[i % 7];\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n\n    revenueByDay.push({\n      day,\n      date: date.toISOString().split('T')[0],\n      value: Math.floor(Math.random() * 5000) + 1000\n    });\n  }\n\n  // Generate 1000 transactions\n  for (let i = 0; i < 1000; i++) {\n    const date = new Date();\n    date.setMinutes(date.getMinutes() - i * 30);\n\n    recentTransactions.push({\n      id: `tx-${i}`,\n      playerId: `player-${Math.floor(Math.random() * 100) + 1}`,\n      playerName: `Player ${Math.floor(Math.random() * 100) + 1}`,\n      amount: Math.floor(Math.random() * 1000) / 10,\n      type: ['deposit', 'withdrawal', 'bet', 'win'][Math.floor(Math.random() * 4)],\n      timestamp: date.toISOString(),\n      status: ['completed', 'pending', 'failed'][Math.floor(Math.random() * 3)]\n    });\n  }\n\n  // Generate 100 games\n  const gameTypes = ['Slots', 'Poker', 'Blackjack', 'Roulette', 'Baccarat', 'Craps', 'Bingo'];\n  for (let i = 0; i < 100; i++) {\n    const gameType = gameTypes[Math.floor(Math.random() * gameTypes.length)];\n    topGames.push({\n      id: `game-${i}`,\n      name: `${gameType} ${i + 1}`,\n      revenue: Math.floor(Math.random() * 10000) + 500,\n      players: Math.floor(Math.random() * 1000) + 50,\n      sessions: Math.floor(Math.random() * 5000) + 100,\n      category: gameType.toLowerCase()\n    });\n  }\n\n  return {\n    stats: {\n      revenue: {\n        value: 123456.78,\n        change: 25.4,\n        period: 'vs last week'\n      },\n      players: {\n        value: 12345,\n        change: 15.7,\n        period: 'vs last week'\n      },\n      games: {\n        value: 245,\n        change: 32.8,\n        period: 'vs last week'\n      },\n      engagement: {\n        value: 78.5,\n        change: 18.2,\n        period: 'vs last week'\n      }\n    },\n    topGames: topGames.slice(0, 20), // Top 20 games\n    recentTransactions: recentTransactions.slice(0, 50), // Latest 50 transactions\n    playerRegistrations: revenueByDay.map(day => ({\n      date: day.date,\n      registrations: Math.floor(Math.random() * 200) + 50,\n      ftd: Math.floor(Math.random() * 50) + 10\n    })),\n    charts: {\n      revenueByDay: revenueByDay.slice(0, 30), // Last 30 days\n      playersByGame: topGames.slice(0, 10).map(game => ({\n        game: game.name,\n        value: game.players\n      }))\n    }\n  };\n};\n\n/**\n * Generate error data for testing error handling\n * @returns Error object\n */\nexport const generateErrorData = () => {\n  const errorTypes = [\n    { code: 'API_ERROR', message: 'Failed to connect to API endpoint' },\n    { code: 'AUTH_ERROR', message: 'Authentication token expired' },\n    { code: 'TIMEOUT_ERROR', message: 'Request timed out after 30 seconds' },\n    { code: 'DATA_ERROR', message: 'Invalid data format received from server' },\n    { code: 'SERVER_ERROR', message: 'Internal server error (500)' }\n  ];\n\n  const randomError = errorTypes[Math.floor(Math.random() * errorTypes.length)];\n\n  return {\n    code: randomError.code,\n    message: randomError.message,\n    timestamp: new Date().toISOString()\n  };\n};\n","import React, { useState } from 'react';\nimport { Box, TextField, Button, Paper, Typography, IconButton, Popover } from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { format, startOfDay, endOfDay, subDays, startOfMonth, endOfMonth, isValid } from 'date-fns';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { DateRangePickerProps, DatePreset, DateRange } from '../../types/dateRangePicker';\n\n/**\n * A reusable date range picker component with presets\n */\nconst DateRangePicker: React.FC<DateRangePickerProps> = ({\n  startDate = null,\n  endDate = null,\n  onChange,\n  buttonLabel = \"Date Range\",\n  presets = null,\n  showClearButton = true,\n  autoApplyPresets = true,\n  disabled = false,\n  className,\n  sx\n}) => {\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const [tempStartDate, setTempStartDate] = useState<Date | null>(startDate);\n  const [tempEndDate, setTempEndDate] = useState<Date | null>(endDate);\n\n  // Default presets if none provided\n  const defaultPresets: DatePreset[] = [\n    { label: 'Today', getValue: () => ({ start: startOfDay(new Date()), end: endOfDay(new Date()) }) },\n    { label: 'Yesterday', getValue: () => ({ start: startOfDay(subDays(new Date(), 1)), end: endOfDay(subDays(new Date(), 1)) }) },\n    { label: 'Last 7 days', getValue: () => ({ start: startOfDay(subDays(new Date(), 6)), end: endOfDay(new Date()) }) },\n    { label: 'Last 30 days', getValue: () => ({ start: startOfDay(subDays(new Date(), 29)), end: endOfDay(new Date()) }) },\n    { label: 'This month', getValue: () => ({ start: startOfMonth(new Date()), end: endOfMonth(new Date()) }) },\n    { label: 'Last month', getValue: () => {\n      const date = new Date();\n      date.setMonth(date.getMonth() - 1);\n      return { start: startOfMonth(date), end: endOfMonth(date) };\n    }},\n  ];\n\n  const datePresets = presets || defaultPresets;\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>): void => {\n    setAnchorEl(event.currentTarget);\n    setTempStartDate(startDate);\n    setTempEndDate(endDate);\n  };\n\n  const handleClose = (): void => {\n    setAnchorEl(null);\n  };\n\n  const handleApply = (): void => {\n    if (onChange) {\n      onChange({ start: tempStartDate, end: tempEndDate });\n    }\n    handleClose();\n  };\n\n  const handleClear = (e?: React.MouseEvent): void => {\n    if (e) {\n      e.stopPropagation();\n    }\n    setTempStartDate(null);\n    setTempEndDate(null);\n    if (onChange) {\n      onChange({ start: null, end: null });\n    }\n    handleClose();\n  };\n\n  const handlePresetClick = (preset: DatePreset): void => {\n    const { start, end } = preset.getValue();\n    setTempStartDate(start);\n    setTempEndDate(end);\n    \n    if (autoApplyPresets) {\n      if (onChange) {\n        onChange({ start, end });\n      }\n      handleClose();\n    }\n  };\n\n  const formatButtonText = (): string => {\n    if (startDate && endDate && isValid(startDate) && isValid(endDate)) {\n      return `${format(startDate, 'MMM dd, yyyy')} - ${format(endDate, 'MMM dd, yyyy')}`;\n    }\n    return buttonLabel;\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'date-range-popover' : undefined;\n\n  return (\n    <div className={className} style={sx}>\n      <Button\n        variant=\"outlined\"\n        onClick={handleClick}\n        startIcon={<CalendarTodayIcon />}\n        endIcon={showClearButton && startDate && endDate && isValid(startDate) && isValid(endDate) ? (\n          <IconButton size=\"small\" onClick={handleClear}>\n            <ClearIcon fontSize=\"small\" />\n          </IconButton>\n        ) : undefined}\n        sx={{ \n          justifyContent: 'space-between', \n          minWidth: 200,\n          textTransform: 'none'\n        }}\n        disabled={disabled}\n      >\n        {formatButtonText()}\n      </Button>\n      \n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        PaperProps={{\n          elevation: 8,\n          sx: { p: 2, width: { xs: '90vw', sm: 400 } }\n        }}\n      >\n        <Typography variant=\"subtitle1\" gutterBottom>\n          Select Date Range\n        </Typography>\n        \n        <Box sx={{ mb: 2 }}>\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <Box sx={{ display: 'flex', gap: 2 }}>\n              <DatePicker\n                label=\"Start Date\"\n                value={tempStartDate}\n                onChange={(newValue) => setTempStartDate(newValue)}\n                slotProps={{ \n                  textField: { \n                    size: 'small', \n                    fullWidth: true,\n                    helperText: tempStartDate ? format(tempStartDate, 'EEEE') : '' \n                  } \n                }}\n              />\n              <DatePicker\n                label=\"End Date\"\n                value={tempEndDate}\n                onChange={(newValue) => setTempEndDate(newValue)}\n                minDate={tempStartDate}\n                slotProps={{ \n                  textField: { \n                    size: 'small', \n                    fullWidth: true,\n                    helperText: tempEndDate ? format(tempEndDate, 'EEEE') : '' \n                  } \n                }}\n              />\n            </Box>\n          </LocalizationProvider>\n        </Box>\n        \n        <Typography variant=\"subtitle2\" gutterBottom>\n          Presets\n        </Typography>\n        \n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n          {datePresets.map((preset, index) => (\n            <Button \n              key={index}\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={() => handlePresetClick(preset)}\n            >\n              {preset.label}\n            </Button>\n          ))}\n        </Box>\n        \n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1, mt: 2 }}>\n          <Button variant=\"outlined\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleApply}>\n            Apply\n          </Button>\n        </Box>\n      </Popover>\n    </div>\n  );\n};\n\nexport default DateRangePicker;\n"],"names":["convertSpacing","value","props","component","sx","style","children","otherProps","inlineStyle","display","flexDirection","justifyContent","alignItems","flexWrap","gap","marginBottom","mb","marginTop","mt","marginRight","mr","marginLeft","ml","padding","p","paddingTop","pt","paddingBottom","pb","paddingLeft","pl","paddingRight","pr","height","width","minWidth","maxWidth","minHeight","maxHeight","position","top","left","right","bottom","borderRadius","border","borderColor","borderBottom","backgroundColor","bgcolor","color","flexGrow","overflow","boxSizing","Object","keys","forEach","key","undefined","elementProps","as","_jsx","createSx","styles","FilterType","_ref","title","filters","values","onChange","onApply","onReset","onFilterSave","expanded","controlledExpanded","defaultExpanded","internalExpanded","setInternalExpanded","useState","isControlled","activeFilters","filter","handleFilterChange","id","handleResetFilters","renderFilterInput","_filter$options","defaultValue","type","SELECT","_jsxs","FormControl","fullWidth","size","InputLabel","label","Select","labelId","e","target","MenuItem","options","map","option","DATE","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","newValue","slotProps","textField","BOOLEAN","NUMBER","TextField","inputProps","min","max","step","RANGE","Box","flex","placeholder","Paper","variant","FilterListIcon","Typography","length","Chip","IconButton","onClick","toggleExpand","ExpandLessIcon","ExpandMoreIcon","Collapse","in","Divider","Grid","container","spacing","item","xs","sm","md","find","f","displayValue","o","Date","toLocaleDateString","onDelete","deleteIcon","ClearIcon","Button","startIcon","Tooltip","handleSaveFilters","SaveIcon","handleApplyFilters","testScenario","onTestScenarioChange","onClose","Card","CardContent","CloseIcon","fontSize","paragraph","my","FormLabel","RadioGroup","name","FormControlLabel","control","Radio","ApiDashboard","theme","useTheme","user","useAuth","activeTab","setActiveTab","useDispatch","isLoading","setIsLoading","error","setError","dashboardData","setDashboardData","showFilters","setShowFilters","filterMenuAnchor","setFilterMenuAnchor","setTestScenario","showTestPanel","setShowTestPanel","dateRange","setDateRange","start","startOfDay","subDays","end","endOfDay","setFilters","gameCategory","playerStatus","country","minRevenue","maxRevenue","useEffect","fetchData","handleFilterReset","resetFilters","handleFilterMenuClose","async","dateRangeParam","arguments","filtersParam","setTimeout","stats","revenue","change","period","players","games","engagement","topGames","recentTransactions","playerRegistrations","charts","revenueByDay","playersByGame","category","day","game","generateLargeData","days","i","date","setDate","getDate","push","toISOString","split","Math","floor","random","setMinutes","getMinutes","playerId","playerName","amount","timestamp","status","gameTypes","gameType","sessions","toLowerCase","slice","registrations","ftd","errorObj","generateErrorData","errorTypes","code","message","randomError","Error","startDate","format","endDate","filterParams","Number","dashboardService","getDashboardSummary","getRegistrationsChart","getRecentTransactions","limit","getTopGames","metric","casinoRevenue","getRevenueChart","apiData","kpis","Array","isArray","console","mockData","handleToggleTestPanel","handleRefresh","Container","CircularProgress","Alert","severity","action","RefreshIcon","DashboardHeader","onRefresh","onToggleFilters","handleToggleFilters","onFilterReset","onToggleTestPanel","onFilterMenuClick","event","currentTarget","onFilterMenuClose","TestPanel","newScenario","DateRangePicker","newRange","buttonLabel","FilterPanel","filterId","prev","DashboardTabs","onTabChange","handleTabChange","presets","showClearButton","autoApplyPresets","disabled","className","anchorEl","setAnchorEl","tempStartDate","setTempStartDate","tempEndDate","setTempEndDate","datePresets","getValue","startOfMonth","endOfMonth","setMonth","getMonth","handleClose","open","Boolean","CalendarTodayIcon","endIcon","isValid","stopPropagation","textTransform","Popover","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","elevation","gutterBottom","helperText","minDate","preset","index","handlePresetClick","handleApply"],"sourceRoot":""}