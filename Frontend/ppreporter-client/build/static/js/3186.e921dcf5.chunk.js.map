{"version":3,"file":"static/js/3186.e921dcf5.chunk.js","mappings":"iXA4IA,MA+VA,EA/VgDA,IAuBzC,IAvB0C,QAC/CC,EAAU,GAAE,MACZC,EAAQ,GAAE,SACVC,EAAQ,MACRC,EAAQ,GAAE,YACVC,EAAc,eAAc,SAC5BC,GAAW,EAAK,SAChBC,GAAW,EAAK,MAChBC,EAAQ,GAAE,WACVC,EAAa,GAAE,cACfC,EAAgB,IAAG,WACnBC,GAAa,EAAI,oBACjBC,GAAsB,EAAI,YAC1BC,EAAW,KACXC,EAAO,QAAO,MACdC,EAAK,GACLC,EAAE,KACFC,EAAI,GACJC,EAAE,UACFC,EAAS,MACTC,EAAK,QACLC,GAAU,EAAK,UACfC,GAAY,GACbtB,EAEC,MAAOuB,EAAYC,IAAiBC,EAAAA,EAAAA,UAAiB,IAG/CC,EAAkBzB,EAAQ0B,QAAOC,GACrCA,EAAOxB,MAAMyB,cAAcC,SAASP,EAAWM,iBAsFjD,GAAIR,EACF,OACEU,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CACVV,WAAS,EACTR,KAAMA,EACNN,QAASA,EACTF,UAAU,EACVC,SAAUA,EACVW,GAAI,CACFH,MAAOA,KACJG,GAELC,UAAWA,EACXC,MAAOA,EAAMa,SAAA,CAEZ7B,IAAS8B,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACnB,GAAI,GAAGA,GAAM,uBAAuBiB,SAAE7B,KAC5D8B,EAAAA,EAAAA,KAACE,EAAAA,EAAM,CACLC,QAAS,GAAGrB,GAAM,uBAClBA,GAAIA,GAAM,eACVC,KAAMA,EACNqB,UAAQ,EACRpC,MAAO,GACPqC,OAAOL,EAAAA,EAAAA,KAACM,EAAAA,EAAa,CAACpC,MAAOA,IAC7BS,YAAaA,KAAMqB,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,MAAM,iBAAgBT,SAAC,uBAAgCA,UAEtFC,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,CAACrC,UAAQ,EAAA2B,UAChBF,EAAAA,EAAAA,MAAA,OAAKX,MAAO,CAAEwB,QAAS,OAAQC,WAAY,SAAUC,QAAS,GAAIb,SAAA,EAChEC,EAAAA,EAAAA,KAACa,EAAAA,EAAgB,CAACjC,KAAM,GAAIM,MAAO,CAAE4B,YAAa,MAClDd,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,QAAQP,MAAM,iBAAgBT,SAAC,8BAMxDxB,IACCyB,EAAAA,EAAAA,KAACgB,EAAAA,EAAc,CAAAjB,SAAExB,OAOzB,IAAKR,GAA8B,IAAnBA,EAAQkD,OACtB,OACEpB,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CACVV,WAAS,EACTR,KAAMA,EACNN,QAASA,EACTF,UAAU,EACVC,SAAUA,EACVW,GAAI,CACFH,MAAOA,KACJG,GAELC,UAAWA,EACXC,MAAOA,EAAMa,SAAA,CAEZ7B,IAAS8B,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACnB,GAAI,GAAGA,GAAM,uBAAuBiB,SAAE7B,KAC5D8B,EAAAA,EAAAA,KAACE,EAAAA,EAAM,CACLC,QAAS,GAAGrB,GAAM,uBAClBA,GAAIA,GAAM,eACVC,KAAMA,EACNqB,UAAQ,EACRpC,MAAO,GACPqC,OAAOL,EAAAA,EAAAA,KAACM,EAAAA,EAAa,CAACpC,MAAOA,IAC7BS,YAAaA,KAAMqB,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,MAAM,iBAAgBT,SAAC,yBAAkCA,UAExFC,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,CAACrC,UAAQ,EAAA2B,UAChBC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,QAAQP,MAAM,iBAAgBT,SAAC,6BAKtDxB,IACCyB,EAAAA,EAAAA,KAACgB,EAAAA,EAAc,CAAAjB,SAAExB,OAWzB,OACEsB,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CACVV,WAAS,EACTR,KAAMA,EACNN,QAASA,EACTF,SAAUA,EACVC,SAAUA,EACVW,GAAI,CACFH,MAAOA,GAAS,OAChBqC,SAAU,UACPlC,GAELC,UAAWA,EACXC,MAAOA,EAAMa,SAAA,CAEZ7B,IAAS8B,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACnB,GAAI,GAAGA,GAAM,uBAAuBiB,SAAE7B,KAE5D2B,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CACLC,QAAS,GAAGrB,GAAM,uBAClBA,GAAIA,GAAM,eACVC,KAAMA,EACNqB,UAAQ,EACRpC,MAAOA,EACPC,SA9LgBkD,IACpB,MAAMC,EAAWD,EAAME,OAAOrD,MAC9BC,EAASmD,EAAS,EA6Ldf,OAAOL,EAAAA,EAAAA,KAACM,EAAAA,EAAa,CAACpC,MAAOA,IAC7BS,YAAaA,GAzJS2C,IACrBA,GAAgC,IAApBA,EAASL,QAMxBjB,EAAAA,EAAAA,KAAA,OAAKd,MAAO,CAAEwB,QAAS,OAAQa,SAAU,OAAQC,IAAK,OAAQzB,SAC3DuB,EAASG,KAAKC,IACb,MAAMhC,EAAS3B,EAAQ4D,MAAKC,GAAOA,EAAI5D,MAAM6D,aAAeH,EAAcG,aAC1E,OACE7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAI,CAEH5D,MAAOwB,EAASA,EAAOxB,MAAQwD,EAC/B9C,KAAK,QACLmD,UAvBcC,EAuBaN,EAvBuBP,IAC5DA,EAAMc,iBACNd,EAAMe,kBACN,MAAMd,EAAWpD,EAAMyB,QAAO0C,GAAOA,EAAIN,aAAeG,EAAcH,aACtE5D,EAASmD,EAAS,GAoBRgB,QAAUC,GAAMA,EAAEH,kBAClBI,YACEtC,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRC,SAAS,QACTC,YAAcJ,GAAMA,EAAEH,oBAG1BlD,GAAI,CACF,wBAAyB,CACvB0B,QAAS,OACTgC,QAAS,GACT,UAAW,CACTA,QAAS,IAGb,8BAA+B,CAC7BhC,QAAS,WApBRgB,GApBSM,KA2Cd,OAjCDhC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,MAAM,iBAAgBT,SAAE5B,KAwJzCwE,QA9BcC,KAClBtD,EAAc,GAAG,EA+Bb8C,QAAUC,IAGNA,EAAEhB,kBAAkBwB,cACnBR,EAAEhB,OAAOyB,UAAUC,SAAS,iBAC5BV,EAAEhB,OAAOyB,UAAUC,SAAS,kBAC5BV,EAAEhB,OAAOyB,UAAUC,SAAS,uBAC5BV,EAAEhB,OAAO2B,QAAQ,0BAElBX,EAAEJ,iBACFI,EAAEH,kBACJ,EAEFe,UAAW,CACTC,WAAY,CACVhE,MAAO,CACLiE,UAAW3E,KAGfuB,SAAA,EAGFF,EAAAA,EAAAA,MAAA,OACEX,MAAO,CACLkE,SAAU,SACVC,IAAK,EACLC,gBAAiB,OACjBC,OAAQ,EACRC,aAAc,iCACdzD,SAAA,CAGDtB,IACCuB,EAAAA,EAAAA,KAAA,OAAKd,MAAO,CAAE0B,QAAS,GAAIb,UACzBC,EAAAA,EAAAA,KAACyD,EAAAA,EAAS,CACR7E,KAAK,QACLT,YAAY,YACZiB,WAAS,EACTpB,MAAOqB,EACPpB,SApOckD,IAC1B7B,EAAc6B,EAAME,OAAOrD,MAAM,EAoOrBoE,QAAUC,GAAMA,EAAEH,kBAClBwB,WAAY,CACVC,gBACE3D,EAAAA,EAAAA,KAAC4D,EAAAA,EAAc,CAACR,SAAS,QAAOrD,UAC9BC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAU,CAACrB,SAAS,YAGzBsB,aAAczE,GACZW,EAAAA,EAAAA,KAAC4D,EAAAA,EAAc,CAACR,SAAS,MAAKrD,UAC5BC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAU,CACTnF,KAAK,QACLwD,QAAUC,IACRA,EAAEH,kBA3OxB5C,EAAc,GA4O2B,EACnBS,UAEFC,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CAACC,SAAS,cAGtB,UAOX9D,GAAuBc,EAAgByB,OAAS,IAC/CpB,EAAAA,EAAAA,MAAA,OAAKX,MAAO,CAAE8E,YAAa,EAAGC,aAAc,EAAGC,WAAY,EAAGC,cAAe,EAAGzD,QAAS,OAAQ0D,eAAgB,iBAAkBrE,SAAA,EACjIC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CAACzF,KAAK,QAAQwD,QAvPTkC,KAEtB,MAAMC,EAAoB/E,EACvBC,QAAOC,IAAWA,EAAOtB,WACzBqD,KAAI/B,GAAUA,EAAO1B,QAExBC,EAASsG,EAAkB,EAiP6BxE,SAAC,gBAC/CC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CAACzF,KAAK,QAAQwD,QA9ORoC,KACvBvG,EAAS,GAAG,EA6O6C8B,SAAC,oBAM1B,IAA3BP,EAAgByB,SACfjB,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,CAACrC,UAAQ,EAAA2B,UAChBC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,QAAQP,MAAM,iBAAgBT,SAAC,uBAOtDP,EAAgBiC,KAAK/B,IACpBG,EAAAA,EAAAA,MAACY,EAAAA,EAAQ,CAEPzC,MAAO0B,EAAO1B,MACdI,SAAUsB,EAAOtB,SACjBY,GAAI,CACF0B,QAAS,OACT0D,eAAgB,gBAChBzD,WAAY,UACZZ,SAAA,EAEFF,EAAAA,EAAAA,MAAA,OAAKX,MAAO,CAAEwB,QAAS,OAAQC,WAAY,UAAWZ,SAAA,EACpDC,EAAAA,EAAAA,KAACyE,EAAAA,EAAQ,CACPC,QAAS1G,EAAM2G,MAAKxC,GAClBA,EAAIN,aAAenC,EAAO1B,MAAM6D,gBAGpC7B,EAAAA,EAAAA,KAAC4E,EAAAA,EAAY,CACXC,QAASnF,EAAOxB,MAChB4G,UAAWpF,EAAOqF,WAGrBrF,EAAOsF,cACNhF,EAAAA,EAAAA,KAACiF,EAAAA,EAAO,CAACC,MAAOxF,EAAOsF,YAAaG,OAAK,EAAApF,UACvCC,EAAAA,EAAAA,KAACoF,EAAAA,EAAgB,CAAC5C,SAAS,QAAQhC,MAAM,SAAStB,MAAO,CAAEmG,WAAY,SAtBtE3F,EAAO1B,aA8BhBO,GAAcD,KACd0B,EAAAA,EAAAA,KAACgB,EAAAA,EAAc,CAAAjB,SAAEzB,GAASC,MAEhB,C,ugBCjXlB,MA0mCA,EA1mC8B+G,KAE5B,MAAOC,EAAWC,IAAgBjG,EAAAA,EAAAA,UAAe,IAAIkG,MAAK,IAAIA,MAAOC,SAAQ,IAAID,MAAOE,UAAY,OAC7FC,EAASC,IAActG,EAAAA,EAAAA,UAAe,IAAIkG,OAC1CK,EAAqBC,IAA0BxG,EAAAA,EAAAA,UAAmB,KAClEyG,EAAmBC,IAAwB1G,EAAAA,EAAAA,UAAmB,KAC9D2G,EAAkBC,IAAuB5G,EAAAA,EAAAA,UAAmB,KAC5D6G,EAAqBC,KAA0B9G,EAAAA,EAAAA,WAAkB,IACjE+G,GAAiBC,KAAsBhH,EAAAA,EAAAA,UAA8B,CAAC,IAGtEiH,GAASC,KAAclH,EAAAA,EAAAA,UAAmB,KAC1CJ,GAASuH,KAAcnH,EAAAA,EAAAA,WAAkB,IACzCjB,GAAOqI,KAAYpH,EAAAA,EAAAA,UAAwB,OAC3CqH,GAAYC,KAAiBtH,EAAAA,EAAAA,UAAiB,IAC9CuH,GAAMC,KAAWxH,EAAAA,EAAAA,UAAiB,IAClCyH,GAAUC,KAAe1H,EAAAA,EAAAA,UAAiB,KAC1C2H,GAAQC,KAAa5H,EAAAA,EAAAA,UAAiB,qBACtC6H,GAAeC,KAAoB9H,EAAAA,EAAAA,UAAyB,SAG5D+H,GAAaC,KAAkBhI,EAAAA,EAAAA,UAAuB,KACtDiI,GAAWC,KAAgBlI,EAAAA,EAAAA,UAAoB,KAC/CmI,GAAUC,KAAepI,EAAAA,EAAAA,UAAmB,KAC5CqI,GAAoBC,KAAyBtI,EAAAA,EAAAA,UAA8B,KAC3EuI,GAAkBC,KAAuBxI,EAAAA,EAAAA,UAA8B,KACvEyI,GAAiBC,KAAsB1I,EAAAA,EAAAA,UAA8B,KAGrE2I,GAAgBC,KAAqB5I,EAAAA,EAAAA,UAAwB,OAC7D6I,GAAmBC,KAAwB9I,EAAAA,EAAAA,WAAkB,GAG9D+I,GAAuB,CAC3B,CACExJ,GAAI,WACJZ,MAAO,WACPqK,KAAM,OACNC,UAAU,EACV3J,MAAO,KAET,CACEC,GAAI,QACJZ,MAAO,QACPqK,KAAM,OACNC,UAAU,EACV3J,MAAO,KAET,CACEC,GAAI,UACJZ,MAAO,UACPqK,KAAM,OACNC,UAAU,EACV3J,MAAO,KAET,CACEC,GAAI,SACJZ,MAAO,SACPuK,OAAQA,CAACzK,EAAO0K,KACd1I,EAAAA,EAAAA,KAAC8B,EAAAA,EAAI,CACH5D,MAAOwK,EAAIC,OACX/J,KAAK,QACL4B,MACiB,WAAfkI,EAAIC,OAAsB,UACX,aAAfD,EAAIC,OAAwB,UACb,YAAfD,EAAIC,OAAuB,QAC3B,YAINH,UAAU,EACV3J,MAAO,KAET,CACEC,GAAI,mBACJZ,MAAO,oBACPqK,KAAM,OACNK,WAAY,SACZJ,UAAU,EACV3J,MAAO,KAET,CACEC,GAAI,gBACJZ,MAAO,aACPuK,OAAQA,CAACzK,EAAO0K,IAAgBA,EAAIG,eAAgBC,EAAAA,EAAAA,GAAW,IAAIrD,KAAKiD,EAAIG,eAAgB,gBAAkB,IAC9GL,UAAU,EACV3J,MAAO,KAET,CACEC,GAAI,UACJZ,MAAO,UACPqK,KAAM,WACNC,UAAU,EACV3J,MAAO,KAET,CACEC,GAAI,gBACJZ,MAAO,iBACPqK,KAAM,WACNC,UAAU,EACV3J,MAAO,KAET,CACEC,GAAI,YACJZ,MAAO,aACPqK,KAAM,WACNC,UAAU,EACV3J,MAAO,KAET,CACEC,GAAI,YACJZ,MAAO,aACPuK,OAAQA,CAACzK,EAAO0K,KACd,MAAMK,EAAYL,EAAIK,WAAa,EACnC,OACE/I,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CACTQ,QAAQ,QACR/B,GAAI,CACFwB,MAAOuI,GAAa,EAAI,eAAiB,aACzCC,WAAY,UACZjJ,SAEDkJ,GAAeF,IACL,EAGjBP,UAAU,EACV3J,MAAO,MAKLoK,GAAkBC,GACf,IAAIC,KAAKC,aAAa,QAAS,CACpClK,MAAO,WACPmK,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,IACtBd,OAAOS,IAIZM,EAAAA,EAAAA,YAAU,KACRC,IAAe,GACd,KAGHD,EAAAA,EAAAA,YAAU,KACRE,IAAc,GACb,CAAC5C,GAAME,GAAUE,GAAQE,KAG5B,MAAMqC,GAAgBE,UACpB,IACEjD,IAAW,GACXC,GAAS,MAGT,MAAMiD,QAAiBC,EAAAA,EAAeC,cAGtC,GAAIF,EAAStC,YAAa,CACxBC,GAAeqC,EAAStC,aAGxB,MAAMvJ,EAAU6L,EAAStC,YAAY7F,KAAKsI,IAAc,CACtD/L,MAAO+L,EAAGjL,GACVZ,MAAO6L,EAAGhL,SAEZ8I,GAAsB9J,EACxB,CAGA,GAAI6L,EAASpC,UAAW,CACtB,MAAMwC,EAAiBC,MAAMC,QAAQN,EAASpC,WAC1CoC,EAASpC,UAAU/F,KAAI0I,GAAkB,kBAANA,EAAiB,CAAErL,GAAIqL,EAAGpL,KAAMoL,GAAMA,IACzE,GAEJ1C,GAAauC,GAGb,MAAMI,EAAiBJ,EAAevI,KAAK4I,IAAgB,CACzDrM,MAAOqM,EAAQvL,GACfZ,MAAOmM,EAAQtL,SAEjBgJ,GAAoBqC,EACtB,CAGA,GAAIR,EAASlC,SAAU,CACrB,MAAM4C,EAAgBL,MAAMC,QAAQN,EAASlC,UACzCkC,EAASlC,SAASjG,KAAI8I,GAAkB,kBAANA,EAAiB,CAAEzL,GAAIyL,EAAGxL,KAAMwL,GAAMA,IACxE,GAEJ5C,GAAY2C,GAGZ,MAAME,EAAgBF,EAAc7I,KAAKkH,IAAc,CACrD3K,MAAO2K,EAAO7J,GACdZ,MAAOyK,EAAO5J,SAEhBkJ,GAAmBuC,EACrB,CACF,CAAE,MAAOC,GACPC,QAAQpM,MAAM,0CAA2CmM,GACzD9D,GAAS,mDACX,CAAC,QACCD,IAAW,EACb,GAIIgD,GAAeC,UACnB,IACEjD,IAAW,GACXC,GAAS,MAGT,MAAMgE,EAAyB,CAC7BpF,WAAWuD,EAAAA,EAAAA,GAAWvD,EAAW,cACjCK,SAASkD,EAAAA,EAAAA,GAAWlD,EAAS,cAC7BgF,cAAe9E,EAAoB7E,OAAS,EAAI6E,EAAoBrE,KAAI3C,GAAM+L,SAAS/L,UAAOgM,EAC9FC,WAAY/E,EAAkB/E,OAAS,EAAI+E,OAAoB8E,GAI7DE,OAAOC,KAAK3E,IAAiBrF,OAAS,IACxCyJ,QAAQQ,IAAI,0CAA2C5E,IAGnDA,GAAgB6E,eAClBR,EAAQS,kBAAmBtC,EAAAA,EAAAA,GAAWxC,GAAgB6E,aAAc,eAElE7E,GAAgB+E,mBAClBV,EAAQW,kBAAmBxC,EAAAA,EAAAA,GAAWxC,GAAgB+E,iBAAkB,eAEtE/E,GAAgBiF,kBAClBZ,EAAQY,iBAAkBzC,EAAAA,EAAAA,GAAWxC,GAAgBiF,gBAAiB,eAEpEjF,GAAgBkF,YAClBb,EAAQ9B,eAAgBC,EAAAA,EAAAA,GAAWxC,GAAgBkF,UAAW,eAI5DlF,GAAgBmF,WAClBd,EAAQc,SAAWnF,GAAgBmF,UAEjCnF,GAAgBoF,gBAClBf,EAAQe,cAAgBpF,GAAgBoF,eAEtCpF,GAAgBE,UAClBmE,EAAQgB,UAAYrF,GAAgBE,QAAQoF,MAAM,KAAKnK,KAAK3C,GAAeA,EAAG+M,UAI5EvF,GAAgBwF,aAAexF,GAAgBwF,YAAY7K,OAAS,IACtE0J,EAAQoB,UAAYzF,GAAgBwF,aAElCxF,GAAgB0F,UAAY1F,GAAgB0F,SAAS/K,OAAS,IAChE0J,EAAQsB,UAAY3F,GAAgB0F,UAElC1F,GAAgBqC,QAAUrC,GAAgBqC,OAAO1H,OAAS,IAC5D0J,EAAQjD,SAAWpB,GAAgBqC,QAEjCrC,GAAgB4F,QAAU5F,GAAgB4F,OAAOjL,OAAS,IAC5D0J,EAAQwB,QAAU7F,GAAgB4F,QAEhC5F,GAAgB+C,UAAY/C,GAAgB+C,SAASpI,OAAS,IAChE0J,EAAQyB,WAAa9F,GAAgB+C,UAInC/C,GAAgB+F,aAClB1B,EAAQ0B,WAA4C,QAA/B/F,GAAgB+F,YAEnC/F,GAAgBgG,cAClB3B,EAAQ2B,YAA8C,QAAhChG,GAAgBgG,aAEpChG,GAAgBiG,eAClB5B,EAAQ4B,aAAgD,QAAjCjG,GAAgBiG,cAErCjG,GAAgBkG,cAClB7B,EAAQ6B,YAA8C,QAAhClG,GAAgBkG,aAEpClG,GAAgBmG,eAClB9B,EAAQ8B,aAAgD,QAAjCnG,GAAgBmG,eAK3C,MAAMC,EAAS,CACb5F,KAAMA,GAAO,EACbE,YACAE,UACAE,kBAIIuF,QAAiB9C,EAAAA,EAAe+C,QAAQ,IAAKjC,KAAY+B,IAE/B,IAADG,EAA/B,GAAIF,GAAYA,EAASG,KACvBrG,GAAWkG,EAASG,MACpBjG,IAA2B,QAAbgG,EAAAF,EAASI,YAAI,IAAAF,OAAA,EAAbA,EAAejG,aAAc+F,EAASG,KAAK7L,aAEzDwF,GAAW,IACXI,GAAc,EAElB,CAAE,MAAO4D,GACPC,QAAQpM,MAAM,8CAA+CmM,GAC7D9D,GAAS,wDACTF,GAAW,IACXI,GAAc,EAChB,CAAC,QACCH,IAAW,EACb,GAyCIsG,GAA6BA,CAACC,EAAajP,KAC/CuI,IAAmB2G,IAAI,IAClBA,EACH,CAACD,GAAMjP,KACN,EAoBCmP,GAA2BA,KAC/B9E,IAAqB,GACrBF,GAAkB,KAAK,EA0JnBiF,GAAU,CACdC,aAAc7G,GAAQvF,OACtBqM,cAAe9G,GAAQ/G,QAAO8N,GAAkB,WAAbA,EAAE5E,SAAqB1H,OAC1DuM,aAAchH,GAAQiH,QAAO,CAACC,EAAKH,IAAMG,GAAOH,EAAEI,SAAW,IAAI,GACjEC,cAAepH,GAAQiH,QAAO,CAACC,EAAKH,IAAMG,GAAOH,EAAEK,eAAiB,IAAI,GACxEC,UAAWrH,GAAQiH,QAAO,CAACC,EAAKH,IAAMG,GAAOH,EAAEM,WAAa,IAAI,GAChEC,eAAgBtH,GAAQiH,QAAO,CAACC,EAAKH,IAAMG,GAAOH,EAAExE,WAAa,IAAI,IAGvE,OACElJ,EAAAA,EAAAA,MAACkO,EAAAA,EAAS,CAACC,SAAS,KAAIjO,SAAA,EACtBF,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAEkP,GAAI,EAAGxN,QAAS,OAAQ0D,eAAgB,gBAAiBzD,WAAY,cAAeZ,SAAA,EAC7FF,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAAAlO,SAAA,EACFC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,KAAKoN,cAAY,EAAApO,SAAC,oBAGtCC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,QAAQP,MAAM,iBAAgBT,SAAC,wEAIrDC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACLtD,QAAQ,YACRP,MAAM,UACN4N,UAAWC,EAAAA,GACXC,GAAG,4BACHC,WAAWvO,EAAAA,EAAAA,KAACwO,EAAAA,EAAc,IAAIzO,SAC/B,wBAMHF,EAAAA,EAAAA,MAAC4O,EAAAA,EAAK,CAACzP,GAAI,CAAEuO,EAAG,EAAGW,GAAI,GAAInO,SAAA,EACzBF,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,SAAUyD,eAAgB,gBAAiB8J,GAAI,GAAInO,SAAA,EACzFF,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,UAAWZ,SAAA,EACjDC,EAAAA,EAAAA,KAACwO,EAAAA,EAAc,CAACxP,GAAI,CAAE0P,GAAI,MAC1B1O,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,KAAIhB,SAAC,gBAE3BC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACL7D,MAAM,UACN4B,QA/M0BuM,KAClCtI,IAAwBD,EAAoB,EA+MpCwI,QAASxI,GAAsBpG,EAAAA,EAAAA,KAAC6O,EAAAA,EAAc,KAAM7O,EAAAA,EAAAA,KAAC8O,EAAAA,EAAc,IAAI/O,SAEtEqG,EAAsB,wBAA0B,8BAKrDvG,EAAAA,EAAAA,MAACkP,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAElP,SAAA,EACzBC,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAACqP,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAexP,UAChDC,EAAAA,EAAAA,KAACwP,EAAAA,EAAU,CACTtR,MAAM,aACNF,MAAOuH,EACPtH,SAAWmD,GAAaA,GAAYoE,EAAapE,GACjDqO,UAAW,CAAEC,UAAW,CAAEtQ,WAAW,WAK3CY,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAACqP,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAexP,UAChDC,EAAAA,EAAAA,KAACwP,EAAAA,EAAU,CACTtR,MAAM,WACNF,MAAO4H,EACP3H,SAAWmD,GAAaA,GAAYyE,EAAWzE,GAC/CqO,UAAW,CAAEC,UAAW,CAAEtQ,WAAW,WAK3CY,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAAC2P,EAAAA,EAAW,CACVzR,MAAM,eACNH,QAAS6J,GACT5J,MAAO8H,EACP7H,SA/QqB2R,IAC/B7J,EAAuB6J,EAAOnO,KAAIoO,GAAKA,EAAEhO,aAAY,EA+Q3C1D,YAAY,sBACZM,YAAU,EACVC,qBAAmB,EACnBG,MAAM,OACNG,GAAI,CACFH,MAAO,OACP,2BAA4B,CAC1BA,MAAO,OACPiR,OAAQ,QAEV,sBAAuB,CACrBA,OAAQ,OACRpP,QAAS,OACTC,WAAY,gBAMpBX,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAAC2P,EAAAA,EAAW,CACVzR,MAAM,YACNH,QAAS+J,GACT9J,MAAOgI,EACP/H,SAnSmB2R,IAC7B3J,EAAqB2J,EAAOnO,KAAIoO,GAAKA,EAAEhO,aAAY,EAmSzC1D,YAAY,mBACZM,YAAU,EACVC,qBAAmB,EACnBG,MAAM,OACNG,GAAI,CACFH,MAAO,OACP,2BAA4B,CAC1BA,MAAO,OACPiR,OAAQ,QAEV,sBAAuB,CACrBA,OAAQ,OACRpP,QAAS,OACTC,WAAY,mBAQtBX,EAAAA,EAAAA,KAAC+P,EAAAA,EAAQ,CAACC,GAAI5J,EAAqB6J,QAAQ,OAAOC,eAAa,EAAAnQ,UAC7DF,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAEmR,GAAI,GAAIpQ,SAAA,EACjBC,EAAAA,EAAAA,KAACoQ,EAAAA,EAAO,CAACpR,GAAI,CAAEkP,GAAI,MACnBlO,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYoN,cAAY,EAAApO,SAAC,sBAI7CF,EAAAA,EAAAA,MAACkP,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAElP,SAAA,EAEzBC,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGpP,UAChBC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,UAAU2N,cAAY,EAAApO,SAAC,0BAK/DC,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAACyD,EAAAA,EAAS,CACRvF,MAAM,WACNkB,WAAS,EACTpB,MAAOsI,GAAgBmF,UAAY,GACnCxN,SAAWoE,GAAM2K,GAA2B,WAAY3K,EAAEhB,OAAOrD,YAIrEgC,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAACyD,EAAAA,EAAS,CACRvF,MAAM,iBACNkB,WAAS,EACTpB,MAAOsI,GAAgBoF,eAAiB,GACxCzN,SAAWoE,GAAM2K,GAA2B,gBAAiB3K,EAAEhB,OAAOrD,YAI1EgC,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBF,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAACV,WAAS,EAAAW,SAAA,EACpBC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAF,SAAC,YACZC,EAAAA,EAAAA,KAACE,EAAAA,EAAM,CACLE,UAAQ,EACRpC,MAAOkI,EACPjI,SAAWoE,IAAMgO,OA3VLT,EA2V0BvN,EAAEhB,OAAOrD,WA1V/DmI,EAAoByJ,EAAOnO,KAAIoO,GAAKA,EAAEhO,cADV+N,KA2VsD,EAClE1R,MAAM,SACNS,YAAc2C,IACZtB,EAAAA,EAAAA,KAACiO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQa,SAAU,OAAQC,IAAK,IAAMzB,SACrDuB,EAAsBG,KAAKzD,IAC3BgC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAI,CAAa5D,MAAOF,EAAOY,KAAK,SAA1BZ,OAGf+B,SAEDiI,GAAgBvG,KAAK/B,IACpBM,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,CAAoBzC,MAAO0B,EAAO1B,MAAM+B,SAC9CL,EAAOxB,OADKwB,EAAO1B,iBAQ9BgC,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBF,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAACV,WAAS,EAAAW,SAAA,EACpBC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAF,SAAC,cACZC,EAAAA,EAAAA,KAACE,EAAAA,EAAM,CACLE,UAAQ,EACRpC,MAAOsI,GAAgB0F,UAAY,GACnC/N,SAAWoE,GAAM2K,GAA2B,WAAY3K,EAAEhB,OAAOrD,OACjEE,MAAM,WACNS,YAAc2C,IACZtB,EAAAA,EAAAA,KAACiO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQa,SAAU,OAAQC,IAAK,IAAMzB,SACrDuB,EAAsBG,KAAKzD,IAC3BgC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAI,CAAa5D,MAAOF,EAAOY,KAAK,SAA1BZ,OAGf+B,SAED,CAAC,SAAU,OAAO0B,KAAKuK,IACtBhM,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,CAAgBzC,MAAOgO,EAASjM,SACtCiM,GADYA,aASvBhM,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAInQ,GAAI,CAAEmR,GAAI,GAAIpQ,UAC/BC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,UAAU2N,cAAY,EAAApO,SAAC,oBAK/DC,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAACqP,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAexP,UAChDC,EAAAA,EAAAA,KAACwP,EAAAA,EAAU,CACTtR,MAAM,oBACNF,MAAOsI,GAAgB6E,cAAgB,KACvClN,SAAWmD,GAAa4L,GAA2B,eAAgB5L,GACnEqO,UAAW,CAAEC,UAAW,CAAEtQ,WAAW,WAK3CY,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAACqP,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAexP,UAChDC,EAAAA,EAAAA,KAACwP,EAAAA,EAAU,CACTtR,MAAM,qBACNF,MAAOsI,GAAgB+E,kBAAoB,KAC3CpN,SAAWmD,GAAa4L,GAA2B,mBAAoB5L,GACvEqO,UAAW,CAAEC,UAAW,CAAEtQ,WAAW,WAK3CY,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAACqP,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAexP,UAChDC,EAAAA,EAAAA,KAACwP,EAAAA,EAAU,CACTtR,MAAM,oBACNF,MAAOsI,GAAgBiF,iBAAmB,KAC1CtN,SAAWmD,GAAa4L,GAA2B,kBAAmB5L,GACtEqO,UAAW,CAAEC,UAAW,CAAEtQ,WAAW,WAK3CY,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,UACvBC,EAAAA,EAAAA,KAACqP,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAexP,UAChDC,EAAAA,EAAAA,KAACwP,EAAAA,EAAU,CACTtR,MAAM,aACNF,MAAOsI,GAAgBkF,WAAa,KACpCvN,SAAWmD,GAAa4L,GAA2B,YAAa5L,GAChEqO,UAAW,CAAEC,UAAW,CAAEtQ,WAAW,WAM3CS,EAAAA,EAAAA,MAACkP,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAInQ,GAAI,CAAEmR,GAAI,GAAIpQ,SAAA,EAC/BC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,UAAU2N,cAAY,EAAApO,SAAC,sBAG7DC,EAAAA,EAAAA,KAACyD,EAAAA,EAAS,CACRvF,MAAM,UACNC,YAAY,kDACZiB,WAAS,EACTkR,WAAS,EACTC,KAAM,EACNvS,MAAOsI,GAAgBE,SAAW,GAClCvI,SAAWoE,GAAM2K,GAA2B,UAAW3K,EAAEhB,OAAOrD,OAChEO,WAAW,sEAKjByB,EAAAA,EAAAA,KAACiO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQ0D,eAAgB,WAAY+L,GAAI,GAAIpQ,UAC9DC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACLtD,QAAQ,WACRqB,QAlcqBoO,KACjCjK,GAAmB,CAAC,EAAE,EAkcVvH,GAAI,CAAE0P,GAAI,GAAI3O,SACf,mCAQPC,EAAAA,EAAAA,KAACiO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQ0D,eAAgB,WAAYzD,WAAY,SAAUwP,GAAI,GAAIpQ,UACpFC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACLtD,QAAQ,YACRP,MAAM,UACN+N,WAAWvO,EAAAA,EAAAA,KAACyQ,EAAAA,EAAW,IACvBrO,QA9fiBsO,KACzBhG,QAAQQ,IAAI,+CAGZ,MAAMyF,EAAkB,CACtBpL,WAAWuD,EAAAA,EAAAA,GAAWvD,EAAW,cACjCK,SAASkD,EAAAA,EAAAA,GAAWlD,EAAS,cAC7BE,sBACAE,oBACAE,sBACGI,IAGLoE,QAAQQ,IAAI,kCAAmCyF,GAG/C5J,GAAQ,GAER2C,IAAc,EA4esB3J,SAC7B,wBAOLF,EAAAA,EAAAA,MAACkP,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGjQ,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIyB,GAAI,EAAGxB,GAAI,EAAErP,UAC9BC,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAI,CAAA9Q,UACHF,EAAAA,EAAAA,MAACiR,EAAAA,EAAW,CAAA/Q,SAAA,EACVC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAiB2N,cAAY,EAAApO,SAAC,mBAGpEC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,KAAIhB,SACrBqN,GAAQC,aAAa0D,2BAM9B/Q,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIyB,GAAI,EAAGxB,GAAI,EAAErP,UAC9BC,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAI,CAAA9Q,UACHF,EAAAA,EAAAA,MAACiR,EAAAA,EAAW,CAAA/Q,SAAA,EACVC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAiB2N,cAAY,EAAApO,SAAC,oBAGpEC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,KAAIhB,SACrBqN,GAAQE,cAAcyD,2BAM/B/Q,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIyB,GAAI,EAAGxB,GAAI,EAAErP,UAC9BC,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAI,CAAA9Q,UACHF,EAAAA,EAAAA,MAACiR,EAAAA,EAAW,CAAA/Q,SAAA,EACVC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAiB2N,cAAY,EAAApO,SAAC,mBAGpEC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,KAAIhB,SACrBkJ,GAAemE,GAAQI,wBAMhCxN,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIyB,GAAI,EAAGxB,GAAI,EAAErP,UAC9BC,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAI,CAAA9Q,UACHF,EAAAA,EAAAA,MAACiR,EAAAA,EAAW,CAAA/Q,SAAA,EACVC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAiB2N,cAAY,EAAApO,SAAC,oBAGpEC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,KAAIhB,SACrBkJ,GAAemE,GAAQQ,yBAMhC5N,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIyB,GAAI,EAAGxB,GAAI,EAAErP,UAC9BC,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAI,CAAA9Q,UACHF,EAAAA,EAAAA,MAACiR,EAAAA,EAAW,CAAA/Q,SAAA,EACVC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAiB2N,cAAY,EAAApO,SAAC,gBAGpEC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,KAAIhB,SACrBkJ,GAAemE,GAAQS,qBAMhC7N,EAAAA,EAAAA,KAAC+O,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIyB,GAAI,EAAGxB,GAAI,EAAErP,UAC9BC,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAI,CAAA9Q,UACHF,EAAAA,EAAAA,MAACiR,EAAAA,EAAW,CAAA/Q,SAAA,EACVC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAiB2N,cAAY,EAAApO,SAAC,gBAGpEC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,KAAK/B,GAAI,CAAEwB,MAAO4M,GAAQU,gBAAkB,EAAI,eAAiB,cAAe/N,SACjGkJ,GAAemE,GAAQU,6BAQlCjO,EAAAA,EAAAA,MAAC4O,EAAAA,EAAK,CAACzP,GAAI,CAAEuO,EAAG,GAAIxN,SAAA,EAClBF,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,SAAUuN,GAAI,GAAInO,SAAA,EACxDC,EAAAA,EAAAA,KAACgR,EAAAA,EAAc,CAAChS,GAAI,CAAE0P,GAAI,MAC1B1O,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,KAAIhB,SAAC,oBAG1BzB,KACC0B,EAAAA,EAAAA,KAACiR,EAAAA,EAAK,CAACC,SAAS,QAAQlS,GAAI,CAAEkP,GAAI,GAAInO,SACnCzB,MAIL0B,EAAAA,EAAAA,KAACmR,EAAAA,GAAa,CACZ7I,QAASA,GACTwE,KAAMtG,GACNrH,QAASA,GACT+F,MAAM,eACNkM,aAAa,4BACbC,QAAQ,KACRC,SAviBa3H,MAAOlB,EAAsB8I,KAChD,IACE7K,IAAW,GAGX,MAAM8K,EAAY/I,IAAWgJ,EAAAA,EAAaC,IAAM,MAC9BjJ,IAAWgJ,EAAAA,EAAaE,MAAQ,OAChClJ,IAAWgJ,EAAAA,EAAaG,IAAM,MAAQ,MAGlDjH,EAAyB,CAC7BpF,WAAWuD,EAAAA,EAAAA,GAAWvD,EAAW,cACjCK,SAASkD,EAAAA,EAAAA,GAAWlD,EAAS,cAC7BgF,cAAe9E,EAAoB7E,OAAS,EAAI6E,EAAoBrE,KAAI3C,GAAM+L,SAAS/L,UAAOgM,EAC9FC,WAAY/E,EAAkB/E,OAAS,EAAI+E,OAAoB8E,EAC/DrC,OAAQ+I,GAoEV,IAAIK,EAEJ,GAlEI7G,OAAOC,KAAK3E,IAAiBrF,OAAS,IACxCyJ,QAAQQ,IAAI,oDAAqD5E,IAG7DA,GAAgB6E,eAClBR,EAAQS,kBAAmBtC,EAAAA,EAAAA,GAAWxC,GAAgB6E,aAAc,eAElE7E,GAAgB+E,mBAClBV,EAAQW,kBAAmBxC,EAAAA,EAAAA,GAAWxC,GAAgB+E,iBAAkB,eAEtE/E,GAAgBiF,kBAClBZ,EAAQY,iBAAkBzC,EAAAA,EAAAA,GAAWxC,GAAgBiF,gBAAiB,eAEpEjF,GAAgBkF,YAClBb,EAAQ9B,eAAgBC,EAAAA,EAAAA,GAAWxC,GAAgBkF,UAAW,eAI5DlF,GAAgBmF,WAClBd,EAAQc,SAAWnF,GAAgBmF,UAEjCnF,GAAgBoF,gBAClBf,EAAQe,cAAgBpF,GAAgBoF,eAEtCpF,GAAgBE,UAClBmE,EAAQgB,UAAYrF,GAAgBE,QAAQoF,MAAM,KAAKnK,KAAK3C,GAAeA,EAAG+M,UAI5EvF,GAAgBwF,aAAexF,GAAgBwF,YAAY7K,OAAS,IACtE0J,EAAQoB,UAAYzF,GAAgBwF,aAElCxF,GAAgB0F,UAAY1F,GAAgB0F,SAAS/K,OAAS,IAChE0J,EAAQsB,UAAY3F,GAAgB0F,UAElC1F,GAAgBqC,QAAUrC,GAAgBqC,OAAO1H,OAAS,IAC5D0J,EAAQjD,SAAWpB,GAAgBqC,QAEjCrC,GAAgB4F,QAAU5F,GAAgB4F,OAAOjL,OAAS,IAC5D0J,EAAQwB,QAAU7F,GAAgB4F,QAEhC5F,GAAgB+C,UAAY/C,GAAgB+C,SAASpI,OAAS,IAChE0J,EAAQyB,WAAa9F,GAAgB+C,UAInC/C,GAAgB+F,aAClB1B,EAAQ0B,WAA4C,QAA/B/F,GAAgB+F,YAEnC/F,GAAgBgG,cAClB3B,EAAQ2B,YAA8C,QAAhChG,GAAgBgG,aAEpChG,GAAgBiG,eAClB5B,EAAQ4B,aAAgD,QAAjCjG,GAAgBiG,cAErCjG,GAAgBkG,cAClB7B,EAAQ6B,YAA8C,QAAhClG,GAAgBkG,aAEpClG,GAAgBmG,eAClB9B,EAAQ8B,aAAgD,QAAjCnG,GAAgBmG,eAOvC8E,EAAWtQ,OAAS,IAAMwH,IAAWgJ,EAAAA,EAAaC,KAAOjJ,IAAWgJ,EAAAA,EAAaK,OAEnF,GAAIrJ,IAAWgJ,EAAAA,EAAaC,IAAK,CAE/B,MAAMK,EAAUzJ,GAAQ7G,KAAIuQ,GAAOA,EAAI9T,OAAS8T,EAAIlT,KAAImT,KAAK,KAYvDC,EAAa,GAAGH,MAXTR,EAAW9P,KAAIiH,GAC1BJ,GAAQ7G,KAAIuQ,IACV,MAAMhU,EAAQ0K,EAAIsJ,EAAIlT,IAEtB,MAAqB,kBAAVd,GAAgC,OAAVA,EACxB8T,KAAKK,UAAUnU,GAAOoU,QAAQ,KAAM,WAE5BtH,IAAV9M,GAAiC,OAAVA,EAAiBqU,OAAOrU,GAAOoU,QAAQ,KAAM,MAAQ,EAAE,IACpFH,KAAK,OACRA,KAAK,QAGPJ,EAAO,IAAIS,KAAK,CAACJ,GAAa,CAAE3J,KAAM,YACxC,MAAO,GAAIE,IAAWgJ,EAAAA,EAAaK,KAAM,CAEvC,MAAMS,EAAcT,KAAKK,UAAUZ,EAAY,KAAM,GACrDM,EAAO,IAAIS,KAAK,CAACC,GAAc,CAAEhK,KAAM,oBACzC,OAGAsJ,QAAahI,EAAAA,EAAe2I,aAAa7H,EAAS6G,GAIpD,GAAIK,EAAM,CACR,MAAMY,EAAMC,OAAOC,IAAIC,gBAAgBf,GACjCgB,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAOP,EACTI,EAAEI,SAAW,mBAAkBnK,EAAAA,EAAAA,GAAW,IAAIrD,KAAQ,iBAAiB+L,IACvEsB,SAASI,KAAKC,YAAYN,GAC1BA,EAAEO,QACFV,OAAOC,IAAIU,gBAAgBZ,GAC3BK,SAASI,KAAKI,YAAYT,EAC5B,CACF,CAAE,MAAOpI,GACPC,QAAQpM,MAAM,uCAAwCmM,GACtD9D,GAAS,iDACX,CAAC,QACCD,IAAW,EACb,GAuaM6M,SAAU,CACRC,SAAS,EACTC,UAAW,CACTC,SAAS,EACTC,aAAa,EACbC,gBAAgB,GAElBC,WAAY,CACVH,SAAS,EACTI,gBAAiB9M,GACjB+M,gBAAiB,CAAC,GAAI,GAAI,GAAI,MAEhCC,iBAAkB,CAChBN,SAAS,EACTO,iBAAiB,EACjBC,aAAa,EACbC,eAAe,GAEjBC,OAAQ,CACNV,SAAS,EACTW,QAAS,CAAC5C,EAAAA,EAAaC,IAAKD,EAAAA,EAAaE,MAAOF,EAAAA,EAAaG,OAGjE0C,WA3kByBC,IAC/BpM,GAAkBoM,GAClBlM,IAAqB,EAAK,QA8kBxBxI,EAAAA,EAAAA,MAAC2U,EAAAA,EAAM,CACLC,KAAMrM,GACNzF,QAASwK,GACTa,SAAS,KACT5O,WAAS,EAAAW,SAAA,EAETC,EAAAA,EAAAA,KAAC0U,EAAAA,EAAW,CAAA3U,SAAC,oBAGbC,EAAAA,EAAAA,KAAC2U,EAAAA,EAAa,CAACC,UAAQ,EAAA7U,SACpBmI,KACCrI,EAAAA,EAAAA,MAACkP,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAElP,SAAA,EACzBF,EAAAA,EAAAA,MAACkP,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,SAAA,EACvBF,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACjBC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAgBT,SAAC,uBAGvDC,EAAAA,EAAAA,KAACoQ,EAAAA,EAAO,CAACpR,GAAI,CAAE6V,GAAI,MAEnBhV,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,SAAUuN,GAAI,GAAInO,SAAA,EACxDC,EAAAA,EAAAA,KAAC8U,EAAAA,EAAU,CAAC9V,GAAI,CAAE0P,GAAI,EAAGlO,MAAO,mBAChCX,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAOhB,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAEmI,GAAe6M,gBAI/ClV,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,SAAUuN,GAAI,GAAInO,SAAA,EACxDC,EAAAA,EAAAA,KAACgV,EAAAA,EAAS,CAAChW,GAAI,CAAE0P,GAAI,EAAGlO,MAAO,mBAC/BX,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAOhB,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAe,IAAEmI,GAAe+M,YAI3C/M,GAAegN,cACdrV,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,SAAUuN,GAAI,GAAInO,SAAA,EACxDC,EAAAA,EAAAA,KAACmV,EAAAA,EAAS,CAACnW,GAAI,CAAE0P,GAAI,EAAGlO,MAAO,mBAC/BX,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAOhB,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAe,IAAEmI,GAAegN,mBAK9CrV,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,SAAUuN,GAAI,GAAInO,SAAA,EACxDC,EAAAA,EAAAA,KAACoV,EAAAA,EAAc,CAACpW,GAAI,CAAE0P,GAAI,EAAGlO,MAAO,mBACpCX,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAOhB,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,aAAiB,IAAEmI,GAAemC,SAAW,aAIzDxK,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,SAAUuN,GAAI,GAAInO,SAAA,EACxDC,EAAAA,EAAAA,KAACqV,EAAAA,EAAiB,CAACrW,GAAI,CAAE0P,GAAI,EAAGlO,MAAO,mBACvCX,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAOhB,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,uBAA2B,IAAEmI,GAAekD,kBAAmBtC,EAAAA,EAAAA,GAAW,IAAIrD,KAAKyC,GAAekD,kBAAmB,gBAAkB,aAInJvL,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,SAAUuN,GAAI,GAAInO,SAAA,EACxDC,EAAAA,EAAAA,KAACqV,EAAAA,EAAiB,CAACrW,GAAI,CAAE0P,GAAI,EAAGlO,MAAO,mBACvCX,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAOhB,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAAoB,IAAEmI,GAAeW,eAAgBC,EAAAA,EAAAA,GAAW,IAAIrD,KAAKyC,GAAeW,eAAgB,gBAAkB,gBAKxIhJ,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACjBC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAgBT,SAAC,4BAGvDC,EAAAA,EAAAA,KAACoQ,EAAAA,EAAO,CAACpR,GAAI,CAAE6V,GAAI,MAEnBhV,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YAAgB,IAAEmI,GAAeS,QAAU,UAGrD9I,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBAAqB,IAAEmI,GAAeoN,YAAc,UAG9DzV,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAEmI,GAAe8D,UAAY,UAGzDnM,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YAAgB,IAAEmI,GAAeqN,QAAU,UAGrD1V,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAAoB,IAAEmI,GAAesN,WAAa,gBAKhE3V,EAAAA,EAAAA,MAACkP,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAErP,SAAA,EACvBF,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACjBC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAgBT,SAAC,2BAGvDC,EAAAA,EAAAA,KAACoQ,EAAAA,EAAO,CAACpR,GAAI,CAAE6V,GAAI,MAEnBhV,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAE0B,QAAS,OAAQC,WAAY,SAAUuN,GAAI,GAAInO,SAAA,EACxDC,EAAAA,EAAAA,KAACyV,EAAAA,EAAe,CAACzW,GAAI,CAAE0P,GAAI,EAAGlO,MAAO,mBACrCX,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAOhB,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,aAAiB,IAAEkJ,GAAef,GAAeyF,SAAW,UAIxE9N,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAwB,IAAEkJ,GAAef,GAAe0F,eAAiB,OAGnF/N,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,uBAA2B,IAAEkJ,GAAef,GAAewN,kBAAoB,OAGzF7V,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAAoB,IAAEkJ,GAAef,GAAe2F,WAAa,OAG3EhO,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAAoB,IAAEkJ,GAAef,GAAeyN,WAAa,OAG3E9V,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAAoB,IAAEkJ,GAAef,GAAea,WAAa,OAG3ElJ,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAEmI,GAAemB,UAAY,aAI3DxJ,EAAAA,EAAAA,MAACoO,EAAAA,EAAG,CAACjP,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACjBC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACQ,QAAQ,YAAYP,MAAM,iBAAgBT,SAAC,+BAGvDC,EAAAA,EAAAA,KAACoQ,EAAAA,EAAO,CAACpR,GAAI,CAAE6V,GAAI,MAEnBhV,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBAAqB,IAAEmI,GAAemE,WAAa,MAAQ,SAGrExM,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,mBAAuB,IAAEmI,GAAe0N,aAAe,MAAQ,SAGzE/V,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,mBAAuB,IAAEmI,GAAeqE,aAAe,MAAQ,SAGzE1M,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACQ,QAAQ,QAAQ/B,GAAI,CAAEkP,GAAI,GAAInO,SAAA,EACxCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAwB,IAAEmI,GAAe2N,cAAgB,MAAQ,oBAOrF7V,EAAAA,EAAAA,KAAC8V,EAAAA,EAAa,CAAA/V,UACZC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CAACjC,QAAS+K,GAAyBpN,SAAC,iBAGrC,C","sources":["components/common/MultiSelect.tsx","pages/showcase/reports/PlayersPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Chip,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n  Typography,\n  Checkbox,\n  ListItemText,\n  TextField,\n  InputAdornment,\n  Divider,\n  Button,\n  FormHelperText,\n  Tooltip,\n  IconButton,\n  CircularProgress\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { CommonProps } from '../../types/common';\n\n// Option interface for select items\nexport interface MultiSelectOption {\n  value: string | number;\n  label: string;\n  disabled?: boolean;\n  group?: string;\n  description?: string;\n}\n\n// Props interface for the MultiSelect component\nexport interface MultiSelectProps extends CommonProps {\n  /**\n   * Array of options to display in the select\n   */\n  options: MultiSelectOption[];\n\n  /**\n   * Currently selected values\n   */\n  value: (string | number)[];\n\n  /**\n   * Callback fired when the value changes\n   */\n  onChange: (value: (string | number)[]) => void;\n\n  /**\n   * Label for the select\n   */\n  label?: string;\n\n  /**\n   * Placeholder text when no options are selected\n   */\n  placeholder?: string;\n\n  /**\n   * Whether the component is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the component is required\n   */\n  required?: boolean;\n\n  /**\n   * Error message to display\n   */\n  error?: string;\n\n  /**\n   * Helper text to display below the select\n   */\n  helperText?: string;\n\n  /**\n   * Maximum height of the dropdown menu in pixels\n   */\n  maxMenuHeight?: number;\n\n  /**\n   * Whether to show a search input in the dropdown\n   */\n  searchable?: boolean;\n\n  /**\n   * Whether to show select all/none options\n   */\n  showSelectAllOption?: boolean;\n\n  /**\n   * Custom render function for the selected values\n   */\n  renderValue?: (selected: (string | number)[]) => React.ReactNode;\n\n  /**\n   * Size of the select component\n   */\n  size?: 'small' | 'medium';\n\n  /**\n   * Width of the component\n   */\n  width?: string | number;\n\n  /**\n   * Custom ID for the component\n   */\n  id?: string;\n\n  /**\n   * Custom name for the component\n   */\n  name?: string;\n\n  /**\n   * Whether the component is in a loading state\n   */\n  loading?: boolean;\n\n  /**\n   * Whether the component should take up the full width of its container\n   */\n  fullWidth?: boolean;\n}\n\n/**\n * MultiSelect component\n *\n * A reusable multi-select dropdown component with search functionality,\n * select all option, and chip display for selected values.\n */\nconst MultiSelect: React.FC<MultiSelectProps> = ({\n  options = [],\n  value = [],\n  onChange,\n  label = '',\n  placeholder = 'Select items',\n  disabled = false,\n  required = false,\n  error = '',\n  helperText = '',\n  maxMenuHeight = 300,\n  searchable = true,\n  showSelectAllOption = true,\n  renderValue,\n  size = 'small',\n  width,\n  id,\n  name,\n  sx,\n  className,\n  style,\n  loading = false,\n  fullWidth = true\n}) => {\n  // State for search term\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  // Filter options based on search term\n  const filteredOptions = options.filter(option =>\n    option.label.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Handle select change\n  const handleChange = (event: SelectChangeEvent<(string | number)[]>) => {\n    const newValue = event.target.value as (string | number)[];\n    onChange(newValue);\n  };\n\n  // Handle search input change\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  };\n\n  // Clear search term\n  const handleClearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Handle select all\n  const handleSelectAll = () => {\n    // Only select from filtered options that aren't disabled\n    const selectableOptions = filteredOptions\n      .filter(option => !option.disabled)\n      .map(option => option.value);\n\n    onChange(selectableOptions);\n  };\n\n  // Handle select none\n  const handleSelectNone = () => {\n    onChange([]);\n  };\n\n  // Handle removing a single item\n  const handleRemoveItem = (valueToRemove: string | number) => (event: React.MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation(); // Prevent the dropdown from opening\n    const newValue = value.filter(val => val.toString() !== valueToRemove.toString());\n    onChange(newValue);\n  };\n\n  // Default render function for selected values\n  const defaultRenderValue = (selected: (string | number)[]) => {\n    if (!selected || selected.length === 0) {\n      return <Typography color=\"text.secondary\">{placeholder}</Typography>;\n    }\n\n    // Always show chips for all selected items\n    return (\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n        {selected.map((selectedValue) => {\n          const option = options.find(opt => opt.value.toString() === selectedValue.toString());\n          return (\n            <Chip\n              key={selectedValue}\n              label={option ? option.label : selectedValue}\n              size=\"small\"\n              onDelete={handleRemoveItem(selectedValue)}\n              onClick={(e) => e.stopPropagation()} // Prevent opening dropdown when clicking the chip\n              deleteIcon={\n                <ClearIcon\n                  fontSize=\"small\"\n                  onMouseDown={(e) => e.stopPropagation()} // Extra prevention\n                />\n              }\n              sx={{\n                '& .MuiChip-deleteIcon': {\n                  display: 'none',\n                  opacity: 0.7,\n                  '&:hover': {\n                    opacity: 1,\n                  }\n                },\n                '&:hover .MuiChip-deleteIcon': {\n                  display: 'block',\n                },\n              }}\n            />\n          );\n        })}\n      </div>\n    );\n  };\n\n  // If loading, show a loading message\n  if (loading) {\n    return (\n      <FormControl\n        fullWidth\n        size={size}\n        error={!!error}\n        disabled={true}\n        required={required}\n        sx={{\n          width: width,\n          ...sx\n        }}\n        className={className}\n        style={style}\n      >\n        {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n        <Select\n          labelId={`${id || 'multi-select'}-label`}\n          id={id || 'multi-select'}\n          name={name}\n          multiple\n          value={[]}\n          input={<OutlinedInput label={label} />}\n          renderValue={() => <Typography color=\"text.secondary\">Loading options...</Typography>}\n        >\n          <MenuItem disabled>\n            <div style={{ display: 'flex', alignItems: 'center', padding: 8 }}>\n              <CircularProgress size={20} style={{ marginRight: 8 }} />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Loading options...\n              </Typography>\n            </div>\n          </MenuItem>\n        </Select>\n        {helperText && (\n          <FormHelperText>{helperText}</FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n\n  // If no options are provided, show a message\n  if (!options || options.length === 0) {\n    return (\n      <FormControl\n        fullWidth\n        size={size}\n        error={!!error}\n        disabled={true}\n        required={required}\n        sx={{\n          width: width,\n          ...sx\n        }}\n        className={className}\n        style={style}\n      >\n        {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n        <Select\n          labelId={`${id || 'multi-select'}-label`}\n          id={id || 'multi-select'}\n          name={name}\n          multiple\n          value={[]}\n          input={<OutlinedInput label={label} />}\n          renderValue={() => <Typography color=\"text.secondary\">No options available</Typography>}\n        >\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options available\n            </Typography>\n          </MenuItem>\n        </Select>\n        {helperText && (\n          <FormHelperText>{helperText}</FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n\n  // Reset search when dropdown closes\n  const handleClose = () => {\n    setSearchTerm('');\n  };\n\n  return (\n    <FormControl\n      fullWidth\n      size={size}\n      error={!!error}\n      disabled={disabled}\n      required={required}\n      sx={{\n        width: width || '100%',\n        minWidth: '100%',\n        ...sx\n      }}\n      className={className}\n      style={style}\n    >\n      {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n\n      <Select\n        labelId={`${id || 'multi-select'}-label`}\n        id={id || 'multi-select'}\n        name={name}\n        multiple\n        value={value}\n        onChange={handleChange}\n        input={<OutlinedInput label={label} />}\n        renderValue={renderValue || defaultRenderValue}\n        onClose={handleClose}\n        // Add a custom click handler to prevent opening when clicking on chips\n        onClick={(e) => {\n          // Check if the click was on a chip or delete icon\n          if (\n            e.target instanceof HTMLElement &&\n            (e.target.classList.contains('MuiChip-root') ||\n             e.target.classList.contains('MuiChip-label') ||\n             e.target.classList.contains('MuiChip-deleteIcon') ||\n             e.target.closest('.MuiChip-deleteIcon'))\n          ) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }}\n        MenuProps={{\n          PaperProps: {\n            style: {\n              maxHeight: maxMenuHeight,\n            },\n          },\n        }}\n      >\n        {/* Search input and Select All/Clear All in a sticky container */}\n        <div\n          style={{\n            position: 'sticky',\n            top: 0,\n            backgroundColor: '#fff',\n            zIndex: 2,\n            borderBottom: '1px solid rgba(0, 0, 0, 0.12)'\n          }}\n        >\n          {/* Search input */}\n          {searchable && (\n            <div style={{ padding: 8 }}>\n              <TextField\n                size=\"small\"\n                placeholder=\"Search...\"\n                fullWidth\n                value={searchTerm}\n                onChange={handleSearchChange}\n                onClick={(e) => e.stopPropagation()}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SearchIcon fontSize=\"small\" />\n                    </InputAdornment>\n                  ),\n                  endAdornment: searchTerm ? (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        size=\"small\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleClearSearch();\n                        }}\n                      >\n                        <ClearIcon fontSize=\"small\" />\n                      </IconButton>\n                    </InputAdornment>\n                  ) : null,\n                }}\n              />\n            </div>\n          )}\n\n          {/* Select all/none options */}\n          {showSelectAllOption && filteredOptions.length > 0 && (\n            <div style={{ paddingLeft: 8, paddingRight: 8, paddingTop: 4, paddingBottom: 4, display: 'flex', justifyContent: 'space-between' }}>\n              <Button size=\"small\" onClick={handleSelectAll}>Select All</Button>\n              <Button size=\"small\" onClick={handleSelectNone}>Clear All</Button>\n            </div>\n          )}\n        </div>\n\n        {/* No options message */}\n        {filteredOptions.length === 0 && (\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options found\n            </Typography>\n          </MenuItem>\n        )}\n\n        {/* Options */}\n        {filteredOptions.map((option) => (\n          <MenuItem\n            key={option.value}\n            value={option.value}\n            disabled={option.disabled}\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            }}\n          >\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <Checkbox\n                checked={value.some(val =>\n                  val.toString() === option.value.toString()\n                )}\n              />\n              <ListItemText\n                primary={option.label}\n                secondary={option.group}\n              />\n            </div>\n            {option.description && (\n              <Tooltip title={option.description} arrow>\n                <InfoOutlinedIcon fontSize=\"small\" color=\"action\" style={{ marginLeft: 8 }} />\n              </Tooltip>\n            )}\n          </MenuItem>\n        ))}\n      </Select>\n\n      {/* Helper text or error message */}\n      {(helperText || error) && (\n        <FormHelperText>{error || helperText}</FormHelperText>\n      )}\n    </FormControl>\n  );\n};\n\nexport default MultiSelect;\n","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Collapse\n} from '@mui/material';\nimport { EnhancedTable } from '../../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../../components/tables/enhanced/types';\nimport MultiSelect, { MultiSelectOption } from '../../../components/common/MultiSelect';\nimport { format as formatDate } from 'date-fns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { Player } from '../../../types/players';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\n\n// Import services\nimport playersService from '../../../services/api/playersService';\nimport { ReportFilters } from '../../../services/api/types';\n\n// Define interfaces\ninterface Filters {\n  startDate: string;\n  endDate: string;\n  whiteLabelIds?: number[];\n  countryIds?: string[];\n  statusIds?: string[];\n\n  // Advanced filters - Date filters\n  registrationDate?: string;\n  firstDepositDate?: string;\n  lastDepositDate?: string;\n  lastLoginDate?: string;\n\n  // Advanced filters - String filters\n  trackers?: string;\n  promotionCode?: string;\n  playerIds?: string[];\n\n  // Advanced filters - Array filters\n  playModes?: string[];\n  platforms?: string[];\n  statuses?: string[];\n  genders?: string[];\n  currencies?: string[];\n\n  // Advanced filters - Boolean filters\n  smsEnabled?: boolean;\n  mailEnabled?: boolean;\n  phoneEnabled?: boolean;\n  postEnabled?: boolean;\n  bonusEnabled?: boolean;\n}\n\n// Define interfaces for metadata\ninterface WhiteLabel {\n  id: string;\n  name: string;\n}\n\ninterface Country {\n  id: string;\n  name: string;\n}\n\ninterface Status {\n  id: string;\n  name: string;\n}\n\n// Define custom PlayerMetadata interface for our component\ninterface PlayersMetadata {\n  whiteLabels: WhiteLabel[];\n  countries: Country[];\n  statuses: Status[];\n  vipLevels?: string[];\n  kycStatuses?: string[];\n  tags?: string[];\n}\n\n/**\n * PlayersPage component\n * Displays a comprehensive player report with filtering and data visualization\n */\nconst PlayersPage: React.FC = () => {\n  // State for filters\n  const [startDate, setStartDate] = useState<Date>(new Date(new Date().setDate(new Date().getDate() - 30)));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [selectedWhiteLabels, setSelectedWhiteLabels] = useState<string[]>([]);\n  const [selectedCountries, setSelectedCountries] = useState<string[]>([]);\n  const [selectedStatuses, setSelectedStatuses] = useState<string[]>([]);\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState<boolean>(false);\n  const [advancedFilters, setAdvancedFilters] = useState<Record<string, any>>({});\n\n  // State for data\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState<number>(0);\n  const [page, setPage] = useState<number>(0);\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [sortBy, setSortBy] = useState<string>('registrationDate');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n\n  // State for metadata\n  const [whiteLabels, setWhiteLabels] = useState<WhiteLabel[]>([]);\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [statuses, setStatuses] = useState<Status[]>([]);\n  const [whiteLabelsOptions, setWhiteLabelsOptions] = useState<MultiSelectOption[]>([]);\n  const [countriesOptions, setCountriesOptions] = useState<MultiSelectOption[]>([]);\n  const [statusesOptions, setStatusesOptions] = useState<MultiSelectOption[]>([]);\n\n  // State for player details dialog\n  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);\n  const [playerDetailsOpen, setPlayerDetailsOpen] = useState<boolean>(false);\n\n  // Define table columns\n  const columns: ColumnDef[] = [\n    {\n      id: 'username',\n      label: 'Username',\n      type: 'text',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'email',\n      label: 'Email',\n      type: 'text',\n      sortable: true,\n      width: 200,\n    },\n    {\n      id: 'country',\n      label: 'Country',\n      type: 'text',\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'status',\n      label: 'Status',\n      format: (value, row: Player) => (\n        <Chip\n          label={row.status}\n          size=\"small\"\n          color={\n            row.status === 'Active' ? 'success' :\n            row.status === 'Inactive' ? 'default' :\n            row.status === 'Blocked' ? 'error' :\n            'primary'\n          }\n        />\n      ),\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'registrationDate',\n      label: 'Registration Date',\n      type: 'date',\n      dateFormat: 'medium',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'lastLoginDate',\n      label: 'Last Login',\n      format: (value, row: Player) => row.lastLoginDate ? formatDate(new Date(row.lastLoginDate), 'MMM dd, yyyy') : '-',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'balance',\n      label: 'Balance',\n      type: 'currency',\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'totalDeposits',\n      label: 'Total Deposits',\n      type: 'currency',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'totalBets',\n      label: 'Total Bets',\n      type: 'currency',\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'netProfit',\n      label: 'Net Profit',\n      format: (value, row: Player) => {\n        const netProfit = row.netProfit || 0;\n        return (\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: netProfit >= 0 ? 'success.main' : 'error.main',\n              fontWeight: 'medium'\n            }}\n          >\n            {formatCurrency(netProfit)}\n          </Typography>\n        );\n      },\n      sortable: true,\n      width: 120,\n    }\n  ];\n\n  // Helper function to format currency\n  const formatCurrency = (amount: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(amount);\n  };\n\n  // Fetch metadata on component mount\n  useEffect(() => {\n    fetchMetadata();\n  }, []);\n\n  // Fetch players data when filters change\n  useEffect(() => {\n    fetchPlayers();\n  }, [page, pageSize, sortBy, sortDirection]);\n\n  // Fetch metadata (white labels, countries, statuses)\n  const fetchMetadata = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch metadata from API\n      const metadata = await playersService.getMetadata();\n\n      // Set white labels\n      if (metadata.whiteLabels) {\n        setWhiteLabels(metadata.whiteLabels);\n\n        // Convert white labels to MultiSelect options\n        const options = metadata.whiteLabels.map((wl: WhiteLabel) => ({\n          value: wl.id,\n          label: wl.name\n        }));\n        setWhiteLabelsOptions(options);\n      }\n\n      // Set countries\n      if (metadata.countries) {\n        const countryObjects = Array.isArray(metadata.countries)\n          ? metadata.countries.map(c => typeof c === 'string' ? { id: c, name: c } : c)\n          : [];\n\n        setCountries(countryObjects);\n\n        // Convert countries to MultiSelect options\n        const countryOptions = countryObjects.map((country: Country) => ({\n          value: country.id,\n          label: country.name\n        }));\n        setCountriesOptions(countryOptions);\n      }\n\n      // Set statuses\n      if (metadata.statuses) {\n        const statusObjects = Array.isArray(metadata.statuses)\n          ? metadata.statuses.map(s => typeof s === 'string' ? { id: s, name: s } : s)\n          : [];\n\n        setStatuses(statusObjects);\n\n        // Convert statuses to MultiSelect options\n        const statusOptions = statusObjects.map((status: Status) => ({\n          value: status.id,\n          label: status.name\n        }));\n        setStatusesOptions(statusOptions);\n      }\n    } catch (err) {\n      console.error('[PLAYERS PAGE] Error fetching metadata:', err);\n      setError('Failed to load metadata. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch players data\n  const fetchPlayers = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Create filters object\n      const filters: ReportFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => parseInt(id)) : undefined,\n        countryIds: selectedCountries.length > 0 ? selectedCountries : undefined,\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[PLAYERS PAGE] Adding advanced filters:', advancedFilters);\n\n        // Process date filters\n        if (advancedFilters.registration) {\n          filters.registrationDate = formatDate(advancedFilters.registration, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.firstTimeDeposit) {\n          filters.firstDepositDate = formatDate(advancedFilters.firstTimeDeposit, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastDepositDate) {\n          filters.lastDepositDate = formatDate(advancedFilters.lastDepositDate, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastLogin) {\n          filters.lastLoginDate = formatDate(advancedFilters.lastLogin, 'yyyy-MM-dd');\n        }\n\n        // Process string filters\n        if (advancedFilters.trackers) {\n          filters.trackers = advancedFilters.trackers;\n        }\n        if (advancedFilters.promotionCode) {\n          filters.promotionCode = advancedFilters.promotionCode;\n        }\n        if (advancedFilters.players) {\n          filters.playerIds = advancedFilters.players.split(',').map((id: string) => id.trim());\n        }\n\n        // Process array filters\n        if (advancedFilters.regPlayMode && advancedFilters.regPlayMode.length > 0) {\n          filters.playModes = advancedFilters.regPlayMode;\n        }\n        if (advancedFilters.platform && advancedFilters.platform.length > 0) {\n          filters.platforms = advancedFilters.platform;\n        }\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          filters.statuses = advancedFilters.status;\n        }\n        if (advancedFilters.gender && advancedFilters.gender.length > 0) {\n          filters.genders = advancedFilters.gender;\n        }\n        if (advancedFilters.currency && advancedFilters.currency.length > 0) {\n          filters.currencies = advancedFilters.currency;\n        }\n\n        // Process boolean filters\n        if (advancedFilters.smsEnabled) {\n          filters.smsEnabled = advancedFilters.smsEnabled === 'Yes';\n        }\n        if (advancedFilters.mailEnabled) {\n          filters.mailEnabled = advancedFilters.mailEnabled === 'Yes';\n        }\n        if (advancedFilters.phoneEnabled) {\n          filters.phoneEnabled = advancedFilters.phoneEnabled === 'Yes';\n        }\n        if (advancedFilters.postEnabled) {\n          filters.postEnabled = advancedFilters.postEnabled === 'Yes';\n        }\n        if (advancedFilters.bonusEnabled) {\n          filters.bonusEnabled = advancedFilters.bonusEnabled === 'Yes';\n        }\n      }\n\n      // Add pagination and sorting\n      const params = {\n        page: page + 1, // API uses 1-based indexing\n        pageSize,\n        sortBy,\n        sortDirection\n      };\n\n      // Fetch players data from API\n      const response = await playersService.getData({ ...filters, ...params });\n\n      if (response && response.data) {\n        setPlayers(response.data);\n        setTotalCount(response.meta?.totalCount || response.data.length);\n      } else {\n        setPlayers([]);\n        setTotalCount(0);\n      }\n    } catch (err) {\n      console.error('[PLAYERS PAGE] Error fetching players data:', err);\n      setError('Failed to load players data. Please try again later.');\n      setPlayers([]);\n      setTotalCount(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = (): void => {\n    console.log('[PLAYERS PAGE] Apply filters button clicked');\n\n    // Combine basic filters with advanced filters if they exist\n    const combinedFilters = {\n      startDate: formatDate(startDate, 'yyyy-MM-dd'),\n      endDate: formatDate(endDate, 'yyyy-MM-dd'),\n      selectedWhiteLabels,\n      selectedCountries,\n      selectedStatuses,\n      ...advancedFilters\n    };\n\n    console.log('[PLAYERS PAGE] Current filters:', combinedFilters);\n\n    // Reset pagination\n    setPage(0);\n\n    fetchPlayers();\n  };\n\n  // Handle white labels change\n  const handleWhiteLabelsChange = (values: (string | number)[]): void => {\n    setSelectedWhiteLabels(values.map(v => v.toString()));\n  };\n\n  // Handle countries change\n  const handleCountriesChange = (values: (string | number)[]): void => {\n    setSelectedCountries(values.map(v => v.toString()));\n  };\n\n  // Handle statuses change\n  const handleStatusesChange = (values: (string | number)[]): void => {\n    setSelectedStatuses(values.map(v => v.toString()));\n  };\n\n  // Handle advanced filter change\n  const handleAdvancedFilterChange = (key: string, value: any): void => {\n    setAdvancedFilters(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  // Handle reset advanced filters\n  const handleResetAdvancedFilters = (): void => {\n    setAdvancedFilters({});\n  };\n\n  // Handle toggle advanced filters\n  const handleToggleAdvancedFilters = (): void => {\n    setShowAdvancedFilters(!showAdvancedFilters);\n  };\n\n  // Handle view player details\n  const handleViewPlayerDetails = (player: Player): void => {\n    setSelectedPlayer(player);\n    setPlayerDetailsOpen(true);\n  };\n\n  // Handle close player details dialog\n  const handleClosePlayerDetails = (): void => {\n    setPlayerDetailsOpen(false);\n    setSelectedPlayer(null);\n  };\n\n  // Handle export\n  const handleExport = async (format: ExportFormat, exportData: any[]): Promise<void> => {\n    try {\n      setLoading(true);\n\n      // Convert format to string for API\n      const formatStr = format === ExportFormat.CSV ? 'csv' :\n                        format === ExportFormat.EXCEL ? 'xlsx' :\n                        format === ExportFormat.PDF ? 'pdf' : 'csv';\n\n      // Create filters object\n      const filters: ReportFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => parseInt(id)) : undefined,\n        countryIds: selectedCountries.length > 0 ? selectedCountries : undefined,\n        format: formatStr\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[PLAYERS PAGE] Adding advanced filters to export:', advancedFilters);\n\n        // Process date filters\n        if (advancedFilters.registration) {\n          filters.registrationDate = formatDate(advancedFilters.registration, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.firstTimeDeposit) {\n          filters.firstDepositDate = formatDate(advancedFilters.firstTimeDeposit, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastDepositDate) {\n          filters.lastDepositDate = formatDate(advancedFilters.lastDepositDate, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastLogin) {\n          filters.lastLoginDate = formatDate(advancedFilters.lastLogin, 'yyyy-MM-dd');\n        }\n\n        // Process string filters\n        if (advancedFilters.trackers) {\n          filters.trackers = advancedFilters.trackers;\n        }\n        if (advancedFilters.promotionCode) {\n          filters.promotionCode = advancedFilters.promotionCode;\n        }\n        if (advancedFilters.players) {\n          filters.playerIds = advancedFilters.players.split(',').map((id: string) => id.trim());\n        }\n\n        // Process array filters\n        if (advancedFilters.regPlayMode && advancedFilters.regPlayMode.length > 0) {\n          filters.playModes = advancedFilters.regPlayMode;\n        }\n        if (advancedFilters.platform && advancedFilters.platform.length > 0) {\n          filters.platforms = advancedFilters.platform;\n        }\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          filters.statuses = advancedFilters.status;\n        }\n        if (advancedFilters.gender && advancedFilters.gender.length > 0) {\n          filters.genders = advancedFilters.gender;\n        }\n        if (advancedFilters.currency && advancedFilters.currency.length > 0) {\n          filters.currencies = advancedFilters.currency;\n        }\n\n        // Process boolean filters\n        if (advancedFilters.smsEnabled) {\n          filters.smsEnabled = advancedFilters.smsEnabled === 'Yes';\n        }\n        if (advancedFilters.mailEnabled) {\n          filters.mailEnabled = advancedFilters.mailEnabled === 'Yes';\n        }\n        if (advancedFilters.phoneEnabled) {\n          filters.phoneEnabled = advancedFilters.phoneEnabled === 'Yes';\n        }\n        if (advancedFilters.postEnabled) {\n          filters.postEnabled = advancedFilters.postEnabled === 'Yes';\n        }\n        if (advancedFilters.bonusEnabled) {\n          filters.bonusEnabled = advancedFilters.bonusEnabled === 'Yes';\n        }\n      }\n\n      // If we have the data already, we can use it directly instead of making an API call\n      let blob;\n\n      if (exportData.length > 0 && (format === ExportFormat.CSV || format === ExportFormat.JSON)) {\n        // Client-side export for CSV and JSON\n        if (format === ExportFormat.CSV) {\n          // Create CSV content\n          const headers = columns.map(col => col.label || col.id).join(',');\n          const rows = exportData.map(row =>\n            columns.map(col => {\n              const value = row[col.id];\n              // Handle special cases like objects, arrays, etc.\n              if (typeof value === 'object' && value !== null) {\n                return JSON.stringify(value).replace(/\"/g, '\"\"');\n              }\n              return value !== undefined && value !== null ? String(value).replace(/\"/g, '\"\"') : '';\n            }).join(',')\n          ).join('\\n');\n\n          const csvContent = `${headers}\\n${rows}`;\n          blob = new Blob([csvContent], { type: 'text/csv' });\n        } else if (format === ExportFormat.JSON) {\n          // Create JSON content\n          const jsonContent = JSON.stringify(exportData, null, 2);\n          blob = new Blob([jsonContent], { type: 'application/json' });\n        }\n      } else {\n        // Server-side export for other formats or when we need to process all data\n        blob = await playersService.exportReport(filters, formatStr);\n      }\n\n      // Create download link\n      if (blob) {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `players-report-${formatDate(new Date(), 'yyyy-MM-dd')}.${formatStr}`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }\n    } catch (err) {\n      console.error('[PLAYERS PAGE] Error exporting data:', err);\n      setError('Failed to export data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle pagination change\n  const handlePageChange = (newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle page size change\n  const handlePageSizeChange = (newPageSize: number): void => {\n    setPageSize(newPageSize);\n    setPage(0); // Reset to first page when changing page size\n  };\n\n  // Handle sorting change\n  const handleSortingChange = (field: string, direction: 'asc' | 'desc'): void => {\n    setSortBy(field);\n    setSortDirection(direction);\n  };\n\n  // Calculate summary statistics\n  const summary = {\n    totalPlayers: players.length,\n    activePlayers: players.filter(p => p.status === 'Active').length,\n    totalBalance: players.reduce((sum, p) => sum + (p.balance || 0), 0),\n    totalDeposits: players.reduce((sum, p) => sum + (p.totalDeposits || 0), 0),\n    totalBets: players.reduce((sum, p) => sum + (p.totalBets || 0), 0),\n    totalNetProfit: players.reduce((sum, p) => sum + (p.netProfit || 0), 0)\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom>\n            Players Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze player data, activity, and performance metrics\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={RouterLink}\n          to=\"/reports/players/advanced\"\n          startIcon={<FilterListIcon />}\n        >\n          Advanced Report\n        </Button>\n      </Box>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <FilterListIcon sx={{ mr: 1 }} />\n            <Typography variant=\"h6\">Filters</Typography>\n          </Box>\n          <Button\n            color=\"primary\"\n            onClick={handleToggleAdvancedFilters}\n            endIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          >\n            {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n          </Button>\n        </Box>\n\n        {/* Basic Filters */}\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"White Labels\"\n              options={whiteLabelsOptions}\n              value={selectedWhiteLabels}\n              onChange={handleWhiteLabelsChange}\n              placeholder=\"Select White Labels\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Countries\"\n              options={countriesOptions}\n              value={selectedCountries}\n              onChange={handleCountriesChange}\n              placeholder=\"Select Countries\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        {/* Advanced Filters */}\n        <Collapse in={showAdvancedFilters} timeout=\"auto\" unmountOnExit>\n          <Box sx={{ mt: 3 }}>\n            <Divider sx={{ mb: 3 }} />\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n\n            <Grid container spacing={3}>\n              {/* Player Information */}\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Player Information\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Trackers\"\n                  fullWidth\n                  value={advancedFilters.trackers || ''}\n                  onChange={(e) => handleAdvancedFilterChange('trackers', e.target.value)}\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Promotion Code\"\n                  fullWidth\n                  value={advancedFilters.promotionCode || ''}\n                  onChange={(e) => handleAdvancedFilterChange('promotionCode', e.target.value)}\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Status</InputLabel>\n                  <Select\n                    multiple\n                    value={selectedStatuses}\n                    onChange={(e) => handleStatusesChange(e.target.value as string[])}\n                    label=\"Status\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {statusesOptions.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Platform</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.platform || []}\n                    onChange={(e) => handleAdvancedFilterChange('platform', e.target.value)}\n                    label=\"Platform\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['Mobile', 'Web'].map((platform) => (\n                      <MenuItem key={platform} value={platform}>\n                        {platform}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Date Filters */}\n              <Grid item xs={12} sx={{ mt: 2 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Date Filters\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Registration Date\"\n                    value={advancedFilters.registration || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('registration', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"First Time Deposit\"\n                    value={advancedFilters.firstTimeDeposit || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('firstTimeDeposit', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Last Deposit Date\"\n                    value={advancedFilters.lastDepositDate || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('lastDepositDate', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Last Login\"\n                    value={advancedFilters.lastLogin || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('lastLogin', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              {/* Players Input */}\n              <Grid item xs={12} sx={{ mt: 2 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Specific Players\n                </Typography>\n                <TextField\n                  label=\"Players\"\n                  placeholder=\"Enter player IDs or usernames (comma separated)\"\n                  fullWidth\n                  multiline\n                  rows={3}\n                  value={advancedFilters.players || ''}\n                  onChange={(e) => handleAdvancedFilterChange('players', e.target.value)}\n                  helperText=\"Enter multiple player IDs or usernames separated by commas\"\n                />\n              </Grid>\n            </Grid>\n\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleResetAdvancedFilters}\n                sx={{ mr: 2 }}\n              >\n                Reset Advanced Filters\n              </Button>\n            </Box>\n          </Box>\n        </Collapse>\n\n        {/* Action Buttons */}\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', mt: 3 }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<RefreshIcon />}\n            onClick={handleApplyFilters}\n          >\n            Apply Filters\n          </Button>\n        </Box>\n      </Paper>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Players\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalPlayers.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Active Players\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.activePlayers.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Balance\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalBalance)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Deposits\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalDeposits)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Bets\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalBets)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Net Profit\n              </Typography>\n              <Typography variant=\"h5\" sx={{ color: summary.totalNetProfit >= 0 ? 'success.main' : 'error.main' }}>\n                {formatCurrency(summary.totalNetProfit)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Data Table */}\n      <Paper sx={{ p: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <TableChartIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Players Data</Typography>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        <EnhancedTable\n          columns={columns}\n          data={players}\n          loading={loading}\n          title=\"Players Data\"\n          emptyMessage=\"No players data available\"\n          idField=\"id\"\n          onExport={handleExport}\n          features={{\n            sorting: true,\n            filtering: {\n              enabled: true,\n              quickFilter: true,\n              advancedFilter: true\n            },\n            pagination: {\n              enabled: true,\n              defaultPageSize: pageSize,\n              pageSizeOptions: [10, 25, 50, 100]\n            },\n            columnManagement: {\n              enabled: true,\n              allowReordering: true,\n              allowHiding: true,\n              allowResizing: true\n            },\n            export: {\n              enabled: true,\n              formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n            }\n          }}\n          onRowClick={handleViewPlayerDetails}\n        />\n      </Paper>\n\n      {/* Player Details Dialog */}\n      <Dialog\n        open={playerDetailsOpen}\n        onClose={handleClosePlayerDetails}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Player Details\n        </DialogTitle>\n        <DialogContent dividers>\n          {selectedPlayer && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Basic Information\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <PersonIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Username:</strong> {selectedPlayer.username}\n                    </Typography>\n                  </Box>\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <EmailIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Email:</strong> {selectedPlayer.email}\n                    </Typography>\n                  </Box>\n\n                  {selectedPlayer.phoneNumber && (\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                      <PhoneIcon sx={{ mr: 1, color: 'primary.main' }} />\n                      <Typography variant=\"body1\">\n                        <strong>Phone:</strong> {selectedPlayer.phoneNumber}\n                      </Typography>\n                    </Box>\n                  )}\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <LocationOnIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Country:</strong> {selectedPlayer.country || 'N/A'}\n                    </Typography>\n                  </Box>\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <CalendarTodayIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Registration Date:</strong> {selectedPlayer.registrationDate ? formatDate(new Date(selectedPlayer.registrationDate), 'MMM dd, yyyy') : 'N/A'}\n                    </Typography>\n                  </Box>\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <CalendarTodayIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Last Login:</strong> {selectedPlayer.lastLoginDate ? formatDate(new Date(selectedPlayer.lastLoginDate), 'MMM dd, yyyy') : 'N/A'}\n                    </Typography>\n                  </Box>\n                </Box>\n\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Additional Information\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Status:</strong> {selectedPlayer.status || 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>White Label:</strong> {selectedPlayer.whiteLabel || 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Platform:</strong> {selectedPlayer.platform || 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Device:</strong> {selectedPlayer.device || 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>KYC Status:</strong> {selectedPlayer.kycStatus || 'N/A'}\n                  </Typography>\n                </Box>\n              </Grid>\n\n              <Grid item xs={12} md={6}>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Financial Information\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <AttachMoneyIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Balance:</strong> {formatCurrency(selectedPlayer.balance || 0)}\n                    </Typography>\n                  </Box>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Total Deposits:</strong> {formatCurrency(selectedPlayer.totalDeposits || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Total Withdrawals:</strong> {formatCurrency(selectedPlayer.totalWithdrawals || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Total Bets:</strong> {formatCurrency(selectedPlayer.totalBets || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Total Wins:</strong> {formatCurrency(selectedPlayer.totalWins || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Net Profit:</strong> {formatCurrency(selectedPlayer.netProfit || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Currency:</strong> {selectedPlayer.currency || 'USD'}\n                  </Typography>\n                </Box>\n\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Communication Preferences\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>SMS Enabled:</strong> {selectedPlayer.smsEnabled ? 'Yes' : 'No'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Email Enabled:</strong> {selectedPlayer.emailEnabled ? 'Yes' : 'No'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Phone Enabled:</strong> {selectedPlayer.phoneEnabled ? 'Yes' : 'No'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Bonus Eligible:</strong> {selectedPlayer.bonusEligible ? 'Yes' : 'No'}\n                  </Typography>\n                </Box>\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClosePlayerDetails}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}\n\nexport default PlayersPage;"],"names":["_ref","options","value","onChange","label","placeholder","disabled","required","error","helperText","maxMenuHeight","searchable","showSelectAllOption","renderValue","size","width","id","name","sx","className","style","loading","fullWidth","searchTerm","setSearchTerm","useState","filteredOptions","filter","option","toLowerCase","includes","_jsxs","FormControl","children","_jsx","InputLabel","Select","labelId","multiple","input","OutlinedInput","Typography","color","MenuItem","display","alignItems","padding","CircularProgress","marginRight","variant","FormHelperText","length","minWidth","event","newValue","target","selected","flexWrap","gap","map","selectedValue","find","opt","toString","Chip","onDelete","valueToRemove","preventDefault","stopPropagation","val","onClick","e","deleteIcon","ClearIcon","fontSize","onMouseDown","opacity","onClose","handleClose","HTMLElement","classList","contains","closest","MenuProps","PaperProps","maxHeight","position","top","backgroundColor","zIndex","borderBottom","TextField","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","paddingLeft","paddingRight","paddingTop","paddingBottom","justifyContent","Button","handleSelectAll","selectableOptions","handleSelectNone","Checkbox","checked","some","ListItemText","primary","secondary","group","description","Tooltip","title","arrow","InfoOutlinedIcon","marginLeft","PlayersPage","startDate","setStartDate","Date","setDate","getDate","endDate","setEndDate","selectedWhiteLabels","setSelectedWhiteLabels","selectedCountries","setSelectedCountries","selectedStatuses","setSelectedStatuses","showAdvancedFilters","setShowAdvancedFilters","advancedFilters","setAdvancedFilters","players","setPlayers","setLoading","setError","totalCount","setTotalCount","page","setPage","pageSize","setPageSize","sortBy","setSortBy","sortDirection","setSortDirection","whiteLabels","setWhiteLabels","countries","setCountries","statuses","setStatuses","whiteLabelsOptions","setWhiteLabelsOptions","countriesOptions","setCountriesOptions","statusesOptions","setStatusesOptions","selectedPlayer","setSelectedPlayer","playerDetailsOpen","setPlayerDetailsOpen","columns","type","sortable","format","row","status","dateFormat","lastLoginDate","formatDate","netProfit","fontWeight","formatCurrency","amount","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","useEffect","fetchMetadata","fetchPlayers","async","metadata","playersService","getMetadata","wl","countryObjects","Array","isArray","c","countryOptions","country","statusObjects","s","statusOptions","err","console","filters","whiteLabelIds","parseInt","undefined","countryIds","Object","keys","log","registration","registrationDate","firstTimeDeposit","firstDepositDate","lastDepositDate","lastLogin","trackers","promotionCode","playerIds","split","trim","regPlayMode","playModes","platform","platforms","gender","genders","currencies","smsEnabled","mailEnabled","phoneEnabled","postEnabled","bonusEnabled","params","response","getData","_response$meta","data","meta","handleAdvancedFilterChange","key","prev","handleClosePlayerDetails","summary","totalPlayers","activePlayers","p","totalBalance","reduce","sum","balance","totalDeposits","totalBets","totalNetProfit","Container","maxWidth","Box","mb","gutterBottom","component","RouterLink","to","startIcon","FilterListIcon","Paper","mr","handleToggleAdvancedFilters","endIcon","ExpandLessIcon","ExpandMoreIcon","Grid","container","spacing","item","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","slotProps","textField","MultiSelect","values","v","height","Collapse","in","timeout","unmountOnExit","mt","Divider","handleStatusesChange","multiline","rows","handleResetAdvancedFilters","RefreshIcon","handleApplyFilters","combinedFilters","sm","Card","CardContent","toLocaleString","TableChartIcon","Alert","severity","EnhancedTable","emptyMessage","idField","onExport","exportData","formatStr","ExportFormat","CSV","EXCEL","PDF","blob","JSON","headers","col","join","csvContent","stringify","replace","String","Blob","jsonContent","exportReport","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","features","sorting","filtering","enabled","quickFilter","advancedFilter","pagination","defaultPageSize","pageSizeOptions","columnManagement","allowReordering","allowHiding","allowResizing","export","formats","onRowClick","player","Dialog","open","DialogTitle","DialogContent","dividers","my","PersonIcon","username","EmailIcon","email","phoneNumber","PhoneIcon","LocationOnIcon","CalendarTodayIcon","whiteLabel","device","kycStatus","AttachMoneyIcon","totalWithdrawals","totalWins","emailEnabled","bonusEligible","DialogActions"],"sourceRoot":""}