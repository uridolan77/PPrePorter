{"version":3,"file":"static/js/186.6504fcae.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/CalendarToday.js","../node_modules/@mui/icons-material/AttachMoney.js","../node_modules/@mui/icons-material/Phone.js","../node_modules/@mui/icons-material/LocationOn.js","pages/showcase/reports/PlayersPage.tsx","../node_modules/@mui/icons-material/Email.js"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 18H4V8h16z\"\n}), 'CalendarToday');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4\"\n}), 'AttachMoney');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02z\"\n}), 'Phone');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7m0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5\"\n}), 'LocationOn');","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Collapse\n} from '@mui/material';\nimport { EnhancedTable } from '../../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../../components/tables/enhanced/types';\nimport MultiSelect, { MultiSelectOption } from '../../../components/common/MultiSelect';\nimport { format as formatDate } from 'date-fns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { Player } from '../../../types/players';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\n\n// Import services\nimport playersService from '../../../services/api/playersService';\nimport { ReportFilters } from '../../../services/api/types';\n\n// Define interfaces\ninterface Filters {\n  startDate: string;\n  endDate: string;\n  whiteLabelIds?: number[];\n  countryIds?: string[];\n  statusIds?: string[];\n\n  // Advanced filters - Date filters\n  registrationDate?: string;\n  firstDepositDate?: string;\n  lastDepositDate?: string;\n  lastLoginDate?: string;\n\n  // Advanced filters - String filters\n  trackers?: string;\n  promotionCode?: string;\n  playerIds?: string[];\n\n  // Advanced filters - Array filters\n  playModes?: string[];\n  platforms?: string[];\n  statuses?: string[];\n  genders?: string[];\n  currencies?: string[];\n\n  // Advanced filters - Boolean filters\n  smsEnabled?: boolean;\n  mailEnabled?: boolean;\n  phoneEnabled?: boolean;\n  postEnabled?: boolean;\n  bonusEnabled?: boolean;\n}\n\n// Define interfaces for metadata\ninterface WhiteLabel {\n  id: string;\n  name: string;\n}\n\ninterface Country {\n  id: string;\n  name: string;\n}\n\ninterface Status {\n  id: string;\n  name: string;\n}\n\n// Define custom PlayerMetadata interface for our component\ninterface PlayersMetadata {\n  whiteLabels: WhiteLabel[];\n  countries: Country[];\n  statuses: Status[];\n  vipLevels?: string[];\n  kycStatuses?: string[];\n  tags?: string[];\n}\n\n/**\n * PlayersPage component\n * Displays a comprehensive player report with filtering and data visualization\n */\nconst PlayersPage: React.FC = () => {\n  // State for filters\n  const [startDate, setStartDate] = useState<Date>(new Date(new Date().setDate(new Date().getDate() - 30)));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [selectedWhiteLabels, setSelectedWhiteLabels] = useState<string[]>([]);\n  const [selectedCountries, setSelectedCountries] = useState<string[]>([]);\n  const [selectedStatuses, setSelectedStatuses] = useState<string[]>([]);\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState<boolean>(false);\n  const [advancedFilters, setAdvancedFilters] = useState<Record<string, any>>({});\n\n  // State for data\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState<number>(0);\n  const [page, setPage] = useState<number>(0);\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [sortBy, setSortBy] = useState<string>('registrationDate');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n\n  // State for metadata\n  const [whiteLabels, setWhiteLabels] = useState<WhiteLabel[]>([]);\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [statuses, setStatuses] = useState<Status[]>([]);\n  const [whiteLabelsOptions, setWhiteLabelsOptions] = useState<MultiSelectOption[]>([]);\n  const [countriesOptions, setCountriesOptions] = useState<MultiSelectOption[]>([]);\n  const [statusesOptions, setStatusesOptions] = useState<MultiSelectOption[]>([]);\n\n  // State for player details dialog\n  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);\n  const [playerDetailsOpen, setPlayerDetailsOpen] = useState<boolean>(false);\n\n  // Define table columns\n  const columns: ColumnDef[] = [\n    {\n      id: 'username',\n      label: 'Username',\n      type: 'text',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'email',\n      label: 'Email',\n      type: 'text',\n      sortable: true,\n      width: 200,\n    },\n    {\n      id: 'country',\n      label: 'Country',\n      type: 'text',\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'status',\n      label: 'Status',\n      format: (value, row: Player) => (\n        <Chip\n          label={row.status}\n          size=\"small\"\n          color={\n            row.status === 'Active' ? 'success' :\n            row.status === 'Inactive' ? 'default' :\n            row.status === 'Blocked' ? 'error' :\n            'primary'\n          }\n        />\n      ),\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'registrationDate',\n      label: 'Registration Date',\n      type: 'date',\n      dateFormat: 'medium',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'lastLoginDate',\n      label: 'Last Login',\n      format: (value, row: Player) => row.lastLoginDate ? formatDate(new Date(row.lastLoginDate), 'MMM dd, yyyy') : '-',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'balance',\n      label: 'Balance',\n      type: 'currency',\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'totalDeposits',\n      label: 'Total Deposits',\n      type: 'currency',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'totalBets',\n      label: 'Total Bets',\n      type: 'currency',\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'netProfit',\n      label: 'Net Profit',\n      format: (value, row: Player) => {\n        const netProfit = row.netProfit || 0;\n        return (\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: netProfit >= 0 ? 'success.main' : 'error.main',\n              fontWeight: 'medium'\n            }}\n          >\n            {formatCurrency(netProfit)}\n          </Typography>\n        );\n      },\n      sortable: true,\n      width: 120,\n    }\n  ];\n\n  // Helper function to format currency\n  const formatCurrency = (amount: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(amount);\n  };\n\n  // Fetch metadata on component mount\n  useEffect(() => {\n    fetchMetadata();\n  }, []);\n\n  // Fetch players data when filters change\n  useEffect(() => {\n    fetchPlayers();\n  }, [page, pageSize, sortBy, sortDirection]);\n\n  // Fetch metadata (white labels, countries, statuses)\n  const fetchMetadata = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch metadata from API\n      const metadata = await playersService.getMetadata();\n\n      // Set white labels\n      if (metadata.whiteLabels) {\n        setWhiteLabels(metadata.whiteLabels);\n\n        // Convert white labels to MultiSelect options\n        const options = metadata.whiteLabels.map((wl: WhiteLabel) => ({\n          value: wl.id,\n          label: wl.name\n        }));\n        setWhiteLabelsOptions(options);\n      }\n\n      // Set countries\n      if (metadata.countries) {\n        const countryObjects = Array.isArray(metadata.countries)\n          ? metadata.countries.map(c => typeof c === 'string' ? { id: c, name: c } : c)\n          : [];\n\n        setCountries(countryObjects);\n\n        // Convert countries to MultiSelect options\n        const countryOptions = countryObjects.map((country: Country) => ({\n          value: country.id,\n          label: country.name\n        }));\n        setCountriesOptions(countryOptions);\n      }\n\n      // Set statuses\n      if (metadata.statuses) {\n        const statusObjects = Array.isArray(metadata.statuses)\n          ? metadata.statuses.map(s => typeof s === 'string' ? { id: s, name: s } : s)\n          : [];\n\n        setStatuses(statusObjects);\n\n        // Convert statuses to MultiSelect options\n        const statusOptions = statusObjects.map((status: Status) => ({\n          value: status.id,\n          label: status.name\n        }));\n        setStatusesOptions(statusOptions);\n      }\n    } catch (err) {\n      console.error('[PLAYERS PAGE] Error fetching metadata:', err);\n      setError('Failed to load metadata. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch players data\n  const fetchPlayers = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Create filters object\n      const filters: ReportFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => parseInt(id)) : undefined,\n        countryIds: selectedCountries.length > 0 ? selectedCountries : undefined,\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[PLAYERS PAGE] Adding advanced filters:', advancedFilters);\n\n        // Process date filters\n        if (advancedFilters.registration) {\n          filters.registrationDate = formatDate(advancedFilters.registration, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.firstTimeDeposit) {\n          filters.firstDepositDate = formatDate(advancedFilters.firstTimeDeposit, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastDepositDate) {\n          filters.lastDepositDate = formatDate(advancedFilters.lastDepositDate, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastLogin) {\n          filters.lastLoginDate = formatDate(advancedFilters.lastLogin, 'yyyy-MM-dd');\n        }\n\n        // Process string filters\n        if (advancedFilters.trackers) {\n          filters.trackers = advancedFilters.trackers;\n        }\n        if (advancedFilters.promotionCode) {\n          filters.promotionCode = advancedFilters.promotionCode;\n        }\n        if (advancedFilters.players) {\n          filters.playerIds = advancedFilters.players.split(',').map((id: string) => id.trim());\n        }\n\n        // Process array filters\n        if (advancedFilters.regPlayMode && advancedFilters.regPlayMode.length > 0) {\n          filters.playModes = advancedFilters.regPlayMode;\n        }\n        if (advancedFilters.platform && advancedFilters.platform.length > 0) {\n          filters.platforms = advancedFilters.platform;\n        }\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          filters.statuses = advancedFilters.status;\n        }\n        if (advancedFilters.gender && advancedFilters.gender.length > 0) {\n          filters.genders = advancedFilters.gender;\n        }\n        if (advancedFilters.currency && advancedFilters.currency.length > 0) {\n          filters.currencies = advancedFilters.currency;\n        }\n\n        // Process boolean filters\n        if (advancedFilters.smsEnabled) {\n          filters.smsEnabled = advancedFilters.smsEnabled === 'Yes';\n        }\n        if (advancedFilters.mailEnabled) {\n          filters.mailEnabled = advancedFilters.mailEnabled === 'Yes';\n        }\n        if (advancedFilters.phoneEnabled) {\n          filters.phoneEnabled = advancedFilters.phoneEnabled === 'Yes';\n        }\n        if (advancedFilters.postEnabled) {\n          filters.postEnabled = advancedFilters.postEnabled === 'Yes';\n        }\n        if (advancedFilters.bonusEnabled) {\n          filters.bonusEnabled = advancedFilters.bonusEnabled === 'Yes';\n        }\n      }\n\n      // Add pagination and sorting\n      const params = {\n        page: page + 1, // API uses 1-based indexing\n        pageSize,\n        sortBy,\n        sortDirection\n      };\n\n      // Fetch players data from API\n      const response = await playersService.getData({ ...filters, ...params });\n\n      if (response && response.data) {\n        setPlayers(response.data);\n        setTotalCount(response.meta?.totalCount || response.data.length);\n      } else {\n        setPlayers([]);\n        setTotalCount(0);\n      }\n    } catch (err) {\n      console.error('[PLAYERS PAGE] Error fetching players data:', err);\n      setError('Failed to load players data. Please try again later.');\n      setPlayers([]);\n      setTotalCount(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = (): void => {\n    console.log('[PLAYERS PAGE] Apply filters button clicked');\n\n    // Combine basic filters with advanced filters if they exist\n    const combinedFilters = {\n      startDate: formatDate(startDate, 'yyyy-MM-dd'),\n      endDate: formatDate(endDate, 'yyyy-MM-dd'),\n      selectedWhiteLabels,\n      selectedCountries,\n      selectedStatuses,\n      ...advancedFilters\n    };\n\n    console.log('[PLAYERS PAGE] Current filters:', combinedFilters);\n\n    // Reset pagination\n    setPage(0);\n\n    fetchPlayers();\n  };\n\n  // Handle white labels change\n  const handleWhiteLabelsChange = (values: (string | number)[]): void => {\n    setSelectedWhiteLabels(values.map(v => v.toString()));\n  };\n\n  // Handle countries change\n  const handleCountriesChange = (values: (string | number)[]): void => {\n    setSelectedCountries(values.map(v => v.toString()));\n  };\n\n  // Handle statuses change\n  const handleStatusesChange = (values: (string | number)[]): void => {\n    setSelectedStatuses(values.map(v => v.toString()));\n  };\n\n  // Handle advanced filter change\n  const handleAdvancedFilterChange = (key: string, value: any): void => {\n    setAdvancedFilters(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  // Handle reset advanced filters\n  const handleResetAdvancedFilters = (): void => {\n    setAdvancedFilters({});\n  };\n\n  // Handle toggle advanced filters\n  const handleToggleAdvancedFilters = (): void => {\n    setShowAdvancedFilters(!showAdvancedFilters);\n  };\n\n  // Handle view player details\n  const handleViewPlayerDetails = (player: Player): void => {\n    setSelectedPlayer(player);\n    setPlayerDetailsOpen(true);\n  };\n\n  // Handle close player details dialog\n  const handleClosePlayerDetails = (): void => {\n    setPlayerDetailsOpen(false);\n    setSelectedPlayer(null);\n  };\n\n  // Handle export\n  const handleExport = async (format: ExportFormat, exportData: any[]): Promise<void> => {\n    try {\n      setLoading(true);\n\n      // Convert format to string for API\n      const formatStr = format === ExportFormat.CSV ? 'csv' :\n                        format === ExportFormat.EXCEL ? 'xlsx' :\n                        format === ExportFormat.PDF ? 'pdf' : 'csv';\n\n      // Create filters object\n      const filters: ReportFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => parseInt(id)) : undefined,\n        countryIds: selectedCountries.length > 0 ? selectedCountries : undefined,\n        format: formatStr\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[PLAYERS PAGE] Adding advanced filters to export:', advancedFilters);\n\n        // Process date filters\n        if (advancedFilters.registration) {\n          filters.registrationDate = formatDate(advancedFilters.registration, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.firstTimeDeposit) {\n          filters.firstDepositDate = formatDate(advancedFilters.firstTimeDeposit, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastDepositDate) {\n          filters.lastDepositDate = formatDate(advancedFilters.lastDepositDate, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastLogin) {\n          filters.lastLoginDate = formatDate(advancedFilters.lastLogin, 'yyyy-MM-dd');\n        }\n\n        // Process string filters\n        if (advancedFilters.trackers) {\n          filters.trackers = advancedFilters.trackers;\n        }\n        if (advancedFilters.promotionCode) {\n          filters.promotionCode = advancedFilters.promotionCode;\n        }\n        if (advancedFilters.players) {\n          filters.playerIds = advancedFilters.players.split(',').map((id: string) => id.trim());\n        }\n\n        // Process array filters\n        if (advancedFilters.regPlayMode && advancedFilters.regPlayMode.length > 0) {\n          filters.playModes = advancedFilters.regPlayMode;\n        }\n        if (advancedFilters.platform && advancedFilters.platform.length > 0) {\n          filters.platforms = advancedFilters.platform;\n        }\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          filters.statuses = advancedFilters.status;\n        }\n        if (advancedFilters.gender && advancedFilters.gender.length > 0) {\n          filters.genders = advancedFilters.gender;\n        }\n        if (advancedFilters.currency && advancedFilters.currency.length > 0) {\n          filters.currencies = advancedFilters.currency;\n        }\n\n        // Process boolean filters\n        if (advancedFilters.smsEnabled) {\n          filters.smsEnabled = advancedFilters.smsEnabled === 'Yes';\n        }\n        if (advancedFilters.mailEnabled) {\n          filters.mailEnabled = advancedFilters.mailEnabled === 'Yes';\n        }\n        if (advancedFilters.phoneEnabled) {\n          filters.phoneEnabled = advancedFilters.phoneEnabled === 'Yes';\n        }\n        if (advancedFilters.postEnabled) {\n          filters.postEnabled = advancedFilters.postEnabled === 'Yes';\n        }\n        if (advancedFilters.bonusEnabled) {\n          filters.bonusEnabled = advancedFilters.bonusEnabled === 'Yes';\n        }\n      }\n\n      // If we have the data already, we can use it directly instead of making an API call\n      let blob;\n\n      if (exportData.length > 0 && (format === ExportFormat.CSV || format === ExportFormat.JSON)) {\n        // Client-side export for CSV and JSON\n        if (format === ExportFormat.CSV) {\n          // Create CSV content\n          const headers = columns.map(col => col.label || col.id).join(',');\n          const rows = exportData.map(row =>\n            columns.map(col => {\n              const value = row[col.id];\n              // Handle special cases like objects, arrays, etc.\n              if (typeof value === 'object' && value !== null) {\n                return JSON.stringify(value).replace(/\"/g, '\"\"');\n              }\n              return value !== undefined && value !== null ? String(value).replace(/\"/g, '\"\"') : '';\n            }).join(',')\n          ).join('\\n');\n\n          const csvContent = `${headers}\\n${rows}`;\n          blob = new Blob([csvContent], { type: 'text/csv' });\n        } else if (format === ExportFormat.JSON) {\n          // Create JSON content\n          const jsonContent = JSON.stringify(exportData, null, 2);\n          blob = new Blob([jsonContent], { type: 'application/json' });\n        }\n      } else {\n        // Server-side export for other formats or when we need to process all data\n        blob = await playersService.exportReport(filters, formatStr);\n      }\n\n      // Create download link\n      if (blob) {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `players-report-${formatDate(new Date(), 'yyyy-MM-dd')}.${formatStr}`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }\n    } catch (err) {\n      console.error('[PLAYERS PAGE] Error exporting data:', err);\n      setError('Failed to export data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle pagination change\n  const handlePageChange = (newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle page size change\n  const handlePageSizeChange = (newPageSize: number): void => {\n    setPageSize(newPageSize);\n    setPage(0); // Reset to first page when changing page size\n  };\n\n  // Handle sorting change\n  const handleSortingChange = (field: string, direction: 'asc' | 'desc'): void => {\n    setSortBy(field);\n    setSortDirection(direction);\n  };\n\n  // Calculate summary statistics\n  const summary = {\n    totalPlayers: players.length,\n    activePlayers: players.filter(p => p.status === 'Active').length,\n    totalBalance: players.reduce((sum, p) => sum + (p.balance || 0), 0),\n    totalDeposits: players.reduce((sum, p) => sum + (p.totalDeposits || 0), 0),\n    totalBets: players.reduce((sum, p) => sum + (p.totalBets || 0), 0),\n    totalNetProfit: players.reduce((sum, p) => sum + (p.netProfit || 0), 0)\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom>\n            Players Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze player data, activity, and performance metrics\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={RouterLink}\n          to=\"/reports/players/advanced\"\n          startIcon={<FilterListIcon />}\n        >\n          Advanced Report\n        </Button>\n      </Box>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <FilterListIcon sx={{ mr: 1 }} />\n            <Typography variant=\"h6\">Filters</Typography>\n          </Box>\n          <Button\n            color=\"primary\"\n            onClick={handleToggleAdvancedFilters}\n            endIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          >\n            {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n          </Button>\n        </Box>\n\n        {/* Basic Filters */}\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"White Labels\"\n              options={whiteLabelsOptions}\n              value={selectedWhiteLabels}\n              onChange={handleWhiteLabelsChange}\n              placeholder=\"Select White Labels\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Countries\"\n              options={countriesOptions}\n              value={selectedCountries}\n              onChange={handleCountriesChange}\n              placeholder=\"Select Countries\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        {/* Advanced Filters */}\n        <Collapse in={showAdvancedFilters} timeout=\"auto\" unmountOnExit>\n          <Box sx={{ mt: 3 }}>\n            <Divider sx={{ mb: 3 }} />\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n\n            <Grid container spacing={3}>\n              {/* Player Information */}\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Player Information\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Trackers\"\n                  fullWidth\n                  value={advancedFilters.trackers || ''}\n                  onChange={(e) => handleAdvancedFilterChange('trackers', e.target.value)}\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Promotion Code\"\n                  fullWidth\n                  value={advancedFilters.promotionCode || ''}\n                  onChange={(e) => handleAdvancedFilterChange('promotionCode', e.target.value)}\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Status</InputLabel>\n                  <Select\n                    multiple\n                    value={selectedStatuses}\n                    onChange={(e) => handleStatusesChange(e.target.value as string[])}\n                    label=\"Status\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {statusesOptions.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Platform</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.platform || []}\n                    onChange={(e) => handleAdvancedFilterChange('platform', e.target.value)}\n                    label=\"Platform\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['Mobile', 'Web'].map((platform) => (\n                      <MenuItem key={platform} value={platform}>\n                        {platform}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Date Filters */}\n              <Grid item xs={12} sx={{ mt: 2 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Date Filters\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Registration Date\"\n                    value={advancedFilters.registration || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('registration', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"First Time Deposit\"\n                    value={advancedFilters.firstTimeDeposit || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('firstTimeDeposit', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Last Deposit Date\"\n                    value={advancedFilters.lastDepositDate || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('lastDepositDate', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Last Login\"\n                    value={advancedFilters.lastLogin || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('lastLogin', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              {/* Players Input */}\n              <Grid item xs={12} sx={{ mt: 2 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Specific Players\n                </Typography>\n                <TextField\n                  label=\"Players\"\n                  placeholder=\"Enter player IDs or usernames (comma separated)\"\n                  fullWidth\n                  multiline\n                  rows={3}\n                  value={advancedFilters.players || ''}\n                  onChange={(e) => handleAdvancedFilterChange('players', e.target.value)}\n                  helperText=\"Enter multiple player IDs or usernames separated by commas\"\n                />\n              </Grid>\n            </Grid>\n\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleResetAdvancedFilters}\n                sx={{ mr: 2 }}\n              >\n                Reset Advanced Filters\n              </Button>\n            </Box>\n          </Box>\n        </Collapse>\n\n        {/* Action Buttons */}\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', mt: 3 }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<RefreshIcon />}\n            onClick={handleApplyFilters}\n          >\n            Apply Filters\n          </Button>\n        </Box>\n      </Paper>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Players\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalPlayers.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Active Players\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.activePlayers.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Balance\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalBalance)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Deposits\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalDeposits)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Bets\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalBets)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Net Profit\n              </Typography>\n              <Typography variant=\"h5\" sx={{ color: summary.totalNetProfit >= 0 ? 'success.main' : 'error.main' }}>\n                {formatCurrency(summary.totalNetProfit)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Data Table */}\n      <Paper sx={{ p: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <TableChartIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Players Data</Typography>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        <EnhancedTable\n          columns={columns}\n          data={players}\n          loading={loading}\n          title=\"Players Data\"\n          emptyMessage=\"No players data available\"\n          idField=\"id\"\n          onExport={handleExport}\n          features={{\n            sorting: true,\n            filtering: {\n              enabled: true,\n              quickFilter: true,\n              advancedFilter: true\n            },\n            pagination: {\n              enabled: true,\n              defaultPageSize: pageSize,\n              pageSizeOptions: [10, 25, 50, 100]\n            },\n            columnManagement: {\n              enabled: true,\n              allowReordering: true,\n              allowHiding: true,\n              allowResizing: true\n            },\n            export: {\n              enabled: true,\n              formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n            }\n          }}\n          onRowClick={handleViewPlayerDetails}\n        />\n      </Paper>\n\n      {/* Player Details Dialog */}\n      <Dialog\n        open={playerDetailsOpen}\n        onClose={handleClosePlayerDetails}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Player Details\n        </DialogTitle>\n        <DialogContent dividers>\n          {selectedPlayer && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Basic Information\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <PersonIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Username:</strong> {selectedPlayer.username}\n                    </Typography>\n                  </Box>\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <EmailIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Email:</strong> {selectedPlayer.email}\n                    </Typography>\n                  </Box>\n\n                  {selectedPlayer.phoneNumber && (\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                      <PhoneIcon sx={{ mr: 1, color: 'primary.main' }} />\n                      <Typography variant=\"body1\">\n                        <strong>Phone:</strong> {selectedPlayer.phoneNumber}\n                      </Typography>\n                    </Box>\n                  )}\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <LocationOnIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Country:</strong> {selectedPlayer.country || 'N/A'}\n                    </Typography>\n                  </Box>\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <CalendarTodayIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Registration Date:</strong> {selectedPlayer.registrationDate ? formatDate(new Date(selectedPlayer.registrationDate), 'MMM dd, yyyy') : 'N/A'}\n                    </Typography>\n                  </Box>\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <CalendarTodayIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Last Login:</strong> {selectedPlayer.lastLoginDate ? formatDate(new Date(selectedPlayer.lastLoginDate), 'MMM dd, yyyy') : 'N/A'}\n                    </Typography>\n                  </Box>\n                </Box>\n\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Additional Information\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Status:</strong> {selectedPlayer.status || 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>White Label:</strong> {selectedPlayer.whiteLabel || 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Platform:</strong> {selectedPlayer.platform || 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Device:</strong> {selectedPlayer.device || 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>KYC Status:</strong> {selectedPlayer.kycStatus || 'N/A'}\n                  </Typography>\n                </Box>\n              </Grid>\n\n              <Grid item xs={12} md={6}>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Financial Information\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <AttachMoneyIcon sx={{ mr: 1, color: 'primary.main' }} />\n                    <Typography variant=\"body1\">\n                      <strong>Balance:</strong> {formatCurrency(selectedPlayer.balance || 0)}\n                    </Typography>\n                  </Box>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Total Deposits:</strong> {formatCurrency(selectedPlayer.totalDeposits || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Total Withdrawals:</strong> {formatCurrency(selectedPlayer.totalWithdrawals || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Total Bets:</strong> {formatCurrency(selectedPlayer.totalBets || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Total Wins:</strong> {formatCurrency(selectedPlayer.totalWins || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Net Profit:</strong> {formatCurrency(selectedPlayer.netProfit || 0)}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Currency:</strong> {selectedPlayer.currency || 'USD'}\n                  </Typography>\n                </Box>\n\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Communication Preferences\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>SMS Enabled:</strong> {selectedPlayer.smsEnabled ? 'Yes' : 'No'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Email Enabled:</strong> {selectedPlayer.emailEnabled ? 'Yes' : 'No'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Phone Enabled:</strong> {selectedPlayer.phoneEnabled ? 'Yes' : 'No'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Bonus Eligible:</strong> {selectedPlayer.bonusEligible ? 'Yes' : 'No'}\n                  </Typography>\n                </Box>\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClosePlayerDetails}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}\n\nexport default PlayersPage;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m0 4-8 5-8-5V6l8 5 8-5z\"\n}), 'Email');"],"names":["_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d","PlayersPage","startDate","setStartDate","useState","Date","setDate","getDate","endDate","setEndDate","selectedWhiteLabels","setSelectedWhiteLabels","selectedCountries","setSelectedCountries","selectedStatuses","setSelectedStatuses","showAdvancedFilters","setShowAdvancedFilters","advancedFilters","setAdvancedFilters","players","setPlayers","loading","setLoading","error","setError","totalCount","setTotalCount","page","setPage","pageSize","setPageSize","sortBy","setSortBy","sortDirection","setSortDirection","whiteLabels","setWhiteLabels","countries","setCountries","statuses","setStatuses","whiteLabelsOptions","setWhiteLabelsOptions","countriesOptions","setCountriesOptions","statusesOptions","setStatusesOptions","selectedPlayer","setSelectedPlayer","playerDetailsOpen","setPlayerDetailsOpen","columns","id","label","type","sortable","width","format","value","row","_jsx","Chip","status","size","color","dateFormat","lastLoginDate","formatDate","netProfit","Typography","variant","sx","fontWeight","children","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","useEffect","fetchMetadata","fetchPlayers","async","metadata","playersService","getMetadata","options","map","wl","name","countryObjects","Array","isArray","c","countryOptions","country","statusObjects","s","statusOptions","err","console","filters","whiteLabelIds","length","parseInt","undefined","countryIds","Object","keys","log","registration","registrationDate","firstTimeDeposit","firstDepositDate","lastDepositDate","lastLogin","trackers","promotionCode","playerIds","split","trim","regPlayMode","playModes","platform","platforms","gender","genders","currencies","smsEnabled","mailEnabled","phoneEnabled","postEnabled","bonusEnabled","params","response","getData","_response$meta","data","meta","handleAdvancedFilterChange","key","prev","handleClosePlayerDetails","summary","totalPlayers","activePlayers","filter","p","totalBalance","reduce","sum","balance","totalDeposits","totalBets","totalNetProfit","_jsxs","Container","maxWidth","Box","mb","display","justifyContent","alignItems","gutterBottom","Button","component","RouterLink","to","startIcon","FilterListIcon","Paper","mr","onClick","handleToggleAdvancedFilters","endIcon","ExpandLessIcon","ExpandMoreIcon","Grid","container","spacing","item","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","onChange","newValue","slotProps","textField","fullWidth","MultiSelect","values","v","toString","placeholder","searchable","showSelectAllOption","height","Collapse","in","timeout","unmountOnExit","mt","Divider","TextField","e","target","FormControl","InputLabel","Select","multiple","handleStatusesChange","renderValue","selected","flexWrap","gap","option","MenuItem","multiline","rows","helperText","handleResetAdvancedFilters","RefreshIcon","handleApplyFilters","combinedFilters","sm","Card","CardContent","toLocaleString","TableChartIcon","Alert","severity","EnhancedTable","title","emptyMessage","idField","onExport","exportData","formatStr","ExportFormat","CSV","EXCEL","PDF","blob","JSON","headers","col","join","csvContent","stringify","replace","String","Blob","jsonContent","exportReport","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","features","sorting","filtering","enabled","quickFilter","advancedFilter","pagination","defaultPageSize","pageSizeOptions","columnManagement","allowReordering","allowHiding","allowResizing","export","formats","onRowClick","player","Dialog","open","onClose","DialogTitle","DialogContent","dividers","my","PersonIcon","username","EmailIcon","email","phoneNumber","PhoneIcon","LocationOnIcon","CalendarTodayIcon","whiteLabel","device","kycStatus","AttachMoneyIcon","totalWithdrawals","totalWins","emailEnabled","bonusEligible","DialogActions"],"sourceRoot":""}