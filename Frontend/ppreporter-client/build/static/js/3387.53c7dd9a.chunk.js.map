{"version":3,"file":"static/js/3387.53c7dd9a.chunk.js","mappings":"ufAmCA,MAkNA,EAlN8DA,IAOvD,IAPwD,cAC7DC,EAAgB,GAAE,QAClBC,GAAU,EAAK,aACfC,EAAY,gBACZC,EAAe,SACfC,EAAQ,qBACRC,GACDN,EACC,MAAOO,EAAUC,IAAeC,EAAAA,EAAAA,UAA6B,OACtDC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAiB,IAEvDG,EAAAA,EAAAA,YAAU,KAER,MAAMC,EAAQZ,EAAca,QAAOC,IAAiBA,EAAaC,SAAQC,OACzEN,EAAeE,EAAM,GACpB,CAACZ,IAEJ,MAOMiB,EAA2BA,KAC/BV,EAAY,KAAK,EAmCbW,EAAuBC,IAC3B,OAAQA,GACN,IAAK,UACH,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,EAAsB,CAACC,MAAM,YACvC,IAAK,QACH,OAAOF,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACD,MAAM,UACjC,IAAK,UACH,OAAOF,EAAAA,EAAAA,KAACI,EAAAA,EAAgB,CAACF,MAAM,YAEjC,QACE,OAAOF,EAAAA,EAAAA,KAACK,EAAAA,EAAgB,CAACH,MAAM,SACnC,EAQII,EAAOC,QAAQrB,GACfsB,EAAKF,EAAO,4BAAyBG,EAE3C,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEZ,EAAAA,EAAAA,KAACa,EAAAA,EAAO,CAACC,MAAM,gBAAeF,UAC5BZ,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CACTb,MAAM,UACNc,QAtEyBC,IAC/B9B,EAAY8B,EAAMC,eACdjC,GACFA,GACF,EAmEM,mBAAkBuB,EAAGI,UAErBZ,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACC,aAAc/B,EAAaa,MAAM,QAAOU,UAC7CZ,EAAAA,EAAAA,KAACqB,EAAAA,EAAiB,WAKxBX,EAAAA,EAAAA,MAACY,EAAAA,GAAO,CACNd,GAAIA,EACJF,KAAMA,EACNpB,SAAUA,EACVqC,QAAS1B,EACT2B,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,SAEdE,WAAY,CACVC,GAAI,CAAEC,MAAO,IAAKC,UAAW,MAC7BnB,SAAA,EAEFF,EAAAA,EAAAA,MAACsB,EAAAA,EAAG,CAACH,GAAI,CAAEI,EAAG,EAAGC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,UAAWxB,SAAA,EACxFZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,KAAI1B,SAAC,kBAExBvB,EAAc,IACbW,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CACLC,KAAK,QACLxB,QAzEgByB,KACtB1D,GACFA,GACF,EAuEU2D,WAAW1C,EAAAA,EAAAA,KAACC,EAAAA,EAAsB,IAAIW,SACvC,yBAMLZ,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,IAEP9D,GACCmB,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEK,QAAS,OAAQC,eAAgB,SAAUF,EAAG,GAAIrB,UAC3DZ,EAAAA,EAAAA,KAAC4C,EAAAA,EAAgB,CAACJ,KAAM,OAEC,IAAzB5D,EAAcgB,QAChBI,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEI,EAAG,EAAGY,UAAW,UAAWjC,UACrCZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,QAAQpC,MAAM,iBAAgBU,SAAC,wBAKrDZ,EAAAA,EAAAA,KAAC8C,EAAAA,EAAI,CAACjB,GAAI,CAAEI,EAAG,GAAIrB,SAChBhC,EAAcmE,KAAKrD,IAClBgB,SAAAA,EAAAA,MAACsC,EAAAA,SAAc,CAAApC,SAAA,EACbF,EAAAA,EAAAA,MAACuC,EAAAA,GAAQ,CACPC,QAAM,EACNlC,QAASA,IArHQtB,MAE1BA,EAAaC,QAAUb,GAC1BA,EAAaY,EAAac,IAIxBd,EAAayD,MAIfC,QAAQC,IAAI,qBAAsB3D,EAAayD,MAIjDtD,GAA0B,EAsGGyD,CAAwB5D,GACvC0C,WAAW,aACXP,GAAI,CACF0B,QAAS7D,EAAaC,OAAS,UAAY,eAC3C,UAAW,CACT4D,QAAS,oBAEX3C,SAAA,EAEFZ,EAAAA,EAAAA,KAACwD,EAAAA,EAAY,CAAC3B,GAAI,CAAE4B,SAAU,IAAK7C,SAChCd,EAAoBJ,EAAaK,SAGpCC,EAAAA,EAAAA,KAAC0D,EAAAA,EAAY,CACXC,SACE3D,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CACTC,QAAQ,YACRT,GAAI,CACF+B,WAAYlE,EAAaC,OAAS,SAAW,OAC7CkE,GAAI,GACJjD,SAEDlB,EAAaoB,QAGlBgD,WACEpD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,QAAQyB,UAAU,OAAO7D,MAAM,iBAAgBU,SAChElB,EAAasE,WAEhBhE,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,UAAUJ,QAAQ,QAAQhC,MAAM,iBAAiB2B,GAAI,CAAEoC,GAAI,IAAMrD,UApGpFsD,EAqGgBxE,EAAayE,WApG3CC,EAAAA,EAAAA,GAAoB,IAAIC,KAAKH,GAAO,CAAEI,WAAW,aA0G1CtE,EAAAA,EAAAA,KAACuE,EAAAA,EAAuB,CAAA3D,UACtBZ,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CACTyD,KAAK,MACLhC,KAAK,QACLxB,QAAUC,GAtITwD,EAACxD,EAAmBvB,KACvCuB,EAAMyD,kBACF1F,GACFA,EAASU,EAAac,GACxB,EAkIsCiE,CAAaxD,EAAOvB,GAAckB,UAEtDZ,EAAAA,EAAAA,KAAC2E,EAAAA,EAAiB,CAACC,SAAS,kBAIlC5E,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,CAACoB,UAAU,SAlDArE,EAAac,IAnEvB0D,KAuHZ,MAIJtF,EAAcgB,OAAS,IACtBI,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEI,EAAG,EAAGC,QAAS,OAAQC,eAAgB,UAAWvB,UAC3DZ,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CAACC,KAAK,QAAQqC,KAAK,iBAAgBjE,SAAC,kCAMhD,ECrNDkE,EAAoC,CACxC,CACEtE,GAAI,IACJM,MAAO,uBACPkD,QAAS,qDACTjE,KAAM,OACNoE,UAAW,IAAIE,KAAKA,KAAKU,MAAQ,KAAeC,cAChDrF,QAAQ,EACRwD,KAAM,2BAER,CACE3C,GAAI,IACJM,MAAO,gBACPkD,QAAS,wEACTjE,KAAM,UACNoE,UAAW,IAAIE,KAAKA,KAAKU,MAAQ,MAAgBC,cACjDrF,QAAQ,EACRwD,KAAM,gCAER,CACE3C,GAAI,IACJM,MAAO,0BACPkD,QAAS,6DACTjE,KAAM,QACNoE,UAAW,IAAIE,KAAKA,KAAKU,MAAQ,MAAoBC,cACrDrF,QAAQ,EACRwD,KAAM,6BAKJ8B,EAAsB,CAC1B,CACEzE,GAAI,gBACJ0E,KAAM,0BACNC,WAAY,CACV,CACE3E,GAAI,qBACJ0E,KAAM,sBACNE,YAAa,2DACbrB,WACErD,EAAAA,EAAAA,MAAC2E,EAAAA,EAAK,CAACxD,GAAI,CAAEI,EAAG,GAAIrB,SAAA,EAClBZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,KAAKgD,cAAY,EAAA1E,SAAC,yBACtCZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,QAAQpC,MAAM,iBAAiB2B,GAAI,CAAE0D,GAAI,GAAI3E,SAAC,uIAIlEZ,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEK,QAAS,OAAQC,eAAgB,SAAUF,EAAG,GAAIrB,UAC3DZ,EAAAA,EAAAA,KAACwF,EAAkB,CACjB5G,cAAekG,EACfhG,aAAe0B,GAAO4C,QAAQC,IAAI,gBAAiB7C,GACnDzB,gBAAiBA,IAAMqE,QAAQC,IAAI,oBACnCrE,SAAWwB,GAAO4C,QAAQC,IAAI,uBAAwB7C,GACtDvB,qBAAsBA,IAAMmE,QAAQC,IAAI,iCAQtD,CACE7C,GAAI,SACJ0E,KAAM,mBACNC,WAAY,CACV,CACE3E,GAAI,gBACJ0E,KAAM,iBACNE,YAAa,sCACbrB,WACErD,EAAAA,EAAAA,MAAC2E,EAAAA,EAAK,CAACxD,GAAI,CAAEI,EAAG,GAAIrB,SAAA,EAClBZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,KAAKgD,cAAY,EAAA1E,SAAC,oBACtCZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,QAAQpC,MAAM,iBAAiB2B,GAAI,CAAE0D,GAAI,GAAI3E,SAAC,+EAGlEF,EAAAA,EAAAA,MAAC+E,EAAAA,EAAK,CAACC,QAAS,EAAE9E,SAAA,EAChBF,EAAAA,EAAAA,MAACiF,EAAAA,EAAK,CAACC,SAAS,QAAOhF,SAAA,EACrBZ,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,CAAAjF,SAAC,UAAkB,kCACLZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,sBAEnCF,EAAAA,EAAAA,MAACiF,EAAAA,EAAK,CAACC,SAAS,UAAShF,SAAA,EACvBZ,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,CAAAjF,SAAC,YAAoB,mCACNZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,sBAEpCF,EAAAA,EAAAA,MAACiF,EAAAA,EAAK,CAACC,SAAS,OAAMhF,SAAA,EACpBZ,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,CAAAjF,SAAC,SAAiB,iCACLZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,sBAElCF,EAAAA,EAAAA,MAACiF,EAAAA,EAAK,CAACC,SAAS,UAAShF,SAAA,EACvBZ,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,CAAAjF,SAAC,YAAoB,mCACNZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,4BAM5C,CACEJ,GAAI,YACJ0E,KAAM,YACNE,YAAa,oCACbrB,WACErD,EAAAA,EAAAA,MAAC2E,EAAAA,EAAK,CAACxD,GAAI,CAAEI,EAAG,GAAIrB,SAAA,EAClBZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,KAAKgD,cAAY,EAAA1E,SAAC,eACtCZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,QAAQpC,MAAM,iBAAiB2B,GAAI,CAAE0D,GAAI,GAAI3E,SAAC,mFAGlEF,EAAAA,EAAAA,MAACsB,EAAAA,EAAG,CAACH,GAAI,CAAEK,QAAS,OAAQ4D,IAAK,GAAIlF,SAAA,EACnCZ,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CACLD,QAAQ,YACRtB,QAASA,IAAMoC,QAAQC,IAAI,yBAAyBzC,SACrD,kBAGDZ,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CACLD,QAAQ,YACRpC,MAAM,QACNc,QAASA,IAAMoC,QAAQC,IAAI,uBAAuBzC,SACnD,gBAGDZ,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CACLD,QAAQ,YACRpC,MAAM,UACNc,QAASA,IAAMoC,QAAQC,IAAI,yBAAyBzC,SACrD,qBAKHZ,EAAAA,EAAAA,KAAC+F,EAAAA,EAAQ,CACPzF,MAAM,EACN0F,iBAAkB,IAClBhC,QAAQ,qCAOpB,CACExD,GAAI,QACJ0E,KAAM,sBACNC,WAAY,CACV,CACE3E,GAAI,qBACJ0E,KAAM,sBACNE,YAAa,kEACbrB,WACErD,EAAAA,EAAAA,MAAC2E,EAAAA,EAAK,CAACxD,GAAI,CAAEI,EAAG,GAAIrB,SAAA,EAClBZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,KAAKgD,cAAY,EAAA1E,SAAC,yBACtCZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,QAAQpC,MAAM,iBAAiB2B,GAAI,CAAE0D,GAAI,GAAI3E,SAAC,mFAGlEZ,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAE0B,QAAS,eAAgBtB,EAAG,EAAGgE,aAAc,GAAIrF,UAC1DZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAAC6D,MAAM,SAAQtF,SAAC,uDAmEzC,EAtDiDuF,KAE7CzF,EAAAA,EAAAA,MAAC0F,EAAAA,EAAS,CAACC,SAAS,KAAKxE,GAAI,CAAEyE,GAAI,GAAI1F,SAAA,EACrCF,EAAAA,EAAAA,MAACsB,EAAAA,EAAG,CAACH,GAAI,CAAE0D,GAAI,EAAGrD,QAAS,OAAQE,WAAY,UAAWxB,SAAA,EACxDZ,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CACLwB,UAAWwC,EAAAA,GACXC,GAAG,YACH9D,WAAW1C,EAAAA,EAAAA,KAACyG,EAAAA,EAAa,IACzB5E,GAAI,CAAEgC,GAAI,GAAIjD,SACf,sBAGDZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,KAAKyB,UAAU,KAAInD,SAAC,gCAK1CZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,QAAQT,GAAI,CAAE0D,GAAI,GAAI3E,SAAC,gKAK1CqE,EAAoBlC,KAAK2D,IACxBhG,EAAAA,EAAAA,MAACsB,EAAAA,EAAG,CAAmBH,GAAI,CAAE0D,GAAI,GAAI3E,SAAA,EACnCZ,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,KAAKyB,UAAU,KAAKlC,GAAI,CAAE0D,GAAI,GAAI3E,SACnD8F,EAASxB,QAEZlF,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,CAACd,GAAI,CAAE0D,GAAI,MAEnBvF,EAAAA,EAAAA,KAAC8C,EAAAA,EAAI,CAAAlC,SACF8F,EAASvB,WAAWpC,KAAKgB,IACxB/D,EAAAA,EAAAA,KAACiD,EAAAA,GAAQ,CAAoBpB,GAAI,CAAEK,QAAS,QAASqD,GAAI,GAAI3E,UAC3DF,EAAAA,EAAAA,MAACiG,EAAAA,EAAc,CACb5C,UAAU,MACV6C,eAAa,EACb/E,GAAI,CAAEK,QAAS,QAASD,EAAG,EAAG4E,OAAQ,WAAYjG,SAAA,EAElDZ,EAAAA,EAAAA,KAAC0D,EAAAA,EAAY,CACXC,QAASI,EAAUmB,KACnBpB,UAAWC,EAAUqB,YACrB0B,uBAAwB,CAAExE,QAAS,MACnCT,GAAI,CAAE0D,GAAI,KAEXxB,EAAUA,cAZAA,EAAUvD,UARrBkG,EAASlG,Q","sources":["components/notification/NotificationCenter.tsx","pages/showcase/NotificationComponentsShowcase.tsx"],"sourcesContent":["import React, { useState, useEffect, MouseEvent } from 'react';\nimport {\n  Badge,\n  Box,\n  IconButton,\n  Popover,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  Typography,\n  Divider,\n  Button,\n  CircularProgress,\n  Tooltip\n} from '@mui/material';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport WarningAmberIcon from '@mui/icons-material/WarningAmber';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { formatDistanceToNow } from 'date-fns';\n\n// Types\nimport {\n  NotificationCenterProps,\n  Notification,\n  NotificationType\n} from '../../types/notificationCenter';\n\n/**\n * NotificationCenter component for displaying and managing user notifications\n */\nconst NotificationCenter: React.FC<NotificationCenterProps> = ({\n  notifications = [],\n  loading = false,\n  onMarkAsRead,\n  onMarkAllAsRead,\n  onDelete,\n  onFetchNotifications\n}) => {\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n\n  useEffect(() => {\n    // Calculate unread count\n    const count = notifications.filter(notification => !notification.isRead).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  const handleOpenNotifications = (event: MouseEvent<HTMLElement>): void => {\n    setAnchorEl(event.currentTarget);\n    if (onFetchNotifications) {\n      onFetchNotifications();\n    }\n  };\n\n  const handleCloseNotifications = (): void => {\n    setAnchorEl(null);\n  };\n\n  const handleNotificationClick = (notification: Notification): void => {\n    // Mark as read if unread\n    if (!notification.isRead && onMarkAsRead) {\n      onMarkAsRead(notification.id);\n    }\n\n    // Navigate to link if exists\n    if (notification.link) {\n      // Use React Router's navigate function instead of window.location.href\n      // This is a placeholder - you'll need to implement this with useNavigate from react-router-dom\n      // For now, we'll just log it\n      console.log('Would navigate to:', notification.link);\n      // TODO: Replace with proper navigation using React Router\n    }\n\n    handleCloseNotifications();\n  };\n\n  const handleMarkAllAsRead = (): void => {\n    if (onMarkAllAsRead) {\n      onMarkAllAsRead();\n    }\n  };\n\n  const handleDelete = (event: MouseEvent, notification: Notification): void => {\n    event.stopPropagation();\n    if (onDelete) {\n      onDelete(notification.id);\n    }\n  };\n\n  // Get icon based on notification type\n  const getNotificationIcon = (type: NotificationType): React.ReactNode => {\n    switch (type) {\n      case 'success':\n        return <CheckCircleOutlineIcon color=\"success\" />;\n      case 'error':\n        return <ErrorOutlineIcon color=\"error\" />;\n      case 'warning':\n        return <WarningAmberIcon color=\"warning\" />;\n      case 'info':\n      default:\n        return <InfoOutlinedIcon color=\"info\" />;\n    }\n  };\n\n  // Format time ago\n  const formatTimeAgo = (date: string): string => {\n    return formatDistanceToNow(new Date(date), { addSuffix: true });\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'notification-popover' : undefined;\n\n  return (\n    <>\n      <Tooltip title=\"Notifications\">\n        <IconButton\n          color=\"inherit\"\n          onClick={handleOpenNotifications}\n          aria-describedby={id}\n        >\n          <Badge badgeContent={unreadCount} color=\"error\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n      </Tooltip>\n\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleCloseNotifications}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        PaperProps={{\n          sx: { width: 320, maxHeight: 500 }\n        }}\n      >\n        <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">Notifications</Typography>\n\n          {unreadCount > 0 && (\n            <Button\n              size=\"small\"\n              onClick={handleMarkAllAsRead}\n              startIcon={<CheckCircleOutlineIcon />}\n            >\n              Mark all as read\n            </Button>\n          )}\n        </Box>\n\n        <Divider />\n\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n            <CircularProgress size={24} />\n          </Box>\n        ) : notifications.length === 0 ? (\n          <Box sx={{ p: 3, textAlign: 'center' }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No notifications\n            </Typography>\n          </Box>\n        ) : (\n          <List sx={{ p: 0 }}>\n            {notifications.map((notification) => (\n              <React.Fragment key={notification.id}>\n                <ListItem\n                  button\n                  onClick={() => handleNotificationClick(notification)}\n                  alignItems=\"flex-start\"\n                  sx={{\n                    bgcolor: notification.isRead ? 'inherit' : 'action.hover',\n                    '&:hover': {\n                      bgcolor: 'action.selected',\n                    },\n                  }}\n                >\n                  <ListItemIcon sx={{ minWidth: 40 }}>\n                    {getNotificationIcon(notification.type)}\n                  </ListItemIcon>\n\n                  <ListItemText\n                    primary={\n                      <Typography\n                        variant=\"subtitle2\"\n                        sx={{\n                          fontWeight: notification.isRead ? 'normal' : 'bold',\n                          mr: 6 // Space for the delete button\n                        }}\n                      >\n                        {notification.title}\n                      </Typography>\n                    }\n                    secondary={\n                      <>\n                        <Typography variant=\"body2\" component=\"span\" color=\"text.secondary\">\n                          {notification.message}\n                        </Typography>\n                        <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\" sx={{ mt: 0.5 }}>\n                          {formatTimeAgo(notification.createdAt)}\n                        </Typography>\n                      </>\n                    }\n                  />\n\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      edge=\"end\"\n                      size=\"small\"\n                      onClick={(event) => handleDelete(event, notification)}\n                    >\n                      <DeleteOutlineIcon fontSize=\"small\" />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n                <Divider component=\"li\" />\n              </React.Fragment>\n            ))}\n          </List>\n        )}\n\n        {notifications.length > 0 && (\n          <Box sx={{ p: 1, display: 'flex', justifyContent: 'center' }}>\n            <Button size=\"small\" href=\"/notifications\">\n              View all notifications\n            </Button>\n          </Box>\n        )}\n      </Popover>\n    </>\n  );\n};\n\nexport default NotificationCenter;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemButton,\n  Button,\n  Alert,\n  AlertTitle,\n  Snackbar,\n  Stack\n} from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// Import notification components\nimport NotificationCenter from '../../components/notification/NotificationCenter';\n\n// Import notification types\nimport { Notification, NotificationType } from '../../types/notificationCenter';\n\n// Mock notifications for demonstration\nconst mockNotifications: Notification[] = [\n  {\n    id: '1',\n    title: 'New Report Available',\n    message: 'Daily activity report for May 15 is now available.',\n    type: 'info' as NotificationType,\n    createdAt: new Date(Date.now() - 1000 * 60 * 5).toISOString(), // 5 minutes ago\n    isRead: false,\n    link: '/reports/daily-activity'\n  },\n  {\n    id: '2',\n    title: 'System Update',\n    message: 'The system will be updated tonight at 2:00 AM. Please save your work.',\n    type: 'warning' as NotificationType,\n    createdAt: new Date(Date.now() - 1000 * 60 * 60).toISOString(), // 1 hour ago\n    isRead: true,\n    link: '/announcements/system-update'\n  },\n  {\n    id: '3',\n    title: 'Error Processing Report',\n    message: 'There was an error processing your monthly revenue report.',\n    type: 'error' as NotificationType,\n    createdAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago\n    isRead: false,\n    link: '/reports/monthly-revenue'\n  }\n];\n\n// Sample component categories\nconst componentCategories = [\n  {\n    id: 'notifications',\n    name: 'Notification Components',\n    components: [\n      {\n        id: 'notificationCenter',\n        name: 'Notification Center',\n        description: 'Component for displaying and managing user notifications',\n        component: (\n          <Paper sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>Notification Center</Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              This component displays a notification center with a badge showing unread notifications.\n              Click the icon to see the notifications.\n            </Typography>\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>\n              <NotificationCenter\n                notifications={mockNotifications}\n                onMarkAsRead={(id) => console.log('Mark as read:', id)}\n                onMarkAllAsRead={() => console.log('Mark all as read')}\n                onDelete={(id) => console.log('Delete notification:', id)}\n                onFetchNotifications={() => console.log('Fetch notifications')}\n              />\n            </Box>\n          </Paper>\n        )\n      }\n    ]\n  },\n  {\n    id: 'alerts',\n    name: 'Alert Components',\n    components: [\n      {\n        id: 'alertVariants',\n        name: 'Alert Variants',\n        description: 'Different types of alert components',\n        component: (\n          <Paper sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>Alert Variants</Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              These components display different types of alerts for various scenarios.\n            </Typography>\n            <Stack spacing={2}>\n              <Alert severity=\"error\">\n                <AlertTitle>Error</AlertTitle>\n                This is an error alert — <strong>check it out!</strong>\n              </Alert>\n              <Alert severity=\"warning\">\n                <AlertTitle>Warning</AlertTitle>\n                This is a warning alert — <strong>check it out!</strong>\n              </Alert>\n              <Alert severity=\"info\">\n                <AlertTitle>Info</AlertTitle>\n                This is an info alert — <strong>check it out!</strong>\n              </Alert>\n              <Alert severity=\"success\">\n                <AlertTitle>Success</AlertTitle>\n                This is a success alert — <strong>check it out!</strong>\n              </Alert>\n            </Stack>\n          </Paper>\n        )\n      },\n      {\n        id: 'snackbars',\n        name: 'Snackbars',\n        description: 'Temporary notification components',\n        component: (\n          <Paper sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>Snackbars</Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              These components display temporary notifications at the bottom of the screen.\n            </Typography>\n            <Box sx={{ display: 'flex', gap: 2 }}>\n              <Button\n                variant=\"contained\"\n                onClick={() => console.log('Show success snackbar')}\n              >\n                Show Success\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"error\"\n                onClick={() => console.log('Show error snackbar')}\n              >\n                Show Error\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"warning\"\n                onClick={() => console.log('Show warning snackbar')}\n              >\n                Show Warning\n              </Button>\n            </Box>\n            {/* Example of a snackbar (would be controlled by state in a real component) */}\n            <Snackbar\n              open={false}\n              autoHideDuration={6000}\n              message=\"This is a snackbar message\"\n            />\n          </Paper>\n        )\n      }\n    ]\n  },\n  {\n    id: 'toast',\n    name: 'Toast Notifications',\n    components: [\n      {\n        id: 'toastNotifications',\n        name: 'Toast Notifications',\n        description: 'Temporary notifications that appear in the corner of the screen',\n        component: (\n          <Paper sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>Toast Notifications</Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              These components display temporary notifications in the corner of the screen.\n            </Typography>\n            <Box sx={{ bgcolor: 'action.hover', p: 2, borderRadius: 1 }}>\n              <Typography align=\"center\">Toast Notifications Component Placeholder</Typography>\n            </Box>\n          </Paper>\n        )\n      }\n    ]\n  }\n];\n\n/**\n * Notification Components Showcase\n * Displays all notification components in a categorized list\n */\nconst NotificationComponentsShowcase: React.FC = () => {\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\n        <Button\n          component={RouterLink}\n          to=\"/showcase\"\n          startIcon={<ArrowBackIcon />}\n          sx={{ mr: 2 }}\n        >\n          Back to Showcase\n        </Button>\n        <Typography variant=\"h4\" component=\"h1\">\n          Notification Components\n        </Typography>\n      </Box>\n\n      <Typography variant=\"body1\" sx={{ mb: 4 }}>\n        This showcase demonstrates the various notification components available in the application.\n        Note: Some components are currently displayed as placeholders.\n      </Typography>\n\n      {componentCategories.map((category) => (\n        <Box key={category.id} sx={{ mb: 6 }}>\n          <Typography variant=\"h5\" component=\"h2\" sx={{ mb: 2 }}>\n            {category.name}\n          </Typography>\n          <Divider sx={{ mb: 3 }} />\n\n          <List>\n            {category.components.map((component) => (\n              <ListItem key={component.id} sx={{ display: 'block', mb: 4 }}>\n                <ListItemButton\n                  component=\"div\"\n                  disableRipple\n                  sx={{ display: 'block', p: 0, cursor: 'default' }}\n                >\n                  <ListItemText\n                    primary={component.name}\n                    secondary={component.description}\n                    primaryTypographyProps={{ variant: 'h6' }}\n                    sx={{ mb: 2 }}\n                  />\n                  {component.component}\n                </ListItemButton>\n              </ListItem>\n            ))}\n          </List>\n        </Box>\n      ))}\n    </Container>\n  );\n};\n\nexport default NotificationComponentsShowcase;\n"],"names":["_ref","notifications","loading","onMarkAsRead","onMarkAllAsRead","onDelete","onFetchNotifications","anchorEl","setAnchorEl","useState","unreadCount","setUnreadCount","useEffect","count","filter","notification","isRead","length","handleCloseNotifications","getNotificationIcon","type","_jsx","CheckCircleOutlineIcon","color","ErrorOutlineIcon","WarningAmberIcon","InfoOutlinedIcon","open","Boolean","id","undefined","_jsxs","_Fragment","children","Tooltip","title","IconButton","onClick","event","currentTarget","Badge","badgeContent","NotificationsIcon","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","sx","width","maxHeight","Box","p","display","justifyContent","alignItems","Typography","variant","Button","size","handleMarkAllAsRead","startIcon","Divider","CircularProgress","textAlign","List","map","React","ListItem","button","link","console","log","handleNotificationClick","bgcolor","ListItemIcon","minWidth","ListItemText","primary","fontWeight","mr","secondary","component","message","mt","date","createdAt","formatDistanceToNow","Date","addSuffix","ListItemSecondaryAction","edge","handleDelete","stopPropagation","DeleteOutlineIcon","fontSize","href","mockNotifications","now","toISOString","componentCategories","name","components","description","Paper","gutterBottom","mb","NotificationCenter","Stack","spacing","Alert","severity","AlertTitle","gap","Snackbar","autoHideDuration","borderRadius","align","NotificationComponentsShowcase","Container","maxWidth","py","RouterLink","to","ArrowBackIcon","category","ListItemButton","disableRipple","cursor","primaryTypographyProps"],"sourceRoot":""}