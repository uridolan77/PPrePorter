{"version":3,"file":"static/js/96.bc3362d1.chunk.js","mappings":"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","sources":["components/auth/RegisterForm.tsx","pages/auth/RegisterPage.tsx"],"sourcesContent":["import React, { useState, ChangeEvent, FormEvent } from 'react';\nimport { \n  Box, \n  TextField,\n  Button,\n  Typography,\n  InputAdornment,\n  IconButton,\n  Link,\n  Alert,\n  CircularProgress,\n  Paper,\n  Divider,\n  Grid,\n  Checkbox,\n  FormControlLabel,\n  FormHelperText\n} from '@mui/material';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport EmailIcon from '@mui/icons-material/Email';\nimport LockIcon from '@mui/icons-material/Lock';\nimport PersonIcon from '@mui/icons-material/Person';\nimport GoogleIcon from '@mui/icons-material/Google';\nimport MicrosoftIcon from '@mui/icons-material/Microsoft';\nimport { CommonProps } from '../../types/common';\n\ninterface RegisterFormData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  agreeToTerms: boolean;\n}\n\ninterface RegisterFormErrors {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  password?: string;\n  confirmPassword?: string;\n  agreeToTerms?: string;\n}\n\ninterface RegisterFormProps extends CommonProps {\n  onSubmit?: (data: RegisterFormData) => void;\n  onGoogleRegister?: () => void;\n  onMicrosoftRegister?: () => void;\n  error?: string | null;\n  loading?: boolean;\n  showSocialLogin?: boolean;\n  loginLink?: string;\n  logoUrl?: string;\n}\n\n/**\n * Registration form component for new user sign-up\n */\nconst RegisterForm: React.FC<RegisterFormProps> = ({\n  onSubmit,\n  onGoogleRegister,\n  onMicrosoftRegister,\n  error,\n  loading = false,\n  showSocialLogin = true,\n  loginLink = '/login',\n  logoUrl = '/logo.png',\n  sx\n}) => {\n  const [formData, setFormData] = useState<RegisterFormData>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    agreeToTerms: false\n  });\n  \n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState<boolean>(false);\n  const [formErrors, setFormErrors] = useState<RegisterFormErrors>({});\n  \n  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const { name, value, checked, type } = e.target;\n    \n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : value\n    });\n    \n    // Clear validation error when field is edited\n    if (formErrors[name as keyof RegisterFormErrors]) {\n      setFormErrors({\n        ...formErrors,\n        [name]: undefined\n      });\n    }\n  };\n  \n  const toggleShowPassword = (): void => {\n    setShowPassword(!showPassword);\n  };\n  \n  const toggleShowConfirmPassword = (): void => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n  \n  const validate = (): RegisterFormErrors => {\n    const errors: RegisterFormErrors = {};\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    \n    if (!formData.firstName.trim()) {\n      errors.firstName = 'First name is required';\n    }\n    \n    if (!formData.lastName.trim()) {\n      errors.lastName = 'Last name is required';\n    }\n    \n    if (!formData.email.trim()) {\n      errors.email = 'Email is required';\n    } else if (!emailRegex.test(formData.email)) {\n      errors.email = 'Please enter a valid email address';\n    }\n    \n    if (!formData.password) {\n      errors.password = 'Password is required';\n    } else if (formData.password.length < 8) {\n      errors.password = 'Password must be at least 8 characters long';\n    }\n    \n    if (!formData.confirmPassword) {\n      errors.confirmPassword = 'Please confirm your password';\n    } else if (formData.password !== formData.confirmPassword) {\n      errors.confirmPassword = 'Passwords do not match';\n    }\n    \n    if (!formData.agreeToTerms) {\n      errors.agreeToTerms = 'You must agree to the terms and conditions';\n    }\n    \n    return errors;\n  };\n  \n  const handleSubmit = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    \n    const errors = validate();\n    \n    if (Object.keys(errors).length === 0) {\n      if (onSubmit) {\n        onSubmit(formData);\n      }\n    } else {\n      setFormErrors(errors);\n    }\n  };\n  \n  const handleGoogleRegister = (): void => {\n    if (onGoogleRegister) {\n      onGoogleRegister();\n    }\n  };\n  \n  const handleMicrosoftRegister = (): void => {\n    if (onMicrosoftRegister) {\n      onMicrosoftRegister();\n    }\n  };\n  \n  return (\n    <Paper \n      elevation={3} \n      sx={{ \n        maxWidth: 600, \n        width: '100%', \n        p: 4, \n        borderRadius: 2,\n        ...sx\n      }}\n    >\n      <Box \n        component=\"form\" \n        onSubmit={handleSubmit} \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column', \n          gap: 3 \n        }}\n      >\n        {/* Logo and Title */}\n        <Box sx={{ textAlign: 'center', mb: 2 }}>\n          <img \n            src={logoUrl} \n            alt=\"Logo\" \n            style={{ height: 60, width: 'auto', marginBottom: 16 }}\n            onError={(e) => { (e.target as HTMLImageElement).style.display = 'none'; }}\n          />\n          <Typography variant=\"h5\" component=\"h1\" gutterBottom sx={{ fontWeight: 'bold' }}>\n            Create an Account\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Fill in the form below to create your account\n          </Typography>\n        </Box>\n        \n        {/* Error Message */}\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n        \n        {/* Name Fields */}\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              label=\"First Name\"\n              name=\"firstName\"\n              value={formData.firstName}\n              onChange={handleChange}\n              fullWidth\n              error={!!formErrors.firstName}\n              helperText={formErrors.firstName}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <PersonIcon color=\"action\" />\n                  </InputAdornment>\n                ),\n              }}\n              disabled={loading}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              label=\"Last Name\"\n              name=\"lastName\"\n              value={formData.lastName}\n              onChange={handleChange}\n              fullWidth\n              error={!!formErrors.lastName}\n              helperText={formErrors.lastName}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <PersonIcon color=\"action\" />\n                  </InputAdornment>\n                ),\n              }}\n              disabled={loading}\n              required\n            />\n          </Grid>\n        </Grid>\n        \n        {/* Email Field */}\n        <TextField\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          fullWidth\n          error={!!formErrors.email}\n          helperText={formErrors.email}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <EmailIcon color=\"action\" />\n              </InputAdornment>\n            ),\n          }}\n          disabled={loading}\n          required\n        />\n        \n        {/* Password Field */}\n        <TextField\n          label=\"Password\"\n          name=\"password\"\n          type={showPassword ? 'text' : 'password'}\n          value={formData.password}\n          onChange={handleChange}\n          fullWidth\n          error={!!formErrors.password}\n          helperText={formErrors.password || 'Password must be at least 8 characters long'}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <LockIcon color=\"action\" />\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={toggleShowPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n          disabled={loading}\n          required\n        />\n        \n        {/* Confirm Password Field */}\n        <TextField\n          label=\"Confirm Password\"\n          name=\"confirmPassword\"\n          type={showConfirmPassword ? 'text' : 'password'}\n          value={formData.confirmPassword}\n          onChange={handleChange}\n          fullWidth\n          error={!!formErrors.confirmPassword}\n          helperText={formErrors.confirmPassword}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <LockIcon color=\"action\" />\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle confirm password visibility\"\n                  onClick={toggleShowConfirmPassword}\n                  edge=\"end\"\n                >\n                  {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n          disabled={loading}\n          required\n        />\n        \n        {/* Terms and Conditions */}\n        <Box>\n          <FormControlLabel\n            control={\n              <Checkbox\n                name=\"agreeToTerms\"\n                checked={formData.agreeToTerms}\n                onChange={handleChange}\n                color=\"primary\"\n                disabled={loading}\n              />\n            }\n            label={\n              <Typography variant=\"body2\">\n                I agree to the{' '}\n                <Link href=\"#\" underline=\"hover\" color=\"primary\">\n                  Terms of Service\n                </Link>{' '}\n                and{' '}\n                <Link href=\"#\" underline=\"hover\" color=\"primary\">\n                  Privacy Policy\n                </Link>\n              </Typography>\n            }\n          />\n          {formErrors.agreeToTerms && (\n            <FormHelperText error>{formErrors.agreeToTerms}</FormHelperText>\n          )}\n        </Box>\n        \n        {/* Submit Button */}\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          fullWidth\n          disabled={loading}\n          sx={{ mt: 2 }}\n        >\n          {loading ? <CircularProgress size={24} /> : 'Create Account'}\n        </Button>\n        \n        {/* Login Link */}\n        <Box sx={{ textAlign: 'center', mt: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Already have an account?{' '}\n            <Link \n              component={RouterLink} \n              to={loginLink}\n              color=\"primary\"\n              underline=\"hover\"\n            >\n              Sign in\n            </Link>\n          </Typography>\n        </Box>\n        \n        {/* Social Registration Options */}\n        {showSocialLogin && (\n          <>\n            <Box sx={{ display: 'flex', alignItems: 'center', mt: 2 }}>\n              <Divider sx={{ flex: 1 }} />\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mx: 2 }}>\n                or sign up with\n              </Typography>\n              <Divider sx={{ flex: 1 }} />\n            </Box>\n            \n            <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\n              <Button\n                variant=\"outlined\"\n                fullWidth\n                size=\"large\"\n                startIcon={<GoogleIcon />}\n                onClick={handleGoogleRegister}\n                disabled={loading}\n              >\n                Google\n              </Button>\n              <Button\n                variant=\"outlined\"\n                fullWidth\n                size=\"large\"\n                startIcon={<MicrosoftIcon />}\n                onClick={handleMicrosoftRegister}\n                disabled={loading}\n              >\n                Microsoft\n              </Button>\n            </Box>\n          </>\n        )}\n      </Box>\n    </Paper>\n  );\n};\n\nexport default RegisterForm;\n","import React, { useState } from 'react';\nimport { useNavigate, NavigateFunction } from 'react-router-dom';\nimport {\n  Container,\n  Box,\n  Typography,\n  Paper,\n  Alert\n} from '@mui/material';\nimport RegisterForm from '../../components/auth/RegisterForm';\nimport { useAuth } from '../../hooks/useAuth';\nimport { RegistrationData } from '../../types/auth';\n\n// Define RegisterFormData interface to match the component's expected props\ninterface RegisterFormData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  agreeToTerms: boolean;\n}\n\n/**\n * Registration page component\n */\nconst RegisterPage: React.FC = () => {\n  const { register, loginWithGoogle, loginWithMicrosoft } = useAuth();\n  const [error, setError] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const navigate: NavigateFunction = useNavigate();\n\n  /**\n   * Handle registration form submission\n   * @param formData - Registration form data\n   */\n  const handleRegister = async (formData: RegisterFormData): Promise<void> => {\n    setLoading(true);\n    setError('');\n\n    try {\n      await register({\n        username: formData.email.split('@')[0], // Generate username from email\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n        password: formData.password,\n        confirmPassword: formData.confirmPassword,\n        acceptTerms: formData.agreeToTerms\n      });\n\n      // Navigate to login page upon successful registration\n      navigate('/login', {\n        state: {\n          message: 'Registration successful! Please log in with your new account.'\n        }\n      });\n    } catch (err) {\n      console.error('Registration error:', err);\n      const error = err as Error;\n      setError(error.message || 'Registration failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Handle Google OAuth registration\n   */\n  const handleGoogleRegister = async (): Promise<void> => {\n    setLoading(true);\n    setError('');\n    try {\n      await loginWithGoogle();\n      // Navigate to dashboard upon successful registration\n      navigate('/dashboard');\n    } catch (err) {\n      console.error('Google registration error:', err);\n      const error = err as Error;\n      setError(error.message || 'Google sign up failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Handle Microsoft OAuth registration\n   */\n  const handleMicrosoftRegister = async (): Promise<void> => {\n    setLoading(true);\n    setError('');\n    try {\n      await loginWithMicrosoft();\n      // Navigate to dashboard upon successful registration\n      navigate('/dashboard');\n    } catch (err) {\n      console.error('Microsoft registration error:', err);\n      const error = err as Error;\n      setError(error.message || 'Microsoft sign up failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"sm\"\n      sx={{\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        py: 4\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        }}\n      >\n        {/* Error Alert */}\n        {error && (\n          <Alert\n            severity=\"error\"\n            sx={{\n              width: '100%',\n              mb: 3\n            }}\n          >\n            {error}\n          </Alert>\n        )}\n\n        <RegisterForm\n          onSubmit={handleRegister}\n          onGoogleRegister={handleGoogleRegister}\n          onMicrosoftRegister={handleMicrosoftRegister}\n          logoUrl=\"/logo.png\"\n          error={error}\n          loading={loading}\n          showSocialLogin={true}\n          loginLink=\"/login\"\n        />\n\n        {/* Terms & Support Section */}\n        <Paper\n          elevation={0}\n          sx={{\n            mt: 4,\n            p: 2,\n            textAlign: 'center',\n            backgroundColor: 'transparent'\n          }}\n        >\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            By creating an account, you agree to our{' '}\n            <a href=\"/terms\">Terms of Service</a> and{' '}\n            <a href=\"/privacy\">Privacy Policy</a>.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            Need help? <a href=\"/support\">Contact Support</a>\n          </Typography>\n        </Paper>\n      </Box>\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["_ref","onSubmit","onGoogleRegister","onMicrosoftRegister","error","loading","showSocialLogin","loginLink","logoUrl","sx","formData","setFormData","useState","firstName","lastName","email","password","confirmPassword","agreeToTerms","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","formErrors","setFormErrors","handleChange","e","name","value","checked","type","target","undefined","_jsx","Paper","elevation","maxWidth","width","p","borderRadius","children","_jsxs","Box","component","preventDefault","errors","validate","trim","test","length","Object","keys","display","flexDirection","gap","textAlign","mb","src","alt","style","height","marginBottom","onError","Typography","variant","gutterBottom","fontWeight","color","Alert","severity","Grid","container","spacing","item","xs","sm","TextField","label","onChange","fullWidth","helperText","InputProps","startAdornment","InputAdornment","position","PersonIcon","disabled","required","EmailIcon","LockIcon","endAdornment","IconButton","onClick","toggleShowPassword","edge","VisibilityOff","Visibility","toggleShowConfirmPassword","FormControlLabel","control","Checkbox","Link","href","underline","FormHelperText","Button","size","mt","CircularProgress","RouterLink","to","_Fragment","alignItems","Divider","flex","mx","startIcon","GoogleIcon","handleGoogleRegister","MicrosoftIcon","handleMicrosoftRegister","RegisterPage","register","loginWithGoogle","loginWithMicrosoft","useAuth","setError","setLoading","navigate","useNavigate","Container","minHeight","justifyContent","py","RegisterForm","async","username","split","acceptTerms","state","message","err","console","backgroundColor"],"sourceRoot":""}