{"version":3,"file":"static/js/58.1c8737e9.chunk.js","mappings":"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","sources":["../node_modules/@mui/system/esm/Container/createContainer.js","../node_modules/@mui/material/Container/Container.js","pages/reports/DailyActionsPage.tsx","../node_modules/@mui/system/esm/styled.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\", \"classes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from '@mui/utils/capitalize';\nimport useThemePropsSystem from '../useThemeProps';\nimport systemStyled from '../styled';\nimport createTheme from '../createTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultTheme = createTheme();\nconst defaultCreateStyledComponent = systemStyled('div', {\n  name: 'MuiContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n  }\n});\nconst useThemePropsDefault = inProps => useThemePropsSystem({\n  props: inProps,\n  name: 'MuiContainer',\n  defaultTheme\n});\nconst useUtilityClasses = (ownerState, componentName) => {\n  const getContainerUtilityClass = slot => {\n    return generateUtilityClass(componentName, slot);\n  };\n  const {\n    classes,\n    fixed,\n    disableGutters,\n    maxWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', maxWidth && `maxWidth${capitalize(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']\n  };\n  return composeClasses(slots, getContainerUtilityClass, classes);\n};\nexport default function createContainer(options = {}) {\n  const {\n    // This will allow adding custom styled fn (for example for custom sx style function)\n    createStyledComponent = defaultCreateStyledComponent,\n    useThemeProps = useThemePropsDefault,\n    componentName = 'MuiContainer'\n  } = options;\n  const ContainerRoot = createStyledComponent(({\n    theme,\n    ownerState\n  }) => _extends({\n    width: '100%',\n    marginLeft: 'auto',\n    boxSizing: 'border-box',\n    marginRight: 'auto',\n    display: 'block'\n  }, !ownerState.disableGutters && {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up('sm')]: {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }\n  }), ({\n    theme,\n    ownerState\n  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {\n    const breakpoint = breakpointValueKey;\n    const value = theme.breakpoints.values[breakpoint];\n    if (value !== 0) {\n      // @ts-ignore\n      acc[theme.breakpoints.up(breakpoint)] = {\n        maxWidth: `${value}${theme.breakpoints.unit}`\n      };\n    }\n    return acc;\n  }, {}), ({\n    theme,\n    ownerState\n  }) => _extends({}, ownerState.maxWidth === 'xs' && {\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up('xs')]: {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }\n  }, ownerState.maxWidth &&\n  // @ts-ignore module augmentation fails if custom breakpoints are used\n  ownerState.maxWidth !== 'xs' && {\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up(ownerState.maxWidth)]: {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`\n    }\n  }));\n  const Container = /*#__PURE__*/React.forwardRef(function Container(inProps, ref) {\n    const props = useThemeProps(inProps);\n    const {\n        className,\n        component = 'div',\n        disableGutters = false,\n        fixed = false,\n        maxWidth = 'lg'\n      } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n    const ownerState = _extends({}, props, {\n      component,\n      disableGutters,\n      fixed,\n      maxWidth\n    });\n\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    const classes = useUtilityClasses(ownerState, componentName);\n    return (\n      /*#__PURE__*/\n      // @ts-ignore theme is injected by the styled util\n      _jsx(ContainerRoot, _extends({\n        as: component\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        ,\n        ownerState: ownerState,\n        className: clsx(classes.root, className),\n        ref: ref\n      }, other))\n    );\n  });\n  process.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    disableGutters: PropTypes.bool,\n    fixed: PropTypes.bool,\n    maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n  } : void 0;\n  return Container;\n}","'use client';\n\nimport PropTypes from 'prop-types';\nimport { createContainer } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nconst Container = createContainer({\n  createStyledComponent: styled('div', {\n    name: 'MuiContainer',\n    slot: 'Root',\n    overridesResolver: (props, styles) => {\n      const {\n        ownerState\n      } = props;\n      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n    }\n  }),\n  useThemeProps: inProps => useThemeProps({\n    props: inProps,\n    name: 'MuiContainer'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { format, subDays } from 'date-fns';\nimport { FEATURES } from '../../config/constants';\nimport dailyActionsService from '../../services/api/dailyActionsService';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport TableChartIcon from '@mui/icons-material/TableChart';\n\n// Types\ninterface WhiteLabel {\n  id: string;\n  name: string;\n}\n\ninterface DailyAction {\n  id: string;\n  date: string;\n  whiteLabelName: string;\n  registrations: number;\n  ftd: number;\n  deposits: number;\n  paidCashouts: number;\n  ggrCasino: number;\n  ggrSport: number;\n  ggrLive: number;\n  totalGGR: number;\n}\n\ninterface Summary {\n  totalRegistrations: number;\n  totalFTD: number;\n  totalDeposits: number;\n  totalCashouts: number;\n  totalGGR: number;\n}\n\ninterface Filters {\n  startDate: string;\n  endDate: string;\n  whiteLabelId?: string;\n}\n\nconst DailyActionsPage: React.FC = () => {\n  // State for filters - use yesterday and today as default date range\n  const [startDate, setStartDate] = useState<Date>(subDays(new Date(), 1));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [whiteLabelId, setWhiteLabelId] = useState<string>('');\n  const [whiteLabels, setWhiteLabels] = useState<WhiteLabel[]>([]);\n\n  // State for data\n  const [dailyActions, setDailyActions] = useState<DailyAction[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // State for summary metrics\n  const [summary, setSummary] = useState<Summary>({\n    totalRegistrations: 0,\n    totalFTD: 0,\n    totalDeposits: 0,\n    totalCashouts: 0,\n    totalGGR: 0\n  });\n\n  // Fetch metadata (white labels) on component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        console.log('[DAILY ACTIONS PAGE] Fetching metadata');\n\n        // Check if mock data is enabled (from constants or localStorage)\n        const useMockData = FEATURES.USE_MOCK_DATA_FOR_UI_TESTING || localStorage.getItem('USE_MOCK_DATA_FOR_UI_TESTING') === 'true';\n\n        if (useMockData) {\n          console.log('[DAILY ACTIONS PAGE] Using mock data for metadata');\n\n          // Import mock data dynamically\n          const mockDataModule = await import('../../mockData');\n          const mockDataService = mockDataModule.default;\n\n          // Get mock metadata\n          const mockMetadata = mockDataService.getMockData('/reports/daily-actions/metadata');\n\n          if (mockMetadata && mockMetadata.whiteLabels) {\n            console.log('[DAILY ACTIONS PAGE] Got mock white labels:', mockMetadata.whiteLabels);\n            setWhiteLabels(mockMetadata.whiteLabels);\n            return;\n          }\n        }\n\n        // Fall back to service if mock data is not available\n        const data = await dailyActionsService.getMetadata();\n        console.log('[DAILY ACTIONS PAGE] Got white labels from service:', (data as any).whiteLabels);\n        setWhiteLabels((data as any).whiteLabels || []);\n      } catch (err) {\n        console.error('[DAILY ACTIONS PAGE] Error fetching metadata:', err);\n        setError('Failed to load metadata. Please try again later.');\n      }\n    };\n\n    fetchMetadata();\n  }, []);\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    // Define a function to fetch data on mount to avoid dependency issues\n    const fetchInitialData = async () => {\n      console.log('[DAILY ACTIONS PAGE] Fetching initial data');\n      await fetchDailyActions();\n    };\n\n    // Set a small delay to ensure the component is fully mounted\n    const timer = setTimeout(() => {\n      fetchInitialData();\n    }, 100);\n\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Fetch daily actions data\n  const fetchDailyActions = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Format dates for API\n      const formattedStartDate = format(startDate, 'yyyy-MM-dd');\n      const formattedEndDate = format(endDate, 'yyyy-MM-dd');\n\n      // Create filters object\n      const filters: Filters = {\n        startDate: formattedStartDate,\n        endDate: formattedEndDate\n      };\n\n      if (whiteLabelId && whiteLabelId !== '') {\n        console.log(`[DAILY ACTIONS PAGE] Filtering by white label ID: ${whiteLabelId}`);\n        filters.whiteLabelId = whiteLabelId;\n      } else {\n        console.log('[DAILY ACTIONS PAGE] No white label filter applied');\n      }\n\n      console.log('[DAILY ACTIONS PAGE] Starting data fetch with filters:', filters);\n\n      // Try to get mock data directly first\n      try {\n        console.log('[DAILY ACTIONS PAGE] Checking if mock data is enabled');\n        // Check both the constant and localStorage\n        const useMockData = FEATURES.USE_MOCK_DATA_FOR_UI_TESTING || localStorage.getItem('USE_MOCK_DATA_FOR_UI_TESTING') === 'true';\n\n        if (useMockData) {\n          console.log('[DAILY ACTIONS PAGE] Mock data is enabled, trying to get mock data directly');\n\n          // Import mock data dynamically\n          const mockDataModule = await import('../../mockData');\n          const mockDataService = mockDataModule.default;\n\n          // Try to get summary data\n          console.log('[DAILY ACTIONS PAGE] Getting mock summary data directly with filters:', filters);\n          const mockSummaryData = mockDataService.getMockData('/reports/daily-actions/summary', filters);\n\n          if (mockSummaryData && mockSummaryData.dailyActions) {\n            console.log('[DAILY ACTIONS PAGE] Got mock summary data directly:', mockSummaryData);\n            console.log('[DAILY ACTIONS PAGE] Daily actions from mock data:', mockSummaryData.dailyActions);\n\n            // Use the mock data\n            setDailyActions(mockSummaryData.dailyActions || []);\n\n            // Set summary metrics\n            const summaryData: Summary = {\n              totalRegistrations: mockSummaryData.totalRegistrations || 0,\n              totalFTD: mockSummaryData.totalFTD || 0,\n              totalDeposits: mockSummaryData.totalDeposits || 0,\n              totalCashouts: mockSummaryData.totalCashouts || 0,\n              totalGGR: mockSummaryData.totalGGR || 0\n            };\n\n            setSummary(summaryData);\n            setLoading(false);\n            return;\n          } else {\n            console.log('[DAILY ACTIONS PAGE] No mock summary data found or no daily actions in the response, trying regular mock data');\n\n            // Try to get regular data\n            const mockRegularData = mockDataService.getMockData('/reports/daily-actions/data', filters);\n\n            if (mockRegularData) {\n              console.log('[DAILY ACTIONS PAGE] Got mock regular data directly:', mockRegularData);\n\n              // Check if we have dailyActions in the response\n              if (mockRegularData.dailyActions && mockRegularData.dailyActions.length > 0) {\n                console.log('[DAILY ACTIONS PAGE] Using dailyActions from mock data:', mockRegularData.dailyActions);\n                setDailyActions(mockRegularData.dailyActions);\n              } else if (mockRegularData.data && mockRegularData.data.length > 0) {\n                // Fall back to data field\n                console.log('[DAILY ACTIONS PAGE] Using data field from mock data:', mockRegularData.data);\n                setDailyActions(mockRegularData.data);\n              } else {\n                // No data found\n                console.log('[DAILY ACTIONS PAGE] No data found in mock response');\n                setDailyActions([]);\n              }\n\n              // Check if we have summary in the response\n              if (mockRegularData.summary) {\n                setSummary(mockRegularData.summary);\n              } else {\n                // Calculate summary metrics from the data\n                const data = mockRegularData.dailyActions || mockRegularData.data || [];\n                const summaryData: Summary = {\n                  totalRegistrations: mockRegularData.totalRegistrations || data.reduce((sum: number, item: any) => sum + (item.registrations || 0), 0),\n                  totalFTD: mockRegularData.totalFTD || data.reduce((sum: number, item: any) => sum + (item.ftd || 0), 0),\n                  totalDeposits: mockRegularData.totalDeposits || data.reduce((sum: number, item: any) => sum + (item.deposits || 0), 0),\n                  totalCashouts: mockRegularData.totalCashouts || data.reduce((sum: number, item: any) => sum + (item.paidCashouts || 0), 0),\n                  totalGGR: mockRegularData.totalGGR || data.reduce((sum: number, item: any) => sum + (item.totalGGR || 0), 0)\n                };\n\n                setSummary(summaryData);\n              }\n\n              setLoading(false);\n              return;\n            }\n          }\n        }\n      } catch (mockError) {\n        console.error('[DAILY ACTIONS PAGE] Error getting mock data directly:', mockError);\n      }\n\n      // Fetch data directly (the data endpoint returns both data and summary)\n      try {\n        console.log('[DAILY ACTIONS PAGE] Fetching data with filters:', filters);\n        const response = await dailyActionsService.getData(filters);\n        console.log('[DAILY ACTIONS PAGE] Regular data response:', response);\n\n        // Check if the response has the expected structure\n        if (response && response.data) {\n          setDailyActions(response.data);\n\n          // Set summary metrics if available in the response\n          if (response.summary) {\n            setSummary(response.summary);\n          } else {\n            // Calculate summary metrics if not provided by the API\n            const summaryData: Summary = {\n              totalRegistrations: response.data.reduce((sum: number, item: any) => sum + (item.registrations || 0), 0),\n              totalFTD: response.data.reduce((sum: number, item: any) => sum + (item.ftd || 0), 0),\n              totalDeposits: response.data.reduce((sum: number, item: any) => sum + (item.deposits || 0), 0),\n              totalCashouts: response.data.reduce((sum: number, item: any) => sum + (item.paidCashouts || 0), 0),\n              totalGGR: response.data.reduce((sum: number, item: any) => sum + (item.totalGGR || 0), 0)\n            };\n\n            setSummary(summaryData);\n          }\n        } else {\n          console.error('[DAILY ACTIONS PAGE] Invalid response format:', response);\n          setError('Invalid response format from the server');\n        }\n      } catch (innerErr) {\n        console.error('[DAILY ACTIONS PAGE] Error in inner try block:', innerErr);\n        throw innerErr; // Re-throw to be caught by the outer catch block\n      }\n    } catch (err) {\n      console.error('[DAILY ACTIONS PAGE] Error fetching daily actions:', err);\n      setError('Failed to load daily actions data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = (): void => {\n    console.log('[DAILY ACTIONS PAGE] Apply filters button clicked');\n    console.log('[DAILY ACTIONS PAGE] Current filters:', {\n      startDate: format(startDate, 'yyyy-MM-dd'),\n      endDate: format(endDate, 'yyyy-MM-dd'),\n      whiteLabelId\n    });\n    fetchDailyActions();\n  };\n\n  // Handle white label change\n  const handleWhiteLabelChange = (event: SelectChangeEvent): void => {\n    console.log(`[DAILY ACTIONS PAGE] White label changed to: ${event.target.value}`);\n    setWhiteLabelId(event.target.value);\n  };\n\n  // Format currency values\n  const formatCurrency = (value: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(value);\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom>\n            Daily Actions Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze daily player activities, deposits, and gaming revenue\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={RouterLink}\n          to=\"/reports/daily-actions/advanced\"\n          startIcon={<FilterListIcon />}\n        >\n          Advanced Report\n        </Button>\n      </Box>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <FilterListIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Filters</Typography>\n        </Box>\n\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth>\n              <InputLabel>White Label</InputLabel>\n              <Select\n                value={whiteLabelId}\n                onChange={handleWhiteLabelChange}\n                label=\"White Label\"\n              >\n                <MenuItem value=\"\">All White Labels</MenuItem>\n                {whiteLabels && whiteLabels.length > 0 ?\n                  whiteLabels.map((wl) => (\n                    <MenuItem key={wl.id} value={wl.id}>{wl.name}</MenuItem>\n                  ))\n                : [\n                  // Default white labels if none are loaded - use array instead of Fragment\n                  <MenuItem key=\"casino-royale\" value=\"casino-royale\">Casino Royale</MenuItem>,\n                  <MenuItem key=\"lucky-spin\" value=\"lucky-spin\">Lucky Spin</MenuItem>,\n                  <MenuItem key=\"golden-bet\" value=\"golden-bet\">Golden Bet</MenuItem>\n                ]}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} md={3} sx={{ display: 'flex', alignItems: 'center' }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<RefreshIcon />}\n              onClick={handleApplyFilters}\n              sx={{ mr: 2 }}\n            >\n              Apply Filters\n            </Button>\n\n            <span>\n              <Button\n                variant=\"outlined\"\n                startIcon={<DownloadIcon />}\n                disabled={loading || dailyActions.length === 0}\n              >\n                Export\n              </Button>\n            </span>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Registrations\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalRegistrations.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                First Time Depositors\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalFTD.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Deposits\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalDeposits)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Cashouts\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalCashouts)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total GGR\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalGGR)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Data Table */}\n      <Paper sx={{ p: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <TableChartIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Daily Actions Data</Typography>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : dailyActions.length === 0 ? (\n          <Alert severity=\"info\">\n            No data available for the selected filters. Try adjusting your filters or click \"Apply Filters\" to load data.\n          </Alert>\n        ) : (\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Date</TableCell>\n                  <TableCell>White Label</TableCell>\n                  <TableCell align=\"right\">Registrations</TableCell>\n                  <TableCell align=\"right\">FTD</TableCell>\n                  <TableCell align=\"right\">Deposits</TableCell>\n                  <TableCell align=\"right\">Cashouts</TableCell>\n                  <TableCell align=\"right\">Casino GGR</TableCell>\n                  <TableCell align=\"right\">Sports GGR</TableCell>\n                  <TableCell align=\"right\">Live GGR</TableCell>\n                  <TableCell align=\"right\">Total GGR</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {dailyActions.map((row) => (\n                  <TableRow key={row.id}>\n                    <TableCell>{format(new Date(row.date), 'MMM dd, yyyy')}</TableCell>\n                    <TableCell>{row.whiteLabelName}</TableCell>\n                    <TableCell align=\"right\">{row.registrations}</TableCell>\n                    <TableCell align=\"right\">{row.ftd}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.deposits)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.paidCashouts)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.ggrCasino)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.ggrSport)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.ggrLive)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.totalGGR)}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default DailyActionsPage;\n","import createStyled from './createStyled';\nconst styled = createStyled();\nexport default styled;"],"names":["_excluded","defaultTheme","createTheme","defaultCreateStyledComponent","systemStyled","name","slot","overridesResolver","props","styles","ownerState","root","capitalize","String","maxWidth","fixed","disableGutters","useThemePropsDefault","inProps","useThemePropsSystem","Container","options","arguments","length","undefined","createStyledComponent","useThemeProps","componentName","ContainerRoot","_ref","theme","_extends","width","marginLeft","boxSizing","marginRight","display","paddingLeft","spacing","paddingRight","breakpoints","up","_ref2","Object","keys","values","reduce","acc","breakpointValueKey","breakpoint","value","unit","_ref3","Math","max","xs","React","ref","className","component","other","_objectWithoutPropertiesLoose","classes","useUtilityClasses","slots","composeClasses","generateUtilityClass","_jsx","as","clsx","createContainer","styled","DailyActionsPage","startDate","setStartDate","useState","subDays","Date","endDate","setEndDate","whiteLabelId","setWhiteLabelId","whiteLabels","setWhiteLabels","dailyActions","setDailyActions","loading","setLoading","error","setError","summary","setSummary","totalRegistrations","totalFTD","totalDeposits","totalCashouts","totalGGR","useEffect","async","console","log","FEATURES","USE_MOCK_DATA_FOR_UI_TESTING","localStorage","getItem","mockDataModule","mockMetadata","default","getMockData","data","dailyActionsService","getMetadata","err","fetchMetadata","timer","setTimeout","fetchDailyActions","fetchInitialData","clearTimeout","formattedStartDate","format","filters","mockDataService","mockSummaryData","summaryData","mockRegularData","sum","item","registrations","ftd","deposits","paidCashouts","mockError","response","getData","innerErr","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","_jsxs","children","Box","sx","mb","justifyContent","alignItems","Typography","variant","gutterBottom","color","Button","RouterLink","to","startIcon","FilterListIcon","Paper","p","mr","Grid","container","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","label","onChange","newValue","slotProps","textField","fullWidth","FormControl","InputLabel","Select","event","target","MenuItem","map","wl","id","RefreshIcon","onClick","handleApplyFilters","DownloadIcon","disabled","sm","Card","CardContent","toLocaleString","TableChartIcon","Alert","severity","CircularProgress","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","date","whiteLabelName","ggrCasino","ggrSport","ggrLive","createStyled"],"sourceRoot":""}