{"version":3,"file":"static/js/4949.2fc6e7fe.chunk.js","mappings":"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","sources":["components/common/MultiSelect.tsx","services/api/gamesService.ts","pages/showcase/reports/GamesPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Chip,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n  Typography,\n  Checkbox,\n  ListItemText,\n  TextField,\n  InputAdornment,\n  Divider,\n  Button,\n  FormHelperText,\n  Tooltip,\n  IconButton,\n  CircularProgress\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { CommonProps } from '../../types/common';\n\n// Option interface for select items\nexport interface MultiSelectOption {\n  value: string | number;\n  label: string;\n  disabled?: boolean;\n  group?: string;\n  description?: string;\n}\n\n// Props interface for the MultiSelect component\nexport interface MultiSelectProps extends CommonProps {\n  /**\n   * Array of options to display in the select\n   */\n  options: MultiSelectOption[];\n\n  /**\n   * Currently selected values\n   */\n  value: (string | number)[];\n\n  /**\n   * Callback fired when the value changes\n   */\n  onChange: (value: (string | number)[]) => void;\n\n  /**\n   * Label for the select\n   */\n  label?: string;\n\n  /**\n   * Placeholder text when no options are selected\n   */\n  placeholder?: string;\n\n  /**\n   * Whether the component is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the component is required\n   */\n  required?: boolean;\n\n  /**\n   * Error message to display\n   */\n  error?: string;\n\n  /**\n   * Helper text to display below the select\n   */\n  helperText?: string;\n\n  /**\n   * Maximum height of the dropdown menu in pixels\n   */\n  maxMenuHeight?: number;\n\n  /**\n   * Whether to show a search input in the dropdown\n   */\n  searchable?: boolean;\n\n  /**\n   * Whether to show select all/none options\n   */\n  showSelectAllOption?: boolean;\n\n  /**\n   * Custom render function for the selected values\n   */\n  renderValue?: (selected: (string | number)[]) => React.ReactNode;\n\n  /**\n   * Size of the select component\n   */\n  size?: 'small' | 'medium';\n\n  /**\n   * Width of the component\n   */\n  width?: string | number;\n\n  /**\n   * Custom ID for the component\n   */\n  id?: string;\n\n  /**\n   * Custom name for the component\n   */\n  name?: string;\n\n  /**\n   * Whether the component is in a loading state\n   */\n  loading?: boolean;\n\n  /**\n   * Whether the component should take up the full width of its container\n   */\n  fullWidth?: boolean;\n}\n\n/**\n * MultiSelect component\n *\n * A reusable multi-select dropdown component with search functionality,\n * select all option, and chip display for selected values.\n */\nconst MultiSelect: React.FC<MultiSelectProps> = ({\n  options = [],\n  value = [],\n  onChange,\n  label = '',\n  placeholder = 'Select items',\n  disabled = false,\n  required = false,\n  error = '',\n  helperText = '',\n  maxMenuHeight = 300,\n  searchable = true,\n  showSelectAllOption = true,\n  renderValue,\n  size = 'small',\n  width,\n  id,\n  name,\n  sx,\n  className,\n  style,\n  loading = false,\n  fullWidth = true\n}) => {\n  // State for search term\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  // Filter options based on search term\n  const filteredOptions = options.filter(option =>\n    option.label.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Handle select change\n  const handleChange = (event: SelectChangeEvent<(string | number)[]>) => {\n    const newValue = event.target.value as (string | number)[];\n    onChange(newValue);\n  };\n\n  // Handle search input change\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  };\n\n  // Clear search term\n  const handleClearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Handle select all\n  const handleSelectAll = () => {\n    // Only select from filtered options that aren't disabled\n    const selectableOptions = filteredOptions\n      .filter(option => !option.disabled)\n      .map(option => option.value);\n\n    onChange(selectableOptions);\n  };\n\n  // Handle select none\n  const handleSelectNone = () => {\n    onChange([]);\n  };\n\n  // Handle removing a single item\n  const handleRemoveItem = (valueToRemove: string | number) => (event: React.MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation(); // Prevent the dropdown from opening\n    const newValue = value.filter(val => val.toString() !== valueToRemove.toString());\n    onChange(newValue);\n  };\n\n  // Default render function for selected values\n  const defaultRenderValue = (selected: (string | number)[]) => {\n    if (!selected || selected.length === 0) {\n      return <Typography color=\"text.secondary\">{placeholder}</Typography>;\n    }\n\n    // Always show chips for all selected items\n    return (\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n        {selected.map((selectedValue) => {\n          const option = options.find(opt => opt.value.toString() === selectedValue.toString());\n          return (\n            <Chip\n              key={selectedValue}\n              label={option ? option.label : selectedValue}\n              size=\"small\"\n              onDelete={handleRemoveItem(selectedValue)}\n              onClick={(e) => e.stopPropagation()} // Prevent opening dropdown when clicking the chip\n              deleteIcon={\n                <ClearIcon\n                  fontSize=\"small\"\n                  onMouseDown={(e) => e.stopPropagation()} // Extra prevention\n                />\n              }\n              sx={{\n                '& .MuiChip-deleteIcon': {\n                  display: 'none',\n                  opacity: 0.7,\n                  '&:hover': {\n                    opacity: 1,\n                  }\n                },\n                '&:hover .MuiChip-deleteIcon': {\n                  display: 'block',\n                },\n              }}\n            />\n          );\n        })}\n      </div>\n    );\n  };\n\n  // If loading, show a loading message\n  if (loading) {\n    return (\n      <FormControl\n        fullWidth\n        size={size}\n        error={!!error}\n        disabled={true}\n        required={required}\n        sx={{\n          width: width,\n          ...sx\n        }}\n        className={className}\n        style={style}\n      >\n        {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n        <Select\n          labelId={`${id || 'multi-select'}-label`}\n          id={id || 'multi-select'}\n          name={name}\n          multiple\n          value={[]}\n          input={<OutlinedInput label={label} />}\n          renderValue={() => <Typography color=\"text.secondary\">Loading options...</Typography>}\n        >\n          <MenuItem disabled>\n            <div style={{ display: 'flex', alignItems: 'center', padding: 8 }}>\n              <CircularProgress size={20} style={{ marginRight: 8 }} />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Loading options...\n              </Typography>\n            </div>\n          </MenuItem>\n        </Select>\n        {helperText && (\n          <FormHelperText>{helperText}</FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n\n  // If no options are provided, show a message\n  if (!options || options.length === 0) {\n    return (\n      <FormControl\n        fullWidth\n        size={size}\n        error={!!error}\n        disabled={true}\n        required={required}\n        sx={{\n          width: width,\n          ...sx\n        }}\n        className={className}\n        style={style}\n      >\n        {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n        <Select\n          labelId={`${id || 'multi-select'}-label`}\n          id={id || 'multi-select'}\n          name={name}\n          multiple\n          value={[]}\n          input={<OutlinedInput label={label} />}\n          renderValue={() => <Typography color=\"text.secondary\">No options available</Typography>}\n        >\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options available\n            </Typography>\n          </MenuItem>\n        </Select>\n        {helperText && (\n          <FormHelperText>{helperText}</FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n\n  // Reset search when dropdown closes\n  const handleClose = () => {\n    setSearchTerm('');\n  };\n\n  return (\n    <FormControl\n      fullWidth\n      size={size}\n      error={!!error}\n      disabled={disabled}\n      required={required}\n      sx={{\n        width: width || '100%',\n        minWidth: '100%',\n        ...sx\n      }}\n      className={className}\n      style={style}\n    >\n      {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n\n      <Select\n        labelId={`${id || 'multi-select'}-label`}\n        id={id || 'multi-select'}\n        name={name}\n        multiple\n        value={value}\n        onChange={handleChange}\n        input={<OutlinedInput label={label} />}\n        renderValue={renderValue || defaultRenderValue}\n        onClose={handleClose}\n        // Add a custom click handler to prevent opening when clicking on chips\n        onClick={(e) => {\n          // Check if the click was on a chip or delete icon\n          if (\n            e.target instanceof HTMLElement &&\n            (e.target.classList.contains('MuiChip-root') ||\n             e.target.classList.contains('MuiChip-label') ||\n             e.target.classList.contains('MuiChip-deleteIcon') ||\n             e.target.closest('.MuiChip-deleteIcon'))\n          ) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }}\n        MenuProps={{\n          PaperProps: {\n            style: {\n              maxHeight: maxMenuHeight,\n            },\n          },\n        }}\n      >\n        {/* Search input and Select All/Clear All in a sticky container */}\n        <div\n          style={{\n            position: 'sticky',\n            top: 0,\n            backgroundColor: '#fff',\n            zIndex: 2,\n            borderBottom: '1px solid rgba(0, 0, 0, 0.12)'\n          }}\n        >\n          {/* Search input */}\n          {searchable && (\n            <div style={{ padding: 8 }}>\n              <TextField\n                size=\"small\"\n                placeholder=\"Search...\"\n                fullWidth\n                value={searchTerm}\n                onChange={handleSearchChange}\n                onClick={(e) => e.stopPropagation()}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SearchIcon fontSize=\"small\" />\n                    </InputAdornment>\n                  ),\n                  endAdornment: searchTerm ? (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        size=\"small\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleClearSearch();\n                        }}\n                      >\n                        <ClearIcon fontSize=\"small\" />\n                      </IconButton>\n                    </InputAdornment>\n                  ) : null,\n                }}\n              />\n            </div>\n          )}\n\n          {/* Select all/none options */}\n          {showSelectAllOption && filteredOptions.length > 0 && (\n            <div style={{ paddingLeft: 8, paddingRight: 8, paddingTop: 4, paddingBottom: 4, display: 'flex', justifyContent: 'space-between' }}>\n              <Button size=\"small\" onClick={handleSelectAll}>Select All</Button>\n              <Button size=\"small\" onClick={handleSelectNone}>Clear All</Button>\n            </div>\n          )}\n        </div>\n\n        {/* No options message */}\n        {filteredOptions.length === 0 && (\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options found\n            </Typography>\n          </MenuItem>\n        )}\n\n        {/* Options */}\n        {filteredOptions.map((option) => (\n          <MenuItem\n            key={option.value}\n            value={option.value}\n            disabled={option.disabled}\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            }}\n          >\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <Checkbox\n                checked={value.some(val =>\n                  val.toString() === option.value.toString()\n                )}\n              />\n              <ListItemText\n                primary={option.label}\n                secondary={option.group}\n              />\n            </div>\n            {option.description && (\n              <Tooltip title={option.description} arrow>\n                <InfoOutlinedIcon fontSize=\"small\" color=\"action\" style={{ marginLeft: 8 }} />\n              </Tooltip>\n            )}\n          </MenuItem>\n        ))}\n      </Select>\n\n      {/* Helper text or error message */}\n      {(helperText || error) && (\n        <FormHelperText>{error || helperText}</FormHelperText>\n      )}\n    </FormControl>\n  );\n};\n\nexport default MultiSelect;\n","import apiClient from './apiClient';\nimport {\n  Game,\n  GamePerformance,\n  GameCategory,\n  GameProvider,\n  PlayerDemographics,\n  GameSession,\n  GamesQueryParams,\n  TopGamesQueryParams,\n  GamePerformanceQueryParams\n} from '../../types/games';\nimport { ApiResponse } from '../../types/api';\n\n/**\n * Get all games with pagination and filtering\n * @param params - Query parameters\n * @returns Promise object with games data\n */\nconst getGames = async (params: GamesQueryParams = {}): Promise<ApiResponse<Game[]>> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games');\n    const response = await apiClient.get<ApiResponse<Game[]>>('/api/games', { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game by ID\n * @param id - Game ID\n * @returns Promise object with game data\n */\nconst getGameById = async (id: string): Promise<Game> => {\n  try {\n    console.log(`[GAMES_SERVICE] Using API endpoint: /api/games/${id}`);\n    const response = await apiClient.get<Game>(`/api/games/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game performance metrics\n * @param id - Game ID\n * @param params - Query parameters\n * @returns Promise object with game performance data\n */\nconst getGamePerformance = async (id: string, params: GamePerformanceQueryParams = {}): Promise<GamePerformance> => {\n  try {\n    console.log(`[GAMES_SERVICE] Using API endpoint: /api/games/${id}/performance`);\n    const response = await apiClient.get<GamePerformance>(`/api/games/${id}/performance`, { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get top games by metric\n * @param params - Query parameters\n * @returns Promise object with top games data\n */\nconst getTopGames = async (params: TopGamesQueryParams = {}): Promise<Game[]> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games/top');\n    const response = await apiClient.get<Game[]>('/api/games/top', { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game categories\n * @returns Promise object with game categories\n */\nconst getGameCategories = async (): Promise<GameCategory[]> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games/categories');\n    const response = await apiClient.get<GameCategory[]>('/api/games/categories');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game providers\n * @returns Promise object with game providers\n */\nconst getGameProviders = async (): Promise<GameProvider[]> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games/providers');\n    const response = await apiClient.get<GameProvider[]>('/api/games/providers');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game player demographics\n * @param id - Game ID\n * @returns Promise object with player demographics for the game\n */\nconst getGamePlayerDemographics = async (id: string): Promise<PlayerDemographics> => {\n  try {\n    console.log(`[GAMES_SERVICE] Using API endpoint: /api/games/${id}/player-demographics`);\n    const response = await apiClient.get<PlayerDemographics>(`/api/games/${id}/player-demographics`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game session data\n * @param id - Game ID\n * @param params - Query parameters\n * @returns Promise object with game session data\n */\nconst getGameSessions = async (id: string, params: GamePerformanceQueryParams = {}): Promise<GameSession[]> => {\n  try {\n    console.log(`[GAMES_SERVICE] Using API endpoint: /api/games/${id}/sessions`);\n    const response = await apiClient.get<GameSession[]>(`/api/games/${id}/sessions`, { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Export games data\n * @param params - Query parameters\n * @returns Promise object with blob data\n */\nconst exportGames = async (params: GamesQueryParams = {}): Promise<Blob> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games/export');\n    const response = await apiClient.get('/api/games/export', {\n      params,\n      responseType: 'blob'\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default {\n  getGames,\n  getGameById,\n  getGamePerformance,\n  getTopGames,\n  getGameCategories,\n  getGameProviders,\n  getGamePlayerDemographics,\n  getGameSessions,\n  exportGames\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Collapse,\n  Rating,\n  LinearProgress,\n  Tooltip\n} from '@mui/material';\nimport { EnhancedTable } from '../../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../../components/tables/enhanced/types';\nimport MultiSelect, { MultiSelectOption } from '../../../components/common/MultiSelect';\nimport { format as formatDate } from 'date-fns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport SimpleBox from '../../../components/common/SimpleBox';\nimport { createSx } from '../../../utils/styleUtils';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\nimport CasinoIcon from '@mui/icons-material/Casino';\nimport PeopleIcon from '@mui/icons-material/People';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport StarIcon from '@mui/icons-material/Star';\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\n\n// Import services\nimport gamesService from '../../../services/api/gamesService';\nimport { ReportFilters } from '../../../services/api/types';\nimport { Game } from '../../../types/games';\n\n// Define interfaces\ninterface Filters {\n  startDate: string;\n  endDate: string;\n  providerIds?: string[];\n  categoryIds?: string[];\n\n  // Advanced filters\n  name?: string;\n  minRtp?: number;\n  maxRtp?: number;\n  volatility?: string[];\n  status?: string[];\n  releaseDate?: string;\n  features?: string[];\n  tags?: string[];\n}\n\ninterface Provider {\n  id: string;\n  name: string;\n}\n\ninterface Category {\n  id: string;\n  name: string;\n}\n\ninterface GamePerformance {\n  gameId: string;\n  revenue: number;\n  uniquePlayers: number;\n  sessions: number;\n  avgSessionDuration: number;\n  avgBet: number;\n  avgWin: number;\n  betsCount: number;\n  winsCount: number;\n  winRate: number;\n  holdPercentage: number;\n  period?: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\n/**\n * GamesPage component\n * Displays a comprehensive game report with filtering and data visualization\n */\nconst GamesPage: React.FC = () => {\n  // State for filters\n  const [startDate, setStartDate] = useState<Date>(new Date(new Date().setDate(new Date().getDate() - 30)));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [selectedProviders, setSelectedProviders] = useState<string[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState<boolean>(false);\n  const [advancedFilters, setAdvancedFilters] = useState<Record<string, any>>({});\n\n  // State for data\n  const [games, setGames] = useState<Game[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState<number>(0);\n  const [page, setPage] = useState<number>(0);\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [sortBy, setSortBy] = useState<string>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n\n  // State for metadata\n  const [providers, setProviders] = useState<Provider[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [providersOptions, setProvidersOptions] = useState<MultiSelectOption[]>([]);\n  const [categoriesOptions, setCategoriesOptions] = useState<MultiSelectOption[]>([]);\n\n  // State for game details dialog\n  const [selectedGame, setSelectedGame] = useState<Game | null>(null);\n  const [gameDetailsOpen, setGameDetailsOpen] = useState<boolean>(false);\n  const [gamePerformance, setGamePerformance] = useState<GamePerformance | null>(null);\n\n  // Define table columns\n  const columns: ColumnDef[] = [\n    {\n      id: 'name',\n      label: 'Game Name',\n      format: (value, row: Game) => (\n        <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center' })}>\n          {row.thumbnailUrl && (\n            <SimpleBox\n              component=\"img\"\n              src={row.thumbnailUrl}\n              alt={row.name}\n              sx={createSx({ width: 40, height: 40, mr: 2, borderRadius: 1 })}\n            />\n          )}\n          <Typography variant=\"body2\" fontWeight=\"medium\">\n            {row.name}\n          </Typography>\n        </SimpleBox>\n      ),\n      sortable: true,\n      width: 200,\n    },\n    {\n      id: 'provider',\n      label: 'Provider',\n      type: 'text',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'category',\n      label: 'Category',\n      type: 'text',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'rtp',\n      label: 'RTP',\n      type: 'percentage',\n      sortable: true,\n      width: 100,\n    },\n    {\n      id: 'volatility',\n      label: 'Volatility',\n      format: (value, row: Game) => {\n        const volatility = row.volatility;\n        return (\n          <Chip\n            label={volatility ? volatility.charAt(0).toUpperCase() + volatility.slice(1) : 'N/A'}\n            size=\"small\"\n            color={\n              volatility === 'high' ? 'error' :\n              volatility === 'medium' ? 'warning' :\n              volatility === 'low' ? 'success' :\n              'default'\n            }\n          />\n        );\n      },\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'revenue',\n      label: 'Revenue',\n      type: 'currency',\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'uniquePlayers',\n      label: 'Players',\n      type: 'number',\n      sortable: true,\n      width: 100,\n    },\n    {\n      id: 'sessions',\n      label: 'Sessions',\n      type: 'number',\n      sortable: true,\n      width: 100,\n    },\n    {\n      id: 'winRate',\n      label: 'Win Rate',\n      type: 'percentage',\n      sortable: true,\n      width: 100,\n    },\n    {\n      id: 'status',\n      label: 'Status',\n      format: (value, row: Game) => (\n        <Chip\n          label={row.status ? row.status.charAt(0).toUpperCase() + row.status.slice(1) : 'N/A'}\n          size=\"small\"\n          color={\n            row.status === 'active' ? 'success' :\n            row.status === 'inactive' ? 'default' :\n            row.status === 'maintenance' ? 'warning' :\n            'primary'\n          }\n        />\n      ),\n      sortable: true,\n      width: 120,\n    }\n  ];\n\n  // Helper function to format currency\n  const formatCurrency = (amount: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(amount);\n  };\n\n  // Fetch metadata on component mount\n  useEffect(() => {\n    fetchMetadata();\n  }, []);\n\n  // Fetch games data when filters change\n  useEffect(() => {\n    fetchGames();\n  }, [page, pageSize, sortBy, sortDirection]);\n\n  // Fetch metadata (providers, categories)\n  const fetchMetadata = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch providers\n      const providersData = await gamesService.getGameProviders();\n      setProviders(providersData);\n\n      // Convert providers to MultiSelect options\n      const providerOptions = providersData.map((provider: Provider) => ({\n        value: provider.id,\n        label: provider.name\n      }));\n      setProvidersOptions(providerOptions);\n\n      // Fetch categories\n      const categoriesData = await gamesService.getGameCategories();\n      setCategories(categoriesData);\n\n      // Convert categories to MultiSelect options\n      const categoryOptions = categoriesData.map((category: Category) => ({\n        value: category.id,\n        label: category.name\n      }));\n      setCategoriesOptions(categoryOptions);\n    } catch (err) {\n      console.error('[GAMES PAGE] Error fetching metadata:', err);\n      setError('Failed to load metadata. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch games data\n  const fetchGames = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Create query parameters\n      const params: any = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        provider: selectedProviders.length > 0 ? selectedProviders.join(',') : undefined,\n        category: selectedCategories.length > 0 ? selectedCategories.join(',') : undefined,\n        page: page + 1, // API uses 1-based indexing\n        limit: pageSize,\n        sortBy,\n        sortOrder: sortDirection\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[GAMES PAGE] Adding advanced filters:', advancedFilters);\n\n        if (advancedFilters.name) {\n          params.search = advancedFilters.name;\n        }\n\n        if (advancedFilters.minRtp) {\n          params.minRtp = advancedFilters.minRtp;\n        }\n\n        if (advancedFilters.maxRtp) {\n          params.maxRtp = advancedFilters.maxRtp;\n        }\n\n        if (advancedFilters.volatility && advancedFilters.volatility.length > 0) {\n          params.volatility = advancedFilters.volatility.join(',');\n        }\n\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          params.status = advancedFilters.status.join(',');\n        }\n\n        if (advancedFilters.releaseDate) {\n          params.releaseDateStart = formatDate(advancedFilters.releaseDate, 'yyyy-MM-dd');\n        }\n\n        if (advancedFilters.features && advancedFilters.features.length > 0) {\n          params.features = advancedFilters.features.join(',');\n        }\n\n        if (advancedFilters.tags && advancedFilters.tags.length > 0) {\n          params.tags = advancedFilters.tags.join(',');\n        }\n      }\n\n      // Fetch games data from API\n      const response = await gamesService.getGames(params);\n\n      if (response && response.data) {\n        setGames(response.data);\n        setTotalCount(response.meta?.totalCount || response.data.length);\n      } else {\n        setGames([]);\n        setTotalCount(0);\n      }\n    } catch (err) {\n      console.error('[GAMES PAGE] Error fetching games data:', err);\n      setError('Failed to load games data. Please try again later.');\n      setGames([]);\n      setTotalCount(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = (): void => {\n    console.log('[GAMES PAGE] Apply filters button clicked');\n\n    // Combine basic filters with advanced filters if they exist\n    const combinedFilters = {\n      startDate: formatDate(startDate, 'yyyy-MM-dd'),\n      endDate: formatDate(endDate, 'yyyy-MM-dd'),\n      selectedProviders,\n      selectedCategories,\n      ...advancedFilters\n    };\n\n    console.log('[GAMES PAGE] Current filters:', combinedFilters);\n\n    // Reset pagination\n    setPage(0);\n\n    fetchGames();\n  };\n\n  // Handle providers change\n  const handleProvidersChange = (values: (string | number)[]): void => {\n    setSelectedProviders(values.map(v => v.toString()));\n  };\n\n  // Handle categories change\n  const handleCategoriesChange = (values: (string | number)[]): void => {\n    setSelectedCategories(values.map(v => v.toString()));\n  };\n\n  // Handle advanced filter change\n  const handleAdvancedFilterChange = (key: string, value: any): void => {\n    setAdvancedFilters(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  // Handle reset advanced filters\n  const handleResetAdvancedFilters = (): void => {\n    setAdvancedFilters({});\n  };\n\n  // Handle toggle advanced filters\n  const handleToggleAdvancedFilters = (): void => {\n    setShowAdvancedFilters(!showAdvancedFilters);\n  };\n\n  // Handle view game details\n  const handleViewGameDetails = async (game: Game): Promise<void> => {\n    setSelectedGame(game);\n    setGameDetailsOpen(true);\n\n    try {\n      // Fetch game performance data\n      const performanceData = await gamesService.getGamePerformance(game.id, {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd')\n      });\n\n      // Ensure all required properties exist with default values if needed\n      const validatedData: GamePerformance = {\n        gameId: performanceData.gameId || game.id,\n        revenue: performanceData.revenue || 0,\n        uniquePlayers: performanceData.uniquePlayers || 0,\n        sessions: performanceData.sessions || 0,\n        avgSessionDuration: performanceData.avgSessionDuration || 0,\n        avgBet: performanceData.avgBet || 0,\n        avgWin: performanceData.avgWin || 0,\n        betsCount: performanceData.betsCount || 0,\n        winsCount: performanceData.winsCount || 0,\n        winRate: performanceData.winRate || 0,\n        holdPercentage: performanceData.holdPercentage || 0,\n        period: performanceData.period || {\n          startDate: formatDate(startDate, 'yyyy-MM-dd'),\n          endDate: formatDate(endDate, 'yyyy-MM-dd')\n        }\n      };\n\n      setGamePerformance(validatedData);\n    } catch (err) {\n      console.error('[GAMES PAGE] Error fetching game performance:', err);\n\n      // Create default performance data when API call fails\n      const defaultPerformance: GamePerformance = {\n        gameId: game.id,\n        revenue: 0,\n        uniquePlayers: 0,\n        sessions: 0,\n        avgSessionDuration: 0,\n        avgBet: 0,\n        avgWin: 0,\n        betsCount: 0,\n        winsCount: 0,\n        winRate: 0,\n        holdPercentage: 0,\n        period: {\n          startDate: formatDate(startDate, 'yyyy-MM-dd'),\n          endDate: formatDate(endDate, 'yyyy-MM-dd')\n        }\n      };\n\n      setGamePerformance(defaultPerformance);\n    }\n  };\n\n  // Handle close game details dialog\n  const handleCloseGameDetails = (): void => {\n    setGameDetailsOpen(false);\n    setSelectedGame(null);\n    setGamePerformance(null);\n  };\n\n  // Handle export\n  const handleExport = async (format: ExportFormat, exportData: any[]): Promise<void> => {\n    try {\n      setLoading(true);\n\n      // Convert format to string for API\n      const formatStr = format === ExportFormat.CSV ? 'csv' :\n                        format === ExportFormat.EXCEL ? 'xlsx' :\n                        format === ExportFormat.PDF ? 'pdf' : 'csv';\n\n      // Create query parameters\n      const params: any = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        provider: selectedProviders.length > 0 ? selectedProviders.join(',') : undefined,\n        category: selectedCategories.length > 0 ? selectedCategories.join(',') : undefined,\n        format: formatStr\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        if (advancedFilters.name) {\n          params.search = advancedFilters.name;\n        }\n\n        if (advancedFilters.minRtp) {\n          params.minRtp = advancedFilters.minRtp;\n        }\n\n        if (advancedFilters.maxRtp) {\n          params.maxRtp = advancedFilters.maxRtp;\n        }\n\n        if (advancedFilters.volatility && advancedFilters.volatility.length > 0) {\n          params.volatility = advancedFilters.volatility.join(',');\n        }\n\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          params.status = advancedFilters.status.join(',');\n        }\n\n        if (advancedFilters.releaseDate) {\n          params.releaseDateStart = formatDate(advancedFilters.releaseDate, 'yyyy-MM-dd');\n        }\n\n        if (advancedFilters.features && advancedFilters.features.length > 0) {\n          params.features = advancedFilters.features.join(',');\n        }\n\n        if (advancedFilters.tags && advancedFilters.tags.length > 0) {\n          params.tags = advancedFilters.tags.join(',');\n        }\n      }\n\n      // If we have the data already, we can use it directly instead of making an API call\n      let blob;\n\n      if (exportData.length > 0 && (format === ExportFormat.CSV || format === ExportFormat.JSON)) {\n        // Client-side export for CSV and JSON\n        if (format === ExportFormat.CSV) {\n          // Create CSV content\n          const headers = columns.map(col => col.label || col.id).join(',');\n          const rows = exportData.map(row =>\n            columns.map(col => {\n              const value = row[col.id];\n              // Handle special cases like objects, arrays, etc.\n              if (typeof value === 'object' && value !== null) {\n                return JSON.stringify(value).replace(/\"/g, '\"\"');\n              }\n              return value !== undefined && value !== null ? String(value).replace(/\"/g, '\"\"') : '';\n            }).join(',')\n          ).join('\\n');\n\n          const csvContent = `${headers}\\n${rows}`;\n          blob = new Blob([csvContent], { type: 'text/csv' });\n        } else if (format === ExportFormat.JSON) {\n          // Create JSON content\n          const jsonContent = JSON.stringify(exportData, null, 2);\n          blob = new Blob([jsonContent], { type: 'application/json' });\n        }\n      } else {\n        // Server-side export for other formats or when we need to process all data\n        blob = await gamesService.exportGames(params);\n      }\n\n      // Create download link\n      if (blob) {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `games-report-${formatDate(new Date(), 'yyyy-MM-dd')}.${formatStr}`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }\n    } catch (err) {\n      console.error('[GAMES PAGE] Error exporting data:', err);\n      setError('Failed to export data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle pagination change\n  const handlePageChange = (newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle page size change\n  const handlePageSizeChange = (newPageSize: number): void => {\n    setPageSize(newPageSize);\n    setPage(0); // Reset to first page when changing page size\n  };\n\n  // Handle sorting change\n  const handleSortingChange = (field: string, direction: 'asc' | 'desc'): void => {\n    setSortBy(field);\n    setSortDirection(direction);\n  };\n\n  // Calculate summary statistics\n  const summary = {\n    totalGames: games.length,\n    totalRevenue: games.reduce((sum, g) => sum + (g.revenue || 0), 0),\n    totalPlayers: games.reduce((sum, g) => sum + (g.uniquePlayers || 0), 0),\n    totalSessions: games.reduce((sum, g) => sum + (g.sessions || 0), 0),\n    avgRtp: games.length > 0 ? games.reduce((sum, g) => sum + (g.rtp || 0), 0) / games.length : 0,\n    avgWinRate: games.length > 0 ? games.reduce((sum, g) => sum + (g.winRate || 0), 0) / games.length : 0\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <SimpleBox sx={createSx({ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' })}>\n        <SimpleBox>\n          <Typography variant=\"h4\" gutterBottom>\n            Games Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze game performance, popularity, and revenue metrics\n          </Typography>\n        </SimpleBox>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={RouterLink}\n          to=\"/reports/games/advanced\"\n          startIcon={<FilterListIcon />}\n        >\n          Advanced Report\n        </Button>\n      </SimpleBox>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 })}>\n          <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center' })}>\n            <FilterListIcon sx={createSx({ mr: 1 })} />\n            <Typography variant=\"h6\">Filters</Typography>\n          </SimpleBox>\n          <Button\n            color=\"primary\"\n            onClick={handleToggleAdvancedFilters}\n            endIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          >\n            {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n          </Button>\n        </SimpleBox>\n\n        {/* Basic Filters */}\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Providers\"\n              options={providersOptions}\n              value={selectedProviders}\n              onChange={handleProvidersChange}\n              placeholder=\"Select Providers\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Categories\"\n              options={categoriesOptions}\n              value={selectedCategories}\n              onChange={handleCategoriesChange}\n              placeholder=\"Select Categories\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        {/* Advanced Filters */}\n        <Collapse in={showAdvancedFilters} timeout=\"auto\" unmountOnExit>\n          <SimpleBox sx={createSx({ mt: 3 })}>\n            <Divider sx={createSx({ mb: 3 })} />\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n\n            <Grid container spacing={3}>\n              {/* Game Information */}\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Game Information\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Game Name\"\n                  fullWidth\n                  value={advancedFilters.name || ''}\n                  onChange={(e) => handleAdvancedFilterChange('name', e.target.value)}\n                  placeholder=\"Search by name\"\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Status</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.status || []}\n                    onChange={(e) => handleAdvancedFilterChange('status', e.target.value)}\n                    label=\"Status\"\n                    renderValue={(selected) => (\n                      <SimpleBox sx={createSx({ display: 'flex', flexWrap: 'wrap', gap: 0.5 })}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </SimpleBox>\n                    )}\n                  >\n                    {['active', 'inactive', 'maintenance'].map((status) => (\n                      <MenuItem key={status} value={status}>\n                        {status.charAt(0).toUpperCase() + status.slice(1)}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Volatility</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.volatility || []}\n                    onChange={(e) => handleAdvancedFilterChange('volatility', e.target.value)}\n                    label=\"Volatility\"\n                    renderValue={(selected) => (\n                      <SimpleBox sx={createSx({ display: 'flex', flexWrap: 'wrap', gap: 0.5 })}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </SimpleBox>\n                    )}\n                  >\n                    {['low', 'medium', 'high'].map((volatility) => (\n                      <MenuItem key={volatility} value={volatility}>\n                        {volatility.charAt(0).toUpperCase() + volatility.slice(1)}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Release Date\"\n                    value={advancedFilters.releaseDate || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('releaseDate', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              {/* RTP Range */}\n              <Grid item xs={12} md={6}>\n                <Typography variant=\"body2\" gutterBottom>\n                  RTP Range (%)\n                </Typography>\n                <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center', gap: 2 })}>\n                  <TextField\n                    label=\"Min\"\n                    type=\"number\"\n                    fullWidth\n                    value={advancedFilters.minRtp || ''}\n                    onChange={(e) => handleAdvancedFilterChange('minRtp', e.target.value)}\n                    InputProps={{ inputProps: { min: 0, max: 100 } }}\n                  />\n                  <Typography variant=\"body1\">to</Typography>\n                  <TextField\n                    label=\"Max\"\n                    type=\"number\"\n                    fullWidth\n                    value={advancedFilters.maxRtp || ''}\n                    onChange={(e) => handleAdvancedFilterChange('maxRtp', e.target.value)}\n                    InputProps={{ inputProps: { min: 0, max: 100 } }}\n                  />\n                </SimpleBox>\n              </Grid>\n\n              {/* Features */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  label=\"Features\"\n                  placeholder=\"Enter features (comma separated)\"\n                  fullWidth\n                  value={advancedFilters.features || ''}\n                  onChange={(e) => handleAdvancedFilterChange('features', e.target.value.split(',').map(f => f.trim()))}\n                  helperText=\"E.g., free spins, bonus rounds, multipliers\"\n                />\n              </Grid>\n            </Grid>\n\n            <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'flex-end', mt: 3 })}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleResetAdvancedFilters}\n                sx={{ mr: 2 }}\n              >\n                Reset Advanced Filters\n              </Button>\n            </SimpleBox>\n          </SimpleBox>\n        </Collapse>\n\n        {/* Action Buttons */}\n        <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', mt: 3 })}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<RefreshIcon />}\n            onClick={handleApplyFilters}\n          >\n            Apply Filters\n          </Button>\n        </SimpleBox>\n      </Paper>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Games\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalGames.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Revenue\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalRevenue)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Players\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalPlayers.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Sessions\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalSessions.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Average RTP\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.avgRtp.toFixed(2)}%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Average Win Rate\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.avgWinRate.toFixed(2)}%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Data Table */}\n      <Paper sx={{ p: 3 }}>\n        <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center', mb: 2 })}>\n          <TableChartIcon sx={createSx({ mr: 1 })} />\n          <Typography variant=\"h6\">Games Data</Typography>\n        </SimpleBox>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        <EnhancedTable\n          columns={columns}\n          data={games}\n          loading={loading}\n          title=\"Games Data\"\n          emptyMessage=\"No games data available\"\n          idField=\"id\"\n          onExport={handleExport}\n          features={{\n            sorting: true,\n            filtering: {\n              enabled: true,\n              quickFilter: true,\n              advancedFilter: true\n            },\n            pagination: {\n              enabled: true,\n              defaultPageSize: pageSize,\n              pageSizeOptions: [10, 25, 50, 100]\n            },\n            columnManagement: {\n              enabled: true,\n              allowReordering: true,\n              allowHiding: true,\n              allowResizing: true\n            },\n            export: {\n              enabled: true,\n              formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n            }\n          }}\n          onRowClick={handleViewGameDetails}\n        />\n      </Paper>\n\n      {/* Game Details Dialog */}\n      <Dialog\n        open={gameDetailsOpen}\n        onClose={handleCloseGameDetails}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Game Details\n        </DialogTitle>\n        <DialogContent dividers>\n          {selectedGame && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <SimpleBox sx={createSx({ mb: 2 })}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Basic Information\n                  </Typography>\n                  <Divider sx={createSx({ my: 1 })} />\n\n                  <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center', mb: 2 })}>\n                    {selectedGame.thumbnailUrl && (\n                      <SimpleBox\n                        component=\"img\"\n                        src={selectedGame.thumbnailUrl}\n                        alt={selectedGame.name}\n                        sx={createSx({ width: 80, height: 80, mr: 2, borderRadius: 1 })}\n                      />\n                    )}\n                    <SimpleBox>\n                      <Typography variant=\"h6\">\n                        {selectedGame.name}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {selectedGame.provider} | {selectedGame.category}\n                      </Typography>\n                    </SimpleBox>\n                  </SimpleBox>\n\n                  {selectedGame.description && (\n                    <Typography variant=\"body2\" sx={{ mb: 2 }}>\n                      {selectedGame.description}\n                    </Typography>\n                  )}\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Status:</strong> {selectedGame.status ? selectedGame.status.charAt(0).toUpperCase() + selectedGame.status.slice(1) : 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Release Date:</strong> {selectedGame.releaseDate ? formatDate(new Date(selectedGame.releaseDate), 'MMM dd, yyyy') : 'N/A'}\n                  </Typography>\n\n                  <SimpleBox sx={createSx({ mb: 1 })}>\n                    <Typography variant=\"body1\" component=\"span\">\n                      <strong>RTP:</strong> {selectedGame.rtp ? `${selectedGame.rtp}%` : 'N/A'}\n                    </Typography>\n                    {selectedGame.rtp && (\n                      <Tooltip title={`Return to Player: ${selectedGame.rtp}%`}>\n                        <LinearProgress\n                          variant=\"determinate\"\n                          value={selectedGame.rtp}\n                          sx={createSx({ mt: 1, height: 8, borderRadius: 4 })}\n                        />\n                      </Tooltip>\n                    )}\n                  </SimpleBox>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Volatility:</strong> {selectedGame.volatility ? selectedGame.volatility.charAt(0).toUpperCase() + selectedGame.volatility.slice(1) : 'N/A'}\n                  </Typography>\n\n                  {selectedGame.features && selectedGame.features.length > 0 && (\n                    <SimpleBox sx={createSx({ mb: 1 })}>\n                      <Typography variant=\"body1\" sx={{ mb: 0.5 }}>\n                        <strong>Features:</strong>\n                      </Typography>\n                      <SimpleBox sx={createSx({ display: 'flex', flexWrap: 'wrap', gap: 0.5 })}>\n                        {selectedGame.features.map((feature) => (\n                          <Chip key={feature} label={feature} size=\"small\" />\n                        ))}\n                      </SimpleBox>\n                    </SimpleBox>\n                  )}\n\n                  {selectedGame.tags && selectedGame.tags.length > 0 && (\n                    <SimpleBox sx={createSx({ mb: 1 })}>\n                      <Typography variant=\"body1\" sx={{ mb: 0.5 }}>\n                        <strong>Tags:</strong>\n                      </Typography>\n                      <SimpleBox sx={createSx({ display: 'flex', flexWrap: 'wrap', gap: 0.5 })}>\n                        {selectedGame.tags.map((tag) => (\n                          <Chip key={tag} label={tag} size=\"small\" variant=\"outlined\" />\n                        ))}\n                      </SimpleBox>\n                    </SimpleBox>\n                  )}\n                </SimpleBox>\n              </Grid>\n\n              <Grid item xs={12} md={6}>\n                <SimpleBox sx={createSx({ mb: 2 })}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Performance Metrics\n                  </Typography>\n                  <Divider sx={createSx({ my: 1 })} />\n\n                  {gamePerformance ? (\n                    <>\n                      <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center', mb: 1 })}>\n                        <AttachMoneyIcon sx={createSx({ mr: 1, color: 'primary.main' })} />\n                        <Typography variant=\"body1\">\n                          <strong>Revenue:</strong> {formatCurrency(gamePerformance.revenue || 0)}\n                        </Typography>\n                      </SimpleBox>\n\n                      <SimpleBox sx={createSx({ display: 'flex', alignItems: 'center', mb: 1 })}>\n                        <PeopleIcon sx={createSx({ mr: 1, color: 'primary.main' })} />\n                        <Typography variant=\"body1\">\n                          <strong>Unique Players:</strong> {gamePerformance.uniquePlayers !== undefined ? gamePerformance.uniquePlayers.toLocaleString() : '0'}\n                        </Typography>\n                      </SimpleBox>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Sessions:</strong> {gamePerformance.sessions !== undefined ? gamePerformance.sessions.toLocaleString() : '0'}\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Average Session Duration:</strong> {gamePerformance.avgSessionDuration !== undefined ? gamePerformance.avgSessionDuration.toFixed(2) : '0.00'} minutes\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Average Bet:</strong> {formatCurrency(gamePerformance.avgBet || 0)}\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Average Win:</strong> {formatCurrency(gamePerformance.avgWin || 0)}\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Bets Count:</strong> {gamePerformance.betsCount !== undefined ? gamePerformance.betsCount.toLocaleString() : '0'}\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Wins Count:</strong> {gamePerformance.winsCount !== undefined ? gamePerformance.winsCount.toLocaleString() : '0'}\n                      </Typography>\n\n                      <SimpleBox sx={createSx({ mb: 1 })}>\n                        <Typography variant=\"body1\" component=\"span\">\n                          <strong>Win Rate:</strong> {gamePerformance.winRate !== undefined ? gamePerformance.winRate.toFixed(2) : '0.00'}%\n                        </Typography>\n                        <Tooltip title={`Win Rate: ${gamePerformance.winRate !== undefined ? gamePerformance.winRate.toFixed(2) : '0.00'}%`}>\n                          <LinearProgress\n                            variant=\"determinate\"\n                            value={gamePerformance.winRate || 0}\n                            sx={createSx({ mt: 1, height: 8, borderRadius: 4 })}\n                          />\n                        </Tooltip>\n                      </SimpleBox>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Hold Percentage:</strong> {gamePerformance.holdPercentage !== undefined ? gamePerformance.holdPercentage.toFixed(2) : '0.00'}%\n                      </Typography>\n\n                      {gamePerformance.period && (\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n                          Data period: {formatDate(new Date(gamePerformance.period.startDate), 'MMM dd, yyyy')} to {formatDate(new Date(gamePerformance.period.endDate), 'MMM dd, yyyy')}\n                        </Typography>\n                      )}\n                    </>\n                  ) : (\n                    <SimpleBox sx={createSx({ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 200 })}>\n                      {loading ? (\n                        <CircularProgress />\n                      ) : (\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                          No performance data available for the selected period.\n                        </Typography>\n                      )}\n                    </SimpleBox>\n                  )}\n                </SimpleBox>\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseGameDetails}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}\n\nexport default GamesPage;"],"names":["_ref","options","value","onChange","label","placeholder","disabled","required","error","helperText","maxMenuHeight","searchable","showSelectAllOption","renderValue","size","width","id","name","sx","className","style","loading","fullWidth","searchTerm","setSearchTerm","useState","filteredOptions","filter","option","toLowerCase","includes","_jsxs","FormControl","children","_jsx","InputLabel","Select","labelId","multiple","input","OutlinedInput","Typography","color","MenuItem","display","alignItems","padding","CircularProgress","marginRight","variant","FormHelperText","length","minWidth","event","newValue","target","selected","flexWrap","gap","map","selectedValue","find","opt","toString","Chip","onDelete","valueToRemove","preventDefault","stopPropagation","val","onClick","e","deleteIcon","ClearIcon","fontSize","onMouseDown","opacity","onClose","handleClose","HTMLElement","classList","contains","closest","MenuProps","PaperProps","maxHeight","position","top","backgroundColor","zIndex","borderBottom","TextField","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","paddingLeft","paddingRight","paddingTop","paddingBottom","justifyContent","Button","handleSelectAll","selectableOptions","handleSelectNone","Checkbox","checked","some","ListItemText","primary","secondary","group","description","Tooltip","title","arrow","InfoOutlinedIcon","marginLeft","getGames","async","params","arguments","undefined","console","log","apiClient","get","data","getGameById","getGamePerformance","getTopGames","getGameCategories","getGameProviders","getGamePlayerDemographics","getGameSessions","exportGames","responseType","GamesPage","startDate","setStartDate","Date","setDate","getDate","endDate","setEndDate","selectedProviders","setSelectedProviders","selectedCategories","setSelectedCategories","showAdvancedFilters","setShowAdvancedFilters","advancedFilters","setAdvancedFilters","games","setGames","setLoading","setError","totalCount","setTotalCount","page","setPage","pageSize","setPageSize","sortBy","setSortBy","sortDirection","setSortDirection","providers","setProviders","categories","setCategories","providersOptions","setProvidersOptions","categoriesOptions","setCategoriesOptions","selectedGame","setSelectedGame","gameDetailsOpen","setGameDetailsOpen","gamePerformance","setGamePerformance","columns","format","row","SimpleBox","createSx","thumbnailUrl","component","src","alt","height","mr","borderRadius","fontWeight","sortable","type","volatility","charAt","toUpperCase","slice","status","formatCurrency","amount","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","useEffect","fetchMetadata","fetchGames","providersData","gamesService","providerOptions","provider","categoriesData","categoryOptions","category","err","formatDate","join","limit","sortOrder","Object","keys","search","minRtp","maxRtp","releaseDate","releaseDateStart","features","tags","response","_response$meta","meta","handleAdvancedFilterChange","key","prev","handleCloseGameDetails","summary","totalGames","totalRevenue","reduce","sum","g","revenue","totalPlayers","uniquePlayers","totalSessions","sessions","avgRtp","rtp","avgWinRate","winRate","Container","maxWidth","mb","gutterBottom","RouterLink","to","startIcon","FilterListIcon","Paper","p","handleToggleAdvancedFilters","endIcon","ExpandLessIcon","ExpandMoreIcon","Grid","container","spacing","item","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","slotProps","textField","MultiSelect","values","v","Collapse","in","timeout","unmountOnExit","mt","Divider","inputProps","min","max","split","f","trim","handleResetAdvancedFilters","RefreshIcon","handleApplyFilters","combinedFilters","sm","Card","CardContent","toLocaleString","toFixed","TableChartIcon","Alert","severity","EnhancedTable","emptyMessage","idField","onExport","exportData","formatStr","ExportFormat","CSV","EXCEL","PDF","blob","JSON","headers","col","csvContent","stringify","replace","String","Blob","jsonContent","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","sorting","filtering","enabled","quickFilter","advancedFilter","pagination","defaultPageSize","pageSizeOptions","columnManagement","allowReordering","allowHiding","allowResizing","export","formats","onRowClick","game","performanceData","validatedData","gameId","avgSessionDuration","avgBet","avgWin","betsCount","winsCount","holdPercentage","period","defaultPerformance","Dialog","open","DialogTitle","DialogContent","dividers","my","LinearProgress","feature","tag","_Fragment","AttachMoneyIcon","PeopleIcon","DialogActions"],"sourceRoot":""}