{"version":3,"file":"static/js/2407.78d45cde.chunk.js","mappings":"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","sources":["pages/reports/GeographicPage.tsx","components/reports/charts/ReportCharts.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Collapse\n} from '@mui/material';\nimport { EnhancedTable } from '../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../components/tables/enhanced/types';\nimport MultiSelect, { MultiSelectOption } from '../../components/common/MultiSelect';\nimport { format as formatDate } from 'date-fns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport { GeographicData, GeographicSummary, GeographicFilters } from '../../types/geographic';\nimport api from '../../services/api';\nimport { formatCurrency, formatNumber, formatPercentage } from '../../utils/formatters';\nimport { ReportAreaChart, ReportBarChart, ReportPieChart } from '../../components/reports/charts/ReportCharts';\n\n/**\n * GeographicPage component\n * Displays a comprehensive geographic report with filtering and data visualization\n */\nconst GeographicPage: React.FC = () => {\n  // State for filters\n  const [startDate, setStartDate] = useState<Date>(new Date(new Date().setDate(new Date().getDate() - 30)));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [selectedCountries, setSelectedCountries] = useState<(string | number)[]>([]);\n  const [selectedWhiteLabels, setSelectedWhiteLabels] = useState<(string | number)[]>([]);\n  const [groupBy, setGroupBy] = useState<string>('country');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState<boolean>(false);\n  const [advancedFilters, setAdvancedFilters] = useState<Record<string, any>>({});\n\n  // State for data\n  const [geographicData, setGeographicData] = useState<GeographicData[]>([]);\n  const [summary, setSummary] = useState<GeographicSummary | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState<number>(0);\n\n  // State for metadata\n  const [countries, setCountries] = useState<Array<{ id: string; name: string; region?: string; continent?: string }>>([]);\n  const [whiteLabels, setWhiteLabels] = useState<Array<{ id: string; name: string }>>([]);\n  const [regions, setRegions] = useState<Array<{ id: string; name: string }>>([]);\n  const [continents, setContinents] = useState<Array<{ id: string; name: string }>>([]);\n  const [countriesLoading, setCountriesLoading] = useState<boolean>(false);\n  const [whiteLabelsLoading, setWhiteLabelsLoading] = useState<boolean>(false);\n  const [countriesOptions, setCountriesOptions] = useState<MultiSelectOption[]>([]);\n  const [whiteLabelsOptions, setWhiteLabelsOptions] = useState<MultiSelectOption[]>([]);\n\n  // State for table\n  const [page, setPage] = useState<number>(0);\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [sortBy, setSortBy] = useState<string>('players');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n\n  // State for export dialog\n  const [exportDialogOpen, setExportDialogOpen] = useState<boolean>(false);\n  const [exportFormat, setExportFormat] = useState<string>('excel');\n\n  // Fetch metadata (countries, white labels) on component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        console.log('[GEOGRAPHIC PAGE] Fetching metadata');\n        setCountriesLoading(true);\n        setWhiteLabelsLoading(true);\n\n        // Get metadata from API\n        const data = await api.geographic.getMetadata();\n        console.log('[GEOGRAPHIC PAGE] Got metadata from service:', data);\n\n        // Handle countries\n        if (data && data.countries) {\n          console.log('[GEOGRAPHIC PAGE] Got countries from service:', data.countries);\n          const fetchedCountries = data.countries || [];\n          setCountries(fetchedCountries);\n\n          // Convert countries to MultiSelect options\n          const countryOptions = fetchedCountries.map((country) => ({\n            value: country.id,\n            label: country.name\n          }));\n          setCountriesOptions(countryOptions);\n        } else {\n          console.log('[GEOGRAPHIC PAGE] No countries found in API response');\n          setCountries([]);\n          setCountriesOptions([]);\n        }\n        setCountriesLoading(false);\n\n        // Handle white labels\n        if (data && data.whiteLabels) {\n          console.log('[GEOGRAPHIC PAGE] Got white labels from service:', data.whiteLabels);\n          const fetchedWhiteLabels = data.whiteLabels || [];\n          setWhiteLabels(fetchedWhiteLabels);\n\n          // Convert white labels to MultiSelect options\n          const whiteLabelsOptions = fetchedWhiteLabels.map((whiteLabel) => ({\n            value: whiteLabel.id,\n            label: whiteLabel.name\n          }));\n          setWhiteLabelsOptions(whiteLabelsOptions);\n        } else {\n          console.log('[GEOGRAPHIC PAGE] No white labels found in API response');\n          setWhiteLabels([]);\n          setWhiteLabelsOptions([]);\n        }\n        setWhiteLabelsLoading(false);\n\n        // Handle regions and continents if available\n        if (data && data.regions) {\n          setRegions(data.regions);\n        }\n        if (data && data.continents) {\n          setContinents(data.continents);\n        }\n      } catch (err) {\n        console.error('[GEOGRAPHIC PAGE] Error fetching metadata:', err);\n        setError('Failed to load metadata. Please try again later.');\n      }\n    };\n\n    fetchMetadata();\n  }, []);\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    // Define a function to fetch data on mount to avoid dependency issues\n    const fetchInitialData = async () => {\n      console.log('[GEOGRAPHIC PAGE] Fetching initial data');\n      await fetchGeographicData();\n    };\n\n    // Set a small delay to ensure the component is fully mounted\n    const timer = setTimeout(() => {\n      fetchInitialData();\n    }, 100);\n\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Fetch geographic data based on filters\n  const fetchGeographicData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Prepare filters\n      const filters: GeographicFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        countryIds: selectedCountries.length > 0 ? selectedCountries.map(id => String(id)) : undefined,\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => String(id)) : undefined,\n        groupBy: groupBy as any,\n        ...advancedFilters\n      };\n\n      console.log('[GEOGRAPHIC PAGE] Fetching data with filters:', filters);\n\n      // Add pagination and sorting\n      const params = {\n        page: page + 1, // API uses 1-based indexing\n        pageSize,\n        sortBy,\n        sortDirection\n      };\n\n      // Fetch geographic data from API\n      const response = await api.geographic.getData({ ...filters, ...params });\n\n      if (response && response.data) {\n        setGeographicData(response.data);\n        setTotalCount(response.meta?.totalCount || response.data.length);\n\n        // Process summary data if available\n        if (response.summary) {\n          console.log('[GEOGRAPHIC PAGE] Using summary from response:', response.summary);\n          setSummary(response.summary);\n        } else {\n          // If no summary in response, fetch it separately\n          try {\n            const summaryResponse = await api.geographic.getSummary(filters);\n            if (summaryResponse) {\n              setSummary(summaryResponse);\n            }\n          } catch (summaryError) {\n            console.error('[GEOGRAPHIC PAGE] Error fetching summary:', summaryError);\n          }\n        }\n      } else {\n        console.log('[GEOGRAPHIC PAGE] No data returned from API');\n        setGeographicData([]);\n        setSummary(null);\n        setTotalCount(0);\n      }\n    } catch (err) {\n      console.error('[GEOGRAPHIC PAGE] Error fetching data:', err);\n      setError('Failed to load geographic data. Please try again later.');\n      setGeographicData([]);\n      setSummary(null);\n      setTotalCount(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = () => {\n    setPage(0); // Reset to first page when filters change\n    fetchGeographicData();\n  };\n\n  // Handle reset filters\n  const handleResetFilters = () => {\n    setStartDate(new Date(new Date().setDate(new Date().getDate() - 30)));\n    setEndDate(new Date());\n    setSelectedCountries([]);\n    setSelectedWhiteLabels([]);\n    setGroupBy('country');\n    setAdvancedFilters({});\n    setPage(0);\n    setSortBy('players');\n    setSortDirection('desc');\n  };\n\n  // Handle export\n  const handleExport = (format: ExportFormat) => {\n    setExportFormat(format);\n    setExportDialogOpen(true);\n  };\n\n  // Handle export confirmation\n  const handleExportConfirm = async () => {\n    try {\n      setLoading(true);\n\n      // Prepare filters\n      const filters: GeographicFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        countryIds: selectedCountries.length > 0 ? selectedCountries.map(id => String(id)) : undefined,\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => String(id)) : undefined,\n        groupBy: groupBy as any,\n        ...advancedFilters\n      };\n\n      // Export data\n      const blob = await api.geographic.exportData(filters, exportFormat);\n\n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `geographic-report-${formatDate(new Date(), 'yyyy-MM-dd')}.${exportFormat}`;\n      document.body.appendChild(a);\n      a.click();\n\n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      setExportDialogOpen(false);\n    } catch (err) {\n      console.error('[GEOGRAPHIC PAGE] Error exporting data:', err);\n      setError('Failed to export data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Prepare data for pie chart\n  const getPieChartData = () => {\n    if (!geographicData || geographicData.length === 0) return [];\n\n    // Sort by players (descending) and take top 10\n    return [...geographicData]\n      .sort((a, b) => b.players - a.players)\n      .slice(0, 10)\n      .map(item => ({\n        name: item.countryName,\n        value: item.players\n      }));\n  };\n\n  // Define table columns\n  const columns: ColumnDef[] = [\n    {\n      id: 'countryName',\n      label: 'Country',\n      type: 'text',\n      align: 'left'\n    },\n    {\n      id: 'players',\n      label: 'Players',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value)\n    },\n    {\n      id: 'newPlayers',\n      label: 'New Players',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value || 0)\n    },\n    {\n      id: 'revenue',\n      label: 'Revenue',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'ggr',\n      label: 'GGR',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value || 0)\n    },\n    {\n      id: 'deposits',\n      label: 'Deposits',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'withdrawals',\n      label: 'Withdrawals',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value)\n    },\n    {\n      id: 'netDeposits',\n      label: 'Net Deposits',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value || 0)\n    },\n    {\n      id: 'bonusAmount',\n      label: 'Bonus Amount',\n      type: 'currency',\n      align: 'right',\n      format: (value) => formatCurrency(value || 0)\n    },\n    {\n      id: 'bets',\n      label: 'Bets',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value || 0)\n    },\n    {\n      id: 'wins',\n      label: 'Wins',\n      type: 'number',\n      align: 'right',\n      format: (value) => formatNumber(value || 0)\n    },\n    {\n      id: 'winRate',\n      label: 'Win Rate',\n      type: 'percentage',\n      align: 'right',\n      format: (value) => formatPercentage(value || 0)\n    }\n  ];\n\n  return (\n    <Container maxWidth=\"xl\">\n      <div style={{ marginBottom: '2rem', display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <div>\n          <Typography variant=\"h4\" gutterBottom>\n            Geographic Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze player distribution, revenue, and performance metrics by country\n          </Typography>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <div style={{ marginBottom: '1rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">Filters</Typography>\n          <div>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              startIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n              sx={{ mr: 1 }}\n            >\n              {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={handleResetFilters}\n              sx={{ mr: 1 }}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleApplyFilters}\n              startIcon={<FilterListIcon />}\n            >\n              Apply Filters\n            </Button>\n          </div>\n        </div>\n\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true, variant: 'outlined' } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true, variant: 'outlined' } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth variant=\"outlined\">\n              <InputLabel id=\"group-by-label\">Group By</InputLabel>\n              <Select\n                labelId=\"group-by-label\"\n                value={groupBy}\n                onChange={(e) => setGroupBy(e.target.value)}\n                label=\"Group By\"\n              >\n                <MenuItem value=\"country\">Country</MenuItem>\n                <MenuItem value=\"region\">Region</MenuItem>\n                <MenuItem value=\"continent\">Continent</MenuItem>\n                <MenuItem value=\"day\">Day</MenuItem>\n                <MenuItem value=\"week\">Week</MenuItem>\n                <MenuItem value=\"month\">Month</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Countries\"\n              options={countriesOptions}\n              value={selectedCountries}\n              onChange={setSelectedCountries}\n              loading={countriesLoading}\n              fullWidth\n            />\n          </Grid>\n        </Grid>\n\n        <Collapse in={showAdvancedFilters}>\n          <div style={{ marginTop: '1rem' }}>\n            <Divider sx={{ my: 2 }} />\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n            <Grid container spacing={2}>\n              <Grid item xs={12} md={6}>\n                <MultiSelect\n                  label=\"White Labels\"\n                  options={whiteLabelsOptions}\n                  value={selectedWhiteLabels}\n                  onChange={setSelectedWhiteLabels}\n                  loading={whiteLabelsLoading}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </Collapse>\n      </Paper>\n\n      {/* Summary Cards */}\n      {summary && (\n        <Grid container spacing={3} sx={{ mb: 4 }}>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Total Players\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatNumber(summary.totalPlayers)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Total Revenue\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatCurrency(summary.totalRevenue)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Total Deposits\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatCurrency(summary.totalDeposits)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                  Total Withdrawals\n                </Typography>\n                <Typography variant=\"h5\">\n                  {formatCurrency(summary.totalWithdrawals)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Charts */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 3, height: '100%' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Player Distribution by Country\n            </Typography>\n            <div style={{ height: 300 }}>\n              {loading ? (\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n                  <CircularProgress />\n                </div>\n              ) : geographicData.length > 0 ? (\n                <ReportPieChart\n                  data={getPieChartData()}\n                  nameKey=\"name\"\n                  valueKey=\"value\"\n                  height={300}\n                  showLegend={true}\n                />\n              ) : (\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n                  <Typography variant=\"body1\" color=\"text.secondary\">\n                    No data available\n                  </Typography>\n                </div>\n              )}\n            </div>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 3, height: '100%' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Revenue by Country (Top 10)\n            </Typography>\n            <div style={{ height: 300 }}>\n              {loading ? (\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n                  <CircularProgress />\n                </div>\n              ) : geographicData.length > 0 ? (\n                <ReportBarChart\n                  data={[...geographicData]\n                    .sort((a, b) => b.revenue - a.revenue)\n                    .slice(0, 10)\n                    .map(item => ({\n                      country: item.countryName,\n                      revenue: item.revenue\n                    }))}\n                  xKey=\"country\"\n                  yKeys={['revenue']}\n                  height={300}\n                  showLegend={false}\n                  showGrid={true}\n                />\n              ) : (\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n                  <Typography variant=\"body1\" color=\"text.secondary\">\n                    No data available\n                  </Typography>\n                </div>\n              )}\n            </div>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Data Table */}\n      <Paper sx={{ p: 0, mb: 4, overflow: 'hidden' }}>\n        <EnhancedTable\n          columns={columns}\n          data={geographicData}\n          loading={loading}\n          title=\"Geographic Data\"\n          emptyMessage=\"No geographic data available\"\n          idField=\"id\"\n          onExport={handleExport}\n          features={{\n            sorting: true,\n            filtering: {\n              enabled: true,\n              quickFilter: true,\n              advancedFilter: true\n            },\n            pagination: {\n              enabled: true,\n              defaultPageSize: pageSize,\n              pageSizeOptions: [10, 25, 50, 100]\n            },\n            columnManagement: {\n              enabled: true,\n              allowReordering: true,\n              allowHiding: true,\n              allowResizing: true\n            },\n            export: {\n              enabled: true,\n              formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n            }\n          }}\n        />\n      </Paper>\n\n      {/* Export Dialog */}\n      <Dialog open={exportDialogOpen} onClose={() => setExportDialogOpen(false)}>\n        <DialogTitle>Export Geographic Data</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\" paragraph>\n            Please confirm that you want to export the geographic data with the current filters.\n          </Typography>\n          <FormControl fullWidth sx={{ mt: 2 }}>\n            <InputLabel id=\"export-format-label\">Export Format</InputLabel>\n            <Select\n              labelId=\"export-format-label\"\n              value={exportFormat}\n              onChange={(e) => setExportFormat(e.target.value)}\n              label=\"Export Format\"\n            >\n              <MenuItem value=\"excel\">Excel</MenuItem>\n              <MenuItem value=\"csv\">CSV</MenuItem>\n              <MenuItem value=\"pdf\">PDF</MenuItem>\n            </Select>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setExportDialogOpen(false)}>Cancel</Button>\n          <Button\n            onClick={handleExportConfirm}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<DownloadIcon />}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Export'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default GeographicPage;\n","import React from 'react';\nimport { CircularProgress, Typography, useTheme } from '@mui/material';\nimport { ResponsiveContainer, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend } from 'recharts';\nimport { format as formatDate } from 'date-fns';\nimport './ReportCharts.css';\n\n// Chart colors\nconst CHART_COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A569BD', '#5DADE2', '#48C9B0', '#F4D03F'];\n\n// Format currency\nconst formatCurrency = (amount: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\n// Format number\nconst formatNumber = (value: number): string => {\n  return new Intl.NumberFormat('en-US').format(value);\n};\n\n// Format percentage (used in tooltips - keeping for future use)\n// const formatPercentage = (value: number): string => {\n//   return `${value.toFixed(2)}%`;\n// };\n\n// Custom tooltip component\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"custom-tooltip\" style={{\n        backgroundColor: '#fff',\n        padding: '12px',\n        border: '1px solid #ccc',\n        borderRadius: '4px',\n        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n      }}>\n        <Typography variant=\"subtitle2\" style={{ marginBottom: '8px' }}>\n          {label}\n        </Typography>\n        {payload.map((entry: any, index: number) => (\n          <div key={`item-${index}`} style={{ display: 'flex', alignItems: 'center', marginBottom: '4px' }}>\n            <span style={{\n              width: '12px',\n              height: '12px',\n              backgroundColor: entry.color,\n              marginRight: '8px',\n              borderRadius: '50%',\n              display: 'inline-block'\n            }} />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {entry.name}: {entry.value >= 1000 ? formatCurrency(entry.value) : formatNumber(entry.value)}\n            </Typography>\n          </div>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\n// Area Chart Component\ninterface AreaChartProps {\n  data: any[];\n  xKey: string;\n  yKeys: string[];\n  height?: number;\n  loading?: boolean;\n  error?: string | null;\n  title?: string;\n  showLegend?: boolean;\n  showGrid?: boolean;\n}\n\nexport const ReportAreaChart: React.FC<AreaChartProps> = ({\n  data,\n  xKey,\n  yKeys,\n  height = 300,\n  loading = false,\n  error = null,\n  title,\n  showLegend = true,\n  showGrid = true\n}) => {\n  const theme = useTheme();\n\n  if (loading) {\n    return (\n      <div className=\"chart-loading-container\" style={{ height }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"chart-error-container\" style={{ height }}>\n        <Typography color=\"error\">{error}</Typography>\n      </div>\n    );\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"chart-empty-container\" style={{ height }}>\n        <Typography color=\"text.secondary\">No data available</Typography>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chart-container\" style={{ width: '100%', height }}>\n      {title && (\n        <Typography variant=\"subtitle1\" gutterBottom>\n          {title}\n        </Typography>\n      )}\n      <ResponsiveContainer>\n        <AreaChart\n          data={data}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          {showGrid && <CartesianGrid strokeDasharray=\"3 3\" />}\n          <XAxis\n            dataKey={xKey}\n            tick={{ fill: theme.palette.text.secondary, fontSize: 12 }}\n            tickFormatter={(value) => {\n              try {\n                if (!value) return '';\n\n                if (typeof value === 'string' && value.includes('T')) {\n                  const date = new Date(value);\n                  // Check if date is valid\n                  if (isNaN(date.getTime())) {\n                    return String(value);\n                  }\n                  return formatDate(date, 'MMM dd');\n                }\n                return String(value);\n              } catch (error) {\n                console.warn('Error formatting date:', error);\n                return String(value || '');\n              }\n            }}\n          />\n          <YAxis\n            tick={{ fill: theme.palette.text.secondary, fontSize: 12 }}\n            tickFormatter={(value) => {\n              if (value >= 1000) {\n                return `${(value / 1000).toFixed(0)}k`;\n              }\n              return value;\n            }}\n          />\n          <RechartsTooltip content={<CustomTooltip />} />\n          {showLegend && <Legend />}\n          {yKeys.map((key, index) => (\n            <Area\n              key={key}\n              type=\"monotone\"\n              dataKey={key}\n              stroke={CHART_COLORS[index % CHART_COLORS.length]}\n              fill={CHART_COLORS[index % CHART_COLORS.length]}\n              fillOpacity={0.3}\n              name={key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1')}\n            />\n          ))}\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\n// Bar Chart Component\ninterface BarChartProps {\n  data: any[];\n  xKey: string;\n  yKeys: string[];\n  height?: number;\n  loading?: boolean;\n  error?: string | null;\n  title?: string;\n  showLegend?: boolean;\n  showGrid?: boolean;\n  stacked?: boolean;\n}\n\nexport const ReportBarChart: React.FC<BarChartProps> = ({\n  data,\n  xKey,\n  yKeys,\n  height = 300,\n  loading = false,\n  error = null,\n  title,\n  showLegend = true,\n  showGrid = true,\n  stacked = false\n}) => {\n  const theme = useTheme();\n\n  if (loading) {\n    return (\n      <div className=\"chart-loading-container\" style={{ height }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"chart-error-container\" style={{ height }}>\n        <Typography color=\"error\">{error}</Typography>\n      </div>\n    );\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"chart-empty-container\" style={{ height }}>\n        <Typography color=\"text.secondary\">No data available</Typography>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chart-container\" style={{ width: '100%', height }}>\n      {title && (\n        <Typography variant=\"subtitle1\" gutterBottom>\n          {title}\n        </Typography>\n      )}\n      <ResponsiveContainer>\n        <BarChart\n          data={data}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          {showGrid && <CartesianGrid strokeDasharray=\"3 3\" />}\n          <XAxis\n            dataKey={xKey}\n            tick={{ fill: theme.palette.text.secondary, fontSize: 12 }}\n            tickFormatter={(value) => {\n              try {\n                if (!value) return '';\n\n                if (typeof value === 'string' && value.includes('T')) {\n                  const date = new Date(value);\n                  // Check if date is valid\n                  if (isNaN(date.getTime())) {\n                    return String(value);\n                  }\n                  return formatDate(date, 'MMM dd');\n                }\n                return String(value);\n              } catch (error) {\n                console.warn('Error formatting date:', error);\n                return String(value || '');\n              }\n            }}\n          />\n          <YAxis\n            tick={{ fill: theme.palette.text.secondary, fontSize: 12 }}\n            tickFormatter={(value) => {\n              if (value >= 1000) {\n                return `${(value / 1000).toFixed(0)}k`;\n              }\n              return value;\n            }}\n          />\n          <RechartsTooltip content={<CustomTooltip />} />\n          {showLegend && <Legend />}\n          {yKeys.map((key, index) => (\n            <Bar\n              key={key}\n              dataKey={key}\n              fill={CHART_COLORS[index % CHART_COLORS.length]}\n              stackId={stacked ? \"stack\" : undefined}\n              name={key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1')}\n            />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\n// Pie Chart Component\ninterface PieChartProps {\n  data: any[];\n  nameKey: string;\n  valueKey: string;\n  height?: number;\n  loading?: boolean;\n  error?: string | null;\n  title?: string;\n  showLegend?: boolean;\n}\n\nexport const ReportPieChart: React.FC<PieChartProps> = ({\n  data,\n  nameKey,\n  valueKey,\n  height = 300,\n  loading = false,\n  error = null,\n  title,\n  showLegend = true\n}) => {\n  // Theme is not currently used in this component but might be needed for future styling\n  // const theme = useTheme();\n\n  if (loading) {\n    return (\n      <div className=\"chart-loading-container\" style={{ height }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"chart-error-container\" style={{ height }}>\n        <Typography color=\"error\">{error}</Typography>\n      </div>\n    );\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"chart-empty-container\" style={{ height }}>\n        <Typography color=\"text.secondary\">No data available</Typography>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chart-container\" style={{ width: '100%', height }}>\n      {title && (\n        <Typography variant=\"subtitle1\" gutterBottom>\n          {title}\n        </Typography>\n      )}\n      <ResponsiveContainer>\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            outerRadius={80}\n            fill=\"#8884d8\"\n            dataKey={valueKey}\n            nameKey={nameKey}\n            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n          >\n            {data.map((_entry, index) => (\n              <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n            ))}\n          </Pie>\n          {showLegend && <Legend />}\n          <RechartsTooltip />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n"],"names":["GeographicPage","startDate","setStartDate","useState","Date","setDate","getDate","endDate","setEndDate","selectedCountries","setSelectedCountries","selectedWhiteLabels","setSelectedWhiteLabels","groupBy","setGroupBy","showAdvancedFilters","setShowAdvancedFilters","advancedFilters","setAdvancedFilters","geographicData","setGeographicData","summary","setSummary","loading","setLoading","error","setError","totalCount","setTotalCount","countries","setCountries","whiteLabels","setWhiteLabels","regions","setRegions","continents","setContinents","countriesLoading","setCountriesLoading","whiteLabelsLoading","setWhiteLabelsLoading","countriesOptions","setCountriesOptions","whiteLabelsOptions","setWhiteLabelsOptions","page","setPage","pageSize","setPageSize","sortBy","setSortBy","sortDirection","setSortDirection","exportDialogOpen","setExportDialogOpen","exportFormat","setExportFormat","useEffect","async","console","log","data","api","geographic","getMetadata","fetchedCountries","countryOptions","map","country","value","id","label","name","fetchedWhiteLabels","whiteLabel","err","fetchMetadata","timer","setTimeout","fetchGeographicData","fetchInitialData","clearTimeout","filters","formatDate","countryIds","length","String","undefined","whiteLabelIds","params","response","getData","_response$meta","meta","summaryResponse","getSummary","summaryError","columns","type","align","format","formatNumber","formatCurrency","formatPercentage","_jsxs","Container","maxWidth","children","_jsx","style","marginBottom","display","justifyContent","alignItems","Typography","variant","gutterBottom","color","Paper","sx","p","mb","Button","onClick","startIcon","ExpandLessIcon","ExpandMoreIcon","mr","handleResetFilters","handleApplyFilters","FilterListIcon","Grid","container","spacing","item","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","onChange","newValue","slotProps","textField","fullWidth","FormControl","InputLabel","Select","labelId","e","target","MenuItem","MultiSelect","options","Collapse","in","marginTop","Divider","my","Card","CardContent","totalPlayers","totalRevenue","totalDeposits","totalWithdrawals","height","CircularProgress","ReportPieChart","sort","a","b","players","slice","countryName","nameKey","valueKey","showLegend","ReportBarChart","revenue","xKey","yKeys","showGrid","overflow","EnhancedTable","title","emptyMessage","idField","onExport","features","sorting","filtering","enabled","quickFilter","advancedFilter","pagination","defaultPageSize","pageSizeOptions","columnManagement","allowReordering","allowHiding","allowResizing","export","formats","ExportFormat","CSV","EXCEL","PDF","Dialog","open","onClose","DialogTitle","DialogContent","paragraph","mt","DialogActions","blob","exportData","url","window","URL","createObjectURL","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","DownloadIcon","disabled","size","CHART_COLORS","CustomTooltip","_ref","active","payload","className","backgroundColor","padding","border","borderRadius","boxShadow","entry","index","width","marginRight","amount","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","ReportAreaChart","_ref2","theme","useTheme","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","fill","palette","text","secondary","fontSize","tickFormatter","includes","date","isNaN","getTime","warn","YAxis","toFixed","RechartsTooltip","content","Legend","key","Area","stroke","fillOpacity","charAt","toUpperCase","replace","_ref3","stacked","BarChart","Bar","stackId","_ref4","PieChart","Pie","cx","cy","labelLine","outerRadius","_ref5","percent","_entry","Cell"],"sourceRoot":""}