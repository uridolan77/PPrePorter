{"version":3,"file":"static/js/3.beea5d81.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/AttachMoney.js","../node_modules/@mui/icons-material/People.js","services/api/gamesService.ts","pages/showcase/reports/GamesPage.tsx"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4\"\n}), 'AttachMoney');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3m-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3m0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5m8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5\"\n}), 'People');","import apiClient from './apiClient';\nimport {\n  Game,\n  GamePerformance,\n  GameCategory,\n  GameProvider,\n  PlayerDemographics,\n  GameSession,\n  GamesQueryParams,\n  TopGamesQueryParams,\n  GamePerformanceQueryParams\n} from '../../types/games';\nimport { ApiResponse } from '../../types/api';\n\n/**\n * Get all games with pagination and filtering\n * @param params - Query parameters\n * @returns Promise object with games data\n */\nconst getGames = async (params: GamesQueryParams = {}): Promise<ApiResponse<Game[]>> => {\n  try {\n    const response = await apiClient.get<ApiResponse<Game[]>>('/games', { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game by ID\n * @param id - Game ID\n * @returns Promise object with game data\n */\nconst getGameById = async (id: string): Promise<Game> => {\n  try {\n    const response = await apiClient.get<Game>(`/games/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game performance metrics\n * @param id - Game ID\n * @param params - Query parameters\n * @returns Promise object with game performance data\n */\nconst getGamePerformance = async (id: string, params: GamePerformanceQueryParams = {}): Promise<GamePerformance> => {\n  try {\n    const response = await apiClient.get<GamePerformance>(`/games/${id}/performance`, { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get top games by metric\n * @param params - Query parameters\n * @returns Promise object with top games data\n */\nconst getTopGames = async (params: TopGamesQueryParams = {}): Promise<Game[]> => {\n  try {\n    const response = await apiClient.get<Game[]>('/games/top', { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game categories\n * @returns Promise object with game categories\n */\nconst getGameCategories = async (): Promise<GameCategory[]> => {\n  try {\n    const response = await apiClient.get<GameCategory[]>('/games/categories');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game providers\n * @returns Promise object with game providers\n */\nconst getGameProviders = async (): Promise<GameProvider[]> => {\n  try {\n    const response = await apiClient.get<GameProvider[]>('/games/providers');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game player demographics\n * @param id - Game ID\n * @returns Promise object with player demographics for the game\n */\nconst getGamePlayerDemographics = async (id: string): Promise<PlayerDemographics> => {\n  try {\n    const response = await apiClient.get<PlayerDemographics>(`/games/${id}/player-demographics`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game session data\n * @param id - Game ID\n * @param params - Query parameters\n * @returns Promise object with game session data\n */\nconst getGameSessions = async (id: string, params: GamePerformanceQueryParams = {}): Promise<GameSession[]> => {\n  try {\n    const response = await apiClient.get<GameSession[]>(`/games/${id}/sessions`, { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Export games data\n * @param params - Query parameters\n * @returns Promise object with blob data\n */\nconst exportGames = async (params: GamesQueryParams = {}): Promise<Blob> => {\n  try {\n    const response = await apiClient.get('/games/export', {\n      params,\n      responseType: 'blob'\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default {\n  getGames,\n  getGameById,\n  getGamePerformance,\n  getTopGames,\n  getGameCategories,\n  getGameProviders,\n  getGamePlayerDemographics,\n  getGameSessions,\n  exportGames\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Collapse,\n  Rating,\n  LinearProgress,\n  Tooltip\n} from '@mui/material';\nimport { EnhancedTable } from '../../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../../components/tables/enhanced/types';\nimport MultiSelect, { MultiSelectOption } from '../../../components/common/MultiSelect';\nimport { format as formatDate } from 'date-fns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\nimport CasinoIcon from '@mui/icons-material/Casino';\nimport PeopleIcon from '@mui/icons-material/People';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport StarIcon from '@mui/icons-material/Star';\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\n\n// Import services\nimport gamesService from '../../../services/api/gamesService';\nimport { ReportFilters } from '../../../services/api/types';\nimport { Game } from '../../../types/games';\n\n// Define interfaces\ninterface Filters {\n  startDate: string;\n  endDate: string;\n  providerIds?: string[];\n  categoryIds?: string[];\n\n  // Advanced filters\n  name?: string;\n  minRtp?: number;\n  maxRtp?: number;\n  volatility?: string[];\n  status?: string[];\n  releaseDate?: string;\n  features?: string[];\n  tags?: string[];\n}\n\ninterface Provider {\n  id: string;\n  name: string;\n}\n\ninterface Category {\n  id: string;\n  name: string;\n}\n\ninterface GamePerformance {\n  gameId: string;\n  revenue: number;\n  uniquePlayers: number;\n  sessions: number;\n  avgSessionDuration: number;\n  avgBet: number;\n  avgWin: number;\n  betsCount: number;\n  winsCount: number;\n  winRate: number;\n  holdPercentage: number;\n  period?: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\n/**\n * GamesPage component\n * Displays a comprehensive game report with filtering and data visualization\n */\nconst GamesPage: React.FC = () => {\n  // State for filters\n  const [startDate, setStartDate] = useState<Date>(new Date(new Date().setDate(new Date().getDate() - 30)));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [selectedProviders, setSelectedProviders] = useState<string[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState<boolean>(false);\n  const [advancedFilters, setAdvancedFilters] = useState<Record<string, any>>({});\n\n  // State for data\n  const [games, setGames] = useState<Game[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState<number>(0);\n  const [page, setPage] = useState<number>(0);\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [sortBy, setSortBy] = useState<string>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n\n  // State for metadata\n  const [providers, setProviders] = useState<Provider[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [providersOptions, setProvidersOptions] = useState<MultiSelectOption[]>([]);\n  const [categoriesOptions, setCategoriesOptions] = useState<MultiSelectOption[]>([]);\n\n  // State for game details dialog\n  const [selectedGame, setSelectedGame] = useState<Game | null>(null);\n  const [gameDetailsOpen, setGameDetailsOpen] = useState<boolean>(false);\n  const [gamePerformance, setGamePerformance] = useState<GamePerformance | null>(null);\n\n  // Define table columns\n  const columns: ColumnDef[] = [\n    {\n      id: 'name',\n      label: 'Game Name',\n      format: (value, row: Game) => (\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          {row.thumbnailUrl && (\n            <Box\n              component=\"img\"\n              src={row.thumbnailUrl}\n              alt={row.name}\n              sx={{ width: 40, height: 40, mr: 2, borderRadius: 1 }}\n            />\n          )}\n          <Typography variant=\"body2\" fontWeight=\"medium\">\n            {row.name}\n          </Typography>\n        </Box>\n      ),\n      sortable: true,\n      width: 200,\n    },\n    {\n      id: 'provider',\n      label: 'Provider',\n      type: 'text',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'category',\n      label: 'Category',\n      type: 'text',\n      sortable: true,\n      width: 150,\n    },\n    {\n      id: 'rtp',\n      label: 'RTP',\n      type: 'percentage',\n      sortable: true,\n      width: 100,\n    },\n    {\n      id: 'volatility',\n      label: 'Volatility',\n      format: (value, row: Game) => {\n        const volatility = row.volatility;\n        return (\n          <Chip\n            label={volatility ? volatility.charAt(0).toUpperCase() + volatility.slice(1) : 'N/A'}\n            size=\"small\"\n            color={\n              volatility === 'high' ? 'error' :\n              volatility === 'medium' ? 'warning' :\n              volatility === 'low' ? 'success' :\n              'default'\n            }\n          />\n        );\n      },\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'revenue',\n      label: 'Revenue',\n      type: 'currency',\n      sortable: true,\n      width: 120,\n    },\n    {\n      id: 'uniquePlayers',\n      label: 'Players',\n      type: 'number',\n      sortable: true,\n      width: 100,\n    },\n    {\n      id: 'sessions',\n      label: 'Sessions',\n      type: 'number',\n      sortable: true,\n      width: 100,\n    },\n    {\n      id: 'winRate',\n      label: 'Win Rate',\n      type: 'percentage',\n      sortable: true,\n      width: 100,\n    },\n    {\n      id: 'status',\n      label: 'Status',\n      format: (value, row: Game) => (\n        <Chip\n          label={row.status ? row.status.charAt(0).toUpperCase() + row.status.slice(1) : 'N/A'}\n          size=\"small\"\n          color={\n            row.status === 'active' ? 'success' :\n            row.status === 'inactive' ? 'default' :\n            row.status === 'maintenance' ? 'warning' :\n            'primary'\n          }\n        />\n      ),\n      sortable: true,\n      width: 120,\n    }\n  ];\n\n  // Helper function to format currency\n  const formatCurrency = (amount: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(amount);\n  };\n\n  // Fetch metadata on component mount\n  useEffect(() => {\n    fetchMetadata();\n  }, []);\n\n  // Fetch games data when filters change\n  useEffect(() => {\n    fetchGames();\n  }, [page, pageSize, sortBy, sortDirection]);\n\n  // Fetch metadata (providers, categories)\n  const fetchMetadata = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch providers\n      const providersData = await gamesService.getGameProviders();\n      setProviders(providersData);\n\n      // Convert providers to MultiSelect options\n      const providerOptions = providersData.map((provider: Provider) => ({\n        value: provider.id,\n        label: provider.name\n      }));\n      setProvidersOptions(providerOptions);\n\n      // Fetch categories\n      const categoriesData = await gamesService.getGameCategories();\n      setCategories(categoriesData);\n\n      // Convert categories to MultiSelect options\n      const categoryOptions = categoriesData.map((category: Category) => ({\n        value: category.id,\n        label: category.name\n      }));\n      setCategoriesOptions(categoryOptions);\n    } catch (err) {\n      console.error('[GAMES PAGE] Error fetching metadata:', err);\n      setError('Failed to load metadata. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch games data\n  const fetchGames = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Create query parameters\n      const params: any = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        provider: selectedProviders.length > 0 ? selectedProviders.join(',') : undefined,\n        category: selectedCategories.length > 0 ? selectedCategories.join(',') : undefined,\n        page: page + 1, // API uses 1-based indexing\n        limit: pageSize,\n        sortBy,\n        sortOrder: sortDirection\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[GAMES PAGE] Adding advanced filters:', advancedFilters);\n\n        if (advancedFilters.name) {\n          params.search = advancedFilters.name;\n        }\n\n        if (advancedFilters.minRtp) {\n          params.minRtp = advancedFilters.minRtp;\n        }\n\n        if (advancedFilters.maxRtp) {\n          params.maxRtp = advancedFilters.maxRtp;\n        }\n\n        if (advancedFilters.volatility && advancedFilters.volatility.length > 0) {\n          params.volatility = advancedFilters.volatility.join(',');\n        }\n\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          params.status = advancedFilters.status.join(',');\n        }\n\n        if (advancedFilters.releaseDate) {\n          params.releaseDateStart = formatDate(advancedFilters.releaseDate, 'yyyy-MM-dd');\n        }\n\n        if (advancedFilters.features && advancedFilters.features.length > 0) {\n          params.features = advancedFilters.features.join(',');\n        }\n\n        if (advancedFilters.tags && advancedFilters.tags.length > 0) {\n          params.tags = advancedFilters.tags.join(',');\n        }\n      }\n\n      // Fetch games data from API\n      const response = await gamesService.getGames(params);\n\n      if (response && response.data) {\n        setGames(response.data);\n        setTotalCount(response.meta?.totalCount || response.data.length);\n      } else {\n        setGames([]);\n        setTotalCount(0);\n      }\n    } catch (err) {\n      console.error('[GAMES PAGE] Error fetching games data:', err);\n      setError('Failed to load games data. Please try again later.');\n      setGames([]);\n      setTotalCount(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = (): void => {\n    console.log('[GAMES PAGE] Apply filters button clicked');\n\n    // Combine basic filters with advanced filters if they exist\n    const combinedFilters = {\n      startDate: formatDate(startDate, 'yyyy-MM-dd'),\n      endDate: formatDate(endDate, 'yyyy-MM-dd'),\n      selectedProviders,\n      selectedCategories,\n      ...advancedFilters\n    };\n\n    console.log('[GAMES PAGE] Current filters:', combinedFilters);\n\n    // Reset pagination\n    setPage(0);\n\n    fetchGames();\n  };\n\n  // Handle providers change\n  const handleProvidersChange = (values: (string | number)[]): void => {\n    setSelectedProviders(values.map(v => v.toString()));\n  };\n\n  // Handle categories change\n  const handleCategoriesChange = (values: (string | number)[]): void => {\n    setSelectedCategories(values.map(v => v.toString()));\n  };\n\n  // Handle advanced filter change\n  const handleAdvancedFilterChange = (key: string, value: any): void => {\n    setAdvancedFilters(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  // Handle reset advanced filters\n  const handleResetAdvancedFilters = (): void => {\n    setAdvancedFilters({});\n  };\n\n  // Handle toggle advanced filters\n  const handleToggleAdvancedFilters = (): void => {\n    setShowAdvancedFilters(!showAdvancedFilters);\n  };\n\n  // Handle view game details\n  const handleViewGameDetails = async (game: Game): Promise<void> => {\n    setSelectedGame(game);\n    setGameDetailsOpen(true);\n\n    try {\n      // Fetch game performance data\n      const performanceData = await gamesService.getGamePerformance(game.id, {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd')\n      });\n\n      setGamePerformance(performanceData);\n    } catch (err) {\n      console.error('[GAMES PAGE] Error fetching game performance:', err);\n      setGamePerformance(null);\n    }\n  };\n\n  // Handle close game details dialog\n  const handleCloseGameDetails = (): void => {\n    setGameDetailsOpen(false);\n    setSelectedGame(null);\n    setGamePerformance(null);\n  };\n\n  // Handle export\n  const handleExport = async (format: ExportFormat, exportData: any[]): Promise<void> => {\n    try {\n      setLoading(true);\n\n      // Convert format to string for API\n      const formatStr = format === ExportFormat.CSV ? 'csv' :\n                        format === ExportFormat.EXCEL ? 'xlsx' :\n                        format === ExportFormat.PDF ? 'pdf' : 'csv';\n\n      // Create query parameters\n      const params: any = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        provider: selectedProviders.length > 0 ? selectedProviders.join(',') : undefined,\n        category: selectedCategories.length > 0 ? selectedCategories.join(',') : undefined,\n        format: formatStr\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        if (advancedFilters.name) {\n          params.search = advancedFilters.name;\n        }\n\n        if (advancedFilters.minRtp) {\n          params.minRtp = advancedFilters.minRtp;\n        }\n\n        if (advancedFilters.maxRtp) {\n          params.maxRtp = advancedFilters.maxRtp;\n        }\n\n        if (advancedFilters.volatility && advancedFilters.volatility.length > 0) {\n          params.volatility = advancedFilters.volatility.join(',');\n        }\n\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          params.status = advancedFilters.status.join(',');\n        }\n\n        if (advancedFilters.releaseDate) {\n          params.releaseDateStart = formatDate(advancedFilters.releaseDate, 'yyyy-MM-dd');\n        }\n\n        if (advancedFilters.features && advancedFilters.features.length > 0) {\n          params.features = advancedFilters.features.join(',');\n        }\n\n        if (advancedFilters.tags && advancedFilters.tags.length > 0) {\n          params.tags = advancedFilters.tags.join(',');\n        }\n      }\n\n      // If we have the data already, we can use it directly instead of making an API call\n      let blob;\n\n      if (exportData.length > 0 && (format === ExportFormat.CSV || format === ExportFormat.JSON)) {\n        // Client-side export for CSV and JSON\n        if (format === ExportFormat.CSV) {\n          // Create CSV content\n          const headers = columns.map(col => col.label || col.id).join(',');\n          const rows = exportData.map(row =>\n            columns.map(col => {\n              const value = row[col.id];\n              // Handle special cases like objects, arrays, etc.\n              if (typeof value === 'object' && value !== null) {\n                return JSON.stringify(value).replace(/\"/g, '\"\"');\n              }\n              return value !== undefined && value !== null ? String(value).replace(/\"/g, '\"\"') : '';\n            }).join(',')\n          ).join('\\n');\n\n          const csvContent = `${headers}\\n${rows}`;\n          blob = new Blob([csvContent], { type: 'text/csv' });\n        } else if (format === ExportFormat.JSON) {\n          // Create JSON content\n          const jsonContent = JSON.stringify(exportData, null, 2);\n          blob = new Blob([jsonContent], { type: 'application/json' });\n        }\n      } else {\n        // Server-side export for other formats or when we need to process all data\n        blob = await gamesService.exportGames(params);\n      }\n\n      // Create download link\n      if (blob) {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `games-report-${formatDate(new Date(), 'yyyy-MM-dd')}.${formatStr}`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }\n    } catch (err) {\n      console.error('[GAMES PAGE] Error exporting data:', err);\n      setError('Failed to export data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle pagination change\n  const handlePageChange = (newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle page size change\n  const handlePageSizeChange = (newPageSize: number): void => {\n    setPageSize(newPageSize);\n    setPage(0); // Reset to first page when changing page size\n  };\n\n  // Handle sorting change\n  const handleSortingChange = (field: string, direction: 'asc' | 'desc'): void => {\n    setSortBy(field);\n    setSortDirection(direction);\n  };\n\n  // Calculate summary statistics\n  const summary = {\n    totalGames: games.length,\n    totalRevenue: games.reduce((sum, g) => sum + (g.revenue || 0), 0),\n    totalPlayers: games.reduce((sum, g) => sum + (g.uniquePlayers || 0), 0),\n    totalSessions: games.reduce((sum, g) => sum + (g.sessions || 0), 0),\n    avgRtp: games.length > 0 ? games.reduce((sum, g) => sum + (g.rtp || 0), 0) / games.length : 0,\n    avgWinRate: games.length > 0 ? games.reduce((sum, g) => sum + (g.winRate || 0), 0) / games.length : 0\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom>\n            Games Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze game performance, popularity, and revenue metrics\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={RouterLink}\n          to=\"/reports/games/advanced\"\n          startIcon={<FilterListIcon />}\n        >\n          Advanced Report\n        </Button>\n      </Box>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <FilterListIcon sx={{ mr: 1 }} />\n            <Typography variant=\"h6\">Filters</Typography>\n          </Box>\n          <Button\n            color=\"primary\"\n            onClick={handleToggleAdvancedFilters}\n            endIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          >\n            {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n          </Button>\n        </Box>\n\n        {/* Basic Filters */}\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Providers\"\n              options={providersOptions}\n              value={selectedProviders}\n              onChange={handleProvidersChange}\n              placeholder=\"Select Providers\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Categories\"\n              options={categoriesOptions}\n              value={selectedCategories}\n              onChange={handleCategoriesChange}\n              placeholder=\"Select Categories\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        {/* Advanced Filters */}\n        <Collapse in={showAdvancedFilters} timeout=\"auto\" unmountOnExit>\n          <Box sx={{ mt: 3 }}>\n            <Divider sx={{ mb: 3 }} />\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n\n            <Grid container spacing={3}>\n              {/* Game Information */}\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Game Information\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Game Name\"\n                  fullWidth\n                  value={advancedFilters.name || ''}\n                  onChange={(e) => handleAdvancedFilterChange('name', e.target.value)}\n                  placeholder=\"Search by name\"\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Status</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.status || []}\n                    onChange={(e) => handleAdvancedFilterChange('status', e.target.value)}\n                    label=\"Status\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['active', 'inactive', 'maintenance'].map((status) => (\n                      <MenuItem key={status} value={status}>\n                        {status.charAt(0).toUpperCase() + status.slice(1)}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Volatility</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.volatility || []}\n                    onChange={(e) => handleAdvancedFilterChange('volatility', e.target.value)}\n                    label=\"Volatility\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['low', 'medium', 'high'].map((volatility) => (\n                      <MenuItem key={volatility} value={volatility}>\n                        {volatility.charAt(0).toUpperCase() + volatility.slice(1)}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Release Date\"\n                    value={advancedFilters.releaseDate || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('releaseDate', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              {/* RTP Range */}\n              <Grid item xs={12} md={6}>\n                <Typography variant=\"body2\" gutterBottom>\n                  RTP Range (%)\n                </Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                  <TextField\n                    label=\"Min\"\n                    type=\"number\"\n                    fullWidth\n                    value={advancedFilters.minRtp || ''}\n                    onChange={(e) => handleAdvancedFilterChange('minRtp', e.target.value)}\n                    InputProps={{ inputProps: { min: 0, max: 100 } }}\n                  />\n                  <Typography variant=\"body1\">to</Typography>\n                  <TextField\n                    label=\"Max\"\n                    type=\"number\"\n                    fullWidth\n                    value={advancedFilters.maxRtp || ''}\n                    onChange={(e) => handleAdvancedFilterChange('maxRtp', e.target.value)}\n                    InputProps={{ inputProps: { min: 0, max: 100 } }}\n                  />\n                </Box>\n              </Grid>\n\n              {/* Features */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  label=\"Features\"\n                  placeholder=\"Enter features (comma separated)\"\n                  fullWidth\n                  value={advancedFilters.features || ''}\n                  onChange={(e) => handleAdvancedFilterChange('features', e.target.value.split(',').map(f => f.trim()))}\n                  helperText=\"E.g., free spins, bonus rounds, multipliers\"\n                />\n              </Grid>\n            </Grid>\n\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleResetAdvancedFilters}\n                sx={{ mr: 2 }}\n              >\n                Reset Advanced Filters\n              </Button>\n            </Box>\n          </Box>\n        </Collapse>\n\n        {/* Action Buttons */}\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', mt: 3 }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<RefreshIcon />}\n            onClick={handleApplyFilters}\n          >\n            Apply Filters\n          </Button>\n        </Box>\n      </Paper>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Games\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalGames.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Revenue\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalRevenue)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Players\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalPlayers.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total Sessions\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalSessions.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Average RTP\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.avgRtp.toFixed(2)}%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Average Win Rate\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.avgWinRate.toFixed(2)}%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Data Table */}\n      <Paper sx={{ p: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <TableChartIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Games Data</Typography>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        <EnhancedTable\n          columns={columns}\n          data={games}\n          loading={loading}\n          title=\"Games Data\"\n          emptyMessage=\"No games data available\"\n          idField=\"id\"\n          onExport={handleExport}\n          features={{\n            sorting: true,\n            filtering: {\n              enabled: true,\n              quickFilter: true,\n              advancedFilter: true\n            },\n            pagination: {\n              enabled: true,\n              defaultPageSize: pageSize,\n              pageSizeOptions: [10, 25, 50, 100]\n            },\n            columnManagement: {\n              enabled: true,\n              allowReordering: true,\n              allowHiding: true,\n              allowResizing: true\n            },\n            export: {\n              enabled: true,\n              formats: [ExportFormat.CSV, ExportFormat.EXCEL, ExportFormat.PDF]\n            }\n          }}\n          onRowClick={handleViewGameDetails}\n        />\n      </Paper>\n\n      {/* Game Details Dialog */}\n      <Dialog\n        open={gameDetailsOpen}\n        onClose={handleCloseGameDetails}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Game Details\n        </DialogTitle>\n        <DialogContent dividers>\n          {selectedGame && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Basic Information\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                    {selectedGame.thumbnailUrl && (\n                      <Box\n                        component=\"img\"\n                        src={selectedGame.thumbnailUrl}\n                        alt={selectedGame.name}\n                        sx={{ width: 80, height: 80, mr: 2, borderRadius: 1 }}\n                      />\n                    )}\n                    <Box>\n                      <Typography variant=\"h6\">\n                        {selectedGame.name}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {selectedGame.provider} | {selectedGame.category}\n                      </Typography>\n                    </Box>\n                  </Box>\n\n                  {selectedGame.description && (\n                    <Typography variant=\"body2\" sx={{ mb: 2 }}>\n                      {selectedGame.description}\n                    </Typography>\n                  )}\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Status:</strong> {selectedGame.status ? selectedGame.status.charAt(0).toUpperCase() + selectedGame.status.slice(1) : 'N/A'}\n                  </Typography>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Release Date:</strong> {selectedGame.releaseDate ? formatDate(new Date(selectedGame.releaseDate), 'MMM dd, yyyy') : 'N/A'}\n                  </Typography>\n\n                  <Box sx={{ mb: 1 }}>\n                    <Typography variant=\"body1\" component=\"span\">\n                      <strong>RTP:</strong> {selectedGame.rtp ? `${selectedGame.rtp}%` : 'N/A'}\n                    </Typography>\n                    {selectedGame.rtp && (\n                      <Tooltip title={`Return to Player: ${selectedGame.rtp}%`}>\n                        <LinearProgress\n                          variant=\"determinate\"\n                          value={selectedGame.rtp}\n                          sx={{ mt: 1, height: 8, borderRadius: 4 }}\n                        />\n                      </Tooltip>\n                    )}\n                  </Box>\n\n                  <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                    <strong>Volatility:</strong> {selectedGame.volatility ? selectedGame.volatility.charAt(0).toUpperCase() + selectedGame.volatility.slice(1) : 'N/A'}\n                  </Typography>\n\n                  {selectedGame.features && selectedGame.features.length > 0 && (\n                    <Box sx={{ mb: 1 }}>\n                      <Typography variant=\"body1\" sx={{ mb: 0.5 }}>\n                        <strong>Features:</strong>\n                      </Typography>\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {selectedGame.features.map((feature) => (\n                          <Chip key={feature} label={feature} size=\"small\" />\n                        ))}\n                      </Box>\n                    </Box>\n                  )}\n\n                  {selectedGame.tags && selectedGame.tags.length > 0 && (\n                    <Box sx={{ mb: 1 }}>\n                      <Typography variant=\"body1\" sx={{ mb: 0.5 }}>\n                        <strong>Tags:</strong>\n                      </Typography>\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {selectedGame.tags.map((tag) => (\n                          <Chip key={tag} label={tag} size=\"small\" variant=\"outlined\" />\n                        ))}\n                      </Box>\n                    </Box>\n                  )}\n                </Box>\n              </Grid>\n\n              <Grid item xs={12} md={6}>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Performance Metrics\n                  </Typography>\n                  <Divider sx={{ my: 1 }} />\n\n                  {gamePerformance ? (\n                    <>\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                        <AttachMoneyIcon sx={{ mr: 1, color: 'primary.main' }} />\n                        <Typography variant=\"body1\">\n                          <strong>Revenue:</strong> {formatCurrency(gamePerformance.revenue)}\n                        </Typography>\n                      </Box>\n\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                        <PeopleIcon sx={{ mr: 1, color: 'primary.main' }} />\n                        <Typography variant=\"body1\">\n                          <strong>Unique Players:</strong> {gamePerformance.uniquePlayers.toLocaleString()}\n                        </Typography>\n                      </Box>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Sessions:</strong> {gamePerformance.sessions.toLocaleString()}\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Average Session Duration:</strong> {gamePerformance.avgSessionDuration.toFixed(2)} minutes\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Average Bet:</strong> {formatCurrency(gamePerformance.avgBet)}\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Average Win:</strong> {formatCurrency(gamePerformance.avgWin)}\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Bets Count:</strong> {gamePerformance.betsCount.toLocaleString()}\n                      </Typography>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Wins Count:</strong> {gamePerformance.winsCount.toLocaleString()}\n                      </Typography>\n\n                      <Box sx={{ mb: 1 }}>\n                        <Typography variant=\"body1\" component=\"span\">\n                          <strong>Win Rate:</strong> {gamePerformance.winRate.toFixed(2)}%\n                        </Typography>\n                        <Tooltip title={`Win Rate: ${gamePerformance.winRate.toFixed(2)}%`}>\n                          <LinearProgress\n                            variant=\"determinate\"\n                            value={gamePerformance.winRate}\n                            sx={{ mt: 1, height: 8, borderRadius: 4 }}\n                          />\n                        </Tooltip>\n                      </Box>\n\n                      <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                        <strong>Hold Percentage:</strong> {gamePerformance.holdPercentage.toFixed(2)}%\n                      </Typography>\n\n                      {gamePerformance.period && (\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n                          Data period: {formatDate(new Date(gamePerformance.period.startDate), 'MMM dd, yyyy')} to {formatDate(new Date(gamePerformance.period.endDate), 'MMM dd, yyyy')}\n                        </Typography>\n                      )}\n                    </>\n                  ) : (\n                    <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 200 }}>\n                      {loading ? (\n                        <CircularProgress />\n                      ) : (\n                        <Typography variant=\"body1\" color=\"text.secondary\">\n                          No performance data available for the selected period.\n                        </Typography>\n                      )}\n                    </Box>\n                  )}\n                </Box>\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseGameDetails}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}\n\nexport default GamesPage;"],"names":["_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d","async","params","arguments","length","undefined","apiClient","get","data","error","id","responseType","GamesPage","startDate","setStartDate","useState","Date","setDate","getDate","endDate","setEndDate","selectedProviders","setSelectedProviders","selectedCategories","setSelectedCategories","showAdvancedFilters","setShowAdvancedFilters","advancedFilters","setAdvancedFilters","games","setGames","loading","setLoading","setError","totalCount","setTotalCount","page","setPage","pageSize","setPageSize","sortBy","setSortBy","sortDirection","setSortDirection","providers","setProviders","categories","setCategories","providersOptions","setProvidersOptions","categoriesOptions","setCategoriesOptions","selectedGame","setSelectedGame","gameDetailsOpen","setGameDetailsOpen","gamePerformance","setGamePerformance","columns","label","format","value","row","_jsxs","Box","sx","display","alignItems","children","thumbnailUrl","_jsx","component","src","alt","name","width","height","mr","borderRadius","Typography","variant","fontWeight","sortable","type","volatility","Chip","charAt","toUpperCase","slice","size","color","status","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","useEffect","fetchMetadata","fetchGames","providersData","gamesService","providerOptions","map","provider","categoriesData","categoryOptions","category","err","console","formatDate","join","limit","sortOrder","Object","keys","log","search","minRtp","maxRtp","releaseDate","releaseDateStart","features","tags","response","_response$meta","meta","handleAdvancedFilterChange","key","prev","handleCloseGameDetails","summary","totalGames","totalRevenue","reduce","sum","g","revenue","totalPlayers","uniquePlayers","totalSessions","sessions","avgRtp","rtp","avgWinRate","winRate","Container","maxWidth","mb","justifyContent","gutterBottom","Button","RouterLink","to","startIcon","FilterListIcon","Paper","p","onClick","handleToggleAdvancedFilters","endIcon","ExpandLessIcon","ExpandMoreIcon","Grid","container","spacing","item","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","onChange","newValue","slotProps","textField","fullWidth","MultiSelect","options","values","v","toString","placeholder","searchable","showSelectAllOption","Collapse","in","timeout","unmountOnExit","mt","Divider","TextField","e","target","FormControl","InputLabel","Select","multiple","renderValue","selected","flexWrap","gap","MenuItem","InputProps","inputProps","min","max","split","f","trim","helperText","handleResetAdvancedFilters","RefreshIcon","handleApplyFilters","combinedFilters","sm","Card","CardContent","toLocaleString","toFixed","TableChartIcon","Alert","severity","EnhancedTable","title","emptyMessage","idField","onExport","exportData","formatStr","ExportFormat","CSV","EXCEL","PDF","blob","JSON","headers","col","csvContent","stringify","replace","String","Blob","jsonContent","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","sorting","filtering","enabled","quickFilter","advancedFilter","pagination","defaultPageSize","pageSizeOptions","columnManagement","allowReordering","allowHiding","allowResizing","export","formats","onRowClick","game","performanceData","Dialog","open","onClose","DialogTitle","DialogContent","dividers","my","description","Tooltip","LinearProgress","feature","tag","_Fragment","AttachMoneyIcon","PeopleIcon","avgSessionDuration","avgBet","avgWin","betsCount","winsCount","holdPercentage","period","CircularProgress","DialogActions"],"sourceRoot":""}