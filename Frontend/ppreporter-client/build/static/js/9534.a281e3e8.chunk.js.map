{"version":3,"file":"static/js/9534.a281e3e8.chunk.js","mappings":"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","sources":["components/reports/DailyActionsAdvancedReport.tsx","containers/DailyActionsAdvancedReportContainer.jsx","pages/showcase/reports/DailyActionsAdvancedPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Button,\n  Divider,\n  CircularProgress,\n  Alert,\n  Tabs,\n  Tab,\n  Menu,\n  MenuItem,\n  IconButton,\n  Tooltip,\n  Paper,\n  TextField,\n  InputAdornment\n} from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport InfoIcon from '@mui/icons-material/Info';\nimport SearchIcon from '@mui/icons-material/Search';\nimport DateRangePicker from '../common/DateRangePicker';\nimport { MultiSelect } from '../common';\nimport { DateRange } from '../../types/dateRangePicker';\nimport { format, subDays, startOfDay, endOfDay } from 'date-fns';\n\n// Define interfaces\ninterface DailyActionsAdvancedReportProps {\n  /**\n   * Metadata for filters\n   */\n  metadata: any;\n\n  /**\n   * Report data\n   */\n  data: any;\n\n  /**\n   * Loading state\n   */\n  loading: boolean;\n\n  /**\n   * Error message\n   */\n  error: string | null;\n\n  /**\n   * Handler for filter changes\n   */\n  onFilterChange: (filters: any) => void;\n\n  /**\n   * Handler for refreshing data\n   */\n  onRefresh: (filters: any) => void;\n\n  /**\n   * Handler for exporting data\n   */\n  onExport: (filters: any, format: string) => void;\n}\n\n/**\n * Advanced daily actions report component\n */\nconst DailyActionsAdvancedReport: React.FC<DailyActionsAdvancedReportProps> = ({\n  metadata,\n  data,\n  loading,\n  error,\n  onFilterChange,\n  onRefresh,\n  onExport\n}) => {\n  // State\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [exportAnchorEl, setExportAnchorEl] = useState<null | HTMLElement>(null);\n  const [showFilters, setShowFilters] = useState<boolean>(false);\n  const [filters, setFilters] = useState({\n    startDate: startOfDay(subDays(new Date(), 30)),\n    endDate: endOfDay(new Date()),\n    gameCategories: [] as string[],\n    playerStatuses: [] as string[],\n    countries: [] as string[],\n    whiteLabels: [] as string[],\n    minAmount: '',\n    maxAmount: '',\n    searchTerm: ''\n  });\n\n  // Prepare options for select components\n  const [gameCategories, setGameCategories] = useState<Array<{ value: string, label: string }>>([]);\n  const [playerStatuses, setPlayerStatuses] = useState<Array<{ value: string, label: string }>>([]);\n  const [countries, setCountries] = useState<Array<{ value: string, label: string }>>([]);\n  const [whiteLabels, setWhiteLabels] = useState<Array<{ value: string, label: string }>>([]);\n\n  // Extract options from metadata when it changes\n  useEffect(() => {\n    if (metadata) {\n      // Extract game categories\n      const gameCategoryFilter = metadata.filters?.find((filter: any) => filter.id === 'gameCategory');\n      if (gameCategoryFilter?.options) {\n        setGameCategories(gameCategoryFilter.options);\n      } else {\n        // Default game categories if not found in metadata\n        setGameCategories([\n          { value: 'slots', label: 'Slots' },\n          { value: 'table', label: 'Table Games' },\n          { value: 'live', label: 'Live Casino' },\n          { value: 'poker', label: 'Poker' },\n          { value: 'sports', label: 'Sports' },\n          { value: 'arcade', label: 'Arcade' }\n        ]);\n      }\n\n      // Extract player statuses\n      const playerStatusFilter = metadata.filters?.find((filter: any) => filter.id === 'playerStatus');\n      if (playerStatusFilter?.options) {\n        setPlayerStatuses(playerStatusFilter.options);\n      } else {\n        // Default player statuses if not found in metadata\n        setPlayerStatuses([\n          { value: 'active', label: 'Active' },\n          { value: 'inactive', label: 'Inactive' },\n          { value: 'suspended', label: 'Suspended' },\n          { value: 'new', label: 'New' },\n          { value: 'vip', label: 'VIP' }\n        ]);\n      }\n\n      // Extract countries\n      const countryFilter = metadata.filters?.find((filter: any) => filter.id === 'country');\n      if (countryFilter?.options) {\n        setCountries(countryFilter.options);\n      } else {\n        // Default countries if not found in metadata\n        setCountries([\n          { value: 'us', label: 'United States' },\n          { value: 'uk', label: 'United Kingdom' },\n          { value: 'ca', label: 'Canada' },\n          { value: 'de', label: 'Germany' },\n          { value: 'fr', label: 'France' },\n          { value: 'es', label: 'Spain' },\n          { value: 'it', label: 'Italy' },\n          { value: 'au', label: 'Australia' }\n        ]);\n      }\n\n      // Extract white labels\n      const whiteLabelFilter = metadata.filters?.find((filter: any) => filter.id === 'whiteLabel');\n      if (whiteLabelFilter?.options) {\n        setWhiteLabels(whiteLabelFilter.options);\n      } else if (metadata.whiteLabels) {\n        // Try to get white labels from metadata.whiteLabels\n        setWhiteLabels(metadata.whiteLabels.map((wl: any) => ({\n          value: wl.id,\n          label: wl.name\n        })));\n      } else {\n        // Default white labels if not found in metadata\n        setWhiteLabels([\n          { value: 'casino-royale', label: 'Casino Royale' },\n          { value: 'lucky-spin', label: 'Lucky Spin' },\n          { value: 'golden-bet', label: 'Golden Bet' },\n          { value: 'diamond-play', label: 'Diamond Play' },\n          { value: 'royal-flush', label: 'Royal Flush' }\n        ]);\n      }\n    }\n  }, [metadata]);\n\n  // Handle tab change\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  // Handle export menu\n  const handleExportClick = (event: React.MouseEvent<HTMLElement>) => {\n    setExportAnchorEl(event.currentTarget);\n  };\n\n  const handleExportClose = () => {\n    setExportAnchorEl(null);\n  };\n\n  // Handle export format selection\n  const handleExportFormat = (format: string) => {\n    onExport(filters, format);\n    handleExportClose();\n  };\n\n  // Handle filter toggle\n  const handleToggleFilters = () => {\n    setShowFilters(!showFilters);\n  };\n\n  // Handle filter change\n  const handleFilterChange = (field: string, value: any) => {\n    const newFilters = {\n      ...filters,\n      [field]: value\n    };\n\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  // Handle multi-select change\n  const handleMultiSelectChange = (field: string, value: (string | number)[]) => {\n    handleFilterChange(field, value);\n  };\n\n  // Handle search term change\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    handleFilterChange('searchTerm', event.target.value);\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (range: DateRange) => {\n    if (range.start && range.end) {\n      const newFilters = {\n        ...filters,\n        startDate: range.start,\n        endDate: range.end\n      };\n\n      setFilters(newFilters);\n      onFilterChange(newFilters);\n    }\n  };\n\n  // Handle refresh\n  const handleRefresh = () => {\n    onRefresh(filters);\n  };\n\n  // Render placeholder content when no data\n  const renderPlaceholder = () => (\n    <Box sx={{ p: 4, textAlign: 'center' }}>\n      <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n        No data available\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\">\n        Try adjusting your filters or select a different date range.\n      </Typography>\n      <Button\n        variant=\"outlined\"\n        startIcon={<RefreshIcon />}\n        onClick={handleRefresh}\n        sx={{ mt: 2 }}\n      >\n        Refresh Data\n      </Button>\n    </Box>\n  );\n\n  return (\n    <Card>\n      <CardContent>\n        {/* Report Header */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h5\">\n            Advanced Daily Actions Report\n          </Typography>\n          <Box>\n            <Tooltip title=\"Refresh data\">\n              <IconButton onClick={handleRefresh} disabled={loading}>\n                <RefreshIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Filter data\">\n              <IconButton onClick={handleToggleFilters} color={showFilters ? 'primary' : 'default'}>\n                <FilterListIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Export data\">\n              <IconButton onClick={handleExportClick} disabled={loading || !data}>\n                <DownloadIcon />\n              </IconButton>\n            </Tooltip>\n            <Menu\n              anchorEl={exportAnchorEl}\n              open={Boolean(exportAnchorEl)}\n              onClose={handleExportClose}\n            >\n              <MenuItem onClick={() => handleExportFormat('csv')}>Export as CSV</MenuItem>\n              <MenuItem onClick={() => handleExportFormat('xlsx')}>Export as Excel</MenuItem>\n              <MenuItem onClick={() => handleExportFormat('pdf')}>Export as PDF</MenuItem>\n              <MenuItem onClick={() => handleExportFormat('json')}>Export as JSON</MenuItem>\n            </Menu>\n          </Box>\n        </Box>\n\n        {/* Error Alert */}\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {/* Filters Section */}\n        {showFilters && (\n          <Paper variant=\"outlined\" sx={{ p: 2, mb: 3 }}>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Filters\n            </Typography>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <DateRangePicker\n                  startDate={filters.startDate}\n                  endDate={filters.endDate}\n                  onChange={handleDateRangeChange}\n                  buttonLabel=\"Date Range\"\n                />\n              </Grid>\n\n              {/* Search */}\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Search\"\n                  placeholder=\"Search by player, game, etc.\"\n                  value={filters.searchTerm}\n                  onChange={handleSearchChange}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <SearchIcon fontSize=\"small\" />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n              {/* Game Categories */}\n              <Grid item xs={12} md={6}>\n                <MultiSelect\n                  label=\"Game Categories\"\n                  options={gameCategories}\n                  value={filters.gameCategories}\n                  onChange={(value) => handleMultiSelectChange('gameCategories', value)}\n                  placeholder=\"Select game categories\"\n                  searchable\n                  showSelectAllOption\n                />\n              </Grid>\n\n              {/* Player Statuses */}\n              <Grid item xs={12} md={6}>\n                <MultiSelect\n                  label=\"Player Statuses\"\n                  options={playerStatuses}\n                  value={filters.playerStatuses}\n                  onChange={(value) => handleMultiSelectChange('playerStatuses', value)}\n                  placeholder=\"Select player statuses\"\n                  searchable\n                  showSelectAllOption\n                />\n              </Grid>\n\n              {/* Countries */}\n              <Grid item xs={12} md={6}>\n                <MultiSelect\n                  label=\"Countries\"\n                  options={countries}\n                  value={filters.countries}\n                  onChange={(value) => handleMultiSelectChange('countries', value)}\n                  placeholder=\"Select countries\"\n                  searchable\n                  showSelectAllOption\n                />\n              </Grid>\n\n              {/* White Labels */}\n              <Grid item xs={12} md={6}>\n                <MultiSelect\n                  label=\"White Labels\"\n                  options={whiteLabels}\n                  value={filters.whiteLabels}\n                  onChange={(value) => handleMultiSelectChange('whiteLabels', value)}\n                  placeholder=\"Select white labels\"\n                  searchable\n                  showSelectAllOption\n                />\n              </Grid>\n\n              {/* Amount Range */}\n              <Grid item xs={12} md={6}>\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      label=\"Min Amount\"\n                      type=\"number\"\n                      placeholder=\"0\"\n                      value={filters.minAmount}\n                      onChange={(e) => handleFilterChange('minAmount', e.target.value)}\n                      InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      label=\"Max Amount\"\n                      type=\"number\"\n                      placeholder=\"1000\"\n                      value={filters.maxAmount}\n                      onChange={(e) => handleFilterChange('maxAmount', e.target.value)}\n                      InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>\n              <Button\n                variant=\"outlined\"\n                onClick={() => {\n                  // Reset filters logic\n                  const resetFilters = {\n                    startDate: startOfDay(subDays(new Date(), 30)),\n                    endDate: endOfDay(new Date()),\n                    gameCategories: [],\n                    playerStatuses: [],\n                    countries: [],\n                    whiteLabels: [],\n                    minAmount: '',\n                    maxAmount: '',\n                    searchTerm: ''\n                  };\n                  setFilters(resetFilters);\n                  onFilterChange(resetFilters);\n                }}\n                sx={{ mr: 1 }}\n              >\n                Reset\n              </Button>\n              <Button\n                variant=\"contained\"\n                onClick={handleRefresh}\n              >\n                Apply Filters\n              </Button>\n            </Box>\n          </Paper>\n        )}\n\n        {/* Date Range Display */}\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Showing data from {format(filters.startDate, 'MMM d, yyyy')} to {format(filters.endDate, 'MMM d, yyyy')}\n          </Typography>\n        </Box>\n\n        {/* Loading Indicator */}\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {/* Report Content */}\n        {!loading && data && (\n          <>\n            {/* Report Tabs */}\n            <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n              <Tabs value={activeTab} onChange={handleTabChange}>\n                <Tab label=\"Summary\" />\n                <Tab label=\"Detailed View\" />\n                <Tab label=\"Charts\" />\n              </Tabs>\n            </Box>\n\n            {/* Tab Content */}\n            <Box role=\"tabpanel\" hidden={activeTab !== 0}>\n              {activeTab === 0 && (\n                <Typography variant=\"body1\">\n                  Summary content would go here. This is a placeholder component.\n                </Typography>\n              )}\n            </Box>\n            <Box role=\"tabpanel\" hidden={activeTab !== 1}>\n              {activeTab === 1 && (\n                <Typography variant=\"body1\">\n                  Detailed view content would go here. This is a placeholder component.\n                </Typography>\n              )}\n            </Box>\n            <Box role=\"tabpanel\" hidden={activeTab !== 2}>\n              {activeTab === 2 && (\n                <Typography variant=\"body1\">\n                  Charts content would go here. This is a placeholder component.\n                </Typography>\n              )}\n            </Box>\n          </>\n        )}\n\n        {/* No Data Placeholder */}\n        {!loading && !data && renderPlaceholder()}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DailyActionsAdvancedReport;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Box, Container, Typography, Alert, CircularProgress } from '@mui/material';\nimport DailyActionsAdvancedReport from '../components/reports/DailyActionsAdvancedReport';\nimport dailyActionsService from '../services/api/dailyActionsService';\nimport { saveAs } from 'file-saver';\nimport { format } from 'date-fns';\nimport { FEATURES } from '../config/constants';\n\n/**\n * Container component for DailyActionsAdvancedReport\n * Handles API calls and data management\n */\nconst DailyActionsAdvancedReportContainer = () => {\n  // State\n  const [metadata, setMetadata] = useState(null);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [metadataLoading, setMetadataLoading] = useState(false);\n  const [metadataError, setMetadataError] = useState(null);\n\n  const navigate = useNavigate();\n\n  // Load metadata on mount\n  useEffect(() => {\n    fetchMetadata();\n  }, []);\n\n  // Fetch metadata for filters\n  const fetchMetadata = async () => {\n    try {\n      setMetadataLoading(true);\n      setMetadataError(null);\n\n      // Check if mock data is enabled\n      const useMockData = FEATURES.USE_MOCK_DATA_FOR_UI_TESTING || localStorage.getItem('USE_MOCK_DATA_FOR_UI_TESTING') === 'true';\n\n      if (useMockData) {\n        console.log('[DAILY ACTIONS ADVANCED] Using mock data for metadata');\n\n        // Import mock data dynamically\n        const mockDataModule = await import('../mockData');\n        const mockDataService = mockDataModule.default;\n\n        // Get mock metadata\n        const mockMetadata = mockDataService.getMockData('/reports/daily-actions/metadata');\n\n        if (mockMetadata) {\n          console.log('[DAILY ACTIONS ADVANCED] Got mock metadata:', mockMetadata);\n          setMetadata(mockMetadata);\n          return;\n        }\n      }\n\n      // Fall back to service if mock data is not available or not enabled\n      console.log('[DAILY ACTIONS ADVANCED] Fetching metadata from service');\n      const response = await dailyActionsService.getMetadata();\n      setMetadata(response);\n    } catch (err) {\n      console.error('Error fetching metadata:', err);\n      setMetadataError(err.message || 'Failed to load filter options');\n    } finally {\n      setMetadataLoading(false);\n    }\n  };\n\n  // Fetch report data based on filters\n  const fetchData = async (filters) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Convert dates to ISO strings\n      const apiFilters = {\n        ...filters,\n        startDate: filters.startDate ? format(new Date(filters.startDate), 'yyyy-MM-dd') : null,\n        endDate: filters.endDate ? format(new Date(filters.endDate), 'yyyy-MM-dd') : null\n      };\n\n      console.log('[DAILY ACTIONS ADVANCED] Fetching data with filters:', apiFilters);\n\n      // Check if mock data is enabled\n      const useMockData = FEATURES.USE_MOCK_DATA_FOR_UI_TESTING || localStorage.getItem('USE_MOCK_DATA_FOR_UI_TESTING') === 'true';\n\n      if (useMockData) {\n        console.log('[DAILY ACTIONS ADVANCED] Using mock data for report');\n\n        // Import mock data dynamically\n        const mockDataModule = await import('../mockData');\n        const mockDataService = mockDataModule.default;\n\n        // Get mock data\n        const mockData = mockDataService.getMockData('/reports/daily-actions/data', apiFilters);\n\n        if (mockData) {\n          console.log('[DAILY ACTIONS ADVANCED] Got mock data:', mockData);\n          setData(mockData);\n          return;\n        }\n      }\n\n      // Fall back to service if mock data is not available or not enabled\n      console.log('[DAILY ACTIONS ADVANCED] Fetching data from service');\n      const response = await dailyActionsService.getFilteredData(apiFilters);\n      setData(response);\n    } catch (err) {\n      console.error('Error fetching report data:', err);\n      setError(err.message || 'Failed to load report data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleFilterChange = (filters) => {\n    // Log the filters\n    console.log('Filters changed:', filters);\n\n    // If we have search term or multi-select filters, we might want to fetch data\n    if (\n      filters.searchTerm ||\n      (filters.gameCategories && filters.gameCategories.length > 0) ||\n      (filters.playerStatuses && filters.playerStatuses.length > 0) ||\n      (filters.countries && filters.countries.length > 0)\n    ) {\n      // Optionally fetch data with the new filters\n      // Uncomment the line below to automatically fetch data when filters change\n      // fetchData(filters);\n    }\n  };\n\n  // Handle export\n  const handleExport = async (filters, exportFormat) => {\n    try {\n      setLoading(true);\n\n      // Convert dates to ISO strings\n      const apiFilters = {\n        ...filters,\n        startDate: filters.startDate ? format(new Date(filters.startDate), 'yyyy-MM-dd') : null,\n        endDate: filters.endDate ? format(new Date(filters.endDate), 'yyyy-MM-dd') : null\n      };\n\n      console.log('[DAILY ACTIONS ADVANCED] Exporting data with filters:', apiFilters, 'format:', exportFormat);\n\n      // Check if mock data is enabled\n      const useMockData = FEATURES.USE_MOCK_DATA_FOR_UI_TESTING || localStorage.getItem('USE_MOCK_DATA_FOR_UI_TESTING') === 'true';\n\n      if (useMockData) {\n        console.log('[DAILY ACTIONS ADVANCED] Using mock data for export');\n\n        // For mock data, we'll just create a simple text file with JSON data\n        const mockDataModule = await import('../mockData');\n        const mockDataService = mockDataModule.default;\n\n        // Get mock data\n        const mockData = mockDataService.getMockData('/reports/daily-actions/data', apiFilters);\n\n        if (mockData) {\n          console.log('[DAILY ACTIONS ADVANCED] Creating mock export file');\n          // Create a blob with the JSON data\n          const blob = new Blob([JSON.stringify(mockData, null, 2)], { type: 'application/json' });\n          const fileName = `daily-actions-report-${format(new Date(), 'yyyy-MM-dd')}.json`;\n          saveAs(blob, fileName);\n          return;\n        }\n      }\n\n      // Fall back to service if mock data is not available or not enabled\n      console.log('[DAILY ACTIONS ADVANCED] Exporting data from service');\n      const blob = await dailyActionsService.exportFilteredReport(apiFilters, exportFormat);\n      const fileName = `daily-actions-report-${format(new Date(), 'yyyy-MM-dd')}.${exportFormat}`;\n      saveAs(blob, fileName);\n    } catch (err) {\n      console.error('Error exporting report:', err);\n      setError(err.message || 'Failed to export report');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Show loading state while fetching metadata\n  if (metadataLoading && !metadata) {\n    return (\n      <Container maxWidth=\"lg\">\n        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  // Show error if metadata fetch failed\n  if (metadataError && !metadata) {\n    return (\n      <Container maxWidth=\"lg\">\n        <Box sx={{ mt: 4 }}>\n          <Alert severity=\"error\">\n            {metadataError}\n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"body2\">\n                Please try refreshing the page or contact support if the problem persists.\n              </Typography>\n            </Box>\n          </Alert>\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        <DailyActionsAdvancedReport\n          metadata={metadata}\n          data={data}\n          loading={loading}\n          error={error}\n          onFilterChange={handleFilterChange}\n          onRefresh={fetchData}\n          onExport={handleExport}\n        />\n      </Box>\n    </Container>\n  );\n};\n\nexport default DailyActionsAdvancedReportContainer;\n","import React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Breadcrumbs, Link, Typography } from '@mui/material';\nimport { Link as RouterLink } from 'react-router-dom';\nimport DailyActionsAdvancedReportContainer from '../../../containers/DailyActionsAdvancedReportContainer';\n\n/**\n * DailyActionsAdvancedPage - Page component for the advanced daily actions report\n */\nconst DailyActionsAdvancedPage: React.FC = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Advanced Daily Actions Report | PPrePorter</title>\n      </Helmet>\n\n      <Box sx={{ p: 3 }}>\n        {/* Breadcrumbs */}\n        <Breadcrumbs aria-label=\"breadcrumb\" sx={{ mb: 2 }}>\n          <Link component={RouterLink} to=\"/\" color=\"inherit\">\n            Dashboard\n          </Link>\n          <Link component={RouterLink} to=\"/reports\" color=\"inherit\">\n            Reports\n          </Link>\n          <Typography color=\"text.primary\">Advanced Daily Actions</Typography>\n        </Breadcrumbs>\n\n        {/* Page Title */}\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Advanced Daily Actions Report\n        </Typography>\n        <Typography variant=\"subtitle1\" color=\"text.secondary\" paragraph>\n          Comprehensive analysis of daily player actions with advanced filtering options.\n        </Typography>\n\n        {/* Report Container */}\n        <DailyActionsAdvancedReportContainer />\n      </Box>\n    </>\n  );\n};\n\nexport default DailyActionsAdvancedPage;\n"],"names":["_ref","metadata","data","loading","error","onFilterChange","onRefresh","onExport","activeTab","setActiveTab","useState","exportAnchorEl","setExportAnchorEl","showFilters","setShowFilters","filters","setFilters","startDate","startOfDay","subDays","Date","endDate","endOfDay","gameCategories","playerStatuses","countries","whiteLabels","minAmount","maxAmount","searchTerm","setGameCategories","setPlayerStatuses","setCountries","setWhiteLabels","useEffect","_metadata$filters","_metadata$filters2","_metadata$filters3","_metadata$filters4","gameCategoryFilter","find","filter","id","options","value","label","playerStatusFilter","countryFilter","whiteLabelFilter","map","wl","name","handleExportClose","handleExportFormat","format","handleFilterChange","field","newFilters","handleMultiSelectChange","handleRefresh","_jsx","Card","children","_jsxs","CardContent","Box","sx","display","justifyContent","alignItems","mb","Typography","variant","Tooltip","title","IconButton","onClick","disabled","RefreshIcon","handleToggleFilters","color","FilterListIcon","event","currentTarget","DownloadIcon","Menu","anchorEl","open","Boolean","onClose","MenuItem","Alert","severity","Paper","p","gutterBottom","Grid","container","spacing","item","xs","DateRangePicker","onChange","range","start","end","buttonLabel","TextField","fullWidth","size","placeholder","target","InputProps","startAdornment","InputAdornment","position","SearchIcon","fontSize","md","MultiSelect","searchable","showSelectAllOption","type","e","mt","Button","resetFilters","mr","my","CircularProgress","_Fragment","borderBottom","borderColor","Tabs","handleTabChange","newValue","Tab","role","hidden","textAlign","startIcon","DailyActionsAdvancedReportContainer","setMetadata","setData","setLoading","setError","metadataLoading","setMetadataLoading","metadataError","setMetadataError","useNavigate","fetchMetadata","async","FEATURES","USE_MOCK_DATA_FOR_UI_TESTING","localStorage","getItem","console","log","mockDataModule","mockMetadata","default","getMockData","response","dailyActionsService","getMetadata","err","message","Container","maxWidth","height","DailyActionsAdvancedReport","length","apiFilters","mockData","getFilteredData","exportFormat","blob","Blob","JSON","stringify","fileName","saveAs","exportFilteredReport","DailyActionsAdvancedPage","Helmet","Breadcrumbs","Link","component","RouterLink","to","paragraph"],"sourceRoot":""}