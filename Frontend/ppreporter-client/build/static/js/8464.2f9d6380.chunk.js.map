{"version":3,"file":"static/js/8464.2f9d6380.chunk.js","mappings":"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","sources":["pages/analytics/components/OverviewTabContent.tsx","pages/analytics/components/PerformanceTabContent.tsx","pages/analytics/components/PlayerAnalysisTabContent.tsx","pages/analytics/components/GameAnalysisTabContent.tsx","pages/analytics/components/AdvancedVisualizationsTabContent.tsx","pages/analytics/AdvancedAnalyticsPage.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  Grid,\n  Paper,\n  Typography,\n  Skeleton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\n\n// Import SimpleBox to fix TypeScript errors\nimport SimpleBox from '../../../components/common/SimpleBox';\n\n// Import components\nimport Card from '../../../components/common/Card';\nimport {\n  CasinoRevenueChart,\n  PlayerRegistrationsChart,\n  TopGamesChart,\n  MicroCharts\n} from '../../../components/dashboard';\n\n// Import utilities\nimport { formatCurrency, formatNumber, formatPercentage } from '../../../utils/formatters';\n\n/**\n * KPI data interface\n */\ninterface KpiMetric {\n  current: number;\n  previous: number;\n  change: number;\n  trend: 'up' | 'down' | 'stable';\n}\n\n/**\n * Dashboard data interface for Overview tab\n */\ninterface DashboardData {\n  revenue: any[];\n  players: any[];\n  topGames: any[];\n  kpi: {\n    revenue?: KpiMetric;\n    players?: KpiMetric;\n    deposits?: KpiMetric;\n    withdrawals?: KpiMetric;\n    [key: string]: KpiMetric | undefined;\n  };\n}\n\n/**\n * MicroChart data point interface\n */\ninterface MicroChartDataPoint {\n  value: number;\n  label: string;\n}\n\n/**\n * Overview tab content props\n */\ninterface OverviewTabContentProps {\n  /** Dashboard data containing KPIs and chart data */\n  dashboardData: DashboardData;\n  /** Loading state indicator */\n  isLoading: boolean;\n  /** Selected time period */\n  timePeriod: string;\n  /** Handler for time period change */\n  onTimePeriodChange: (event: SelectChangeEvent) => void;\n}\n\n/**\n * Overview Tab Content\n *\n * Displays key metrics, charts, and summary data for the analytics dashboard.\n * Features include:\n * - KPI metrics with trend indicators and micro charts\n * - Revenue trend chart\n * - Player registrations chart\n * - Top games chart\n *\n * @param props - Component props\n * @returns React component\n */\nconst OverviewTabContent: React.FC<OverviewTabContentProps> = ({\n  dashboardData,\n  isLoading,\n  timePeriod,\n  onTimePeriodChange\n}) => {\n  // Extract data from props with fallbacks\n  const kpiData = dashboardData.kpi || {};\n  const revenueData = Array.isArray(dashboardData.revenue) ? dashboardData.revenue : [];\n  const playerData = Array.isArray(dashboardData.players) ? dashboardData.players : [];\n  const topGamesData = Array.isArray(dashboardData.topGames) ? dashboardData.topGames : [];\n\n  /**\n   * Prepare micro charts data with memoization to prevent unnecessary recalculations\n   */\n  const microChartsData = useMemo(() => {\n    // Create a safe mapping function that handles potential null/undefined items\n    const safeMap = (data: any[], mapFn: (item: any) => MicroChartDataPoint): MicroChartDataPoint[] => {\n      if (!Array.isArray(data) || data.length === 0) {\n        return []; // Return empty array if data is not valid\n      }\n      return data.map(mapFn);\n    };\n\n    return {\n      revenue: safeMap(revenueData, (item: any): MicroChartDataPoint => ({\n        value: item?.revenue || 0,\n        label: item?.date || item?.month || item?.week || 'Unknown'\n      })),\n      players: safeMap(playerData, (item: any): MicroChartDataPoint => ({\n        value: item?.registrations || 0,\n        label: item?.date || item?.month || item?.week || 'Unknown'\n      })),\n      deposits: safeMap(revenueData, (item: any): MicroChartDataPoint => ({\n        value: (item?.revenue || 0) * 0.8, // Mock data for deposits\n        label: item?.date || item?.month || item?.week || 'Unknown'\n      })),\n      withdrawals: safeMap(revenueData, (item: any): MicroChartDataPoint => ({\n        value: (item?.revenue || 0) * 0.5, // Mock data for withdrawals\n        label: item?.date || item?.month || item?.week || 'Unknown'\n      }))\n    };\n  }, [revenueData, playerData]);\n\n  return (\n    <Grid container spacing={3}>\n      {/* KPI Metrics Section */}\n      <Grid item xs={12}>\n        <Paper sx={{ p: 3, mb: 3 }}>\n          <SimpleBox sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h5\">Key Performance Indicators</Typography>\n            <SimpleBox>\n              <FormControl size=\"small\" sx={{ minWidth: 120, mr: 1 }}>\n                <InputLabel id=\"time-period-label\">Period</InputLabel>\n                <Select\n                  labelId=\"time-period-label\"\n                  id=\"time-period-select\"\n                  value={timePeriod}\n                  label=\"Period\"\n                  onChange={onTimePeriodChange}\n                >\n                  <MenuItem value=\"day\">Day</MenuItem>\n                  <MenuItem value=\"week\">Week</MenuItem>\n                  <MenuItem value=\"month\">Month</MenuItem>\n                  <MenuItem value=\"quarter\">Quarter</MenuItem>\n                </Select>\n              </FormControl>\n              <Tooltip title=\"Download report\">\n                <IconButton size=\"small\">\n                  <DownloadIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </SimpleBox>\n          </SimpleBox>\n\n          {/* KPI Card Component */}\n          {(() => {\n            /**\n             * KPI Card Props\n             */\n            interface KpiCardProps {\n              /** Title of the KPI card */\n              title: string;\n              /** KPI metric data */\n              metric?: KpiMetric;\n              /** Micro chart data */\n              chartData: MicroChartDataPoint[];\n              /** Loading state */\n              isLoading: boolean;\n              /** Format function for the value */\n              formatValue: (value: number) => string;\n            }\n\n            /**\n             * KPI Card Component\n             * Displays a single KPI metric with trend and micro chart\n             */\n            const KpiCard: React.FC<KpiCardProps> = ({\n              title,\n              metric,\n              chartData,\n              isLoading,\n              formatValue\n            }) => (\n              <Grid item xs={12} sm={6} md={3}>\n                <SimpleBox\n                  sx={{\n                    p: 2,\n                    border: '1px solid',\n                    borderColor: 'divider',\n                    borderRadius: 1,\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column'\n                  }}\n                >\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                    {title}\n                  </Typography>\n                  {isLoading ? (\n                    <Skeleton variant=\"text\" width=\"80%\" height={40} />\n                  ) : (\n                    <>\n                      <Typography variant=\"h4\" gutterBottom>\n                        {formatValue(metric?.current || 0)}\n                      </Typography>\n                      <SimpleBox\n                        sx={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'space-between',\n                          mt: 'auto'\n                        }}\n                      >\n                        <Typography\n                          variant=\"body2\"\n                          color={\n                            !metric?.trend ? 'text.secondary' :\n                            metric.trend === 'up' ? 'success.main' :\n                            metric.trend === 'down' ? 'error.main' :\n                            'text.secondary'\n                          }\n                          aria-label={`${formatPercentage(metric?.change || 0)} compared to previous period`}\n                        >\n                          {formatPercentage(metric?.change || 0)} vs previous\n                        </Typography>\n                        <MicroCharts.Sparkline\n                          data={chartData}\n                          height={30}\n                          width={80}\n                          valueKey=\"value\"\n                        />\n                      </SimpleBox>\n                    </>\n                  )}\n                </SimpleBox>\n              </Grid>\n            );\n\n            return (\n              <Grid container spacing={3}>\n                <KpiCard\n                  title=\"Revenue\"\n                  metric={kpiData.revenue}\n                  chartData={microChartsData.revenue}\n                  isLoading={isLoading}\n                  formatValue={formatCurrency}\n                />\n\n                <KpiCard\n                  title=\"Active Players\"\n                  metric={kpiData.players}\n                  chartData={microChartsData.players}\n                  isLoading={isLoading}\n                  formatValue={formatNumber}\n                />\n\n                <KpiCard\n                  title=\"Deposits\"\n                  metric={kpiData.deposits}\n                  chartData={microChartsData.deposits}\n                  isLoading={isLoading}\n                  formatValue={formatCurrency}\n                />\n\n                <KpiCard\n                  title=\"Withdrawals\"\n                  metric={kpiData.withdrawals}\n                  chartData={microChartsData.withdrawals}\n                  isLoading={isLoading}\n                  formatValue={formatCurrency}\n                />\n              </Grid>\n            );\n          })()}\n        </Paper>\n      </Grid>\n\n      {/* Charts Section */}\n      {(() => {\n        /**\n         * Chart Card Props\n         */\n        interface ChartCardProps {\n          /** Title of the chart */\n          title: string;\n          /** Chart component */\n          children: React.ReactNode;\n        }\n\n        /**\n         * Chart Card Component\n         * Wrapper for chart components with consistent styling and actions\n         */\n        const ChartCard: React.FC<ChartCardProps> = ({ title, children }) => (\n          <Card\n            title={title}\n            action={\n              <SimpleBox sx={{ display: 'flex', alignItems: 'center' }}>\n                <Tooltip title=\"Download report\">\n                  <IconButton\n                    size=\"small\"\n                    sx={{ mr: 1 }}\n                    aria-label={`Download ${title} report`}\n                    disabled={isLoading}\n                  >\n                    <DownloadIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Settings\">\n                  <IconButton\n                    size=\"small\"\n                    aria-label={`${title} settings`}\n                    disabled={isLoading}\n                  >\n                    <SettingsIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              </SimpleBox>\n            }\n          >\n            {children}\n          </Card>\n        );\n\n        /**\n         * Loading Skeleton Component\n         */\n        const ChartSkeleton = () => (\n          <SimpleBox sx={{ p: 3 }}>\n            <Skeleton variant=\"rectangular\" height={350} />\n          </SimpleBox>\n        );\n\n        return (\n          <>\n            <Grid item xs={12} md={8}>\n              <ChartCard title=\"Revenue Trend\">\n                {isLoading ? (\n                  <ChartSkeleton />\n                ) : (\n                  <CasinoRevenueChart\n                    data={revenueData}\n                    isLoading={false}\n                    height={350}\n                  />\n                )}\n              </ChartCard>\n            </Grid>\n\n            <Grid item xs={12} md={4}>\n              <ChartCard title=\"Player Registrations\">\n                {isLoading ? (\n                  <ChartSkeleton />\n                ) : (\n                  <PlayerRegistrationsChart\n                    data={playerData}\n                    isLoading={false}\n                    height={350}\n                    showFTD={true}\n                  />\n                )}\n              </ChartCard>\n            </Grid>\n\n            <Grid item xs={12}>\n              <ChartCard title=\"Top Games\">\n                {isLoading ? (\n                  <ChartSkeleton />\n                ) : (\n                  <TopGamesChart\n                    data={topGamesData}\n                    isLoading={false}\n                    height={350}\n                    showLegend={true}\n                  />\n                )}\n              </ChartCard>\n            </Grid>\n          </>\n        );\n      })()}\n    </Grid>\n  );\n};\n\nexport default OverviewTabContent;\n","import React, { useState, useMemo } from 'react';\nimport {\n  Grid,\n  Paper,\n  Typography,\n  Skeleton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\n\n// Import components\nimport SimpleBox from '../../../components/common/SimpleBox';\nimport Card from '../../../components/common/Card';\nimport {\n  ReportAreaChart,\n  ReportBarChart,\n  ReportPieChart\n} from '../../../components/reports/charts/ReportCharts';\nimport {\n  ReportScatterChart,\n  ReportRadarChart\n} from '../../../components/reports/charts/AdvancedCharts';\nimport { MultiDimensionalRadarChart } from '../../../components/dashboard';\nimport { Metric, Entity, DataItem } from '../../../types/multiDimensionalRadarChart';\n\n/**\n * Chart data point interface\n */\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  players: number;\n  bets: number;\n}\n\n/**\n * Pie chart data point interface\n */\ninterface PieChartDataPoint {\n  name: string;\n  value: number;\n}\n\n/**\n * Radar chart data point interface\n */\ninterface RadarChartDataPoint {\n  subject: string;\n  [key: string]: string | number;\n}\n\n/**\n * Performance tab content props\n */\ninterface PerformanceTabContentProps {\n  /** Dashboard data containing chart data */\n  dashboardData: {\n    revenue: any[];\n    players: any[];\n  };\n  /** Loading state indicator */\n  isLoading: boolean;\n}\n\n/**\n * Performance Tab Content\n *\n * Displays detailed performance metrics and charts with interactive controls.\n * Features include:\n * - Selectable chart types (area, bar, pie, scatter, radar)\n * - Selectable metrics (revenue, players)\n * - Multi-dimensional radar chart for comparative analysis\n *\n * @param props - Component props\n * @returns React component\n */\nconst PerformanceTabContent: React.FC<PerformanceTabContentProps> = ({\n  dashboardData,\n  isLoading\n}) => {\n  // Chart type and metric selection state\n  const [chartType, setChartType] = useState<string>('area');\n  const [metricType, setMetricType] = useState<string>('revenue');\n\n  /**\n   * Handle chart type change\n   * @param event - Select change event\n   */\n  const handleChartTypeChange = (event: SelectChangeEvent): void => {\n    setChartType(event.target.value);\n  };\n\n  /**\n   * Handle metric type change\n   * @param event - Select change event\n   */\n  const handleMetricTypeChange = (event: SelectChangeEvent): void => {\n    setMetricType(event.target.value);\n  };\n\n  // Extract data from props with fallbacks\n  const revenueData = dashboardData.revenue || [];\n  const playerData = dashboardData.players || [];\n\n  /**\n   * Transform data for charts with memoization to prevent unnecessary recalculations\n   */\n  const chartData = useMemo(() => {\n    // Transform data for area and bar charts\n    const transformedData = revenueData.map((item: any): ChartDataPoint => ({\n      date: item.date || item.month || item.week || 'Unknown',\n      revenue: item.revenue || 0,\n      players: item.players || 0,\n      bets: item.bets || 0\n    }));\n\n    return {\n      // Area chart data - use all data\n      areaChartData: transformedData,\n\n      // Bar chart data - use only first 10 items for better readability\n      barChartData: transformedData.slice(0, 10),\n\n      // Pie chart data - static data for product distribution\n      pieChartData: [\n        { name: 'Casino', value: 45 },\n        { name: 'Sports', value: 30 },\n        { name: 'Poker', value: 15 },\n        { name: 'Bingo', value: 10 }\n      ] as PieChartDataPoint[],\n\n      // Scatter chart data - derived from revenue data\n      scatterChartData: transformedData.map(item => ({\n        revenue: item.revenue,\n        players: item.players,\n        date: item.date\n      })),\n\n      // Radar chart data - static data for performance metrics\n      radarChartData: [\n        { subject: 'Revenue', A: 120, B: 110, fullMark: 150 },\n        { subject: 'Players', A: 98, B: 130, fullMark: 150 },\n        { subject: 'Retention', A: 86, B: 130, fullMark: 150 },\n        { subject: 'Conversion', A: 99, B: 100, fullMark: 150 },\n        { subject: 'Engagement', A: 85, B: 90, fullMark: 150 },\n        { subject: 'ARPU', A: 65, B: 85, fullMark: 150 }\n      ] as RadarChartDataPoint[],\n\n      // Multi-dimensional radar chart data - static data for comparative analysis\n      multiDimensionalData: [\n        { entityId: 'casino', values: { revenue: 120, players: 98, retention: 86, conversion: 99, engagement: 85 } },\n        { entityId: 'sports', values: { revenue: 110, players: 130, retention: 130, conversion: 100, engagement: 90 } },\n        { entityId: 'poker', values: { revenue: 90, players: 100, retention: 110, conversion: 80, engagement: 95 } },\n        { entityId: 'bingo', values: { revenue: 80, players: 70, retention: 100, conversion: 50, engagement: 75 } }\n      ] as DataItem[]\n    };\n  }, [revenueData]);\n\n  /**\n   * Render chart based on selected type and metric\n   * @returns React component for the selected chart type\n   */\n  const renderChart = () => {\n    // If loading, show skeleton\n    if (isLoading) {\n      return <Skeleton variant=\"rectangular\" height=\"100%\" />;\n    }\n\n    // Chart titles based on selected metric\n    const chartTitles = {\n      revenue: {\n        area: 'Revenue Trend Over Time',\n        bar: 'Revenue by Period'\n      },\n      players: {\n        area: 'Player Trend Over Time',\n        bar: 'Players by Period'\n      }\n    };\n\n    // Get title based on chart type and metric\n    const getTitle = (type: string): string => {\n      if (type === 'area' || type === 'bar') {\n        return chartTitles[metricType as keyof typeof chartTitles]?.[type as keyof typeof chartTitles.revenue] || 'Chart';\n      }\n\n      const titles = {\n        pie: 'Revenue Distribution by Product',\n        scatter: 'Revenue vs Players Correlation',\n        radar: 'Performance Metrics Comparison'\n      };\n\n      return titles[type as keyof typeof titles] || 'Chart';\n    };\n\n    // Render appropriate chart based on type\n    switch (chartType) {\n      case 'area':\n        return (\n          <ReportAreaChart\n            data={chartData.areaChartData}\n            xKey=\"date\"\n            yKeys={metricType === 'revenue' ? ['revenue'] : ['players']}\n            height={350}\n            loading={false}\n            title={getTitle('area')}\n            showLegend={true}\n            showGrid={true}\n          />\n        );\n\n      case 'bar':\n        return (\n          <ReportBarChart\n            data={chartData.barChartData}\n            xKey=\"date\"\n            yKeys={metricType === 'revenue' ? ['revenue'] : ['players']}\n            height={350}\n            loading={false}\n            title={getTitle('bar')}\n            showLegend={true}\n            showGrid={true}\n          />\n        );\n\n      case 'pie':\n        return (\n          <ReportPieChart\n            data={chartData.pieChartData}\n            nameKey=\"name\"\n            valueKey=\"value\"\n            height={350}\n            loading={false}\n            title={getTitle('pie')}\n            showLegend={true}\n          />\n        );\n\n      case 'scatter':\n        return (\n          <ReportScatterChart\n            data={chartData.scatterChartData}\n            xKey=\"revenue\"\n            yKey=\"players\"\n            nameKey=\"date\"\n            height={350}\n            loading={false}\n            title={getTitle('scatter')}\n            showLegend={true}\n          />\n        );\n\n      case 'radar':\n        return (\n          <ReportRadarChart\n            data={chartData.radarChartData}\n            dataKey=\"A\"\n            nameKey=\"subject\"\n            height={350}\n            loading={false}\n            title={getTitle('radar')}\n            showLegend={true}\n          />\n        );\n\n      default:\n        // Fallback to area chart\n        return (\n          <ReportAreaChart\n            data={chartData.areaChartData}\n            xKey=\"date\"\n            yKeys={['revenue']}\n            height={350}\n            loading={false}\n            title=\"Revenue Trend\"\n            showLegend={true}\n            showGrid={true}\n          />\n        );\n    }\n  };\n\n  return (\n    <Grid container spacing={3}>\n      {/* Chart Controls */}\n      <Grid item xs={12}>\n        <Paper\n          sx={{ p: 3, mb: 3 }}\n          component=\"section\"\n          aria-labelledby=\"performance-analysis-title\"\n        >\n          <SimpleBox\n            sx={{\n              display: 'flex',\n              flexDirection: { xs: 'column', md: 'row' },\n              justifyContent: 'space-between',\n              alignItems: { xs: 'flex-start', md: 'center' },\n              mb: 2,\n              gap: 2\n            }}\n          >\n            <Typography\n              variant=\"h5\"\n              id=\"performance-analysis-title\"\n              component=\"h2\"\n            >\n              Performance Analysis\n            </Typography>\n\n            <SimpleBox\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                flexWrap: 'wrap',\n                gap: 2\n              }}\n            >\n              <FormControl\n                size=\"small\"\n                sx={{ minWidth: 150 }}\n              >\n                <InputLabel id=\"chart-type-label\">Chart Type</InputLabel>\n                <Select\n                  labelId=\"chart-type-label\"\n                  id=\"chart-type-select\"\n                  value={chartType}\n                  label=\"Chart Type\"\n                  onChange={handleChartTypeChange}\n                  disabled={isLoading}\n                  aria-describedby=\"chart-type-helper\"\n                >\n                  <MenuItem value=\"area\">Area Chart</MenuItem>\n                  <MenuItem value=\"bar\">Bar Chart</MenuItem>\n                  <MenuItem value=\"pie\">Pie Chart</MenuItem>\n                  <MenuItem value=\"scatter\">Scatter Plot</MenuItem>\n                  <MenuItem value=\"radar\">Radar Chart</MenuItem>\n                </Select>\n              </FormControl>\n\n              <FormControl\n                size=\"small\"\n                sx={{ minWidth: 150 }}\n              >\n                <InputLabel id=\"metric-type-label\">Metric</InputLabel>\n                <Select\n                  labelId=\"metric-type-label\"\n                  id=\"metric-type-select\"\n                  value={metricType}\n                  label=\"Metric\"\n                  onChange={handleMetricTypeChange}\n                  disabled={isLoading || chartType === 'pie' || chartType === 'radar'}\n                  aria-describedby=\"metric-type-helper\"\n                >\n                  <MenuItem value=\"revenue\">Revenue</MenuItem>\n                  <MenuItem value=\"players\">Players</MenuItem>\n                </Select>\n              </FormControl>\n\n              <SimpleBox>\n                <Tooltip title=\"Download report\">\n                  <span>\n                    <IconButton\n                      size=\"small\"\n                      sx={{ mr: 1 }}\n                      disabled={isLoading}\n                      aria-label=\"Download performance report\"\n                    >\n                      <DownloadIcon fontSize=\"small\" />\n                    </IconButton>\n                  </span>\n                </Tooltip>\n                <Tooltip title=\"Chart settings\">\n                  <span>\n                    <IconButton\n                      size=\"small\"\n                      disabled={isLoading}\n                      aria-label=\"Chart settings\"\n                    >\n                      <SettingsIcon fontSize=\"small\" />\n                    </IconButton>\n                  </span>\n                </Tooltip>\n              </SimpleBox>\n            </SimpleBox>\n          </SimpleBox>\n\n          <SimpleBox\n            sx={{\n              height: 400,\n              position: 'relative',\n              '& .recharts-responsive-container': {\n                // Improve chart accessibility\n                '& svg': { overflow: 'visible' },\n                '& .recharts-tooltip-cursor': { stroke: 'rgba(0,0,0,0.2)' }\n              }\n            }}\n            role=\"region\"\n            aria-label={`${chartType} chart of ${metricType} data`}\n          >\n            {renderChart()}\n          </SimpleBox>\n        </Paper>\n      </Grid>\n\n      {/* Multi-dimensional Analysis */}\n      <Grid item xs={12}>\n        <Card\n          title=\"Multi-dimensional Performance Analysis\"\n          action={\n            <SimpleBox>\n              <Tooltip title=\"Download report\">\n                <span>\n                  <IconButton\n                    size=\"small\"\n                    sx={{ mr: 1 }}\n                    disabled={isLoading}\n                    aria-label=\"Download multi-dimensional analysis report\"\n                  >\n                    <DownloadIcon fontSize=\"small\" />\n                  </IconButton>\n                </span>\n              </Tooltip>\n              <Tooltip title=\"Chart settings\">\n                <span>\n                  <IconButton\n                    size=\"small\"\n                    disabled={isLoading}\n                    aria-label=\"Multi-dimensional chart settings\"\n                  >\n                    <SettingsIcon fontSize=\"small\" />\n                  </IconButton>\n                </span>\n              </Tooltip>\n            </SimpleBox>\n          }\n        >\n          {isLoading ? (\n            <SimpleBox sx={{ p: 3 }}>\n              <Skeleton variant=\"rectangular\" height={400} />\n            </SimpleBox>\n          ) : (\n            <SimpleBox\n              role=\"region\"\n              aria-label=\"Multi-dimensional radar chart comparing metrics across different categories\"\n            >\n              <MultiDimensionalRadarChart\n                data={chartData.multiDimensionalData}\n                isLoading={false}\n                metrics={[\n                  { id: 'revenue', label: 'Revenue', format: 'currency' },\n                  { id: 'players', label: 'Players', format: 'number' },\n                  { id: 'retention', label: 'Retention', format: 'percentage' },\n                  { id: 'conversion', label: 'Conversion', format: 'percentage' },\n                  { id: 'engagement', label: 'Engagement', format: 'number' }\n                ]}\n                entities={[\n                  { id: 'casino', name: 'Casino' } as Entity,\n                  { id: 'sports', name: 'Sports' } as Entity,\n                  { id: 'poker', name: 'Poker' } as Entity,\n                  { id: 'bingo', name: 'Bingo' } as Entity\n                ]}\n              />\n            </SimpleBox>\n          )}\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default PerformanceTabContent;\n","import React, { useState, useMemo } from 'react';\nimport {\n  Grid,\n  Paper,\n  Typography,\n  Skeleton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  IconButton,\n  Tooltip,\n  Chip\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport FilterListIcon from '@mui/icons-material/FilterList';\n\n// Import SimpleBox to fix TypeScript errors\nimport SimpleBox from '../../../components/common/SimpleBox';\n\n// Import components\nimport Card from '../../../components/common/Card';\nimport {\n  ReportAreaChart,\n  ReportBarChart,\n  ReportPieChart\n} from '../../../components/reports/charts/ReportCharts';\nimport {\n  ReportTreemapChart\n} from '../../../components/reports/charts/AdvancedCharts';\n\n// Import utilities\nimport { formatNumber } from '../../../utils/formatters';\n\n/**\n * Player segment data point interface\n */\ninterface PlayerSegmentDataPoint {\n  name: string;\n  value: number;\n}\n\n/**\n * Player acquisition data point interface\n */\ninterface PlayerAcquisitionDataPoint {\n  date: string;\n  organic: number;\n  paid: number;\n  referral: number;\n}\n\n/**\n * Player retention data point interface\n */\ninterface PlayerRetentionDataPoint {\n  date: string;\n  day1: number;\n  day7: number;\n  day30: number;\n}\n\n/**\n * Player analysis tab content props\n */\ninterface PlayerAnalysisTabContentProps {\n  /** Dashboard data containing player-related data */\n  dashboardData: any;\n  /** Loading state indicator */\n  isLoading: boolean;\n}\n\n/**\n * PlayerAnalysisTabContent component\n *\n * Displays player-related analytics and insights with interactive filters.\n * Features include:\n * - Player segment distribution\n * - Player activity frequency\n * - Player acquisition trends\n * - Player retention rates\n * - Player demographics\n * - Player geographic distribution\n * - Player game preferences\n *\n * @param props - Component props\n * @returns React component\n */\nconst PlayerAnalysisTabContent: React.FC<PlayerAnalysisTabContentProps> = ({\n  dashboardData,\n  isLoading\n}) => {\n  // Filter state\n  const [segmentFilter, setSegmentFilter] = useState<string>('all');\n  const [timeRange, setTimeRange] = useState<string>('month');\n\n  /**\n   * Handle segment filter change\n   * @param event - Select change event\n   */\n  const handleSegmentFilterChange = (event: SelectChangeEvent): void => {\n    setSegmentFilter(event.target.value);\n  };\n\n  /**\n   * Handle time range change\n   * @param event - Select change event\n   */\n  const handleTimeRangeChange = (event: SelectChangeEvent): void => {\n    setTimeRange(event.target.value);\n  };\n\n  /**\n   * Chart data with memoization to prevent unnecessary recalculations\n   */\n  const chartData = useMemo(() => ({\n    // Player segments data\n    playerSegments: [\n      { name: 'High Value', value: 25 },\n      { name: 'Regular', value: 40 },\n      { name: 'Casual', value: 25 },\n      { name: 'New', value: 10 }\n    ] as PlayerSegmentDataPoint[],\n\n    // Player acquisition data\n    playerAcquisitionData: [\n      { date: '2023-01', organic: 120, paid: 80, referral: 30 },\n      { date: '2023-02', organic: 140, paid: 90, referral: 35 },\n      { date: '2023-03', organic: 160, paid: 100, referral: 40 },\n      { date: '2023-04', organic: 180, paid: 110, referral: 45 },\n      { date: '2023-05', organic: 200, paid: 120, referral: 50 },\n      { date: '2023-06', organic: 220, paid: 130, referral: 55 }\n    ] as PlayerAcquisitionDataPoint[],\n\n    // Player retention data\n    playerRetentionData: [\n      { date: '2023-01', day1: 80, day7: 60, day30: 40 },\n      { date: '2023-02', day1: 82, day7: 62, day30: 42 },\n      { date: '2023-03', day1: 84, day7: 64, day30: 44 },\n      { date: '2023-04', day1: 86, day7: 66, day30: 46 },\n      { date: '2023-05', day1: 88, day7: 68, day30: 48 },\n      { date: '2023-06', day1: 90, day7: 70, day30: 50 }\n    ] as PlayerRetentionDataPoint[],\n\n    // Player activity data\n    playerActivityData: [\n      { name: 'Daily', value: 30 },\n      { name: 'Weekly', value: 25 },\n      { name: 'Monthly', value: 20 },\n      { name: 'Quarterly', value: 15 },\n      { name: 'Inactive', value: 10 }\n    ] as PlayerSegmentDataPoint[],\n\n    // Player demographics data\n    playerDemographicsData: [\n      { name: '18-24', value: 15 },\n      { name: '25-34', value: 30 },\n      { name: '35-44', value: 25 },\n      { name: '45-54', value: 20 },\n      { name: '55+', value: 10 }\n    ] as PlayerSegmentDataPoint[],\n\n    // Player geographic distribution data\n    playerGeoData: [\n      { name: 'North America', value: 40 },\n      { name: 'Europe', value: 35 },\n      { name: 'Asia', value: 15 },\n      { name: 'South America', value: 5 },\n      { name: 'Africa', value: 3 },\n      { name: 'Oceania', value: 2 }\n    ] as PlayerSegmentDataPoint[],\n\n    // Player behavior treemap data\n    playerBehaviorData: [\n      { name: 'Slots', value: 400 },\n      { name: 'Poker', value: 300 },\n      { name: 'Blackjack', value: 200 },\n      { name: 'Roulette', value: 150 },\n      { name: 'Baccarat', value: 100 },\n      { name: 'Sports Betting', value: 350 },\n      { name: 'Live Casino', value: 250 },\n      { name: 'Bingo', value: 120 }\n    ] as PlayerSegmentDataPoint[]\n  }), []);\n\n  return (\n    <Grid container spacing={3}>\n      {/* Filters */}\n      <Grid item xs={12}>\n        <Paper\n          sx={{ p: 2, mb: 2 }}\n          component=\"section\"\n          aria-labelledby=\"player-filters-title\"\n        >\n          <SimpleBox\n            sx={{\n              display: 'flex',\n              flexDirection: { xs: 'column', sm: 'row' },\n              alignItems: { xs: 'flex-start', sm: 'center' },\n              flexWrap: 'wrap',\n              gap: 2\n            }}\n          >\n            <SimpleBox\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                mr: 1\n              }}\n            >\n              <FilterListIcon\n                sx={{ mr: 1 }}\n                aria-hidden=\"true\"\n              />\n              <Typography\n                variant=\"subtitle1\"\n                id=\"player-filters-title\"\n              >\n                Filters:\n              </Typography>\n            </SimpleBox>\n\n            <FormControl\n              size=\"small\"\n              sx={{ minWidth: 180 }}\n            >\n              <InputLabel id=\"segment-filter-label\">Player Segment</InputLabel>\n              <Select\n                labelId=\"segment-filter-label\"\n                id=\"segment-filter-select\"\n                value={segmentFilter}\n                label=\"Player Segment\"\n                onChange={handleSegmentFilterChange}\n                disabled={isLoading}\n                aria-describedby=\"segment-filter-helper\"\n              >\n                <MenuItem value=\"all\">All Segments</MenuItem>\n                <MenuItem value=\"high-value\">High Value</MenuItem>\n                <MenuItem value=\"regular\">Regular</MenuItem>\n                <MenuItem value=\"casual\">Casual</MenuItem>\n                <MenuItem value=\"new\">New</MenuItem>\n              </Select>\n            </FormControl>\n\n            <FormControl\n              size=\"small\"\n              sx={{ minWidth: 180 }}\n            >\n              <InputLabel id=\"time-range-label\">Time Range</InputLabel>\n              <Select\n                labelId=\"time-range-label\"\n                id=\"time-range-select\"\n                value={timeRange}\n                label=\"Time Range\"\n                onChange={handleTimeRangeChange}\n                disabled={isLoading}\n                aria-describedby=\"time-range-helper\"\n              >\n                <MenuItem value=\"week\">Last Week</MenuItem>\n                <MenuItem value=\"month\">Last Month</MenuItem>\n                <MenuItem value=\"quarter\">Last Quarter</MenuItem>\n                <MenuItem value=\"year\">Last Year</MenuItem>\n              </Select>\n            </FormControl>\n\n            <SimpleBox sx={{ flexGrow: 1 }} />\n\n            <Tooltip title=\"Download player analysis report\">\n              <span>\n                <IconButton\n                  size=\"small\"\n                  disabled={isLoading}\n                  aria-label=\"Download player analysis report\"\n                >\n                  <DownloadIcon fontSize=\"small\" />\n                </IconButton>\n              </span>\n            </Tooltip>\n          </SimpleBox>\n\n          {segmentFilter !== 'all' && (\n            <SimpleBox\n              sx={{\n                mt: 2,\n                display: 'flex',\n                alignItems: 'center'\n              }}\n              role=\"status\"\n              aria-live=\"polite\"\n            >\n              <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                Active filters:\n              </Typography>\n              <Chip\n                label={`Segment: ${segmentFilter}`}\n                size=\"small\"\n                onDelete={() => setSegmentFilter('all')}\n                aria-label={`Remove filter: Segment ${segmentFilter}`}\n              />\n            </SimpleBox>\n          )}\n        </Paper>\n      </Grid>\n\n      {/* Create a reusable chart component */}\n      {(() => {\n        /**\n         * Chart component props\n         */\n        interface ChartComponentProps {\n          /** Title of the chart */\n          title: string;\n          /** Grid column configuration */\n          gridConfig: {\n            xs: number;\n            md?: number;\n          };\n          /** Chart component */\n          children: React.ReactNode;\n        }\n\n        /**\n         * Chart component\n         * Wrapper for chart components with consistent styling\n         */\n        const ChartComponent: React.FC<ChartComponentProps> = ({\n          title,\n          gridConfig,\n          children\n        }) => (\n          <Grid item xs={gridConfig.xs} md={gridConfig.md}>\n            <Card\n              title={title}\n              action={\n                <Tooltip title={`Download ${title} chart`}>\n                  <span>\n                    <IconButton\n                      size=\"small\"\n                      disabled={isLoading}\n                      aria-label={`Download ${title} chart`}\n                    >\n                      <DownloadIcon fontSize=\"small\" />\n                    </IconButton>\n                  </span>\n                </Tooltip>\n              }\n            >\n              {isLoading ? (\n                <Skeleton variant=\"rectangular\" height={300} />\n              ) : (\n                <SimpleBox\n                  role=\"region\"\n                  aria-label={title}\n                >\n                  {children}\n                </SimpleBox>\n              )}\n            </Card>\n          </Grid>\n        );\n\n        return (\n          <>\n            {/* Player Segments */}\n            <ChartComponent\n              title=\"Player Segments\"\n              gridConfig={{ xs: 12, md: 6 }}\n            >\n              <ReportPieChart\n                data={chartData.playerSegments}\n                nameKey=\"name\"\n                valueKey=\"value\"\n                height={300}\n                showLegend={true}\n              />\n            </ChartComponent>\n\n            {/* Player Activity */}\n            <ChartComponent\n              title=\"Player Activity Frequency\"\n              gridConfig={{ xs: 12, md: 6 }}\n            >\n              <ReportPieChart\n                data={chartData.playerActivityData}\n                nameKey=\"name\"\n                valueKey=\"value\"\n                height={300}\n                showLegend={true}\n              />\n            </ChartComponent>\n\n            {/* Player Acquisition */}\n            <ChartComponent\n              title=\"Player Acquisition Trends\"\n              gridConfig={{ xs: 12 }}\n            >\n              <ReportAreaChart\n                data={chartData.playerAcquisitionData}\n                xKey=\"date\"\n                yKeys={['organic', 'paid', 'referral']}\n                height={300}\n                showLegend={true}\n                showGrid={true}\n              />\n            </ChartComponent>\n\n            {/* Player Retention */}\n            <ChartComponent\n              title=\"Player Retention Rates\"\n              gridConfig={{ xs: 12 }}\n            >\n              <ReportBarChart\n                data={chartData.playerRetentionData}\n                xKey=\"date\"\n                yKeys={['day1', 'day7', 'day30']}\n                height={300}\n                showLegend={true}\n                showGrid={true}\n              />\n            </ChartComponent>\n\n            {/* Player Demographics */}\n            <ChartComponent\n              title=\"Player Demographics (Age)\"\n              gridConfig={{ xs: 12, md: 6 }}\n            >\n              <ReportBarChart\n                data={chartData.playerDemographicsData}\n                xKey=\"name\"\n                yKeys={['value']}\n                height={300}\n                showLegend={false}\n                showGrid={true}\n              />\n            </ChartComponent>\n\n            {/* Player Geographic Distribution */}\n            <ChartComponent\n              title=\"Player Geographic Distribution\"\n              gridConfig={{ xs: 12, md: 6 }}\n            >\n              <ReportPieChart\n                data={chartData.playerGeoData}\n                nameKey=\"name\"\n                valueKey=\"value\"\n                height={300}\n                showLegend={true}\n              />\n            </ChartComponent>\n\n            {/* Player Behavior */}\n            <ChartComponent\n              title=\"Player Game Preferences\"\n              gridConfig={{ xs: 12 }}\n            >\n              <ReportTreemapChart\n                data={chartData.playerBehaviorData}\n                dataKey=\"value\"\n                nameKey=\"name\"\n                height={400}\n              />\n            </ChartComponent>\n          </>\n        );\n      })()}\n    </Grid>\n  );\n};\n\nexport default PlayerAnalysisTabContent;\n","import React, { useState, useMemo, useCallback } from 'react';\nimport {\n  Grid,\n  Paper,\n  Typography,\n  Skeleton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  IconButton,\n  Tooltip,\n  Chip,\n  TextField,\n  Autocomplete\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport FilterListIcon from '@mui/icons-material/FilterList';\n\n// Import SimpleBox to fix TypeScript errors\nimport SimpleBox from '../../../components/common/SimpleBox';\n\n// Import components\nimport Card from '../../../components/common/Card';\nimport {\n  ReportAreaChart,\n  ReportBarChart,\n  ReportPieChart\n} from '../../../components/reports/charts/ReportCharts';\nimport {\n  ReportScatterChart,\n  ReportHeatmap\n} from '../../../components/reports/charts/AdvancedCharts';\nimport { TopGamesChart } from '../../../components/dashboard';\n\n/**\n * Game category data point interface\n */\ninterface GameCategoryDataPoint {\n  name: string;\n  value: number;\n}\n\n/**\n * Game performance data point interface\n */\ninterface GamePerformanceDataPoint {\n  date: string;\n  revenue: number;\n  players: number;\n  bets: number;\n}\n\n/**\n * Game popularity data point interface\n */\ninterface GamePopularityDataPoint {\n  game: string;\n  players: number;\n  sessions: number;\n  avgSessionTime: number;\n}\n\n/**\n * Game engagement data point interface\n */\ninterface GameEngagementDataPoint {\n  game: string;\n  avgSessionTime: number;\n  returnRate: number;\n  churnRate: number;\n}\n\n/**\n * Game performance by time data point interface\n */\ninterface GamePerformanceByTimeDataPoint {\n  hour: string;\n  players: number;\n  revenue: number;\n}\n\n/**\n * Game heatmap data point interface\n */\ninterface GameHeatmapDataPoint {\n  day: string;\n  time: string;\n  value: number;\n}\n\n/**\n * Game analysis tab content props\n */\ninterface GameAnalysisTabContentProps {\n  /** Dashboard data containing game-related data */\n  dashboardData: {\n    topGames: any[];\n  };\n  /** Loading state indicator */\n  isLoading: boolean;\n}\n\n/**\n * GameAnalysisTabContent component\n *\n * Displays game-related analytics and insights with interactive filters.\n * Features include:\n * - Top performing games\n * - Game categories distribution\n * - Game performance trends\n * - Game popularity metrics\n * - Game engagement metrics\n * - Game performance by time of day\n * - Game activity heatmap\n *\n * @param props - Component props\n * @returns React component\n */\nconst GameAnalysisTabContent: React.FC<GameAnalysisTabContentProps> = ({\n  dashboardData,\n  isLoading\n}) => {\n  // Filter state\n  const [gameCategory, setGameCategory] = useState<string>('all');\n  const [timeRange, setTimeRange] = useState<string>('month');\n  const [selectedGame, setSelectedGame] = useState<string | null>(null);\n\n  /**\n   * Handle game category change\n   * @param event - Select change event\n   */\n  const handleGameCategoryChange = useCallback((event: SelectChangeEvent): void => {\n    setGameCategory(event.target.value);\n  }, []);\n\n  /**\n   * Handle time range change\n   * @param event - Select change event\n   */\n  const handleTimeRangeChange = useCallback((event: SelectChangeEvent): void => {\n    setTimeRange(event.target.value);\n  }, []);\n\n  /**\n   * Handle game selection change\n   * @param _event - React synthetic event\n   * @param newValue - New selected game value\n   */\n  const handleGameSelectionChange = useCallback((_event: React.SyntheticEvent, newValue: string | null): void => {\n    setSelectedGame(newValue);\n  }, []);\n\n  // Extract top games data from props with fallback\n  const topGamesData = dashboardData.topGames || [];\n\n  /**\n   * Chart data with memoization to prevent unnecessary recalculations\n   */\n  const chartData = useMemo(() => {\n    // Days of week and time slots for heatmap\n    const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    const timeSlots = ['Morning', 'Afternoon', 'Evening', 'Night'];\n\n    return {\n      // Game categories data\n      gameCategoriesData: [\n        { name: 'Slots', value: 45 },\n        { name: 'Table Games', value: 25 },\n        { name: 'Live Casino', value: 15 },\n        { name: 'Sports Betting', value: 10 },\n        { name: 'Poker', value: 5 }\n      ] as GameCategoryDataPoint[],\n\n      // Game performance data\n      gamePerformanceData: [\n        { date: '2023-01', revenue: 120000, players: 5000, bets: 150000 },\n        { date: '2023-02', revenue: 130000, players: 5200, bets: 160000 },\n        { date: '2023-03', revenue: 140000, players: 5400, bets: 170000 },\n        { date: '2023-04', revenue: 150000, players: 5600, bets: 180000 },\n        { date: '2023-05', revenue: 160000, players: 5800, bets: 190000 },\n        { date: '2023-06', revenue: 170000, players: 6000, bets: 200000 }\n      ] as GamePerformanceDataPoint[],\n\n      // Game popularity data\n      gamePopularityData: [\n        { game: 'Starburst', players: 1200, sessions: 5000, avgSessionTime: 15 },\n        { game: 'Gonzo\\'s Quest', players: 1000, sessions: 4500, avgSessionTime: 18 },\n        { game: 'Book of Dead', players: 950, sessions: 4200, avgSessionTime: 20 },\n        { game: 'Mega Moolah', players: 900, sessions: 4000, avgSessionTime: 12 },\n        { game: 'Immortal Romance', players: 850, sessions: 3800, avgSessionTime: 16 },\n        { game: 'Reactoonz', players: 800, sessions: 3600, avgSessionTime: 14 },\n        { game: 'Dead or Alive', players: 750, sessions: 3400, avgSessionTime: 22 },\n        { game: 'Twin Spin', players: 700, sessions: 3200, avgSessionTime: 17 },\n        { game: 'Bonanza', players: 650, sessions: 3000, avgSessionTime: 19 },\n        { game: 'Fire Joker', players: 600, sessions: 2800, avgSessionTime: 13 }\n      ] as GamePopularityDataPoint[],\n\n      // Game engagement data\n      gameEngagementData: [\n        { game: 'Starburst', avgSessionTime: 15, returnRate: 0.65, churnRate: 0.35 },\n        { game: 'Gonzo\\'s Quest', avgSessionTime: 18, returnRate: 0.70, churnRate: 0.30 },\n        { game: 'Book of Dead', avgSessionTime: 20, returnRate: 0.75, churnRate: 0.25 },\n        { game: 'Mega Moolah', avgSessionTime: 12, returnRate: 0.60, churnRate: 0.40 },\n        { game: 'Immortal Romance', avgSessionTime: 16, returnRate: 0.68, churnRate: 0.32 }\n      ] as GameEngagementDataPoint[],\n\n      // Game performance by time data\n      gamePerformanceByTimeData: [\n        { hour: '00:00', players: 200, revenue: 5000 },\n        { hour: '02:00', players: 150, revenue: 3500 },\n        { hour: '04:00', players: 100, revenue: 2000 },\n        { hour: '06:00', players: 120, revenue: 2500 },\n        { hour: '08:00', players: 180, revenue: 4000 },\n        { hour: '10:00', players: 250, revenue: 6000 },\n        { hour: '12:00', players: 300, revenue: 7500 },\n        { hour: '14:00', players: 350, revenue: 9000 },\n        { hour: '16:00', players: 400, revenue: 10000 },\n        { hour: '18:00', players: 450, revenue: 12000 },\n        { hour: '20:00', players: 500, revenue: 15000 },\n        { hour: '22:00', players: 350, revenue: 9000 }\n      ] as GamePerformanceByTimeDataPoint[],\n\n      // Game heatmap data\n      gameHeatmapData: daysOfWeek.flatMap(day =>\n        timeSlots.map(time => ({\n          day,\n          time,\n          value: Math.floor(Math.random() * 100) + 20\n        }))\n      ) as GameHeatmapDataPoint[],\n\n      // List of games for autocomplete\n      gamesList: [\n        'Starburst', 'Gonzo\\'s Quest', 'Book of Dead', 'Mega Moolah', 'Immortal Romance',\n        'Reactoonz', 'Dead or Alive', 'Twin Spin', 'Bonanza', 'Fire Joker'\n      ]\n    };\n  }, []);\n\n  return (\n    <Grid container spacing={3}>\n      {/* Filters */}\n      <Grid item xs={12}>\n        <Paper\n          sx={{ p: 2, mb: 2 }}\n          component=\"section\"\n          aria-labelledby=\"game-filters-title\"\n        >\n          <SimpleBox\n            sx={{\n              display: 'flex',\n              flexDirection: { xs: 'column', sm: 'row' },\n              alignItems: { xs: 'flex-start', sm: 'center' },\n              flexWrap: 'wrap',\n              gap: 2\n            }}\n          >\n            <SimpleBox\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                mr: 1\n              }}\n            >\n              <FilterListIcon\n                sx={{ mr: 1 }}\n                aria-hidden=\"true\"\n              />\n              <Typography\n                variant=\"subtitle1\"\n                id=\"game-filters-title\"\n              >\n                Filters:\n              </Typography>\n            </SimpleBox>\n\n            <FormControl\n              size=\"small\"\n              sx={{ minWidth: 180 }}\n            >\n              <InputLabel id=\"game-category-label\">Game Category</InputLabel>\n              <Select\n                labelId=\"game-category-label\"\n                id=\"game-category-select\"\n                value={gameCategory}\n                label=\"Game Category\"\n                onChange={handleGameCategoryChange}\n                disabled={isLoading}\n                aria-describedby=\"game-category-helper\"\n              >\n                <MenuItem value=\"all\">All Categories</MenuItem>\n                <MenuItem value=\"slots\">Slots</MenuItem>\n                <MenuItem value=\"table-games\">Table Games</MenuItem>\n                <MenuItem value=\"live-casino\">Live Casino</MenuItem>\n                <MenuItem value=\"sports-betting\">Sports Betting</MenuItem>\n                <MenuItem value=\"poker\">Poker</MenuItem>\n              </Select>\n            </FormControl>\n\n            <FormControl\n              size=\"small\"\n              sx={{ minWidth: 180 }}\n            >\n              <InputLabel id=\"time-range-label\">Time Range</InputLabel>\n              <Select\n                labelId=\"time-range-label\"\n                id=\"time-range-select\"\n                value={timeRange}\n                label=\"Time Range\"\n                onChange={handleTimeRangeChange}\n                disabled={isLoading}\n                aria-describedby=\"time-range-helper\"\n              >\n                <MenuItem value=\"week\">Last Week</MenuItem>\n                <MenuItem value=\"month\">Last Month</MenuItem>\n                <MenuItem value=\"quarter\">Last Quarter</MenuItem>\n                <MenuItem value=\"year\">Last Year</MenuItem>\n              </Select>\n            </FormControl>\n\n            <Autocomplete\n              id=\"game-select\"\n              options={chartData.gamesList}\n              sx={{ width: 220 }}\n              value={selectedGame}\n              onChange={handleGameSelectionChange}\n              disabled={isLoading}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Select Game\"\n                  size=\"small\"\n                  aria-describedby=\"game-select-helper\"\n                />\n              )}\n            />\n\n            <SimpleBox sx={{ flexGrow: 1 }} />\n\n            <Tooltip title=\"Download game analysis report\">\n              <span>\n                <IconButton\n                  size=\"small\"\n                  disabled={isLoading}\n                  aria-label=\"Download game analysis report\"\n                >\n                  <DownloadIcon fontSize=\"small\" />\n                </IconButton>\n              </span>\n            </Tooltip>\n          </SimpleBox>\n\n          {(gameCategory !== 'all' || selectedGame) && (\n            <SimpleBox\n              sx={{\n                mt: 2,\n                display: 'flex',\n                alignItems: 'center',\n                flexWrap: 'wrap',\n                gap: 1\n              }}\n              role=\"status\"\n              aria-live=\"polite\"\n            >\n              <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                Active filters:\n              </Typography>\n\n              {gameCategory !== 'all' && (\n                <Chip\n                  label={`Category: ${gameCategory}`}\n                  size=\"small\"\n                  onDelete={() => setGameCategory('all')}\n                  aria-label={`Remove filter: Category ${gameCategory}`}\n                />\n              )}\n\n              {selectedGame && (\n                <Chip\n                  label={`Game: ${selectedGame}`}\n                  size=\"small\"\n                  onDelete={() => setSelectedGame(null)}\n                  aria-label={`Remove filter: Game ${selectedGame}`}\n                />\n              )}\n            </SimpleBox>\n          )}\n        </Paper>\n      </Grid>\n\n      {/* Create a reusable chart component */}\n      {useMemo(() => {\n        /**\n         * Chart component props\n         */\n        interface ChartComponentProps {\n          /** Title of the chart */\n          title: string;\n          /** Grid column configuration */\n          gridConfig: {\n            xs: number;\n            md?: number;\n          };\n          /** Chart component */\n          children: React.ReactNode;\n        }\n\n        /**\n         * Chart component\n         * Wrapper for chart components with consistent styling\n         */\n        const ChartComponent: React.FC<ChartComponentProps> = ({\n          title,\n          gridConfig,\n          children\n        }) => (\n          <Grid item xs={gridConfig.xs} md={gridConfig.md}>\n            <Card\n              title={title}\n              action={\n                <Tooltip title={`Download ${title} chart`}>\n                  <span>\n                    <IconButton\n                      size=\"small\"\n                      disabled={isLoading}\n                      aria-label={`Download ${title} chart`}\n                    >\n                      <DownloadIcon fontSize=\"small\" />\n                    </IconButton>\n                  </span>\n                </Tooltip>\n              }\n            >\n              {isLoading ? (\n                <Skeleton variant=\"rectangular\" height={300} />\n              ) : (\n                <SimpleBox\n                  role=\"region\"\n                  aria-label={title}\n                >\n                  {children}\n                </SimpleBox>\n              )}\n            </Card>\n          </Grid>\n        );\n\n        return (\n          <>\n            {/* Top Games */}\n            <ChartComponent\n              title=\"Top Performing Games\"\n              gridConfig={{ xs: 12 }}\n            >\n              <TopGamesChart\n                data={topGamesData}\n                isLoading={false}\n                height={350}\n                showLegend={true}\n              />\n            </ChartComponent>\n\n            {/* Game Categories */}\n            <ChartComponent\n              title=\"Game Categories Distribution\"\n              gridConfig={{ xs: 12, md: 6 }}\n            >\n              <ReportPieChart\n                data={chartData.gameCategoriesData}\n                nameKey=\"name\"\n                valueKey=\"value\"\n                height={300}\n                showLegend={true}\n              />\n            </ChartComponent>\n\n            {/* Game Performance */}\n            <ChartComponent\n              title=\"Game Performance Trend\"\n              gridConfig={{ xs: 12, md: 6 }}\n            >\n              <ReportAreaChart\n                data={chartData.gamePerformanceData}\n                xKey=\"date\"\n                yKeys={['revenue']}\n                height={300}\n                showLegend={true}\n                showGrid={true}\n              />\n            </ChartComponent>\n\n            {/* Game Popularity */}\n            <ChartComponent\n              title=\"Game Popularity Metrics\"\n              gridConfig={{ xs: 12 }}\n            >\n              <ReportBarChart\n                data={chartData.gamePopularityData}\n                xKey=\"game\"\n                yKeys={['players', 'sessions']}\n                height={300}\n                showLegend={true}\n                showGrid={true}\n              />\n            </ChartComponent>\n\n            {/* Game Engagement */}\n            <ChartComponent\n              title=\"Game Engagement Metrics\"\n              gridConfig={{ xs: 12, md: 6 }}\n            >\n              <ReportScatterChart\n                data={chartData.gameEngagementData}\n                xKey=\"avgSessionTime\"\n                yKey=\"returnRate\"\n                nameKey=\"game\"\n                height={300}\n                showLegend={true}\n              />\n            </ChartComponent>\n\n            {/* Game Performance by Time */}\n            <ChartComponent\n              title=\"Game Performance by Time of Day\"\n              gridConfig={{ xs: 12, md: 6 }}\n            >\n              <ReportBarChart\n                data={chartData.gamePerformanceByTimeData}\n                xKey=\"hour\"\n                yKeys={['players', 'revenue']}\n                height={300}\n                showLegend={true}\n                showGrid={true}\n              />\n            </ChartComponent>\n\n            {/* Game Heatmap */}\n            <ChartComponent\n              title=\"Game Activity Heatmap (Day of Week vs Time of Day)\"\n              gridConfig={{ xs: 12 }}\n            >\n              <ReportHeatmap\n                data={chartData.gameHeatmapData}\n                xKey=\"day\"\n                yKey=\"time\"\n                valueKey=\"value\"\n                height={350}\n              />\n            </ChartComponent>\n          </>\n        );\n      }, [isLoading, topGamesData, chartData])}\n    </Grid>\n  );\n};\n\nexport default GameAnalysisTabContent;\n","import React, { useState, useMemo } from 'react';\nimport {\n  Grid,\n  Paper,\n  Typography,\n  Skeleton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  Divider,\n  Switch,\n  FormControlLabel\n} from '@mui/material';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\n\n// Import components\nimport SimpleBox from '../../../components/common/SimpleBox';\nimport AdvancedInteractiveChart from '../../../components/reports/interactive/AdvancedInteractiveChart';\n\n/**\n * Time series data point interface\n */\ninterface TimeSeriesDataPoint {\n  date: string;\n  revenue: number;\n  players: number;\n  newPlayers: number;\n  churn: number;\n}\n\n/**\n * Scatter data point interface\n */\ninterface ScatterDataPoint {\n  id: string;\n  x: number;\n  y: number;\n  z: number;\n  size: number;\n  group: string;\n  label: string;\n}\n\n/**\n * Network node interface\n */\ninterface NetworkNode {\n  id: string;\n  name: string;\n  value: number;\n  group: string;\n}\n\n/**\n * Network link interface\n */\ninterface NetworkLink {\n  source: string;\n  target: string;\n  value: number;\n}\n\n/**\n * Network data interface\n */\ninterface NetworkData {\n  nodes: NetworkNode[];\n  links: NetworkLink[];\n}\n\n/**\n * Sankey node interface\n */\ninterface SankeyNode {\n  id: string;\n  name: string;\n}\n\n/**\n * Sankey link interface\n */\ninterface SankeyLink {\n  source: string;\n  target: string;\n  value: number;\n}\n\n/**\n * Sankey data interface\n */\ninterface SankeyData {\n  nodes: SankeyNode[];\n  links: SankeyLink[];\n}\n\n/**\n * 3D data point interface\n */\ninterface ThreeDDataPoint {\n  id: string;\n  x: number;\n  y: number;\n  z: number;\n  value: number;\n  label: string;\n  group: string;\n}\n\n/**\n * Advanced visualizations tab content props\n */\ninterface AdvancedVisualizationsTabContentProps {\n  /** Dashboard data - not used directly in this component but kept for consistency with other tabs */\n  dashboardData: any;\n  /** Loading state indicator */\n  isLoading: boolean;\n}\n\n/**\n * AdvancedVisualizationsTabContent component\n *\n * Displays advanced and interactive visualizations with configurable options.\n * Features include:\n * - Time series analysis with zoom and drill-down\n * - Multi-dimensional scatter plots with lasso selection\n * - Network visualization (placeholder)\n * - Sankey diagram for player journey (placeholder)\n * - 3D data visualization (placeholder)\n *\n * @param props - Component props\n * @returns React component\n */\nconst AdvancedVisualizationsTabContent: React.FC<AdvancedVisualizationsTabContentProps> = (props) => {\n  // We only use isLoading from props, dashboardData is not used in this component\n  const { isLoading } = props;\n  // Visualization state\n  const [interactiveMode, setInteractiveMode] = useState<boolean>(true);\n  const [selectedVisualization, setSelectedVisualization] = useState<string>('timeSeries');\n\n  /**\n   * Handle interactive mode toggle\n   * @param event - Change event\n   */\n  const handleInteractiveModeToggle = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setInteractiveMode(event.target.checked);\n  };\n\n  /**\n   * Handle visualization type change\n   * @param event - Select change event\n   */\n  const handleVisualizationChange = (event: SelectChangeEvent): void => {\n    setSelectedVisualization(event.target.value);\n  };\n\n  /**\n   * Visualization data with memoization to prevent unnecessary recalculations\n   */\n  const visualizationData = useMemo(() => ({\n    // Time series data\n    timeSeriesData: Array.from({ length: 30 }, (_, i): TimeSeriesDataPoint => ({\n      date: `2023-${Math.floor(i / 30) + 1}-${(i % 30) + 1}`,\n      revenue: 10000 + Math.random() * 5000,\n      players: 500 + Math.random() * 300,\n      newPlayers: 100 + Math.random() * 50,\n      churn: 50 + Math.random() * 30\n    })),\n\n    // Scatter plot data\n    scatterData: Array.from({ length: 50 }, (_, i): ScatterDataPoint => ({\n      id: `point-${i}`,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      z: Math.random() * 100,\n      size: Math.random() * 20 + 5,\n      group: ['A', 'B', 'C', 'D', 'E'][Math.floor(Math.random() * 5)],\n      label: `Data Point ${i + 1}`\n    })),\n\n    // Network visualization data\n    networkData: {\n      nodes: Array.from({ length: 20 }, (_, i): NetworkNode => ({\n        id: `node-${i}`,\n        name: `Node ${i + 1}`,\n        value: Math.random() * 100,\n        group: ['Players', 'Games', 'Transactions', 'Promotions'][Math.floor(Math.random() * 4)]\n      })),\n      links: Array.from({ length: 30 }, (_): NetworkLink => ({\n        source: `node-${Math.floor(Math.random() * 20)}`,\n        target: `node-${Math.floor(Math.random() * 20)}`,\n        value: Math.random() * 10\n      }))\n    } as NetworkData,\n\n    // Sankey diagram data\n    sankeyData: {\n      nodes: [\n        { id: 'acquisition', name: 'Acquisition' },\n        { id: 'registration', name: 'Registration' },\n        { id: 'deposit', name: 'First Deposit' },\n        { id: 'active', name: 'Active Player' },\n        { id: 'inactive', name: 'Inactive' },\n        { id: 'churn', name: 'Churn' },\n        { id: 'reactivated', name: 'Reactivated' }\n      ],\n      links: [\n        { source: 'acquisition', target: 'registration', value: 1000 },\n        { source: 'registration', target: 'deposit', value: 700 },\n        { source: 'registration', target: 'inactive', value: 300 },\n        { source: 'deposit', target: 'active', value: 650 },\n        { source: 'deposit', target: 'inactive', value: 50 },\n        { source: 'active', target: 'active', value: 500 },\n        { source: 'active', target: 'inactive', value: 150 },\n        { source: 'inactive', target: 'churn', value: 200 },\n        { source: 'inactive', target: 'reactivated', value: 150 },\n        { source: 'reactivated', target: 'active', value: 100 },\n        { source: 'reactivated', target: 'inactive', value: 50 }\n      ]\n    } as SankeyData,\n\n    // 3D visualization data\n    threeDData: Array.from({ length: 100 }, (_, i): ThreeDDataPoint => ({\n      id: `point-${i}`,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      z: Math.random() * 100,\n      value: Math.random() * 100,\n      label: `Point ${i + 1}`,\n      group: ['A', 'B', 'C', 'D'][Math.floor(Math.random() * 4)]\n    }))\n  }), []);\n\n  /**\n   * Render visualization based on selected type\n   * @returns React component for the selected visualization\n   */\n  const renderVisualization = () => {\n    // Show skeleton while loading\n    if (isLoading) {\n      return <Skeleton variant=\"rectangular\" height={500} />;\n    }\n\n    /**\n     * Placeholder visualization component\n     */\n    const PlaceholderVisualization = ({\n      title,\n      description\n    }: {\n      title: string;\n      description: string\n    }) => (\n      <SimpleBox\n        sx={{\n          height: 500,\n          border: '1px solid',\n          borderColor: 'divider',\n          p: 2,\n          display: 'flex',\n          flexDirection: 'column'\n        }}\n      >\n        <Typography variant=\"h6\" gutterBottom>\n          {title}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n          {description}\n        </Typography>\n        <SimpleBox\n          sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            height: 400,\n            flexGrow: 1\n          }}\n        >\n          <InfoOutlinedIcon\n            sx={{ mr: 1, color: 'info.main' }}\n            aria-hidden=\"true\"\n          />\n          <Typography>\n            {title} would be displayed here\n          </Typography>\n        </SimpleBox>\n      </SimpleBox>\n    );\n\n    // Render appropriate visualization based on selected type\n    switch (selectedVisualization) {\n      case 'timeSeries':\n        return (\n          <SimpleBox\n            role=\"region\"\n            aria-label=\"Time series visualization\"\n          >\n            <AdvancedInteractiveChart\n              id=\"time-series-chart\"\n              title=\"Revenue and Player Trends Over Time\"\n              description=\"Interactive time series visualization with drill-down capabilities\"\n              type={interactiveMode ? 'zoomableTimeSeries' : 'timeSeries'}\n              data={visualizationData.timeSeriesData}\n              xKey=\"date\"\n              yKeys={['revenue', 'players', 'newPlayers']}\n              height={500}\n              showLegend={true}\n              showGrid={true}\n              enableDrilldown={interactiveMode}\n              enableZoom={interactiveMode}\n              enableTooltip={true}\n              enableCrossFiltering={interactiveMode}\n              enableAnnotations={interactiveMode}\n              enableExport={true}\n              enableFullscreen={true}\n            />\n          </SimpleBox>\n        );\n\n      case 'scatter':\n        return (\n          <SimpleBox\n            role=\"region\"\n            aria-label=\"Multi-dimensional scatter plot\"\n          >\n            <AdvancedInteractiveChart\n              id=\"scatter-chart\"\n              title=\"Multi-dimensional Data Exploration\"\n              description=\"Interactive scatter plot with lasso selection and cross-filtering\"\n              type={interactiveMode ? 'lassoScatter' : 'scatter'}\n              data={visualizationData.scatterData}\n              xKey=\"x\"\n              yKeys={['y', 'z']}\n              nameKey=\"label\"\n              valueKey=\"size\"\n              height={500}\n              showLegend={true}\n              showGrid={true}\n              enableDrilldown={interactiveMode}\n              enableLassoSelection={interactiveMode}\n              enableTooltip={true}\n              enableCrossFiltering={interactiveMode}\n              enableAnnotations={interactiveMode}\n              enableExport={true}\n              enableFullscreen={true}\n            />\n          </SimpleBox>\n        );\n\n      case 'network':\n        return (\n          <SimpleBox\n            role=\"region\"\n            aria-label=\"Network visualization placeholder\"\n          >\n            <PlaceholderVisualization\n              title=\"Network Visualization\"\n              description=\"This visualization requires the NetworkGraph component from reports/visualizations directory.\"\n            />\n          </SimpleBox>\n        );\n\n      case 'sankey':\n        return (\n          <SimpleBox\n            role=\"region\"\n            aria-label=\"Sankey diagram placeholder\"\n          >\n            <PlaceholderVisualization\n              title=\"Player Journey Sankey Diagram\"\n              description=\"This visualization requires the SankeyDiagram component from reports/visualizations directory.\"\n            />\n          </SimpleBox>\n        );\n\n      case '3d':\n        return (\n          <SimpleBox\n            role=\"region\"\n            aria-label=\"3D visualization placeholder\"\n          >\n            <PlaceholderVisualization\n              title=\"3D Data Visualization\"\n              description=\"This visualization requires the Interactive3DChart component from reports/visualizations directory.\"\n            />\n          </SimpleBox>\n        );\n\n      default:\n        return (\n          <SimpleBox\n            sx={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              height: 500\n            }}\n            role=\"region\"\n            aria-label=\"No visualization selected\"\n          >\n            <Typography>\n              Select a visualization type from the dropdown above\n            </Typography>\n          </SimpleBox>\n        );\n    }\n  };\n\n  return (\n    <Grid container spacing={3}>\n      {/* Controls */}\n      <Grid item xs={12}>\n        <Paper\n          sx={{ p: 3, mb: 3 }}\n          component=\"section\"\n          aria-labelledby=\"advanced-visualizations-title\"\n        >\n          <SimpleBox\n            sx={{\n              display: 'flex',\n              flexDirection: { xs: 'column', md: 'row' },\n              justifyContent: 'space-between',\n              alignItems: { xs: 'flex-start', md: 'center' },\n              flexWrap: 'wrap',\n              gap: 2\n            }}\n          >\n            <Typography\n              variant=\"h5\"\n              id=\"advanced-visualizations-title\"\n              component=\"h2\"\n            >\n              Advanced Visualizations\n            </Typography>\n\n            <SimpleBox\n              sx={{\n                display: 'flex',\n                flexDirection: { xs: 'column', sm: 'row' },\n                alignItems: { xs: 'flex-start', sm: 'center' },\n                gap: 2\n              }}\n            >\n              <FormControl\n                size=\"small\"\n                sx={{ minWidth: 220 }}\n              >\n                <InputLabel id=\"visualization-type-label\">Visualization Type</InputLabel>\n                <Select\n                  labelId=\"visualization-type-label\"\n                  id=\"visualization-type-select\"\n                  value={selectedVisualization}\n                  label=\"Visualization Type\"\n                  onChange={handleVisualizationChange}\n                  disabled={isLoading}\n                  aria-describedby=\"visualization-type-helper\"\n                >\n                  <MenuItem value=\"timeSeries\">Time Series Analysis</MenuItem>\n                  <MenuItem value=\"scatter\">Multi-dimensional Scatter</MenuItem>\n                  <MenuItem value=\"network\">Network Visualization</MenuItem>\n                  <MenuItem value=\"sankey\">Player Journey Sankey</MenuItem>\n                  <MenuItem value=\"3d\">3D Data Visualization</MenuItem>\n                </Select>\n              </FormControl>\n\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={interactiveMode}\n                    onChange={handleInteractiveModeToggle}\n                    color=\"primary\"\n                    disabled={isLoading}\n                    inputProps={{\n                      'aria-label': 'Toggle interactive mode',\n                      'aria-describedby': 'interactive-mode-helper'\n                    }}\n                  />\n                }\n                label=\"Interactive Mode\"\n              />\n\n              {/* Note: Download and fullscreen functionality is handled by the AdvancedInteractiveChart component */}\n            </SimpleBox>\n          </SimpleBox>\n\n          <Divider sx={{ my: 2 }} />\n\n          <Typography\n            variant=\"body2\"\n            color=\"text.secondary\"\n            paragraph\n            id=\"interactive-mode-helper\"\n          >\n            Advanced visualizations provide interactive exploration capabilities including drill-down,\n            cross-filtering, annotations, and more. Enable interactive mode to access these features.\n          </Typography>\n        </Paper>\n      </Grid>\n\n      {/* Visualization */}\n      <Grid item xs={12}>\n        <Paper\n          sx={{\n            p: 0,\n            overflow: 'hidden',\n            '& .recharts-responsive-container': {\n              // Improve chart accessibility\n              '& svg': { overflow: 'visible' },\n              '& .recharts-tooltip-cursor': { stroke: 'rgba(0,0,0,0.2)' }\n            }\n          }}\n        >\n          {renderVisualization()}\n        </Paper>\n      </Grid>\n\n      {/* Features Description */}\n      <Grid item xs={12}>\n        <Paper\n          sx={{ p: 3 }}\n          component=\"section\"\n          aria-labelledby=\"interactive-features-title\"\n        >\n          <Typography\n            variant=\"h6\"\n            gutterBottom\n            id=\"interactive-features-title\"\n            component=\"h3\"\n          >\n            Interactive Features\n          </Typography>\n\n          <Grid\n            container\n            spacing={2}\n            sx={{ mt: 1 }}\n            role=\"list\"\n            aria-label=\"Interactive features list\"\n          >\n            {/* Feature cards */}\n            {[\n              {\n                title: 'Drill-down',\n                description: 'Click on data points to explore detailed information and see underlying data.',\n                icon: '🔍'\n              },\n              {\n                title: 'Cross-filtering',\n                description: 'Select data in one visualization to filter related data in other visualizations.',\n                icon: '🔗'\n              },\n              {\n                title: 'Zoom & Pan',\n                description: 'Zoom into specific time periods or data regions, and pan to navigate through the data.',\n                icon: '🔎'\n              },\n              {\n                title: 'Annotations',\n                description: 'Add comments and annotations to data points to highlight insights and share with team.',\n                icon: '📝'\n              }\n            ].map((feature, index) => (\n              <Grid\n                item\n                xs={12}\n                sm={6}\n                md={3}\n                key={index}\n                role=\"listitem\"\n              >\n                <SimpleBox\n                  sx={{\n                    p: 2,\n                    border: '1px solid',\n                    borderColor: 'divider',\n                    borderRadius: 1,\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column'\n                  }}\n                >\n                  <SimpleBox sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <Typography\n                      variant=\"subtitle1\"\n                      component=\"h4\"\n                      sx={{ mr: 1 }}\n                    >\n                      {feature.title}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      component=\"span\"\n                      aria-hidden=\"true\"\n                    >\n                      {feature.icon}\n                    </Typography>\n                  </SimpleBox>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {feature.description}\n                  </Typography>\n                </SimpleBox>\n              </Grid>\n            ))}\n          </Grid>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AdvancedVisualizationsTabContent;\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport {\n  Container,\n  Paper,\n  Typography,\n  Tabs,\n  Tab,\n  useTheme,\n  useMediaQuery,\n  SelectChangeEvent,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport SimpleBox from '../../components/common/SimpleBox';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\n\n// Import common components\nimport ErrorBoundary from '../../components/common/ErrorBoundary';\nimport EmptyState from '../../components/common/EmptyState';\n\n// Import context providers\nimport { FilterContextProvider } from '../../components/reports/interactive/FilterContext';\nimport { AnnotationContextProvider } from '../../components/reports/interactive/AnnotationSystem';\n\n// Import tab content components\nimport {\n  OverviewTabContent,\n  PerformanceTabContent,\n  PlayerAnalysisTabContent,\n  GameAnalysisTabContent,\n  AdvancedVisualizationsTabContent\n} from './components';\n\n// Import mock data\nimport dashboardMockData from '../../mockData/dashboard';\n\n/**\n * Analytics tab interface\n */\ninterface AnalyticsTab {\n  /** Unique identifier for the tab */\n  id: string;\n  /** Display label for the tab */\n  label: string;\n}\n\n/**\n * Revenue data point interface\n */\ninterface RevenueDataPoint {\n  date: string;\n  revenue: number;\n  deposits?: number;\n  withdrawals?: number;\n  netRevenue?: number;\n  [key: string]: any;\n}\n\n/**\n * Player data point interface\n */\ninterface PlayerDataPoint {\n  date: string;\n  registrations: number;\n  activeUsers?: number;\n  newPlayers?: number;\n  churn?: number;\n  [key: string]: any;\n}\n\n/**\n * Game data interface\n */\ninterface GameData {\n  id: string;\n  name: string;\n  category: string;\n  plays: number;\n  uniquePlayers: number;\n  revenue: number;\n  [key: string]: any;\n}\n\n/**\n * KPI metric interface\n */\ninterface KpiMetric {\n  current: number;\n  previous: number;\n  change: number;\n  trend: 'up' | 'down' | 'stable';\n  target?: number;\n  vsTarget?: number;\n  forecast?: number;\n}\n\n/**\n * KPI metrics interface\n */\ninterface KpiMetrics {\n  totalRevenue?: number;\n  totalPlayers?: number;\n  activeUsers?: number;\n  conversionRate?: KpiMetric;\n  averageSessionTime?: number;\n  churnRate?: KpiMetric;\n  revenue?: KpiMetric;\n  ggr?: KpiMetric;\n  ngr?: KpiMetric;\n  deposits?: KpiMetric;\n  withdrawals?: KpiMetric;\n  activePlayers?: KpiMetric;\n  newPlayers?: KpiMetric;\n  firstTimeDepositors?: KpiMetric;\n  averageDepositAmount?: KpiMetric;\n  ltv?: KpiMetric;\n  marketingCost?: KpiMetric;\n  cpa?: KpiMetric;\n  roi?: KpiMetric;\n  players?: KpiMetric;\n  [key: string]: any;\n}\n\n/**\n * Dashboard data interface\n */\ninterface DashboardData {\n  /** Revenue data */\n  revenue: RevenueDataPoint[];\n  /** Player data */\n  players: PlayerDataPoint[];\n  /** Top games data */\n  topGames: GameData[];\n  /** KPI metrics data */\n  kpi: KpiMetrics;\n  /** Recent transactions data */\n  recentTransactions?: any[];\n}\n\n// Define analytics tabs\nconst ANALYTICS_TABS: AnalyticsTab[] = [\n  { id: 'overview', label: 'Overview' },\n  { id: 'performance', label: 'Performance' },\n  { id: 'players', label: 'Player Analysis' },\n  { id: 'games', label: 'Game Analysis' },\n  { id: 'advanced', label: 'Advanced Visualizations' }\n];\n\n/**\n * AdvancedAnalyticsPage component\n *\n * A comprehensive analytics dashboard with various chart types and visualizations.\n * Features include:\n * - Multiple tabs for different analytics views (Overview, Performance, Players, Games, Advanced)\n * - Interactive charts and visualizations\n * - Time period filtering\n * - Data refresh functionality\n * - Responsive design for mobile and desktop\n *\n * @returns React component\n */\nconst AdvancedAnalyticsPage: React.FC = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [timePeriod, setTimePeriod] = useState<string>('month');\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n\n  // Dashboard data state\n  const [dashboardData, setDashboardData] = useState<DashboardData>({\n    revenue: [],\n    players: [],\n    topGames: [],\n    kpi: {\n      totalRevenue: 0,\n      totalPlayers: 0,\n      activeUsers: 0,\n      averageSessionTime: 0\n    },\n    recentTransactions: []\n  });\n\n  /**\n   * Load dashboard data based on selected time period\n   */\n  const loadDashboardData = useCallback(async (period: string) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Fetch data from mock services\n      const revenueData = dashboardMockData.casinoRevenueMockData.getRevenueData({ period });\n      const playerData = dashboardMockData.playerRegistrationsMockData.getRegistrationsData({ period });\n      const topGamesData = dashboardMockData.topGamesMockData.getTopGames();\n      const rawKpiData = dashboardMockData.kpiMockData.kpiData;\n\n      // Convert raw KPI data to the correct type\n      const convertTrendValue = (trend: string): 'up' | 'down' | 'stable' => {\n        if (trend === 'up') return 'up';\n        if (trend === 'down') return 'down';\n        return 'stable';\n      };\n\n      // Create a properly typed KpiMetrics object\n      const kpiData: KpiMetrics = {\n        totalRevenue: 0,\n        totalPlayers: 0,\n        activeUsers: 0,\n        averageSessionTime: 0\n      };\n\n      // Add converted properties from rawKpiData\n      if (rawKpiData) {\n        // Add simple properties\n        Object.keys(rawKpiData).forEach(key => {\n          // Use type assertion to fix TS7053 error\n          const value = rawKpiData[key as keyof typeof rawKpiData];\n\n          // Check if the value is an object with a trend property\n          if (value && typeof value === 'object' && 'trend' in value) {\n            // Convert the trend value to the correct type\n            kpiData[key] = {\n              ...value,\n              trend: convertTrendValue(value.trend)\n            };\n          } else {\n            // For simple values, just copy them\n            kpiData[key] = value;\n          }\n        });\n      }\n\n      // Update state with fetched data, ensuring all data is properly formatted\n      setDashboardData({\n        revenue: Array.isArray(revenueData) ? revenueData : [],\n        players: Array.isArray(playerData) ? playerData : [],\n        topGames: Array.isArray(topGamesData) ? topGamesData : [],\n        kpi: kpiData\n      });\n    } catch (err) {\n      console.error('Error loading dashboard data:', err);\n      setError('Failed to load dashboard data. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Load data when time period changes\n  useEffect(() => {\n    if (timePeriod !== 'refreshing') {\n      loadDashboardData(timePeriod);\n    }\n  }, [timePeriod, loadDashboardData]);\n\n  /**\n   * Handle tab change\n   * @param _event - React synthetic event\n   * @param newValue - New tab index\n   */\n  const handleTabChange = useCallback((_event: React.SyntheticEvent, newValue: number): void => {\n    setActiveTab(newValue);\n  }, []);\n\n  /**\n   * Handle time period change\n   * @param event - Select change event\n   */\n  const handleTimePeriodChange = useCallback((event: SelectChangeEvent): void => {\n    setTimePeriod(event.target.value);\n  }, []);\n\n  /**\n   * Handle refresh button click\n   * Reloads dashboard data with current settings\n   */\n  const handleRefresh = useCallback((): void => {\n    setLastUpdated(new Date());\n    loadDashboardData(timePeriod);\n  }, [timePeriod, loadDashboardData]);\n\n  /**\n   * Format last updated time for display\n   * Memoized to prevent unnecessary recalculations\n   */\n  const formattedLastUpdated = useMemo(() => {\n    return lastUpdated.toLocaleTimeString(undefined, {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  }, [lastUpdated]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Advanced Analytics | PPrePorter</title>\n        <meta name=\"description\" content=\"Advanced analytics dashboard with comprehensive data visualizations and insights\" />\n      </Helmet>\n\n      {/* Wrap the entire content with context providers */}\n      <FilterContextProvider>\n        <AnnotationContextProvider>\n          <Container maxWidth=\"xl\">\n            {/* Header */}\n            <SimpleBox\n              component=\"header\"\n              sx={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 3,\n                mt: 2\n              }}\n            >\n              <Typography variant=\"h4\" component=\"h1\">\n                Advanced Analytics\n              </Typography>\n              <SimpleBox sx={{ display: 'flex', alignItems: 'center' }}>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  sx={{ mr: 2 }}\n                  aria-live=\"polite\"\n                >\n                  Last updated: {formattedLastUpdated}\n                </Typography>\n                <Tooltip title=\"Refresh data\">\n                  <span>\n                    <IconButton\n                      onClick={handleRefresh}\n                      disabled={isLoading}\n                      aria-label=\"Refresh data\"\n                    >\n                      <RefreshIcon />\n                    </IconButton>\n                  </span>\n                </Tooltip>\n              </SimpleBox>\n            </SimpleBox>\n\n            {/* Tabs */}\n            <SimpleBox\n              component=\"nav\"\n              sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}\n              role=\"navigation\"\n            >\n              <Tabs\n                value={activeTab}\n                onChange={handleTabChange}\n                aria-label=\"Analytics dashboard tabs\"\n                variant={isMobile ? 'scrollable' : 'standard'}\n                scrollButtons=\"auto\"\n                allowScrollButtonsMobile\n              >\n                {ANALYTICS_TABS.map((tab, index) => (\n                  <Tab\n                    key={tab.id}\n                    label={tab.label}\n                    id={`tab-${tab.id}`}\n                    aria-controls={`tabpanel-${tab.id}`}\n                    disabled={isLoading}\n                  />\n                ))}\n              </Tabs>\n            </SimpleBox>\n\n            {/* Error display - memoized to prevent unnecessary re-renders */}\n            {useMemo(() => {\n              if (!error) return null;\n\n              return (\n                <Paper\n                  sx={{ p: 3, mb: 3, bgcolor: 'error.light' }}\n                  role=\"alert\"\n                  aria-live=\"assertive\"\n                >\n                  <Typography color=\"error\" variant=\"h6\">\n                    Error\n                  </Typography>\n                  <Typography color=\"error\">{error}</Typography>\n                </Paper>\n              );\n            }, [error])}\n\n            {/* Tab Content */}\n            <SimpleBox component=\"main\">\n              <ErrorBoundary\n                fallback={\n                  <EmptyState\n                    message=\"Something went wrong loading the analytics dashboard\"\n                    icon={<InfoOutlinedIcon />}\n                  />\n                }\n              >\n                {/* Render tab panels - memoized to prevent unnecessary re-renders */}\n                {useMemo(() => (\n                  ANALYTICS_TABS.map((tab, index) => (\n                    <div\n                      key={tab.id}\n                      role=\"tabpanel\"\n                      hidden={activeTab !== index}\n                      id={`tabpanel-${tab.id}`}\n                      aria-labelledby={`tab-${tab.id}`}\n                    >\n                      {activeTab === index && (\n                        <>\n                          {index === 0 && (\n                            <OverviewTabContent\n                              dashboardData={dashboardData}\n                              isLoading={isLoading}\n                              timePeriod={timePeriod}\n                              onTimePeriodChange={handleTimePeriodChange}\n                            />\n                          )}\n\n                          {index === 1 && (\n                            <PerformanceTabContent\n                              dashboardData={dashboardData}\n                              isLoading={isLoading}\n                            />\n                          )}\n\n                          {index === 2 && (\n                            <PlayerAnalysisTabContent\n                              dashboardData={dashboardData}\n                              isLoading={isLoading}\n                            />\n                          )}\n\n                          {index === 3 && (\n                            <GameAnalysisTabContent\n                              dashboardData={dashboardData}\n                              isLoading={isLoading}\n                            />\n                          )}\n\n                          {index === 4 && (\n                            <AdvancedVisualizationsTabContent\n                              dashboardData={dashboardData}\n                              isLoading={isLoading}\n                            />\n                          )}\n                        </>\n                      )}\n                    </div>\n                  ))\n                ), [activeTab, dashboardData, handleTimePeriodChange, isLoading, timePeriod])}\n              </ErrorBoundary>\n            </SimpleBox>\n          </Container>\n        </AnnotationContextProvider>\n      </FilterContextProvider>\n    </>\n  );\n};\n\nexport default AdvancedAnalyticsPage;\n"],"names":["_ref","dashboardData","isLoading","timePeriod","onTimePeriodChange","kpiData","kpi","revenueData","Array","isArray","revenue","playerData","players","topGamesData","topGames","microChartsData","useMemo","safeMap","data","mapFn","length","map","item","value","label","date","month","week","registrations","deposits","withdrawals","_jsxs","Grid","container","spacing","children","_jsx","xs","Paper","sx","p","mb","SimpleBox","display","justifyContent","alignItems","Typography","variant","FormControl","size","minWidth","mr","InputLabel","id","Select","labelId","onChange","MenuItem","Tooltip","title","IconButton","DownloadIcon","fontSize","KpiCard","_ref2","metric","chartData","formatValue","sm","md","border","borderColor","borderRadius","height","flexDirection","color","gutterBottom","Skeleton","width","_Fragment","current","mt","trend","formatPercentage","change","MicroCharts","Sparkline","valueKey","formatCurrency","formatNumber","ChartCard","_ref3","Card","action","disabled","SettingsIcon","ChartSkeleton","CasinoRevenueChart","PlayerRegistrationsChart","showFTD","TopGamesChart","showLegend","chartType","setChartType","useState","metricType","setMetricType","transformedData","bets","areaChartData","barChartData","slice","pieChartData","name","scatterChartData","radarChartData","subject","A","B","fullMark","multiDimensionalData","entityId","values","retention","conversion","engagement","component","gap","flexWrap","event","target","position","overflow","stroke","role","renderChart","chartTitles","area","bar","getTitle","type","_chartTitles","pie","scatter","radar","ReportAreaChart","xKey","yKeys","loading","showGrid","ReportBarChart","ReportPieChart","nameKey","ReportScatterChart","yKey","ReportRadarChart","dataKey","MultiDimensionalRadarChart","metrics","format","entities","segmentFilter","setSegmentFilter","timeRange","setTimeRange","playerSegments","playerAcquisitionData","organic","paid","referral","playerRetentionData","day1","day7","day30","playerActivityData","playerDemographicsData","playerGeoData","playerBehaviorData","FilterListIcon","flexGrow","Chip","onDelete","ChartComponent","gridConfig","ReportTreemapChart","gameCategory","setGameCategory","selectedGame","setSelectedGame","handleGameCategoryChange","useCallback","handleTimeRangeChange","handleGameSelectionChange","_event","newValue","timeSlots","gameCategoriesData","gamePerformanceData","gamePopularityData","game","sessions","avgSessionTime","gameEngagementData","returnRate","churnRate","gamePerformanceByTimeData","hour","gameHeatmapData","flatMap","day","time","Math","floor","random","gamesList","Autocomplete","options","renderInput","params","TextField","ReportHeatmap","props","interactiveMode","setInteractiveMode","selectedVisualization","setSelectedVisualization","visualizationData","timeSeriesData","from","_","i","newPlayers","churn","scatterData","x","y","z","group","networkData","nodes","links","source","sankeyData","threeDData","FormControlLabel","control","Switch","checked","inputProps","Divider","my","paragraph","renderVisualization","PlaceholderVisualization","description","InfoOutlinedIcon","AdvancedInteractiveChart","enableDrilldown","enableZoom","enableTooltip","enableCrossFiltering","enableAnnotations","enableExport","enableFullscreen","enableLassoSelection","icon","feature","index","ANALYTICS_TABS","AdvancedAnalyticsPage","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","activeTab","setActiveTab","setIsLoading","error","setError","setTimePeriod","lastUpdated","setLastUpdated","Date","setDashboardData","totalRevenue","totalPlayers","activeUsers","averageSessionTime","recentTransactions","loadDashboardData","async","Promise","resolve","setTimeout","dashboardMockData","casinoRevenueMockData","getRevenueData","period","playerRegistrationsMockData","getRegistrationsData","topGamesMockData","getTopGames","rawKpiData","kpiMockData","convertTrendValue","Object","keys","forEach","key","err","console","useEffect","handleTabChange","handleTimePeriodChange","handleRefresh","formattedLastUpdated","toLocaleTimeString","undefined","minute","second","Helmet","content","FilterContextProvider","AnnotationContextProvider","Container","maxWidth","onClick","RefreshIcon","borderBottom","Tabs","scrollButtons","allowScrollButtonsMobile","tab","Tab","bgcolor","ErrorBoundary","fallback","EmptyState","message","hidden","OverviewTabContent","PerformanceTabContent","PlayerAnalysisTabContent","GameAnalysisTabContent","AdvancedVisualizationsTabContent"],"sourceRoot":""}