{"version":3,"file":"static/js/230.a47392f2.chunk.js","mappings":"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","sources":["components/common/Card.tsx","components/reports/ReportList.tsx","components/reports/ReportShareDialog.tsx","components/reports/ReportScheduleDialog.tsx","components/reports/ReportTemplate.tsx","components/reports/ReportColumnSelector.tsx","components/reports/ReportDataSourceSelector.tsx","components/reports/ReportFilterSelector.tsx","components/reports/ReportPreview.tsx","components/reports/NaturalLanguageQueryPanel.tsx","components/reports/ReportViewer.tsx","components/reports/DailyActionsReport.tsx","mockData/showcase.ts","pages/showcase/ReportComponentsShowcase.tsx","components/common/Pagination.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { \n  Paper, \n  Typography, \n  Box, \n  Divider, \n  IconButton,\n  Collapse\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport { CardProps } from '../../types/common';\n\n/**\n * Card component for consistent UI elements across the application\n */\nconst Card: React.FC<CardProps> = ({\n  children,\n  title,\n  subheader,\n  action,\n  icon,\n  sx,\n  collapsible = false,\n  defaultExpanded = true,\n  variant = 'outlined'\n}) => {\n  const [expanded, setExpanded] = useState<boolean>(defaultExpanded);\n\n  const handleExpandToggle = (): void => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <Paper\n      variant={variant}\n      sx={{\n        borderRadius: 1,\n        overflow: 'hidden',\n        ...sx\n      }}\n    >\n      {/* Card Header */}\n      {(title || subheader) && (\n        <>\n          <Box\n            sx={{\n              px: 3,\n              py: 2,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between'\n            }}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {icon && (\n                <Box sx={{ mr: 1.5, display: 'flex', alignItems: 'center' }}>\n                  {icon}\n                </Box>\n              )}\n              <Box>\n                {title && (\n                  <Typography variant=\"h6\" component=\"div\">\n                    {title}\n                  </Typography>\n                )}\n                {subheader && (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {subheader}\n                  </Typography>\n                )}\n              </Box>\n            </Box>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {action}\n              {collapsible && (\n                <IconButton\n                  onClick={handleExpandToggle}\n                  sx={{ ml: action ? 1 : 0 }}\n                  size=\"small\"\n                >\n                  {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                </IconButton>\n              )}\n            </Box>\n          </Box>\n          <Divider />\n        </>\n      )}\n\n      {/* Card Content */}\n      {collapsible ? (\n        <Collapse in={expanded}>\n          <Box>{children}</Box>\n        </Collapse>\n      ) : (\n        <Box>{children}</Box>\n      )}\n    </Paper>\n  );\n};\n\nexport default Card;\n","import React, { useState, MouseEvent, ChangeEvent } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  InputAdornment,\n  IconButton,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Divider,\n  Button,\n  Chip,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Tooltip,\n  CircularProgress\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport AddIcon from '@mui/icons-material/Add';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FileCopyIcon from '@mui/icons-material/FileCopy';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport StarIcon from '@mui/icons-material/Star';\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\nimport SortIcon from '@mui/icons-material/Sort';\nimport FolderIcon from '@mui/icons-material/Folder';\nimport { formatDistanceToNow } from 'date-fns';\nimport Pagination from '../common/Pagination';\nimport { ReportListProps, ReportSortOption } from '../../types/reportList';\nimport { Report } from '../../types/reportsData';\n\n/**\n * ReportList component for displaying a list of reports with search, filtering, and sorting\n */\nconst ReportList: React.FC<ReportListProps> = ({\n  reports = [],\n  onViewReport,\n  onCreateReport,\n  onEditReport,\n  onDeleteReport,\n  onDuplicateReport,\n  onSearch,\n  onFavoriteToggle,\n  loading = false,\n  totalCount = 0,\n  error = null,\n  categories = [],\n  showActions = true\n}) => {\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [sortBy, setSortBy] = useState<ReportSortOption>('updated');\n  const [page, setPage] = useState<number>(1);\n  const [pageSize, setPageSize] = useState<number>(12);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement | null>(null);\n  const [activeReport, setActiveReport] = useState<Report | null>(null);\n  const [sortMenuAnchorEl, setSortMenuAnchorEl] = useState<HTMLElement | null>(null);\n  const [filterMenuAnchorEl, setFilterMenuAnchorEl] = useState<HTMLElement | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState<boolean>(false);\n\n  // Handle search input change\n  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const value = event.target.value;\n    setSearchTerm(value);\n    if (onSearch) {\n      onSearch(value, selectedCategory, sortBy);\n    }\n  };\n\n  // Handle category filter change\n  const handleCategoryChange = (category: string): void => {\n    setSelectedCategory(category);\n    setFilterMenuAnchorEl(null);\n    if (onSearch) {\n      onSearch(searchTerm, category, sortBy);\n    }\n  };\n\n  // Handle sort selection\n  const handleSortChange = (sortValue: ReportSortOption): void => {\n    setSortBy(sortValue);\n    setSortMenuAnchorEl(null);\n    if (onSearch) {\n      onSearch(searchTerm, selectedCategory, sortValue);\n    }\n  };\n\n  // Handle page change\n  const handlePageChange = (newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle page size change\n  const handlePageSizeChange = (newPageSize: number): void => {\n    setPageSize(newPageSize);\n    setPage(1);\n  };\n\n  // Handle opening report menu\n  const handleMenuOpen = (event: MouseEvent<HTMLButtonElement>, report: Report): void => {\n    event.stopPropagation();\n    setMenuAnchorEl(event.currentTarget);\n    setActiveReport(report);\n  };\n\n  // Handle closing report menu\n  const handleMenuClose = (): void => {\n    setMenuAnchorEl(null);\n  };\n\n  // Handle opening sort menu\n  const handleSortMenuOpen = (event: MouseEvent<HTMLButtonElement>): void => {\n    setSortMenuAnchorEl(event.currentTarget);\n  };\n\n  // Handle closing sort menu\n  const handleSortMenuClose = (): void => {\n    setSortMenuAnchorEl(null);\n  };\n\n  // Handle opening filter menu\n  const handleFilterMenuOpen = (event: MouseEvent<HTMLButtonElement>): void => {\n    setFilterMenuAnchorEl(event.currentTarget);\n  };\n\n  // Handle closing filter menu\n  const handleFilterMenuClose = (): void => {\n    setFilterMenuAnchorEl(null);\n  };\n\n  // Handle view report\n  const handleViewReport = (report: Report): void => {\n    if (onViewReport) {\n      onViewReport(report);\n    }\n  };\n\n  // Handle edit report\n  const handleEditReport = (): void => {\n    if (onEditReport && activeReport) {\n      onEditReport(activeReport);\n    }\n    handleMenuClose();\n  };\n\n  // Handle delete report\n  const handleDeleteReport = (): void => {\n    setDeleteDialogOpen(true);\n    handleMenuClose();\n  };\n\n  // Handle confirming delete report\n  const handleConfirmDelete = (): void => {\n    if (onDeleteReport && activeReport) {\n      onDeleteReport(activeReport);\n    }\n    setDeleteDialogOpen(false);\n  };\n\n  // Handle cancel delete report\n  const handleCancelDelete = (): void => {\n    setDeleteDialogOpen(false);\n  };\n\n  // Handle duplicate report\n  const handleDuplicateReport = (): void => {\n    if (onDuplicateReport && activeReport) {\n      onDuplicateReport(activeReport);\n    }\n    handleMenuClose();\n  };\n\n  // Handle toggle favorite\n  const handleToggleFavorite = (event: MouseEvent<HTMLButtonElement>, report: Report): void => {\n    event.stopPropagation();\n    if (onFavoriteToggle) {\n      onFavoriteToggle(report);\n    }\n  };\n\n  // Sort label text\n  const getSortLabel = (): string => {\n    switch (sortBy) {\n      case 'name':\n        return 'Name (A-Z)';\n      case 'created':\n        return 'Newest';\n      case 'updated':\n        return 'Recently Updated';\n      case 'popular':\n        return 'Most Popular';\n      default:\n        return 'Sort By';\n    }\n  };\n\n  // Category label text\n  const getCategoryLabel = (): string => {\n    if (selectedCategory === 'all') return 'All Categories';\n    if (selectedCategory === 'favorites') return 'Favorites';\n\n    const category = categories.find(c => c.id === selectedCategory);\n    return category ? category.name : 'All Categories';\n  };\n\n  return (\n    <Box>\n      {/* Header with search and filters */}\n      <Box sx={{ mb: 3 }}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item xs={12} sm={6} md={4}>\n            <TextField\n              fullWidth\n              placeholder=\"Search reports...\"\n              value={searchTerm}\n              onChange={handleSearchChange}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n              size=\"small\"\n            />\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={8}>\n            <Box sx={{ display: 'flex', gap: 2, justifyContent: { xs: 'flex-start', md: 'flex-end' } }}>\n              <Button\n                variant=\"outlined\"\n                startIcon={<FilterListIcon />}\n                onClick={handleFilterMenuOpen}\n                size=\"small\"\n              >\n                {getCategoryLabel()}\n              </Button>\n\n              <Button\n                variant=\"outlined\"\n                startIcon={<SortIcon />}\n                onClick={handleSortMenuOpen}\n                size=\"small\"\n              >\n                {getSortLabel()}\n              </Button>\n\n              {showActions && onCreateReport && (\n                <Button\n                  variant=\"contained\"\n                  startIcon={<AddIcon />}\n                  onClick={onCreateReport}\n                  size=\"small\"\n                >\n                  Create Report\n                </Button>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Error message */}\n      {error && (\n        <Box sx={{ mb: 3 }}>\n          <Typography color=\"error\">{error}</Typography>\n        </Box>\n      )}\n\n      {/* Reports grid */}\n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', py: 10 }}>\n          <CircularProgress />\n        </Box>\n      ) : reports.length === 0 ? (\n        <Paper\n          variant=\"outlined\"\n          sx={{ p: 4, textAlign: 'center', borderStyle: 'dashed' }}\n        >\n          <FolderIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n          <Typography variant=\"h6\" gutterBottom>\n            No reports found\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n            {searchTerm || selectedCategory !== 'all'\n              ? 'Try adjusting your search or filters'\n              : 'Get started by creating your first report'}\n          </Typography>\n          {showActions && onCreateReport && (\n            <Button\n              variant=\"contained\"\n              startIcon={<AddIcon />}\n              onClick={onCreateReport}\n            >\n              Create New Report\n            </Button>\n          )}\n        </Paper>\n      ) : (\n        <Grid container spacing={3}>\n          {reports.map((report) => (\n            <Grid item xs={12} sm={6} md={4} lg={3} key={report.id}>\n              <Card\n                variant=\"outlined\"\n                sx={{\n                  height: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  cursor: 'pointer',\n                  '&:hover': {\n                    boxShadow: 2,\n                    borderColor: 'primary.main',\n                  },\n                }}\n                onClick={() => handleViewReport(report)}\n              >\n                <CardContent sx={{ flexGrow: 1 }}>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                    <Typography variant=\"subtitle1\" component=\"h3\" noWrap sx={{ fontWeight: 'medium' }}>\n                      {report.name}\n                    </Typography>\n\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Tooltip title={report.isFavorite ? 'Remove from favorites' : 'Add to favorites'}>\n                        <IconButton\n                          size=\"small\"\n                          onClick={(e) => handleToggleFavorite(e, report)}\n                          color={report.isFavorite ? 'primary' : 'default'}\n                        >\n                          {report.isFavorite ? <StarIcon fontSize=\"small\" /> : <StarBorderIcon fontSize=\"small\" />}\n                        </IconButton>\n                      </Tooltip>\n\n                      {showActions && (\n                        <IconButton\n                          size=\"small\"\n                          onClick={(e) => handleMenuOpen(e, report)}\n                        >\n                          <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                      )}\n                    </Box>\n                  </Box>\n\n                  {report.category && (\n                    <Chip\n                      label={report.category}\n                      size=\"small\"\n                      sx={{ mt: 1, mb: 2 }}\n                    />\n                  )}\n\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1, mb: 2 }}>\n                    {report.description && report.description.length > 100\n                      ? `${report.description.substring(0, 100)}...`\n                      : report.description}\n                  </Typography>\n\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 'auto' }}>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Updated {formatDistanceToNow(new Date(report.updatedAt), { addSuffix: true })}\n                    </Typography>\n\n                    {report.viewCount !== undefined && (\n                      <Tooltip title=\"Number of views\">\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <VisibilityIcon fontSize=\"small\" sx={{ fontSize: 14, mr: 0.5, color: 'text.secondary' }} />\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {report.viewCount}\n                          </Typography>\n                        </Box>\n                      </Tooltip>\n                    )}\n                  </Box>\n                </CardContent>\n\n                <Divider />\n\n                <CardActions>\n                  <Button\n                    size=\"small\"\n                    startIcon={<VisibilityIcon />}\n                    onClick={() => handleViewReport(report)}\n                  >\n                    View\n                  </Button>\n\n                  {showActions && onEditReport && (\n                    <Button\n                      size=\"small\"\n                      startIcon={<EditIcon />}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setActiveReport(report);\n                        handleEditReport();\n                      }}\n                    >\n                      Edit\n                    </Button>\n                  )}\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      )}\n\n      {/* Pagination */}\n      {!loading && reports.length > 0 && (\n        <Box sx={{ mt: 4 }}>\n          <Pagination\n            count={totalCount}\n            page={page}\n            pageSize={pageSize}\n            onPageChange={handlePageChange}\n            onPageSizeChange={handlePageSizeChange}\n          />\n        </Box>\n      )}\n\n      {/* Report Actions Menu */}\n      <Menu\n        anchorEl={menuAnchorEl}\n        open={Boolean(menuAnchorEl)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem onClick={handleEditReport}>\n          <ListItemIcon>\n            <EditIcon fontSize=\"small\" />\n          </ListItemIcon>\n          Edit\n        </MenuItem>\n        <MenuItem onClick={handleDuplicateReport}>\n          <ListItemIcon>\n            <FileCopyIcon fontSize=\"small\" />\n          </ListItemIcon>\n          Duplicate\n        </MenuItem>\n        <MenuItem onClick={handleDeleteReport} sx={{ color: 'error.main' }}>\n          <ListItemIcon>\n            <DeleteIcon fontSize=\"small\" color=\"error\" />\n          </ListItemIcon>\n          Delete\n        </MenuItem>\n      </Menu>\n\n      {/* Sort Menu */}\n      <Menu\n        anchorEl={sortMenuAnchorEl}\n        open={Boolean(sortMenuAnchorEl)}\n        onClose={handleSortMenuClose}\n      >\n        <MenuItem\n          selected={sortBy === 'updated'}\n          onClick={() => handleSortChange('updated')}\n        >\n          Recently Updated\n        </MenuItem>\n        <MenuItem\n          selected={sortBy === 'created'}\n          onClick={() => handleSortChange('created')}\n        >\n          Newest\n        </MenuItem>\n        <MenuItem\n          selected={sortBy === 'name'}\n          onClick={() => handleSortChange('name')}\n        >\n          Name (A-Z)\n        </MenuItem>\n        <MenuItem\n          selected={sortBy === 'popular'}\n          onClick={() => handleSortChange('popular')}\n        >\n          Most Popular\n        </MenuItem>\n      </Menu>\n\n      {/* Filter Menu */}\n      <Menu\n        anchorEl={filterMenuAnchorEl}\n        open={Boolean(filterMenuAnchorEl)}\n        onClose={handleFilterMenuClose}\n      >\n        <MenuItem\n          selected={selectedCategory === 'all'}\n          onClick={() => handleCategoryChange('all')}\n        >\n          All Categories\n        </MenuItem>\n        <MenuItem\n          selected={selectedCategory === 'favorites'}\n          onClick={() => handleCategoryChange('favorites')}\n        >\n          Favorites\n        </MenuItem>\n        <Divider />\n        {categories.map((category) => (\n          <MenuItem\n            key={category.id}\n            selected={selectedCategory === category.id}\n            onClick={() => handleCategoryChange(category.id)}\n          >\n            {category.name}\n          </MenuItem>\n        ))}\n      </Menu>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={deleteDialogOpen}\n        onClose={handleCancelDelete}\n      >\n        <DialogTitle>Delete Report</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete \"{activeReport?.name}\"? This action cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCancelDelete}>Cancel</Button>\n          <Button onClick={handleConfirmDelete} color=\"error\">Delete</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ReportList;","import React, { useState, useEffect, ChangeEvent, MouseEvent } from 'react';\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  Tab,\n  Tabs,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Switch,\n  FormControlLabel,\n  Divider,\n  Chip,\n  InputAdornment,\n  Tooltip,\n  Snackbar,\n  Alert,\n  CircularProgress,\n  Paper,\n  RadioGroup,\n  Radio,\n  FormControl,\n  FormLabel,\n  SelectChangeEvent\n} from '@mui/material';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport CloseIcon from '@mui/icons-material/Close';\nimport SearchIcon from '@mui/icons-material/Search';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport LinkIcon from '@mui/icons-material/Link';\nimport LockIcon from '@mui/icons-material/Lock';\nimport PublicIcon from '@mui/icons-material/Public';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport {\n  ReportShareDialogProps,\n  User,\n  SharedUser,\n  Permission,\n  SnackbarState\n} from '../../types/sharing';\n\n/**\n * ReportShareDialog component for sharing reports with users or generating public links\n */\nconst ReportShareDialog: React.FC<ReportShareDialogProps> = ({\n  open,\n  onClose,\n  report = {},\n  sharedUsers = [],\n  availableUsers = [],\n  isPublic = false,\n  publicUrl = '',\n  expirationDate = null,\n  onAddUser,\n  onRemoveUser,\n  onPermissionChange,\n  onPublicToggle,\n  onExpirationChange,\n  loading = false,\n  error = null\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [selectedUsers, setSelectedUsers] = useState<User[]>([]);\n  const [newPermission, setNewPermission] = useState<Permission>('view');\n  const [snackbar, setSnackbar] = useState<SnackbarState>({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n  const [tempPublicState, setTempPublicState] = useState<boolean>(isPublic);\n  const [tempExpirationDate, setTempExpirationDate] = useState<Date | null>(expirationDate);\n\n  // Update state when props change\n  useEffect(() => {\n    setTempPublicState(isPublic);\n  }, [isPublic]);\n\n  useEffect(() => {\n    setTempExpirationDate(expirationDate);\n  }, [expirationDate]);\n\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number): void => {\n    setActiveTab(newValue);\n  };\n\n  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleSelectUser = (user: User): void => {\n    setSelectedUsers((prev) => {\n      const isSelected = prev.some(u => u.id === user.id);\n      if (isSelected) {\n        return prev.filter(u => u.id !== user.id);\n      } else {\n        return [...prev, user];\n      }\n    });\n  };\n\n  const handlePermissionChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    setNewPermission(event.target.value as Permission);\n  };\n\n  const handleAddUsers = (): void => {\n    if (selectedUsers.length > 0 && onAddUser) {\n      onAddUser(selectedUsers, newPermission);\n      setSelectedUsers([]);\n      setSnackbar({\n        open: true,\n        message: `${selectedUsers.length} user(s) added successfully`,\n        severity: 'success'\n      });\n    }\n  };\n\n  const handleRemoveUser = (user: SharedUser): void => {\n    if (onRemoveUser) {\n      onRemoveUser(user);\n    }\n  };\n\n  const handleUserPermissionChange = (user: SharedUser, permission: Permission): void => {\n    if (onPermissionChange) {\n      onPermissionChange(user, permission);\n    }\n  };\n\n  const handlePublicToggle = (): void => {\n    setTempPublicState(!tempPublicState);\n  };\n\n  const handleExpirationDateChange = (date: Date | null): void => {\n    setTempExpirationDate(date);\n  };\n\n  const handleSavePublicSettings = (): void => {\n    if (onPublicToggle) {\n      onPublicToggle(tempPublicState);\n    }\n\n    if (onExpirationChange && tempPublicState) {\n      onExpirationChange(tempExpirationDate);\n    }\n  };\n\n  const copyToClipboard = (text: string): void => {\n    navigator.clipboard.writeText(text);\n    setSnackbar({\n      open: true,\n      message: 'Link copied to clipboard',\n      severity: 'success'\n    });\n  };\n\n  const handleCloseSnackbar = (): void => {\n    setSnackbar({\n      ...snackbar,\n      open: false\n    });\n  };\n\n  const filteredAvailableUsers = availableUsers.filter(user => {\n    // Exclude users that are already shared with\n    const isAlreadyShared = sharedUsers.some(sharedUser => sharedUser.id === user.id);\n    if (isAlreadyShared) return false;\n\n    // Filter by search term\n    if (!searchTerm) return true;\n\n    return (\n      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  });\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{ sx: { borderRadius: 2 } }}\n    >\n      <DialogTitle sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">Share Report</Typography>\n          <IconButton edge=\"end\" onClick={onClose} aria-label=\"close\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent sx={{ p: 0 }}>\n        <Box sx={{ p: 2, bgcolor: 'background.paper' }}>\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'medium' }}>\n            {report.title || report.name || 'Report'}\n          </Typography>\n          {report.description && (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {report.description}\n            </Typography>\n          )}\n        </Box>\n\n        <Tabs\n          value={activeTab}\n          onChange={handleTabChange}\n          variant=\"fullWidth\"\n          sx={{ borderBottom: 1, borderColor: 'divider' }}\n        >\n          <Tab label=\"Share with People\" />\n          <Tab label=\"Public Access\" />\n        </Tabs>\n\n        {/* Share with People Tab */}\n        {activeTab === 0 && (\n          <Box sx={{ p: 3 }}>\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 3 }}>\n                {error}\n              </Alert>\n            )}\n\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Add people\n            </Typography>\n\n            <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\n              <TextField\n                placeholder=\"Search users...\"\n                size=\"small\"\n                fullWidth\n                value={searchTerm}\n                onChange={handleSearchChange}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SearchIcon fontSize=\"small\" />\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <FormControl component=\"fieldset\">\n                <RadioGroup\n                  row\n                  value={newPermission}\n                  onChange={handlePermissionChange}\n                >\n                  <FormControlLabel value=\"view\" control={<Radio size=\"small\" />} label=\"View\" />\n                  <FormControlLabel value=\"edit\" control={<Radio size=\"small\" />} label=\"Edit\" />\n                  <FormControlLabel value=\"manage\" control={<Radio size=\"small\" />} label=\"Manage\" />\n                </RadioGroup>\n              </FormControl>\n              <Button\n                variant=\"contained\"\n                startIcon={<PersonAddIcon />}\n                onClick={handleAddUsers}\n                disabled={selectedUsers.length === 0 || loading}\n              >\n                Add\n              </Button>\n            </Box>\n\n            <Paper variant=\"outlined\" sx={{ maxHeight: 200, overflow: 'auto', mb: 3 }}>\n              {loading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n                  <CircularProgress size={24} />\n                </Box>\n              ) : filteredAvailableUsers.length === 0 ? (\n                <Box sx={{ p: 2, textAlign: 'center' }}>\n                  <Typography color=\"text.secondary\">\n                    {searchTerm ? 'No users found matching your search' : 'No users available to add'}\n                  </Typography>\n                </Box>\n              ) : (\n                <List disablePadding>\n                  {filteredAvailableUsers.map((user) => {\n                    const isSelected = selectedUsers.some(u => u.id === user.id);\n                    return (\n                      <ListItem\n                        key={user.id}\n                        divider\n                        dense\n                        button\n                        selected={isSelected}\n                        onClick={() => handleSelectUser(user)}\n                      >\n                        <ListItemText\n                          primary={user.name}\n                          secondary={user.email}\n                        />\n                        <Switch\n                          edge=\"end\"\n                          checked={isSelected}\n                          onChange={() => handleSelectUser(user)}\n                          size=\"small\"\n                        />\n                      </ListItem>\n                    );\n                  })}\n                </List>\n              )}\n            </Paper>\n\n            <Box sx={{ mb: 2 }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                People with access\n              </Typography>\n              <Paper variant=\"outlined\">\n                <List disablePadding>\n                  {sharedUsers.length === 0 ? (\n                    <ListItem divider dense>\n                      <ListItemText\n                        primary=\"No users have access to this report yet\"\n                        primaryTypographyProps={{ color: 'text.secondary', align: 'center' }}\n                      />\n                    </ListItem>\n                  ) : (\n                    sharedUsers.map((user) => (\n                      <ListItem key={user.id} divider dense>\n                        <ListItemText\n                          primary={user.name}\n                          secondary={user.email}\n                        />\n                        <FormControl size=\"small\" sx={{ minWidth: 100, mr: 1 }}>\n                          <select\n                            value={user.permission}\n                            onChange={(e) => handleUserPermissionChange(user, e.target.value as Permission)}\n                            style={{\n                              padding: '5px 10px',\n                              borderRadius: '4px',\n                              border: '1px solid #ccc'\n                            }}\n                          >\n                            <option value=\"view\">View</option>\n                            <option value=\"edit\">Edit</option>\n                            <option value=\"manage\">Manage</option>\n                          </select>\n                        </FormControl>\n                        <IconButton\n                          edge=\"end\"\n                          onClick={() => handleRemoveUser(user)}\n                          size=\"small\"\n                        >\n                          <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                      </ListItem>\n                    ))\n                  )}\n                </List>\n              </Paper>\n            </Box>\n          </Box>\n        )}\n\n        {/* Public Access Tab */}\n        {activeTab === 1 && (\n          <Box sx={{ p: 3 }}>\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 3 }}>\n                {error}\n              </Alert>\n            )}\n\n            <Box sx={{ mb: 3 }}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={tempPublicState}\n                    onChange={handlePublicToggle}\n                    disabled={loading}\n                  />\n                }\n                label={\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    {tempPublicState ? (\n                      <PublicIcon color=\"primary\" sx={{ mr: 1 }} />\n                    ) : (\n                      <LockIcon sx={{ mr: 1 }} />\n                    )}\n                    <Typography>\n                      {tempPublicState ? 'Public access enabled' : 'Private report'}\n                    </Typography>\n                  </Box>\n                }\n              />\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 4, mt: 0.5 }}>\n                {tempPublicState\n                  ? 'Anyone with the link can view this report without logging in'\n                  : 'Only users with explicit access can view this report'}\n              </Typography>\n            </Box>\n\n            {tempPublicState && (\n              <>\n                <Box sx={{ mb: 3 }}>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Public link\n                  </Typography>\n                  <TextField\n                    fullWidth\n                    value={publicUrl || 'Link will be generated when you save'}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    InputProps={{\n                      readOnly: true,\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <LinkIcon />\n                        </InputAdornment>\n                      ),\n                      endAdornment: publicUrl && (\n                        <InputAdornment position=\"end\">\n                          <Tooltip title=\"Copy link\">\n                            <IconButton\n                              edge=\"end\"\n                              onClick={() => copyToClipboard(publicUrl)}\n                              size=\"small\"\n                            >\n                              <ContentCopyIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Box>\n\n                <Box>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Link expiration\n                  </Typography>\n                  <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                      <FormControlLabel\n                        control={\n                          <Switch\n                            checked={!!tempExpirationDate}\n                            onChange={() => setTempExpirationDate(tempExpirationDate ? null : new Date(Date.now() + 7 * 24 * 60 * 60 * 1000))}\n                          />\n                        }\n                        label=\"Set expiration date\"\n                      />\n\n                      {tempExpirationDate && (\n                        <DatePicker\n                          label=\"Expiration date\"\n                          value={tempExpirationDate}\n                          onChange={handleExpirationDateChange}\n                          slotProps={{ textField: { size: 'small' } }}\n                          minDate={new Date()}\n                          disabled={loading}\n                        />\n                      )}\n                    </Box>\n                  </LocalizationProvider>\n\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                    {tempExpirationDate\n                      ? `The link will expire on ${tempExpirationDate.toLocaleDateString()}`\n                      : 'The link will not expire'}\n                  </Typography>\n                </Box>\n              </>\n            )}\n          </Box>\n        )}\n      </DialogContent>\n\n      <DialogActions sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\n        <Button onClick={onClose}>\n          Cancel\n        </Button>\n        {activeTab === 0 ? (\n          <Button onClick={onClose} variant=\"contained\">\n            Done\n          </Button>\n        ) : (\n          <Button\n            onClick={handleSavePublicSettings}\n            variant=\"contained\"\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Save Settings'}\n          </Button>\n        )}\n      </DialogActions>\n\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={handleCloseSnackbar}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity || 'info'}>\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Dialog>\n  );\n};\n\nexport default ReportShareDialog;\n","import React, { useState, ChangeEvent } from 'react';\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  FormControlLabel,\n  Switch,\n  TextField,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  FormHelperText,\n  Divider,\n  IconButton,\n  Grid,\n  Chip,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  Tooltip,\n  Alert,\n  CircularProgress,\n  SelectChangeEvent\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ScheduleIcon from '@mui/icons-material/Schedule';\nimport EmailIcon from '@mui/icons-material/Email';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport CloudDownloadIcon from '@mui/icons-material/CloudDownload';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddIcon from '@mui/icons-material/Add';\nimport EventIcon from '@mui/icons-material/Event';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport {\n  ReportScheduleDialogProps,\n  Schedule,\n  ScheduleFormErrors\n} from '../../types/scheduling';\n\n/**\n * ReportScheduleDialog component for scheduling automated report generation and delivery\n */\nconst ReportScheduleDialog: React.FC<ReportScheduleDialogProps> = ({\n  open,\n  onClose,\n  report = {},\n  schedules = [],\n  exportFormats = [\n    { id: 'pdf', name: 'PDF' },\n    { id: 'excel', name: 'Excel' },\n    { id: 'csv', name: 'CSV' }\n  ],\n  recipients = [],\n  onAddSchedule,\n  onUpdateSchedule,\n  onDeleteSchedule,\n  loading = false,\n  error = null\n}) => {\n  const [newSchedule, setNewSchedule] = useState<Schedule>({\n    frequency: 'daily',\n    weekday: 1, // Monday\n    monthDay: 1,\n    time: new Date(new Date().setHours(8, 0, 0, 0)), // 8:00 AM\n    exportFormat: 'pdf',\n    recipientIds: [],\n    includeEmail: false,\n    includeNotification: true,\n    active: true\n  });\n\n  const [errors, setErrors] = useState<ScheduleFormErrors>({});\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [editingId, setEditingId] = useState<string | null>(null);\n\n  const resetForm = (): void => {\n    setNewSchedule({\n      frequency: 'daily',\n      weekday: 1,\n      monthDay: 1,\n      time: new Date(new Date().setHours(8, 0, 0, 0)),\n      exportFormat: 'pdf',\n      recipientIds: [],\n      includeEmail: false,\n      includeNotification: true,\n      active: true\n    });\n    setErrors({});\n    setIsEditing(false);\n    setEditingId(null);\n  };\n\n  const handleClose = (): void => {\n    resetForm();\n    onClose();\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement> | SelectChangeEvent): void => {\n    const { name, value, checked, type } = event.target as HTMLInputElement;\n    setNewSchedule(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: undefined }));\n    }\n  };\n\n  const handleTimeChange = (time: Date | null): void => {\n    if (time) {\n      setNewSchedule(prev => ({\n        ...prev,\n        time\n      }));\n    }\n  };\n\n  const handleRecipientToggle = (recipientId: string): void => {\n    setNewSchedule(prev => {\n      const isSelected = prev.recipientIds.includes(recipientId);\n      let updatedRecipients: string[];\n\n      if (isSelected) {\n        updatedRecipients = prev.recipientIds.filter(id => id !== recipientId);\n      } else {\n        updatedRecipients = [...prev.recipientIds, recipientId];\n      }\n\n      return {\n        ...prev,\n        recipientIds: updatedRecipients\n      };\n    });\n\n    if (errors.recipientIds) {\n      setErrors(prev => ({ ...prev, recipientIds: undefined }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: ScheduleFormErrors = {};\n\n    if (!newSchedule.includeEmail && !newSchedule.includeNotification) {\n      newErrors.deliveryMethod = 'At least one delivery method must be selected';\n    }\n\n    if (newSchedule.includeEmail && newSchedule.recipientIds.length === 0) {\n      newErrors.recipientIds = 'At least one recipient must be selected for email delivery';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSaveSchedule = (): void => {\n    if (!validateForm()) return;\n\n    const scheduleData: Schedule = {\n      ...newSchedule,\n      id: isEditing ? editingId || undefined : undefined\n    };\n\n    if (isEditing && onUpdateSchedule) {\n      onUpdateSchedule(scheduleData);\n    } else if (onAddSchedule) {\n      onAddSchedule(scheduleData);\n    }\n\n    resetForm();\n  };\n\n  const handleEditSchedule = (schedule: Schedule): void => {\n    setNewSchedule({\n      frequency: schedule.frequency,\n      weekday: schedule.weekday,\n      monthDay: schedule.monthDay,\n      time: new Date(schedule.time),\n      exportFormat: schedule.exportFormat,\n      recipientIds: [...schedule.recipientIds],\n      includeEmail: schedule.includeEmail,\n      includeNotification: schedule.includeNotification,\n      active: schedule.active\n    });\n    setIsEditing(true);\n    setEditingId(schedule.id || null);\n  };\n\n  const handleDeleteSchedule = (scheduleId: string): void => {\n    if (onDeleteSchedule) {\n      onDeleteSchedule(scheduleId);\n    }\n  };\n\n  const getFrequencyText = (schedule: Schedule): string => {\n    switch (schedule.frequency) {\n      case 'daily':\n        return 'Every day';\n      case 'weekly':\n        const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        return `Every ${weekdays[schedule.weekday]}`;\n      case 'monthly':\n        return `Every month on day ${schedule.monthDay}`;\n      case 'quarterly':\n        return 'Every quarter';\n      case 'yearly':\n        return 'Every year';\n      default:\n        return 'Custom schedule';\n    }\n  };\n\n  const getTimeText = (time: Date | string): string => {\n    if (!time) return '';\n    const date = new Date(time);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const getDeliveryMethodText = (schedule: Schedule): string => {\n    const methods: string[] = [];\n    if (schedule.includeEmail) methods.push('Email');\n    if (schedule.includeNotification) methods.push('Notification');\n    return methods.join(' & ');\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{ sx: { borderRadius: 2 } }}\n    >\n      <DialogTitle sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <ScheduleIcon sx={{ mr: 1 }} />\n            <Typography variant=\"h6\">\n              {isEditing ? 'Edit Schedule' : 'Schedule Report'}\n            </Typography>\n          </Box>\n          <IconButton edge=\"end\" onClick={handleClose} aria-label=\"close\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent dividers>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'medium', mb: 1 }}>\n            {report.title || 'Report'}\n          </Typography>\n          {report.description && (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {report.description}\n            </Typography>\n          )}\n        </Box>\n\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Schedule Configuration\n          </Typography>\n\n          <Paper variant=\"outlined\" sx={{ p: 2 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel id=\"frequency-label\">Frequency</InputLabel>\n                  <Select\n                    labelId=\"frequency-label\"\n                    name=\"frequency\"\n                    value={newSchedule.frequency}\n                    onChange={handleInputChange}\n                    label=\"Frequency\"\n                    disabled={loading}\n                  >\n                    <MenuItem value=\"daily\">Daily</MenuItem>\n                    <MenuItem value=\"weekly\">Weekly</MenuItem>\n                    <MenuItem value=\"monthly\">Monthly</MenuItem>\n                    <MenuItem value=\"quarterly\">Quarterly</MenuItem>\n                    <MenuItem value=\"yearly\">Yearly</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {newSchedule.frequency === 'weekly' && (\n                <Grid item xs={12} sm={6}>\n                  <FormControl fullWidth>\n                    <InputLabel id=\"weekday-label\">Day of Week</InputLabel>\n                    <Select<number>\n                      labelId=\"weekday-label\"\n                      name=\"weekday\"\n                      value={newSchedule.weekday}\n                      onChange={(e) => {\n                        const event = {\n                          target: {\n                            name: 'weekday',\n                            value: Number(e.target.value),\n                            type: 'select'\n                          }\n                        } as unknown as React.ChangeEvent<HTMLInputElement>;\n                        handleInputChange(event);\n                      }}\n                      label=\"Day of Week\"\n                      disabled={loading}\n                    >\n                      <MenuItem value={1}>Monday</MenuItem>\n                      <MenuItem value={2}>Tuesday</MenuItem>\n                      <MenuItem value={3}>Wednesday</MenuItem>\n                      <MenuItem value={4}>Thursday</MenuItem>\n                      <MenuItem value={5}>Friday</MenuItem>\n                      <MenuItem value={6}>Saturday</MenuItem>\n                      <MenuItem value={0}>Sunday</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n              )}\n\n              {newSchedule.frequency === 'monthly' && (\n                <Grid item xs={12} sm={6}>\n                  <FormControl fullWidth>\n                    <InputLabel id=\"monthday-label\">Day of Month</InputLabel>\n                    <Select<number>\n                      labelId=\"monthday-label\"\n                      name=\"monthDay\"\n                      value={newSchedule.monthDay}\n                      onChange={(e) => {\n                        const event = {\n                          target: {\n                            name: 'monthDay',\n                            value: Number(e.target.value),\n                            type: 'select'\n                          }\n                        } as unknown as React.ChangeEvent<HTMLInputElement>;\n                        handleInputChange(event);\n                      }}\n                      label=\"Day of Month\"\n                      disabled={loading}\n                    >\n                      {Array.from({ length: 31 }, (_, i) => i + 1).map(day => (\n                        <MenuItem key={day} value={day}>{day}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              )}\n\n              <Grid item xs={12} sm={6}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <TimePicker\n                    label=\"Time\"\n                    value={newSchedule.time}\n                    onChange={handleTimeChange}\n                    slotProps={{ textField: { fullWidth: true } }}\n                    disabled={loading}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel id=\"export-format-label\">Export Format</InputLabel>\n                  <Select\n                    labelId=\"export-format-label\"\n                    name=\"exportFormat\"\n                    value={newSchedule.exportFormat}\n                    onChange={handleInputChange}\n                    label=\"Export Format\"\n                    disabled={loading}\n                  >\n                    {exportFormats.map(format => (\n                      <MenuItem key={format.id} value={format.id}>\n                        {format.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Delivery Methods\n                </Typography>\n                <Box sx={{ display: 'flex', gap: 2 }}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={newSchedule.includeEmail}\n                        onChange={handleInputChange}\n                        name=\"includeEmail\"\n                        disabled={loading}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <EmailIcon fontSize=\"small\" sx={{ mr: 0.5 }} />\n                        <Typography variant=\"body2\">Email</Typography>\n                      </Box>\n                    }\n                  />\n\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={newSchedule.includeNotification}\n                        onChange={handleInputChange}\n                        name=\"includeNotification\"\n                        disabled={loading}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <NotificationsIcon fontSize=\"small\" sx={{ mr: 0.5 }} />\n                        <Typography variant=\"body2\">In-app Notification</Typography>\n                      </Box>\n                    }\n                  />\n                </Box>\n                {errors.deliveryMethod && (\n                  <FormHelperText error>{errors.deliveryMethod}</FormHelperText>\n                )}\n              </Grid>\n\n              {newSchedule.includeEmail && (\n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Recipients\n                  </Typography>\n                  <Paper variant=\"outlined\" sx={{ p: 1, maxHeight: 200, overflow: 'auto' }}>\n                    <List dense>\n                      {recipients.length === 0 ? (\n                        <ListItem>\n                          <ListItemText primary=\"No recipients available\" primaryTypographyProps={{ color: 'text.secondary' }} />\n                        </ListItem>\n                      ) : (\n                        recipients.map(recipient => {\n                          const isSelected = newSchedule.recipientIds.includes(recipient.id);\n                          return (\n                            <ListItem\n                              key={recipient.id}\n                              button\n                              onClick={() => handleRecipientToggle(recipient.id)}\n                              selected={isSelected}\n                            >\n                              <ListItemText\n                                primary={recipient.name}\n                                secondary={recipient.email}\n                              />\n                              <Switch\n                                edge=\"end\"\n                                checked={isSelected}\n                                onChange={() => handleRecipientToggle(recipient.id)}\n                                disabled={loading}\n                              />\n                            </ListItem>\n                          );\n                        })\n                      )}\n                    </List>\n                  </Paper>\n                  {errors.recipientIds && (\n                    <FormHelperText error>{errors.recipientIds}</FormHelperText>\n                  )}\n                </Grid>\n              )}\n            </Grid>\n          </Paper>\n        </Box>\n\n        <Divider sx={{ my: 3 }} />\n\n        <Box>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Existing Schedules\n          </Typography>\n\n          {schedules.length === 0 ? (\n            <Paper variant=\"outlined\" sx={{ p: 2, textAlign: 'center' }}>\n              <Typography color=\"text.secondary\">\n                No schedules configured yet\n              </Typography>\n            </Paper>\n          ) : (\n            <Paper variant=\"outlined\">\n              <List>\n                {schedules.map((schedule) => (\n                  <ListItem key={schedule.id} divider>\n                    <ListItemIcon>\n                      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                        <EventIcon color={schedule.active ? 'primary' : 'disabled'} />\n                        <Typography variant=\"caption\" color={schedule.active ? 'primary' : 'text.disabled'}>\n                          {getTimeText(schedule.time)}\n                        </Typography>\n                      </Box>\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={getFrequencyText(schedule)}\n                      secondary={\n                        <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', gap: 1, mt: 0.5 }}>\n                          <Chip\n                            size=\"small\"\n                            label={getDeliveryMethodText(schedule)}\n                            icon={schedule.includeEmail ? <EmailIcon fontSize=\"small\" /> : <NotificationsIcon fontSize=\"small\" />}\n                          />\n                          <Chip\n                            size=\"small\"\n                            label={exportFormats.find(f => f.id === schedule.exportFormat)?.name || schedule.exportFormat}\n                            icon={<CloudDownloadIcon fontSize=\"small\" />}\n                          />\n                          {schedule.includeEmail && (\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {schedule.recipientIds.length} recipient{schedule.recipientIds.length !== 1 ? 's' : ''}\n                            </Typography>\n                          )}\n                        </Box>\n                      }\n                    />\n                    <ListItemSecondaryAction>\n                      <Tooltip title=\"Edit\">\n                        <IconButton\n                          edge=\"end\"\n                          onClick={() => handleEditSchedule(schedule)}\n                          disabled={loading}\n                          sx={{ mr: 1 }}\n                        >\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Delete\">\n                        <IconButton\n                          edge=\"end\"\n                          onClick={() => handleDeleteSchedule(schedule.id as string)}\n                          disabled={loading}\n                          color=\"error\"\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                ))}\n              </List>\n            </Paper>\n          )}\n        </Box>\n      </DialogContent>\n\n      <DialogActions sx={{ px: 3, py: 2 }}>\n        <Button onClick={handleClose} disabled={loading}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSaveSchedule}\n          disabled={loading}\n          startIcon={loading ? <CircularProgress size={20} /> : isEditing ? <EditIcon /> : <AddIcon />}\n        >\n          {isEditing ? 'Update Schedule' : 'Add Schedule'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ReportScheduleDialog;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  TextField,\n  IconButton,\n  Divider,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  FormControlLabel,\n  Switch,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Grid,\n  SelectChangeEvent\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\nimport EditIcon from '@mui/icons-material/Edit';\nimport FileCopyIcon from '@mui/icons-material/FileCopy';\nimport SaveIcon from '@mui/icons-material/Save';\nimport ViewListIcon from '@mui/icons-material/ViewList';\n// @ts-ignore\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport {\n  ReportTemplateProps,\n  Template,\n  Section,\n  Visualization,\n  VisualizationType\n} from '../../types/reportTemplate';\n\n/**\n * ReportTemplate component for creating and customizing report templates\n */\nconst ReportTemplate: React.FC<ReportTemplateProps> = ({\n  template = {\n    id: '',\n    name: '',\n    description: '',\n    sections: [],\n    dataSource: null,\n    filters: [],\n    isPublic: false,\n    createdBy: '',\n    createdAt: null,\n    updatedAt: null\n  },\n  onSave,\n  onCancel,\n  availableVisualizations = [],\n  availableDataSources = []\n}) => {\n  const [currentTemplate, setCurrentTemplate] = useState<Template>({ ...template });\n  const [currentSection, setCurrentSection] = useState<Section | null>(null);\n  const [sectionDialogOpen, setSectionDialogOpen] = useState<boolean>(false);\n  const [visualizationDialogOpen, setVisualizationDialogOpen] = useState<boolean>(false);\n\n  // Handle template field changes\n  const handleTemplateChange = (field: keyof Template, value: any): void => {\n    setCurrentTemplate({\n      ...currentTemplate,\n      [field]: value\n    });\n  };\n\n  // Handle opening the add/edit section dialog\n  const handleOpenSectionDialog = (section: Section | null = null): void => {\n    setCurrentSection(section || {\n      id: `section_${Date.now()}`,\n      title: '',\n      description: '',\n      visualizations: [],\n      expanded: true\n    });\n    setSectionDialogOpen(true);\n  };\n\n  // Handle closing the section dialog\n  const handleCloseSectionDialog = (): void => {\n    setSectionDialogOpen(false);\n    setCurrentSection(null);\n  };\n\n  // Handle saving a section\n  const handleSaveSection = (): void => {\n    if (!currentSection) return;\n\n    const sections = [...currentTemplate.sections];\n\n    // Find if we're updating an existing section\n    const existingIndex = sections.findIndex(s => s.id === currentSection.id);\n\n    if (existingIndex >= 0) {\n      // Update existing section\n      sections[existingIndex] = { ...currentSection };\n    } else {\n      // Add new section\n      sections.push({ ...currentSection });\n    }\n\n    setCurrentTemplate({\n      ...currentTemplate,\n      sections\n    });\n\n    handleCloseSectionDialog();\n  };\n\n  // Handle deleting a section\n  const handleDeleteSection = (sectionId: string): void => {\n    setCurrentTemplate({\n      ...currentTemplate,\n      sections: currentTemplate.sections.filter(s => s.id !== sectionId)\n    });\n  };\n\n  // Handle opening visualization dialog\n  const handleOpenVisualizationDialog = (): void => {\n    setVisualizationDialogOpen(true);\n  };\n\n  // Handle closing visualization dialog\n  const handleCloseVisualizationDialog = (): void => {\n    setVisualizationDialogOpen(false);\n  };\n\n  // Handle adding a visualization to a section\n  const handleAddVisualization = (visualization: VisualizationType): void => {\n    if (!currentSection) return;\n\n    setCurrentSection({\n      ...currentSection,\n      visualizations: [\n        ...currentSection.visualizations,\n        {\n          id: `viz_${Date.now()}`,\n          type: visualization.type,\n          title: visualization.title,\n          config: { ...visualization.defaultConfig },\n          dataField: '',\n          width: 12 // Default to full width (12 columns in Grid)\n        }\n      ]\n    });\n    setVisualizationDialogOpen(false);\n  };\n\n  // Handle removing a visualization from a section\n  const handleRemoveVisualization = (vizId: string): void => {\n    if (!currentSection) return;\n\n    setCurrentSection({\n      ...currentSection,\n      visualizations: currentSection.visualizations.filter(v => v.id !== vizId)\n    });\n  };\n\n  // Handle visualization config change\n  const handleVisualizationChange = (vizId: string, field: keyof Visualization, value: any): void => {\n    if (!currentSection) return;\n\n    setCurrentSection({\n      ...currentSection,\n      visualizations: currentSection.visualizations.map(v =>\n        v.id === vizId ? { ...v, [field]: value } : v\n      )\n    });\n  };\n\n  // Handle on drag end for reordering sections\n  const handleDragEnd = (result: DropResult): void => {\n    if (!result.destination) return;\n\n    const items = Array.from(currentTemplate.sections);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    setCurrentTemplate({\n      ...currentTemplate,\n      sections: items\n    });\n  };\n\n  // Handle saving the entire template\n  const handleSaveTemplate = (): void => {\n    if (onSave) {\n      onSave({\n        ...currentTemplate,\n        updatedAt: new Date()\n      });\n    }\n  };\n\n  return (\n    <Box>\n      <Paper elevation={0} variant=\"outlined\" sx={{ p: 3, mb: 3 }}>\n        <Typography variant=\"h5\" gutterBottom>\n          {currentTemplate.id ? 'Edit Report Template' : 'Create New Report Template'}\n        </Typography>\n\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              label=\"Template Name\"\n              value={currentTemplate.name}\n              onChange={(e) => handleTemplateChange('name', e.target.value)}\n              fullWidth\n              required\n              margin=\"normal\"\n            />\n          </Grid>\n\n          <Grid item xs={12} sm={6}>\n            <FormControl fullWidth margin=\"normal\">\n              <InputLabel>Data Source</InputLabel>\n              <Select\n                value={currentTemplate.dataSource || ''}\n                onChange={(e: SelectChangeEvent) => handleTemplateChange('dataSource', e.target.value)}\n                label=\"Data Source\"\n                required\n              >\n                <MenuItem value=\"\"><em>Select a data source</em></MenuItem>\n                {availableDataSources.map((source) => (\n                  <MenuItem key={source.id} value={source.id}>\n                    {source.name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextField\n              label=\"Description\"\n              value={currentTemplate.description}\n              onChange={(e) => handleTemplateChange('description', e.target.value)}\n              fullWidth\n              multiline\n              rows={2}\n              margin=\"normal\"\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={currentTemplate.isPublic}\n                  onChange={(e) => handleTemplateChange('isPublic', e.target.checked)}\n                  color=\"primary\"\n                />\n              }\n              label=\"Make this report template available to all users\"\n            />\n          </Grid>\n        </Grid>\n      </Paper>\n\n      <Paper elevation={0} variant=\"outlined\" sx={{ p: 3, mb: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h6\">\n            Report Sections\n          </Typography>\n\n          <Button\n            variant=\"outlined\"\n            startIcon={<AddIcon />}\n            onClick={() => handleOpenSectionDialog()}\n          >\n            Add Section\n          </Button>\n        </Box>\n\n        <Divider sx={{ mb: 2 }} />\n\n        {currentTemplate.sections.length === 0 ? (\n          <Box sx={{ textAlign: 'center', py: 4 }}>\n            <ViewListIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n            <Typography color=\"text.secondary\">\n              No sections added yet. Add a section to start building your report.\n            </Typography>\n          </Box>\n        ) : (\n          <DragDropContext onDragEnd={handleDragEnd}>\n            <Droppable droppableId=\"sections\">\n              {(provided: any) => (\n                <List {...provided.droppableProps} ref={provided.innerRef}>\n                  {currentTemplate.sections.map((section, index) => (\n                    <Draggable key={section.id} draggableId={section.id} index={index}>\n                      {(provided: any) => (\n                        <ListItem\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          divider\n                          sx={{\n                            bgcolor: 'background.paper',\n                            borderRadius: 1,\n                            mb: 1,\n                            border: '1px solid',\n                            borderColor: 'divider'\n                          }}\n                        >\n                          <Box {...provided.dragHandleProps} sx={{ mr: 1 }}>\n                            <DragIndicatorIcon color=\"action\" />\n                          </Box>\n\n                          <ListItemText\n                            primary={section.title}\n                            secondary={\n                              <>\n                                {section.description && (\n                                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                                    {section.description}\n                                  </Typography>\n                                )}\n                                <Typography variant=\"caption\" color=\"text.secondary\">\n                                  {section.visualizations.length} visualization{section.visualizations.length !== 1 ? 's' : ''}\n                                </Typography>\n                              </>\n                            }\n                          />\n\n                          <ListItemSecondaryAction>\n                            <IconButton edge=\"end\" onClick={() => handleOpenSectionDialog(section)}>\n                              <EditIcon />\n                            </IconButton>\n                            <IconButton edge=\"end\" onClick={() => handleDeleteSection(section.id)}>\n                              <DeleteIcon />\n                            </IconButton>\n                          </ListItemSecondaryAction>\n                        </ListItem>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </List>\n              )}\n            </Droppable>\n          </DragDropContext>\n        )}\n      </Paper>\n\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mt: 2 }}>\n        <Button variant=\"outlined\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          startIcon={<SaveIcon />}\n          onClick={handleSaveTemplate}\n          disabled={!currentTemplate.name || !currentTemplate.dataSource}\n        >\n          Save Template\n        </Button>\n      </Box>\n\n      {/* Section Dialog */}\n      <Dialog\n        open={sectionDialogOpen}\n        onClose={handleCloseSectionDialog}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          {currentSection && currentSection.title ? `Edit Section: ${currentSection.title}` : 'Add New Section'}\n        </DialogTitle>\n\n        <DialogContent dividers>\n          <TextField\n            label=\"Section Title\"\n            value={currentSection?.title || ''}\n            onChange={(e) => setCurrentSection(currentSection ? { ...currentSection, title: e.target.value } : null)}\n            fullWidth\n            required\n            margin=\"normal\"\n          />\n\n          <TextField\n            label=\"Section Description\"\n            value={currentSection?.description || ''}\n            onChange={(e) => setCurrentSection(currentSection ? { ...currentSection, description: e.target.value } : null)}\n            fullWidth\n            multiline\n            rows={2}\n            margin=\"normal\"\n          />\n\n          <Box sx={{ mt: 3, mb: 2 }}>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Visualizations\n            </Typography>\n\n            <List>\n              {currentSection?.visualizations.map((viz, index) => (\n                <ListItem\n                  key={viz.id}\n                  divider={index < (currentSection?.visualizations.length || 0) - 1}\n                  sx={{ bgcolor: 'action.hover', borderRadius: 1, mb: 1 }}\n                >\n                  <ListItemText\n                    primary={viz.title}\n                    secondary={`Type: ${viz.type}`}\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton edge=\"end\" onClick={() => handleRemoveVisualization(viz.id)}>\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n\n            <Button\n              variant=\"outlined\"\n              startIcon={<AddIcon />}\n              onClick={handleOpenVisualizationDialog}\n              sx={{ mt: 2 }}\n            >\n              Add Visualization\n            </Button>\n          </Box>\n        </DialogContent>\n\n        <DialogActions>\n          <Button onClick={handleCloseSectionDialog}>Cancel</Button>\n          <Button\n            onClick={handleSaveSection}\n            variant=\"contained\"\n            disabled={!currentSection?.title}\n          >\n            Save Section\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Visualization Selection Dialog */}\n      <Dialog\n        open={visualizationDialogOpen}\n        onClose={handleCloseVisualizationDialog}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Select Visualization\n        </DialogTitle>\n\n        <DialogContent dividers>\n          <Grid container spacing={2}>\n            {availableVisualizations.map((viz) => (\n              <Grid item xs={12} sm={6} md={4} key={viz.type}>\n                <Paper\n                  elevation={0}\n                  variant=\"outlined\"\n                  sx={{\n                    p: 2,\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    cursor: 'pointer',\n                    '&:hover': { borderColor: 'primary.main' }\n                  }}\n                  onClick={() => handleAddVisualization(viz)}\n                >\n                  <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>\n                    {viz.icon}\n                  </Box>\n                  <Typography variant=\"subtitle1\" align=\"center\" gutterBottom>\n                    {viz.title}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n                    {viz.description}\n                  </Typography>\n                </Paper>\n              </Grid>\n            ))}\n          </Grid>\n        </DialogContent>\n\n        <DialogActions>\n          <Button onClick={handleCloseVisualizationDialog}>Cancel</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ReportTemplate;","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  IconButton,\n  Divider,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Tooltip,\n  Alert,\n  Chip,\n  TextField,\n  SelectChangeEvent\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport SortIcon from '@mui/icons-material/Sort';\nimport GroupWorkIcon from '@mui/icons-material/GroupWork';\nimport ViewColumnIcon from '@mui/icons-material/ViewColumn';\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { CommonProps } from '../../types/common';\n\n// Type definitions\nexport interface ColumnInfo {\n  id: string;\n  name: string;\n  type: string;\n  description?: string;\n  isSortable?: boolean;\n  isGroupable?: boolean;\n  isAggregatable?: boolean;\n  aggregationFunctions?: string[];\n}\n\nexport interface SelectedColumn {\n  id: string;\n  name: string;\n  type: string;\n  width: string;\n  visible: boolean;\n  aggregation: string | null;\n}\n\nexport interface SortConfig {\n  columnId: string;\n  direction: 'asc' | 'desc';\n}\n\nexport interface GroupConfig {\n  columnId: string;\n}\n\nexport interface DataSource {\n  schema?: ColumnInfo[];\n  [key: string]: any;\n}\n\nexport interface ReportColumnSelectorProps extends CommonProps {\n  dataSource?: DataSource;\n  selectedColumns?: SelectedColumn[];\n  onChange?: (columns: SelectedColumn[]) => void;\n  sortBy?: SortConfig | null;\n  onSortChange?: (sortConfig: SortConfig | null) => void;\n  groupBy?: GroupConfig | null;\n  onGroupChange?: (groupConfig: GroupConfig | null) => void;\n}\n\n/**\n * Component for selecting columns to include in a report and configuring sorting and grouping\n */\nconst ReportColumnSelector: React.FC<ReportColumnSelectorProps> = ({\n  dataSource,\n  selectedColumns = [],\n  onChange,\n  sortBy,\n  onSortChange,\n  groupBy,\n  onGroupChange\n}) => {\n  // State for available columns from the data source\n  const [availableColumns, setAvailableColumns] = useState<ColumnInfo[]>([]);\n\n  // Load available columns from data source\n  useEffect(() => {\n    if (dataSource?.schema) {\n      // Convert schema to available columns\n      const columns = dataSource.schema.map(field => ({\n        id: field.id,\n        name: field.name,\n        type: field.type,\n        description: field.description,\n        isSortable: (field as any).sortable !== false,\n        isGroupable: (field as any).groupable !== false,\n        isAggregatable: (field as any).aggregatable === true,\n        aggregationFunctions: (field as any).aggregationFunctions || []\n      }));\n\n      setAvailableColumns(columns);\n\n      // If no columns are selected and we have available columns, select the first few by default\n      if (selectedColumns.length === 0 && columns.length > 0 && onChange) {\n        const defaultColumns = columns.slice(0, Math.min(5, columns.length)).map(col => ({\n          id: col.id,\n          name: col.name,\n          type: col.type,\n          width: 'auto',\n          visible: true,\n          aggregation: null\n        }));\n\n        onChange(defaultColumns);\n      }\n    }\n  }, [dataSource, onChange, selectedColumns.length]);\n\n  // Add a column to the selection\n  const handleAddColumn = (column: ColumnInfo): void => {\n    // Check if column is already selected\n    if (selectedColumns.some(col => col.id === column.id) || !onChange) {\n      return;\n    }\n\n    const newColumn: SelectedColumn = {\n      id: column.id,\n      name: column.name,\n      type: column.type,\n      width: 'auto',\n      visible: true,\n      aggregation: null\n    };\n\n    onChange([...selectedColumns, newColumn]);\n  };\n\n  // Remove a column from the selection\n  const handleRemoveColumn = (columnId: string): void => {\n    if (!onChange) return;\n\n    const updatedColumns = selectedColumns.filter(col => col.id !== columnId);\n    onChange(updatedColumns);\n\n    // If the removed column was used for sorting, clear sorting\n    if (sortBy?.columnId === columnId && onSortChange) {\n      onSortChange(null);\n    }\n\n    // If the removed column was used for grouping, clear grouping\n    if (groupBy?.columnId === columnId && onGroupChange) {\n      onGroupChange(null);\n    }\n  };\n\n  // Move a column up in the order\n  const handleMoveUp = (index: number): void => {\n    if (index <= 0 || !onChange) return;\n\n    const updatedColumns = [...selectedColumns];\n    [updatedColumns[index], updatedColumns[index - 1]] = [updatedColumns[index - 1], updatedColumns[index]];\n\n    onChange(updatedColumns);\n  };\n\n  // Move a column down in the order\n  const handleMoveDown = (index: number): void => {\n    if (index >= selectedColumns.length - 1 || !onChange) return;\n\n    const updatedColumns = [...selectedColumns];\n    [updatedColumns[index], updatedColumns[index + 1]] = [updatedColumns[index + 1], updatedColumns[index]];\n\n    onChange(updatedColumns);\n  };\n\n  // Update column width\n  const handleWidthChange = (columnId: string, width: string): void => {\n    if (!onChange) return;\n\n    const updatedColumns = selectedColumns.map(col => {\n      if (col.id === columnId) {\n        return { ...col, width };\n      }\n      return col;\n    });\n\n    onChange(updatedColumns);\n  };\n\n  // Update column visibility\n  const handleVisibilityChange = (columnId: string, visible: boolean): void => {\n    if (!onChange) return;\n\n    const updatedColumns = selectedColumns.map(col => {\n      if (col.id === columnId) {\n        return { ...col, visible };\n      }\n      return col;\n    });\n\n    onChange(updatedColumns);\n  };\n\n  // Update column aggregation\n  const handleAggregationChange = (columnId: string, aggregation: string | null): void => {\n    if (!onChange) return;\n\n    const updatedColumns = selectedColumns.map(col => {\n      if (col.id === columnId) {\n        return { ...col, aggregation };\n      }\n      return col;\n    });\n\n    onChange(updatedColumns);\n  };\n\n  // Handle sort configuration change\n  const handleSortChange = (columnId: string, direction: 'asc' | 'desc'): void => {\n    if (!onSortChange) return;\n\n    if (!columnId) {\n      onSortChange(null);\n      return;\n    }\n\n    onSortChange({\n      columnId,\n      direction\n    });\n  };\n\n  // Handle group by configuration change\n  const handleGroupChange = (columnId: string): void => {\n    if (!onGroupChange) return;\n\n    if (!columnId) {\n      onGroupChange(null);\n      return;\n    }\n\n    onGroupChange({\n      columnId\n    });\n  };\n\n  // Get column info from available columns\n  const getColumnInfo = (columnId: string): ColumnInfo => {\n    return availableColumns.find(col => col.id === columnId) || { id: '', name: '', type: '' };\n  };\n\n  // Get sortable columns\n  const getSortableColumns = (): SelectedColumn[] => {\n    return selectedColumns.filter(col => {\n      const columnInfo = getColumnInfo(col.id);\n      return columnInfo.isSortable;\n    });\n  };\n\n  // Get groupable columns\n  const getGroupableColumns = (): SelectedColumn[] => {\n    return selectedColumns.filter(col => {\n      const columnInfo = getColumnInfo(col.id);\n      return columnInfo.isGroupable;\n    });\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Select Columns\n      </Typography>\n\n      {!dataSource && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          Please select a data source first.\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        {/* Available columns */}\n        <Grid item xs={12} md={4}>\n          <Paper variant=\"outlined\" sx={{ height: '100%' }}>\n            <Box sx={{ p: 2 }}>\n              <Typography variant=\"subtitle1\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <ViewColumnIcon sx={{ mr: 1 }} />\n                Available Columns\n              </Typography>\n            </Box>\n            <Divider />\n\n            {availableColumns.length === 0 ? (\n              <Box sx={{ p: 2, textAlign: 'center' }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No columns available in the selected data source.\n                </Typography>\n              </Box>\n            ) : (\n              <List dense sx={{ maxHeight: 400, overflow: 'auto' }}>\n                {availableColumns.map((column) => (\n                  <ListItem\n                    key={column.id}\n                    secondaryAction={\n                      selectedColumns.some(col => col.id === column.id) ? (\n                        <Chip size=\"small\" label=\"Added\" color=\"primary\" variant=\"outlined\" />\n                      ) : (\n                        <IconButton\n                          edge=\"end\"\n                          size=\"small\"\n                          onClick={() => handleAddColumn(column)}\n                          disabled={selectedColumns.some(col => col.id === column.id)}\n                        >\n                          <AddIcon />\n                        </IconButton>\n                      )\n                    }\n                  >\n                    <ListItemText\n                      primary={\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          {column.name}\n                          {column.description && (\n                            <Tooltip title={column.description} arrow>\n                              <InfoOutlinedIcon fontSize=\"small\" color=\"action\" sx={{ ml: 1 }} />\n                            </Tooltip>\n                          )}\n                        </Box>\n                      }\n                      secondary={column.type}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Selected columns */}\n        <Grid item xs={12} md={8}>\n          <Paper variant=\"outlined\">\n            <Box sx={{ p: 2 }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Selected Columns ({selectedColumns.length})\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Drag to reorder columns. Configure visibility, width, and aggregation functions.\n              </Typography>\n            </Box>\n            <Divider />\n\n            {selectedColumns.length === 0 ? (\n              <Box sx={{ p: 3, textAlign: 'center' }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No columns selected yet. Add columns from the available list.\n                </Typography>\n              </Box>\n            ) : (\n              <List sx={{ maxHeight: 400, overflow: 'auto' }}>\n                {selectedColumns.map((column, index) => {\n                  const columnInfo = getColumnInfo(column.id);\n\n                  return (\n                    <React.Fragment key={column.id}>\n                      <ListItem>\n                        <ListItemIcon>\n                          <DragIndicatorIcon color=\"action\" />\n                        </ListItemIcon>\n\n                        <ListItemText\n                          primary={\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              {column.name}\n                              {column.aggregation && (\n                                <Chip\n                                  label={column.aggregation}\n                                  size=\"small\"\n                                  color=\"secondary\"\n                                  sx={{ ml: 1 }}\n                                />\n                              )}\n                            </Box>\n                          }\n                          secondary={\n                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 1 }}>\n                              <FormControlLabel\n                                control={\n                                  <Switch\n                                    checked={column.visible}\n                                    onChange={(e) => handleVisibilityChange(column.id, e.target.checked)}\n                                    size=\"small\"\n                                  />\n                                }\n                                label=\"Visible\"\n                              />\n\n                              <FormControl size=\"small\" sx={{ minWidth: 100 }}>\n                                <InputLabel id={`width-label-${column.id}`}>Width</InputLabel>\n                                <Select\n                                  labelId={`width-label-${column.id}`}\n                                  value={column.width}\n                                  label=\"Width\"\n                                  onChange={(e) => handleWidthChange(column.id, e.target.value as string)}\n                                >\n                                  <MenuItem value=\"auto\">Auto</MenuItem>\n                                  <MenuItem value=\"small\">Small</MenuItem>\n                                  <MenuItem value=\"medium\">Medium</MenuItem>\n                                  <MenuItem value=\"large\">Large</MenuItem>\n                                </Select>\n                              </FormControl>\n\n                              {columnInfo.isAggregatable && (\n                                <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                                  <InputLabel id={`aggregation-label-${column.id}`}>Aggregation</InputLabel>\n                                  <Select\n                                    labelId={`aggregation-label-${column.id}`}\n                                    value={column.aggregation || ''}\n                                    label=\"Aggregation\"\n                                    onChange={(e) => handleAggregationChange(column.id, e.target.value as string || null)}\n                                  >\n                                    <MenuItem value=\"\">None</MenuItem>\n                                    {columnInfo.aggregationFunctions && columnInfo.aggregationFunctions.length > 0 ? (\n                                      columnInfo.aggregationFunctions.map(func => (\n                                        <MenuItem key={func} value={func}>\n                                          {func}\n                                        </MenuItem>\n                                      ))\n                                    ) : (\n                                      <>\n                                        <MenuItem value=\"sum\">Sum</MenuItem>\n                                        <MenuItem value=\"avg\">Average</MenuItem>\n                                        <MenuItem value=\"min\">Minimum</MenuItem>\n                                        <MenuItem value=\"max\">Maximum</MenuItem>\n                                        <MenuItem value=\"count\">Count</MenuItem>\n                                      </>\n                                    )}\n                                  </Select>\n                                </FormControl>\n                              )}\n                            </Box>\n                          }\n                        />\n\n                        <ListItemSecondaryAction>\n                          <IconButton\n                            edge=\"end\"\n                            size=\"small\"\n                            onClick={() => handleMoveUp(index)}\n                            disabled={index === 0}\n                            sx={{ mr: 1 }}\n                          >\n                            <ArrowUpwardIcon fontSize=\"small\" />\n                          </IconButton>\n                          <IconButton\n                            edge=\"end\"\n                            size=\"small\"\n                            onClick={() => handleMoveDown(index)}\n                            disabled={index === selectedColumns.length - 1}\n                            sx={{ mr: 1 }}\n                          >\n                            <ArrowDownwardIcon fontSize=\"small\" />\n                          </IconButton>\n                          <IconButton\n                            edge=\"end\"\n                            size=\"small\"\n                            onClick={() => handleRemoveColumn(column.id)}\n                            color=\"error\"\n                          >\n                            <DeleteIcon fontSize=\"small\" />\n                          </IconButton>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                      <Divider variant=\"inset\" component=\"li\" />\n                    </React.Fragment>\n                  );\n                })}\n              </List>\n            )}\n          </Paper>\n\n          {/* Sorting and Grouping */}\n          <Grid container spacing={2} sx={{ mt: 2 }}>\n            <Grid item xs={12} md={6}>\n              <Paper variant=\"outlined\" sx={{ p: 2 }}>\n                <Typography variant=\"subtitle1\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                  <SortIcon sx={{ mr: 1 }} />\n                  Sort By\n                </Typography>\n\n                <Box sx={{ mt: 2 }}>\n                  <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                      <FormControl fullWidth size=\"small\">\n                        <InputLabel id=\"sort-column-label\">Column</InputLabel>\n                        <Select\n                          labelId=\"sort-column-label\"\n                          value={sortBy?.columnId || ''}\n                          label=\"Column\"\n                          onChange={(e) => handleSortChange(e.target.value as string, sortBy?.direction || 'asc')}\n                        >\n                          <MenuItem value=\"\">None</MenuItem>\n                          {getSortableColumns().map((column) => (\n                            <MenuItem key={column.id} value={column.id}>\n                              {column.name}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Grid>\n\n                    <Grid item xs={4}>\n                      <FormControl fullWidth size=\"small\" disabled={!sortBy?.columnId}>\n                        <InputLabel id=\"sort-direction-label\">Direction</InputLabel>\n                        <Select\n                          labelId=\"sort-direction-label\"\n                          value={sortBy?.direction || 'asc'}\n                          label=\"Direction\"\n                          onChange={(e) => handleSortChange(sortBy?.columnId || '', e.target.value as 'asc' | 'desc')}\n                        >\n                          <MenuItem value=\"asc\">Ascending</MenuItem>\n                          <MenuItem value=\"desc\">Descending</MenuItem>\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  </Grid>\n                </Box>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <Paper variant=\"outlined\" sx={{ p: 2 }}>\n                <Typography variant=\"subtitle1\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                  <GroupWorkIcon sx={{ mr: 1 }} />\n                  Group By\n                </Typography>\n\n                <Box sx={{ mt: 2 }}>\n                  <FormControl fullWidth size=\"small\">\n                    <InputLabel id=\"group-column-label\">Column</InputLabel>\n                    <Select\n                      labelId=\"group-column-label\"\n                      value={groupBy?.columnId || ''}\n                      label=\"Column\"\n                      onChange={(e) => handleGroupChange(e.target.value as string)}\n                    >\n                      <MenuItem value=\"\">None</MenuItem>\n                      {getGroupableColumns().map((column) => (\n                        <MenuItem key={column.id} value={column.id}>\n                          {column.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ReportColumnSelector;\n","import React from 'react';\nimport {\n  Box,\n  TextField,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  CardActionArea,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Chip,\n  Avatar,\n  Divider\n} from '@mui/material';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport StorageIcon from '@mui/icons-material/Storage';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport { CommonProps } from '../../types/common';\n\n// Type definitions\nexport interface DataSource {\n  id: string;\n  name: string;\n  type: string;\n  description?: string;\n  tags?: string[];\n  schema?: any[];\n}\n\nexport interface ReportDataSourceSelectorProps extends CommonProps {\n  selected?: DataSource | null;\n  availableDataSources?: DataSource[];\n  onChange?: (source: DataSource) => void;\n  name?: string;\n  description?: string;\n  onNameChange?: (name: string) => void;\n  onDescriptionChange?: (description: string) => void;\n}\n\n/**\n * Component for selecting a data source for a report and configuring basic report information\n */\nconst ReportDataSourceSelector: React.FC<ReportDataSourceSelectorProps> = ({\n  selected,\n  availableDataSources = [],\n  onChange,\n  name = '',\n  description = '',\n  onNameChange,\n  onDescriptionChange\n}) => {\n  // Function to get icon based on source type\n  const getSourceIcon = (type?: string): React.ReactNode => {\n    switch (type?.toLowerCase()) {\n      case 'database':\n        return <StorageIcon fontSize=\"large\" />;\n      case 'api':\n        return <TableChartIcon fontSize=\"large\" />;\n      case 'analytics':\n        return <BarChartIcon fontSize=\"large\" />;\n      default:\n        return <TableChartIcon fontSize=\"large\" />;\n    }\n  };\n\n  // Handle data source selection\n  const handleSourceSelect = (source: DataSource): void => {\n    if (onChange) {\n      onChange(source);\n    }\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Report Information\n      </Typography>\n      \n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} md={6}>\n          <TextField\n            label=\"Report Name\"\n            fullWidth\n            value={name}\n            onChange={(e) => onNameChange && onNameChange(e.target.value)}\n            required\n            placeholder=\"Enter a name for your report\"\n            helperText=\"This name will be displayed in the reports list\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            label=\"Description\"\n            fullWidth\n            value={description}\n            onChange={(e) => onDescriptionChange && onDescriptionChange(e.target.value)}\n            multiline\n            rows={1}\n            placeholder=\"Describe the purpose of this report\"\n            helperText=\"Optional brief description\"\n          />\n        </Grid>\n      </Grid>\n      \n      <Divider sx={{ my: 3 }} />\n      \n      <Typography variant=\"h6\" gutterBottom>\n        Select Data Source\n      </Typography>\n      \n      <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n        Choose the data source that contains the information you want to include in your report.\n      </Typography>\n      \n      <Grid container spacing={2} sx={{ mt: 2 }}>\n        {availableDataSources.map((source) => (\n          <Grid item xs={12} sm={6} md={4} key={source.id}>\n            <Card \n              variant={selected?.id === source.id ? 'elevation' : 'outlined'} \n              elevation={selected?.id === source.id ? 3 : 0}\n              sx={{\n                borderColor: selected?.id === source.id ? 'primary.main' : 'divider',\n                height: '100%',\n                transition: 'all 0.2s ease-in-out',\n                '&:hover': {\n                  borderColor: 'primary.main',\n                  boxShadow: '0 4px 8px rgba(0,0,0,0.1)'\n                }\n              }}\n            >\n              <CardActionArea \n                onClick={() => handleSourceSelect(source)}\n                sx={{ height: '100%' }}\n              >\n                <CardContent sx={{ height: '100%' }}>\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                    <Avatar\n                      sx={{\n                        bgcolor: selected?.id === source.id ? 'primary.main' : 'action.selected',\n                        mr: 2\n                      }}\n                    >\n                      {getSourceIcon(source.type)}\n                    </Avatar>\n                    <Typography variant=\"h6\" component=\"div\">\n                      {source.name}\n                    </Typography>\n                  </Box>\n                  \n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                    {source.description}\n                  </Typography>\n                  \n                  <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', gap: 1 }}>\n                    <Chip \n                      label={source.type} \n                      size=\"small\" \n                      color={selected?.id === source.id ? 'primary' : 'default'}\n                    />\n                    {source.tags?.map((tag) => (\n                      <Chip \n                        key={tag} \n                        label={tag} \n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    ))}\n                  </Box>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n      \n      {availableDataSources.length === 0 && (\n        <Box sx={{ textAlign: 'center', py: 4 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No data sources available. Please contact your administrator.\n          </Typography>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ReportDataSourceSelector;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  Paper,\n  Grid,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n  IconButton,\n  Chip,\n  Divider,\n  Alert,\n  Stack,\n  Card,\n  CardContent,\n  Tooltip,\n  SelectChangeEvent\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { CommonProps } from '../../types/common';\n\n// Type definitions\nexport interface Operator {\n  id: string;\n  label: string;\n}\n\nexport interface FilterField {\n  id: string;\n  name: string;\n  type: string;\n  operators: Operator[];\n  description?: string;\n}\n\nexport interface FilterValue {\n  from?: Date | string | number | null;\n  to?: Date | string | number | null;\n  [key: string]: any;\n}\n\nexport interface Filter {\n  id: string;\n  field: string;\n  operator: string;\n  value: string | FilterValue | null;\n  displayValue: string;\n}\n\nexport interface DataSource {\n  schema?: any[];\n  [key: string]: any;\n}\n\nexport interface ReportFilterSelectorProps extends CommonProps {\n  dataSource?: DataSource | null;\n  filters?: Filter[];\n  onChange?: (filters: Filter[]) => void;\n}\n\n/**\n * Component for defining report filters\n */\nconst ReportFilterSelector: React.FC<ReportFilterSelectorProps> = ({\n  dataSource,\n  filters = [],\n  onChange\n}) => {\n  const [filterFields, setFilterFields] = useState<FilterField[]>([]);\n  const [activeFilter, setActiveFilter] = useState<string | null>(null);\n\n  // Load available filter fields from data source\n  useEffect(() => {\n    if (dataSource?.schema) {\n      // Convert schema to filter fields\n      const availableFields = dataSource.schema\n        .filter(field => field.filterable !== false)\n        .map(field => ({\n          id: field.id,\n          name: field.name,\n          type: field.type,\n          operators: getOperatorsForType(field.type),\n          description: field.description\n        }));\n\n      setFilterFields(availableFields);\n    }\n  }, [dataSource]);\n\n  // Get appropriate operators based on field type\n  const getOperatorsForType = (type: string): Operator[] => {\n    switch (type) {\n      case 'string':\n        return [\n          { id: 'equals', label: 'Equals' },\n          { id: 'contains', label: 'Contains' },\n          { id: 'startsWith', label: 'Starts with' },\n          { id: 'endsWith', label: 'Ends with' },\n          { id: 'isNull', label: 'Is empty' },\n          { id: 'isNotNull', label: 'Is not empty' }\n        ];\n      case 'number':\n        return [\n          { id: 'equals', label: 'Equals' },\n          { id: 'notEquals', label: 'Not equals' },\n          { id: 'greaterThan', label: 'Greater than' },\n          { id: 'lessThan', label: 'Less than' },\n          { id: 'between', label: 'Between' },\n          { id: 'isNull', label: 'Is empty' },\n          { id: 'isNotNull', label: 'Is not empty' }\n        ];\n      case 'date':\n      case 'datetime':\n        return [\n          { id: 'equals', label: 'On' },\n          { id: 'before', label: 'Before' },\n          { id: 'after', label: 'After' },\n          { id: 'between', label: 'Between' },\n          { id: 'isNull', label: 'Is empty' },\n          { id: 'isNotNull', label: 'Is not empty' }\n        ];\n      case 'boolean':\n        return [\n          { id: 'equals', label: 'Is' },\n          { id: 'isNull', label: 'Is empty' },\n          { id: 'isNotNull', label: 'Is not empty' }\n        ];\n      default:\n        return [\n          { id: 'equals', label: 'Equals' },\n          { id: 'notEquals', label: 'Not equals' },\n          { id: 'isNull', label: 'Is empty' },\n          { id: 'isNotNull', label: 'Is not empty' }\n        ];\n    }\n  };\n\n  // Create a new filter\n  const handleAddFilter = (): void => {\n    if (!onChange) return;\n\n    const newFilter: Filter = {\n      id: `filter_${Date.now()}`,\n      field: filterFields[0]?.id || '',\n      operator: '',\n      value: '',\n      displayValue: ''\n    };\n\n    onChange([...filters, newFilter]);\n    setActiveFilter(newFilter.id);\n  };\n\n  // Remove a filter\n  const handleRemoveFilter = (filterId: string): void => {\n    if (!onChange) return;\n\n    const updatedFilters = filters.filter(filter => filter.id !== filterId);\n    onChange(updatedFilters);\n\n    if (activeFilter === filterId) {\n      setActiveFilter(null);\n    }\n  };\n\n  // Update a filter\n  const handleUpdateFilter = (filterId: string, field: keyof Filter, value: any): void => {\n    if (!onChange) return;\n\n    const updatedFilters = filters.map(filter => {\n      if (filter.id === filterId) {\n        const updatedFilter = { ...filter, [field]: value };\n\n        // If field changed, reset operator and value\n        if (field === 'field') {\n          const fieldInfo = filterFields.find(f => f.id === value);\n          updatedFilter.operator = fieldInfo?.operators[0]?.id || '';\n          updatedFilter.value = '';\n          updatedFilter.displayValue = '';\n        }\n\n        return updatedFilter;\n      }\n      return filter;\n    });\n\n    onChange(updatedFilters);\n  };\n\n  // Get field info by id\n  const getFieldInfo = (fieldId: string): FilterField => {\n    return filterFields.find(field => field.id === fieldId) || { id: '', name: '', type: '', operators: [] };\n  };\n\n  // Get operators for a field\n  const getOperatorsForField = (fieldId: string): Operator[] => {\n    const field = getFieldInfo(fieldId);\n    return field.operators || [];\n  };\n\n  // Render value input based on field type and operator\n  const renderValueInput = (filter: Filter): React.ReactNode => {\n    const field = getFieldInfo(filter.field);\n    const operator = filter.operator;\n\n    // Some operators don't need value input\n    if (operator === 'isNull' || operator === 'isNotNull') {\n      return null;\n    }\n\n    // Render different inputs based on field type\n    switch (field.type) {\n      case 'date':\n      case 'datetime':\n        return (\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            {operator === 'between' ? (\n              <Stack direction=\"row\" spacing={2} sx={{ mt: 2 }}>\n                <DatePicker\n                  label=\"From\"\n                  value={(filter.value as FilterValue)?.from || null}\n                  onChange={(date) => {\n                    const newValue = { ...((filter.value as FilterValue) || {}), from: date };\n                    handleUpdateFilter(filter.id, 'value', newValue);\n                    handleUpdateFilter(filter.id, 'displayValue', `From ${(date as Date)?.toLocaleDateString() || 'any'} to ${((filter.value as FilterValue)?.to as Date)?.toLocaleDateString() || 'any'}`);\n                  }}\n                  slotProps={{ textField: { fullWidth: true, size: \"small\" } }}\n                />\n                <DatePicker\n                  label=\"To\"\n                  value={(filter.value as FilterValue)?.to || null}\n                  onChange={(date) => {\n                    const newValue = { ...((filter.value as FilterValue) || {}), to: date };\n                    handleUpdateFilter(filter.id, 'value', newValue);\n                    handleUpdateFilter(filter.id, 'displayValue', `From ${((filter.value as FilterValue)?.from as Date)?.toLocaleDateString() || 'any'} to ${(date as Date)?.toLocaleDateString() || 'any'}`);\n                  }}\n                  slotProps={{ textField: { fullWidth: true, size: \"small\" } }}\n                />\n              </Stack>\n            ) : (\n              <Box sx={{ mt: 2 }}>\n                <DatePicker\n                  label=\"Value\"\n                  value={filter.value as Date | null}\n                  onChange={(date) => {\n                    handleUpdateFilter(filter.id, 'value', date);\n                    handleUpdateFilter(filter.id, 'displayValue', (date as Date)?.toLocaleDateString() || '');\n                  }}\n                  slotProps={{ textField: { fullWidth: true, size: \"small\" } }}\n                />\n              </Box>\n            )}\n          </LocalizationProvider>\n        );\n\n      case 'number':\n        return (\n          operator === 'between' ? (\n            <Stack direction=\"row\" spacing={2} sx={{ mt: 2 }}>\n              <TextField\n                label=\"From\"\n                type=\"number\"\n                value={(filter.value as FilterValue)?.from || ''}\n                onChange={(e) => {\n                  const newValue = { ...((filter.value as FilterValue) || {}), from: e.target.value };\n                  handleUpdateFilter(filter.id, 'value', newValue);\n                  handleUpdateFilter(filter.id, 'displayValue', `From ${e.target.value || 'any'} to ${(filter.value as FilterValue)?.to || 'any'}`);\n                }}\n                fullWidth\n                size=\"small\"\n              />\n              <TextField\n                label=\"To\"\n                type=\"number\"\n                value={(filter.value as FilterValue)?.to || ''}\n                onChange={(e) => {\n                  const newValue = { ...((filter.value as FilterValue) || {}), to: e.target.value };\n                  handleUpdateFilter(filter.id, 'value', newValue);\n                  handleUpdateFilter(filter.id, 'displayValue', `From ${(filter.value as FilterValue)?.from || 'any'} to ${e.target.value || 'any'}`);\n                }}\n                fullWidth\n                size=\"small\"\n              />\n            </Stack>\n          ) : (\n            <TextField\n              label=\"Value\"\n              type=\"number\"\n              value={filter.value || ''}\n              onChange={(e) => {\n                handleUpdateFilter(filter.id, 'value', e.target.value);\n                handleUpdateFilter(filter.id, 'displayValue', e.target.value);\n              }}\n              fullWidth\n              size=\"small\"\n              sx={{ mt: 2 }}\n            />\n          )\n        );\n\n      case 'boolean':\n        return (\n          <FormControl fullWidth size=\"small\" sx={{ mt: 2 }}>\n            <InputLabel id={`filter-value-${filter.id}-label`}>Value</InputLabel>\n            <Select\n              labelId={`filter-value-${filter.id}-label`}\n              value={filter.value as string || ''}\n              onChange={(e) => {\n                handleUpdateFilter(filter.id, 'value', e.target.value);\n                handleUpdateFilter(filter.id, 'displayValue', e.target.value === 'true' ? 'Yes' : 'No');\n              }}\n              label=\"Value\"\n            >\n              <MenuItem value=\"true\">Yes</MenuItem>\n              <MenuItem value=\"false\">No</MenuItem>\n            </Select>\n          </FormControl>\n        );\n\n      default:\n        return (\n          <TextField\n            label=\"Value\"\n            value={filter.value || ''}\n            onChange={(e) => {\n              handleUpdateFilter(filter.id, 'value', e.target.value);\n              handleUpdateFilter(filter.id, 'displayValue', e.target.value);\n            }}\n            fullWidth\n            size=\"small\"\n            sx={{ mt: 2 }}\n          />\n        );\n    }\n  };\n\n  // Format filter for display\n  const formatFilterDisplay = (filter: Filter): string => {\n    const field = getFieldInfo(filter.field);\n    const operator = getOperatorsForField(filter.field).find(op => op.id === filter.operator)?.label || filter.operator;\n\n    if (filter.operator === 'isNull') {\n      return `${field.name} is empty`;\n    }\n\n    if (filter.operator === 'isNotNull') {\n      return `${field.name} is not empty`;\n    }\n\n    return `${field.name} ${operator} ${filter.displayValue}`;\n  };\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\n        <Typography variant=\"h6\">\n          Define Filters\n        </Typography>\n\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={handleAddFilter}\n          disabled={!dataSource || filterFields.length === 0}\n        >\n          Add Filter\n        </Button>\n      </Box>\n\n      {!dataSource && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          Please select a data source first.\n        </Alert>\n      )}\n\n      {dataSource && filterFields.length === 0 && (\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          The selected data source does not have any filterable fields.\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        {/* Filter list */}\n        <Grid item xs={12} md={4}>\n          <Paper variant=\"outlined\" sx={{ p: 2, height: '100%' }}>\n            <Typography variant=\"subtitle1\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n              <FilterListIcon sx={{ mr: 1 }} />\n              Applied Filters ({filters.length})\n            </Typography>\n\n            <Divider sx={{ my: 1 }} />\n\n            {filters.length === 0 ? (\n              <Box sx={{ py: 2, textAlign: 'center' }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No filters applied yet.\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Click \"Add Filter\" to create your first filter.\n                </Typography>\n              </Box>\n            ) : (\n              <Stack spacing={1} sx={{ mt: 2 }}>\n                {filters.map((filter) => (\n                  <Card\n                    key={filter.id}\n                    variant=\"outlined\"\n                    sx={{\n                      borderColor: activeFilter === filter.id ? 'primary.main' : 'divider',\n                      cursor: 'pointer',\n                      '&:hover': {\n                        borderColor: 'primary.main'\n                      }\n                    }}\n                    onClick={() => setActiveFilter(filter.id)}\n                  >\n                    <CardContent sx={{ p: 1, '&:last-child': { pb: 1 } }}>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                        <Typography variant=\"body2\">\n                          {formatFilterDisplay(filter)}\n                        </Typography>\n                        <IconButton\n                          size=\"small\"\n                          color=\"error\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleRemoveFilter(filter.id);\n                          }}\n                          aria-label=\"remove filter\"\n                        >\n                          <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                      </Box>\n                    </CardContent>\n                  </Card>\n                ))}\n              </Stack>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Filter editor */}\n        <Grid item xs={12} md={8}>\n          <Paper variant=\"outlined\" sx={{ p: 3 }}>\n            {activeFilter ? (\n              <Box>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Edit Filter\n                </Typography>\n\n                <Grid container spacing={2}>\n                  {/* Field */}\n                  <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth size=\"small\">\n                      <InputLabel id={`filter-field-${activeFilter}-label`}>Field</InputLabel>\n                      <Select\n                        labelId={`filter-field-${activeFilter}-label`}\n                        value={filters.find(f => f.id === activeFilter)?.field || ''}\n                        onChange={(e) => handleUpdateFilter(activeFilter, 'field', e.target.value)}\n                        label=\"Field\"\n                      >\n                        {filterFields.map((field) => (\n                          <MenuItem key={field.id} value={field.id}>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              {field.name}\n                              {field.description && (\n                                <Tooltip title={field.description} arrow>\n                                  <InfoOutlinedIcon fontSize=\"small\" color=\"action\" sx={{ ml: 1 }} />\n                                </Tooltip>\n                              )}\n                            </Box>\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  {/* Operator */}\n                  <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth size=\"small\">\n                      <InputLabel id={`filter-operator-${activeFilter}-label`}>Operator</InputLabel>\n                      <Select\n                        labelId={`filter-operator-${activeFilter}-label`}\n                        value={filters.find(f => f.id === activeFilter)?.operator || ''}\n                        onChange={(e) => handleUpdateFilter(activeFilter, 'operator', e.target.value)}\n                        label=\"Operator\"\n                      >\n                        {getOperatorsForField(filters.find(f => f.id === activeFilter)?.field || '').map((operator) => (\n                          <MenuItem key={operator.id} value={operator.id}>\n                            {operator.label}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  {/* Value */}\n                  {filters.find(f => f.id === activeFilter)?.operator && (\n                    <Grid item xs={12}>\n                      {renderValueInput(filters.find(f => f.id === activeFilter) as Filter)}\n                    </Grid>\n                  )}\n                </Grid>\n              </Box>\n            ) : (\n              <Box sx={{ py: 4, textAlign: 'center' }}>\n                <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                  Select a filter to edit or create a new one.\n                </Typography>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<AddIcon />}\n                  onClick={handleAddFilter}\n                  disabled={!dataSource || filterFields.length === 0}\n                >\n                  Add Filter\n                </Button>\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ReportFilterSelector;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  CircularProgress,\n  Alert,\n  IconButton,\n  Divider,\n  Chip,\n  Stack,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n  SelectChangeEvent\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport ViewColumnIcon from '@mui/icons-material/ViewColumn';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport { CommonProps } from '../../types/common';\n\n// Type definitions\nexport interface ColumnConfig {\n  id: string;\n  name: string;\n  type: string;\n  width: string;\n  visible: boolean;\n  aggregation: string | null;\n  renderer?: (value: any) => React.ReactNode;\n}\n\nexport interface FilterConfig {\n  column: string;\n  operator: string;\n  value: string;\n}\n\nexport interface SortConfig {\n  columnId: string;\n  direction: 'asc' | 'desc';\n}\n\nexport interface GroupConfig {\n  columnId: string;\n}\n\nexport interface DataSource {\n  id: string;\n  name: string;\n  [key: string]: any;\n}\n\nexport interface ReportConfig {\n  name: string;\n  description: string;\n  dataSource: DataSource | null;\n  filters: FilterConfig[];\n  columns: ColumnConfig[];\n  sortBy: SortConfig | null;\n  groupBy: GroupConfig | null;\n  [key: string]: any;\n}\n\nexport interface ReportPreviewProps extends CommonProps {\n  config: ReportConfig;\n  data?: any[];\n  loading?: boolean;\n  error?: string | null;\n  onRefresh?: () => void;\n  onDownload?: () => void;\n  onConfigChange?: (config: ReportConfig) => void;\n}\n\n/**\n * Component for previewing a report with the configured settings\n */\nconst ReportPreview: React.FC<ReportPreviewProps> = ({\n  config,\n  data = [],\n  loading = false,\n  error = null,\n  onRefresh,\n  onDownload,\n  onConfigChange\n}) => {\n  const [previewLimit, setPreviewLimit] = useState<number>(10);\n\n  // Handle preview limit change\n  const handleLimitChange = (event: SelectChangeEvent<number>): void => {\n    setPreviewLimit(event.target.value as number);\n  };\n\n  // Filter columns to only show visible ones and in the correct order\n  const getVisibleColumns = (): ColumnConfig[] => {\n    return config.columns.filter(column => column.visible);\n  };\n\n  // Format cell value based on column type\n  const formatCellValue = (value: any, column: ColumnConfig): React.ReactNode => {\n    if (value === null || value === undefined) {\n      return '-';\n    }\n\n    // If the column has a renderer function, use it\n    if (column.renderer) {\n      return column.renderer(value);\n    }\n\n    switch (column.type) {\n      case 'date':\n        return new Date(value).toLocaleDateString();\n      case 'datetime':\n        return new Date(value).toLocaleString();\n      case 'number':\n        return typeof value === 'number' ? value.toLocaleString() : value;\n      case 'boolean':\n        return value ? 'Yes' : 'No';\n      case 'currency':\n        return typeof value === 'number'\n          ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value)\n          : value;\n      case 'percentage':\n        return typeof value === 'number'\n          ? `${value.toFixed(2)}%`\n          : value;\n      default:\n        return value;\n    }\n  };\n\n  // Get cell alignment based on column type\n  const getCellAlignment = (column: ColumnConfig): 'left' | 'right' | 'center' => {\n    switch (column.type) {\n      case 'number':\n      case 'currency':\n      case 'percentage':\n        return 'right';\n      default:\n        return 'left';\n    }\n  };\n\n  // Get column width based on configuration\n  const getColumnWidth = (width: string): React.CSSProperties => {\n    switch (width) {\n      case 'small':\n        return { width: 100, maxWidth: 100 };\n      case 'medium':\n        return { width: 150, maxWidth: 150 };\n      case 'large':\n        return { width: 200, maxWidth: 200 };\n      default:\n        return {};\n    }\n  };\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h6\">\n          Report Preview\n        </Typography>\n\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <FormControl variant=\"outlined\" size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel id=\"preview-limit-label\">Preview Rows</InputLabel>\n            <Select<number>\n              labelId=\"preview-limit-label\"\n              value={previewLimit}\n              onChange={handleLimitChange}\n              label=\"Preview Rows\"\n            >\n              <MenuItem value={5}>5 rows</MenuItem>\n              <MenuItem value={10}>10 rows</MenuItem>\n              <MenuItem value={20}>20 rows</MenuItem>\n              <MenuItem value={50}>50 rows</MenuItem>\n            </Select>\n          </FormControl>\n\n          {onRefresh && (\n            <Button\n              variant=\"outlined\"\n              startIcon={<RefreshIcon />}\n              onClick={onRefresh}\n              disabled={loading}\n            >\n              Refresh\n            </Button>\n          )}\n\n          {onDownload && (\n            <Button\n              variant=\"outlined\"\n              startIcon={<DownloadIcon />}\n              onClick={onDownload}\n              disabled={loading || !!error || data.length === 0}\n            >\n              Download\n            </Button>\n          )}\n        </Box>\n      </Box>\n\n      {/* Report configuration summary */}\n      <Paper variant=\"outlined\" sx={{ p: 2, mb: 3 }}>\n        <Typography variant=\"subtitle2\" gutterBottom>\n          Report Configuration\n        </Typography>\n\n        <Stack direction=\"row\" spacing={2} sx={{ flexWrap: 'wrap', gap: 1 }}>\n          <Chip\n            icon={<TableChartIcon />}\n            label={config.dataSource?.name || 'No data source selected'}\n            color={config.dataSource ? 'primary' : 'default'}\n            variant=\"outlined\"\n          />\n          <Chip\n            icon={<ViewColumnIcon />}\n            label={`${getVisibleColumns().length} columns`}\n            variant=\"outlined\"\n          />\n          <Chip\n            icon={<FilterListIcon />}\n            label={`${config.filters.length} filters`}\n            variant=\"outlined\"\n          />\n          {config.sortBy && (\n            <Chip\n              label={`Sorted by ${config.columns.find(col => col.id === config.sortBy?.columnId)?.name || ''} (${config.sortBy?.direction === 'asc' ? 'Ascending' : 'Descending'})`}\n              variant=\"outlined\"\n            />\n          )}\n          {config.groupBy && (\n            <Chip\n              label={`Grouped by ${config.columns.find(col => col.id === config.groupBy?.columnId)?.name || ''}`}\n              variant=\"outlined\"\n            />\n          )}\n        </Stack>\n      </Paper>\n\n      {/* Data preview */}\n      <Paper variant=\"outlined\">\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', p: 5 }}>\n            <CircularProgress />\n          </Box>\n        ) : error ? (\n          <Alert severity=\"error\" sx={{ m: 2 }}>\n            {error}\n          </Alert>\n        ) : data.length === 0 ? (\n          <Box sx={{ p: 3, textAlign: 'center' }}>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              No data available for preview with the current configuration.\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n              Try adjusting your filters or data source selection.\n            </Typography>\n          </Box>\n        ) : (\n          <TableContainer sx={{ maxHeight: 500 }}>\n            <Table stickyHeader>\n              <TableHead>\n                <TableRow>\n                  {getVisibleColumns().map((column) => (\n                    <TableCell\n                      key={column.id}\n                      align={getCellAlignment(column)}\n                      style={getColumnWidth(column.width)}\n                      sx={{ fontWeight: 'bold' }}\n                    >\n                      {column.name}\n                      {column.aggregation && (\n                        <Chip\n                          label={column.aggregation}\n                          size=\"small\"\n                          color=\"secondary\"\n                          sx={{ ml: 1 }}\n                        />\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.slice(0, previewLimit).map((row, rowIndex) => (\n                  <TableRow key={`row-${rowIndex}`} hover>\n                    {getVisibleColumns().map((column) => (\n                      <TableCell\n                        key={`${rowIndex}-${column.id}`}\n                        align={getCellAlignment(column)}\n                      >\n                        {formatCellValue(row[column.id], column)}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n\n        {data.length > previewLimit && (\n          <Box sx={{ p: 2, textAlign: 'center', borderTop: 1, borderColor: 'divider' }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Showing {previewLimit} of {data.length} rows. Download the full report to see all data.\n            </Typography>\n          </Box>\n        )}\n      </Paper>\n    </Box>\n  );\n};\n\nexport default ReportPreview;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  Button,\n  IconButton,\n  Divider,\n  Chip,\n  CircularProgress,\n  Collapse,\n  List,\n  ListItem,\n  ListItemText,\n  Alert,\n  Tooltip\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport HistoryIcon from '@mui/icons-material/History';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport MicIcon from '@mui/icons-material/Mic';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport LightbulbIcon from '@mui/icons-material/Lightbulb';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport { CommonProps } from '../../types/common';\n\n// Add WebkitSpeechRecognition to the Window interface\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n\n// Type definitions\nexport interface QueryItem {\n  text: string;\n  timestamp?: string | number | Date;\n  name?: string;\n  description?: string;\n}\n\nexport interface NaturalLanguageQueryPanelProps extends CommonProps {\n  /**\n   * Function called when a search is executed\n   */\n  onSearch: (query: string) => void;\n\n  /**\n   * Function called when a query is saved\n   */\n  onSaveQuery?: (query: string) => void;\n\n  /**\n   * List of recent queries\n   */\n  recentQueries?: QueryItem[];\n\n  /**\n   * List of saved queries\n   */\n  savedQueries?: QueryItem[];\n\n  /**\n   * Whether a query is currently being processed\n   */\n  loading?: boolean;\n\n  /**\n   * Error message to display\n   */\n  error?: string | null;\n\n  /**\n   * Whether to show query suggestions\n   */\n  showSuggestions?: boolean;\n\n  /**\n   * List of query suggestions\n   */\n  suggestions?: string[];\n\n  /**\n   * Function called when a suggestion is applied\n   */\n  onApplySuggestion?: (suggestion: string) => void;\n}\n\n/**\n * NaturalLanguageQueryPanel component for enabling natural language queries for reports\n */\nconst NaturalLanguageQueryPanel: React.FC<NaturalLanguageQueryPanelProps> = ({\n  onSearch,\n  onSaveQuery,\n  recentQueries = [],\n  savedQueries = [],\n  loading = false,\n  error = null,\n  showSuggestions = true,\n  suggestions = [],\n  onApplySuggestion,\n  sx\n}) => {\n  const [query, setQuery] = useState<string>('');\n  const [showHistory, setShowHistory] = useState<boolean>(false);\n  const [isListening, setIsListening] = useState<boolean>(false);\n  const [recognition, setRecognition] = useState<any>(null);\n\n  // Set up speech recognition if available\n  useEffect(() => {\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognitionInstance = new SpeechRecognition();\n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = false;\n\n      recognitionInstance.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        setQuery(transcript);\n        setIsListening(false);\n      };\n\n      recognitionInstance.onerror = () => {\n        setIsListening(false);\n      };\n\n      recognitionInstance.onend = () => {\n        setIsListening(false);\n      };\n\n      setRecognition(recognitionInstance);\n    }\n  }, []);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setQuery(event.target.value);\n  };\n\n  const handleSearch = (): void => {\n    if (query.trim() && onSearch) {\n      onSearch(query.trim());\n    }\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleClearQuery = (): void => {\n    setQuery('');\n  };\n\n  const handleToggleHistory = (): void => {\n    setShowHistory(!showHistory);\n  };\n\n  const handleSelectQuery = (selectedQuery: string): void => {\n    setQuery(selectedQuery);\n    if (onApplySuggestion) {\n      onApplySuggestion(selectedQuery);\n    }\n  };\n\n  const handleSaveQuery = (): void => {\n    if (query.trim() && onSaveQuery) {\n      onSaveQuery(query.trim());\n    }\n  };\n\n  const toggleSpeechRecognition = (): void => {\n    if (!recognition) return;\n\n    if (isListening) {\n      recognition.stop();\n    } else {\n      recognition.start();\n      setIsListening(true);\n    }\n  };\n\n  const isSaved = (queryText: string): boolean => {\n    return savedQueries.some(saved => saved.text === queryText);\n  };\n\n  // Example query suggestions based on report context\n  const defaultSuggestions: string[] = [\n    \"Show me total revenue by month for the last quarter\",\n    \"What are the top 5 performing products?\",\n    \"Compare conversion rates between desktop and mobile\",\n    \"Show user growth trend over the past year\",\n    \"Identify customers with declining activity\"\n  ];\n\n  const queryExamples: string[] = suggestions.length > 0 ? suggestions : defaultSuggestions;\n\n  return (\n    <Paper variant=\"outlined\" sx={{ p: 2, mb: 3, borderRadius: 1, ...sx }}>\n      <Box sx={{ mb: 2 }}>\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'medium', mb: 1, display: 'flex', alignItems: 'center' }}>\n          <SearchIcon sx={{ mr: 1, fontSize: 20 }} />\n          Ask a question about your data\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          Use natural language to query your data. For example, \"Show me sales by region for Q1\"\n        </Typography>\n\n        <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            placeholder=\"Ask a question about your data...\"\n            value={query}\n            onChange={handleQueryChange}\n            onKeyPress={handleKeyPress}\n            disabled={loading}\n            InputProps={{\n              endAdornment: (\n                <Box sx={{ display: 'flex' }}>\n                  {query && (\n                    <IconButton size=\"small\" onClick={handleClearQuery} edge=\"end\">\n                      <ClearIcon />\n                    </IconButton>\n                  )}\n                  {recognition && (\n                    <Tooltip title={isListening ? \"Stop listening\" : \"Voice search\"}>\n                      <IconButton\n                        size=\"small\"\n                        onClick={toggleSpeechRecognition}\n                        color={isListening ? \"primary\" : \"default\"}\n                        edge=\"end\"\n                      >\n                        <MicIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                </Box>\n              ),\n            }}\n            sx={{ mr: 1 }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleSearch}\n            disabled={!query.trim() || loading}\n            startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <SearchIcon />}\n          >\n            {loading ? 'Processing' : 'Search'}\n          </Button>\n        </Box>\n\n        <Box sx={{ display: 'flex', mt: 1, alignItems: 'center' }}>\n          <Tooltip title=\"View search history\">\n            <IconButton size=\"small\" onClick={handleToggleHistory}>\n              {showHistory ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n              <HistoryIcon fontSize=\"small\" sx={{ ml: 0.5 }} />\n            </IconButton>\n          </Tooltip>\n\n          {query.trim() && (\n            <Tooltip title={isSaved(query.trim()) ? \"Query already saved\" : \"Save this query\"}>\n              <IconButton\n                size=\"small\"\n                onClick={handleSaveQuery}\n                disabled={isSaved(query.trim()) || !query.trim()}\n              >\n                {isSaved(query.trim()) ? <BookmarkIcon color=\"primary\" /> : <BookmarkBorderIcon />}\n              </IconButton>\n            </Tooltip>\n          )}\n\n          {error && (\n            <Typography variant=\"caption\" color=\"error\" sx={{ ml: 2 }}>\n              {error}\n            </Typography>\n          )}\n        </Box>\n      </Box>\n\n      <Collapse in={showHistory}>\n        <Divider sx={{ my: 2 }} />\n        <Box>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Recent Queries\n          </Typography>\n          {recentQueries.length > 0 ? (\n            <List dense disablePadding>\n              {recentQueries.slice(0, 5).map((item, index) => (\n                <ListItem\n                  key={index}\n                  button\n                  onClick={() => handleSelectQuery(item.text)}\n                  dense\n                  sx={{ borderRadius: 1 }}\n                >\n                  <ListItemText\n                    primary={item.text}\n                    secondary={item.timestamp && new Date(item.timestamp).toLocaleString()}\n                  />\n                  {isSaved(item.text) && (\n                    <BookmarkIcon fontSize=\"small\" color=\"primary\" />\n                  )}\n                </ListItem>\n              ))}\n            </List>\n          ) : (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No recent queries\n            </Typography>\n          )}\n\n          {savedQueries.length > 0 && (\n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Saved Queries\n              </Typography>\n              <List dense disablePadding>\n                {savedQueries.map((item, index) => (\n                  <ListItem\n                    key={index}\n                    button\n                    onClick={() => handleSelectQuery(item.text)}\n                    dense\n                    sx={{ borderRadius: 1 }}\n                  >\n                    <ListItemText\n                      primary={item.text}\n                      secondary={item.name || item.description}\n                    />\n                    <BookmarkIcon fontSize=\"small\" color=\"primary\" />\n                  </ListItem>\n                ))}\n              </List>\n            </Box>\n          )}\n        </Box>\n      </Collapse>\n\n      {showSuggestions && (\n        <>\n          <Divider sx={{ my: 2 }} />\n          <Box>\n            <Typography variant=\"subtitle2\" sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <LightbulbIcon fontSize=\"small\" sx={{ mr: 0.5 }} color=\"warning\" />\n              Try asking\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              {queryExamples.map((example, index) => (\n                <Chip\n                  key={index}\n                  label={example}\n                  onClick={() => handleSelectQuery(example)}\n                  clickable\n                  size=\"small\"\n                  sx={{ mb: 1 }}\n                />\n              ))}\n            </Box>\n          </Box>\n        </>\n      )}\n    </Paper>\n  );\n};\n\nexport default NaturalLanguageQueryPanel;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Divider,\n  Button,\n  IconButton,\n  Menu,\n  MenuItem,\n  Chip,\n  LinearProgress,\n  Alert,\n  Collapse,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Tooltip\n} from '@mui/material';\nimport { CommonProps } from '../../types/common';\nimport { ReportSection, ReportExportFormat } from '../../types/report';\n\n// Icons\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SaveIcon from '@mui/icons-material/Save';\nimport ShareIcon from '@mui/icons-material/Share';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport FullscreenIcon from '@mui/icons-material/Fullscreen';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport PrintIcon from '@mui/icons-material/Print';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport CodeIcon from '@mui/icons-material/Code';\n\n// Type definitions\nexport interface FilterDefinition {\n  id: string;\n  label: string;\n  type: string;\n  options?: Array<{ value: string | number; label: string }>;\n  defaultValue?: any;\n  [key: string]: any;\n}\n\n// Use ReportExportFormat from report.ts\nexport type ExportFormat = ReportExportFormat;\n\nexport interface ReportViewerProps extends CommonProps {\n  /**\n   * Report title\n   */\n  title?: string;\n\n  /**\n   * Report description\n   */\n  description?: string;\n\n  /**\n   * Loading state\n   */\n  loading?: boolean;\n\n  /**\n   * Error state\n   */\n  error?: Error | string | null;\n\n  /**\n   * Report sections\n   */\n  sections?: ReportSection[];\n\n  /**\n   * Report data\n   */\n  data?: any;\n\n  /**\n   * Filter definitions\n   */\n  filters?: FilterDefinition[];\n\n  /**\n   * Filter values\n   */\n  filterValues?: Record<string, any>;\n\n  /**\n   * Filter change handler\n   */\n  onFilterChange?: (id: string, value: any) => void;\n\n  /**\n   * Filter apply handler\n   */\n  onFilterApply?: () => void;\n\n  /**\n   * Refresh handler\n   */\n  onRefresh?: () => void;\n\n  /**\n   * Export handler\n   */\n  onExport?: (format: ExportFormat, data?: any) => void;\n\n  /**\n   * Save handler\n   */\n  onSave?: (data?: any) => void;\n\n  /**\n   * Share handler\n   */\n  onShare?: (data?: any) => void;\n\n  /**\n   * Whether to show export options\n   */\n  showExport?: boolean;\n\n  /**\n   * Additional header actions\n   */\n  headerActions?: React.ReactNode;\n}\n\n/**\n * ReportViewer - Generic component for displaying report data and sections\n */\nconst ReportViewer: React.FC<ReportViewerProps> = ({\n  title = 'Report',\n  description = 'Report description',\n  loading = false,\n  error = null,\n  sections = [],\n  data = {},\n  filters,\n  filterValues,\n  onFilterChange,\n  onFilterApply,\n  onRefresh,\n  onExport,\n  onSave,\n  onShare,\n  showExport = true,\n  headerActions,\n  sx\n}) => {\n  const [expandedSections, setExpandedSections] = useState<string[]>(sections.map(section => section.id));\n  const [exportMenuAnchorEl, setExportMenuAnchorEl] = useState<HTMLElement | null>(null);\n  const [moreMenuAnchorEl, setMoreMenuAnchorEl] = useState<HTMLElement | null>(null);\n\n  // Handle export menu open/close\n  const handleExportMenuOpen = (event: React.MouseEvent<HTMLElement>): void => {\n    setExportMenuAnchorEl(event.currentTarget);\n  };\n\n  const handleExportMenuClose = (): void => {\n    setExportMenuAnchorEl(null);\n  };\n\n  // Handle more menu open/close\n  const handleMoreMenuOpen = (event: React.MouseEvent<HTMLElement>): void => {\n    setMoreMenuAnchorEl(event.currentTarget);\n  };\n\n  const handleMoreMenuClose = (): void => {\n    setMoreMenuAnchorEl(null);\n  };\n\n  // Toggle section visibility\n  const handleToggleSection = (sectionId: string): void => {\n    setExpandedSections(prevState => {\n      if (prevState.includes(sectionId)) {\n        return prevState.filter(id => id !== sectionId);\n      } else {\n        return [...prevState, sectionId];\n      }\n    });\n  };\n\n  // Handle section actions\n  const handleCollapseAll = (): void => {\n    setExpandedSections([]);\n  };\n\n  const handleExpandAll = (): void => {\n    setExpandedSections(sections.map(section => section.id));\n  };\n\n  // Handle export actions\n  const handleExport = (format: ExportFormat): void => {\n    if (onExport) {\n      onExport(format, data);\n    }\n    handleExportMenuClose();\n  };\n\n  // Handle print\n  const handlePrint = (): void => {\n    window.print();\n    handleMoreMenuClose();\n  };\n\n  // Format error message\n  const getErrorMessage = (): string => {\n    if (!error) return '';\n    if (typeof error === 'string') return error;\n    return error.message || 'An error occurred';\n  };\n\n  return (\n    <Box sx={{ width: '100%', ...sx }}>\n      {/* Report Header */}\n      <Paper sx={{ p: 3, mb: 3, borderRadius: 1 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n          <Box>\n            <Typography variant=\"h5\" gutterBottom>\n              {title}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {description}\n            </Typography>\n          </Box>\n\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            {/* Refresh Button */}\n            {onRefresh && (\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={<RefreshIcon />}\n                onClick={onRefresh}\n                disabled={loading}\n              >\n                Refresh\n              </Button>\n            )}\n\n            {/* Export Button/Menu */}\n            {showExport && (\n              <>\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  startIcon={<DownloadIcon />}\n                  onClick={handleExportMenuOpen}\n                  disabled={loading}\n                >\n                  Export\n                </Button>\n                <Menu\n                  anchorEl={exportMenuAnchorEl}\n                  open={Boolean(exportMenuAnchorEl)}\n                  onClose={handleExportMenuClose}\n                >\n                  <MenuItem onClick={() => handleExport('pdf')}>PDF Document</MenuItem>\n                  <MenuItem onClick={() => handleExport('excel')}>Excel Spreadsheet</MenuItem>\n                  <MenuItem onClick={() => handleExport('csv')}>CSV File</MenuItem>\n                  <MenuItem onClick={() => handleExport('image')}>Image (PNG)</MenuItem>\n                  <MenuItem onClick={() => handleExport('json')}>Raw Data (JSON)</MenuItem>\n                </Menu>\n              </>\n            )}\n\n            {/* Save Button */}\n            {onSave && (\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={<SaveIcon />}\n                onClick={() => onSave(data)}\n                disabled={loading}\n              >\n                Save\n              </Button>\n            )}\n\n            {/* Share Button */}\n            {onShare && (\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={<ShareIcon />}\n                onClick={() => onShare(data)}\n                disabled={loading}\n              >\n                Share\n              </Button>\n            )}\n\n            {/* Additional header actions */}\n            {headerActions}\n\n            {/* More Options */}\n            <IconButton\n              size=\"small\"\n              onClick={handleMoreMenuOpen}\n              disabled={loading}\n            >\n              <MoreVertIcon />\n            </IconButton>\n            <Menu\n              anchorEl={moreMenuAnchorEl}\n              open={Boolean(moreMenuAnchorEl)}\n              onClose={handleMoreMenuClose}\n            >\n              <MenuItem onClick={handlePrint}>\n                <PrintIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                Print Report\n              </MenuItem>\n              <MenuItem onClick={handleExpandAll}>\n                <VisibilityIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                Expand All Sections\n              </MenuItem>\n              <MenuItem onClick={handleCollapseAll}>\n                <VisibilityOffIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                Collapse All Sections\n              </MenuItem>\n              <MenuItem onClick={handleMoreMenuClose}>\n                <FullscreenIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                Fullscreen Mode\n              </MenuItem>\n              <MenuItem onClick={handleMoreMenuClose}>\n                <CodeIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                View Raw Data\n              </MenuItem>\n            </Menu>\n          </Box>\n        </Box>\n\n        {/* Loading Indicator */}\n        {loading && (\n          <Box sx={{ width: '100%', mt: 2 }}>\n            <LinearProgress />\n          </Box>\n        )}\n\n        {/* Error Message */}\n        {error && (\n          <Alert severity=\"error\" sx={{ mt: 2 }}>\n            {getErrorMessage()}\n          </Alert>\n        )}\n\n        {/* Report Metadata/Filters Summary */}\n        {!loading && !error && data && (\n          <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n            <Chip\n              label={`Generated: ${new Date().toLocaleString()}`}\n              size=\"small\"\n              color=\"default\"\n              icon={<InfoOutlinedIcon />}\n            />\n            {data.summary && (\n              <Tooltip title=\"Total records in this report\">\n                <Chip\n                  label={`Records: ${data.byDimension?.length || 0}`}\n                  size=\"small\"\n                  color=\"primary\"\n                  variant=\"outlined\"\n                />\n              </Tooltip>\n            )}\n          </Box>\n        )}\n      </Paper>\n\n      {/* Report Sections */}\n      {sections.map((section) => (\n        <Card\n          key={section.id}\n          sx={{ mb: 3, borderRadius: 1 }}\n          variant=\"outlined\"\n        >\n          <CardHeader\n            title={section.title}\n            subheader={section.description}\n            action={\n              <IconButton\n                onClick={() => handleToggleSection(section.id)}\n                size=\"small\"\n              >\n                {expandedSections.includes(section.id) ? <VisibilityOffIcon /> : <VisibilityIcon />}\n              </IconButton>\n            }\n          />\n          <Collapse in={expandedSections.includes(section.id)}>\n            <Divider />\n            <CardContent>\n              {section.content}\n            </CardContent>\n            {section.actions && (\n              <CardActions>\n                {section.actions}\n              </CardActions>\n            )}\n          </Collapse>\n        </Card>\n      ))}\n\n      {/* No Sections Placeholder */}\n      {sections.length === 0 && !loading && (\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No report sections available.\n          </Typography>\n        </Paper>\n      )}\n    </Box>\n  );\n};\n\nexport default ReportViewer;\n","// filepath: c:\\dev\\PPrePorter\\Frontend\\ppreporter-client\\src\\components\\reports\\DailyActionsReport.tsx\nimport React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Box,\n  Grid,\n  Paper,\n  Typography,\n  Tabs,\n  Tab,\n  Divider,\n  TextField,\n  MenuItem,\n  FormControlLabel,\n  Switch,\n  Button,\n  Chip,\n  IconButton,\n  Badge,\n  Tooltip,\n  CircularProgress,\n  Alert,\n  Select,\n  FormControl,\n  InputLabel,\n  Autocomplete,\n  Checkbox,\n  ListItemText,\n  OutlinedInput,\n  ListSubheader,\n  InputAdornment,\n  SelectChangeEvent,\n  Collapse\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { CommonProps } from '../../types/common';\nimport { ReportSection, ReportExportFormat } from '../../types/report';\n\n// Icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport TuneIcon from '@mui/icons-material/Tune';\nimport GroupIcon from '@mui/icons-material/Group';\nimport PublicIcon from '@mui/icons-material/Public';\nimport BusinessIcon from '@mui/icons-material/Business';\nimport CalendarViewMonthIcon from '@mui/icons-material/CalendarViewMonth';\nimport EventIcon from '@mui/icons-material/Event';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport PieChartIcon from '@mui/icons-material/PieChart';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport MapIcon from '@mui/icons-material/Map';\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport SportsEsportsIcon from '@mui/icons-material/SportsEsports';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport SaveIcon from '@mui/icons-material/Save';\nimport ShareIcon from '@mui/icons-material/Share';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport SearchIcon from '@mui/icons-material/Search';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport CompareArrowsIcon from '@mui/icons-material/CompareArrows';\nimport RefreshIcon from '@mui/icons-material/Refresh';\n\n// Import components\nimport ReportViewer from './ReportViewer';\nimport NaturalLanguageQueryPanel from './NaturalLanguageQueryPanel';\nimport Card from '../common/Card';\n\n// Type definitions\nexport type GroupDimension = 'player' | 'whitelabel' | 'country' | 'gametype' | 'tier' | 'device' | 'playerStatus' | 'registrationSource';\nexport type TimeGrouping = 'day' | 'week' | 'month' | 'quarter' | 'year' | 'all';\nexport type VisualizationType = 'table' | 'bar' | 'line' | 'pie' | 'map' | 'mixed';\nexport type AggregationFunction = 'sum' | 'avg' | 'min' | 'max' | 'count' | 'countDistinct';\nexport type ReportMode = 'standard' | 'advanced' | 'expert';\nexport type ReportTab = 'overview' | 'trends' | 'players' | 'geography' | 'whitelabels' | 'games';\nexport type SortDirection = 'asc' | 'desc';\n\nexport interface DimensionOption {\n  value: GroupDimension;\n  label: string;\n  icon: React.ReactNode;\n}\n\nexport interface TimeGroupingOption {\n  value: TimeGrouping;\n  label: string;\n  icon: React.ReactNode;\n}\n\nexport interface VisualizationOption {\n  value: VisualizationType;\n  label: string;\n  icon: React.ReactNode;\n}\n\nexport interface MetricOption {\n  value: string;\n  label: string;\n  category: 'Financial' | 'Activity' | 'User' | 'Performance';\n  type: 'currency' | 'count' | 'time' | 'ratio' | 'percentage';\n}\n\nexport interface AggregationOption {\n  value: AggregationFunction;\n  label: string;\n}\n\nexport interface ReportModeOption {\n  value: ReportMode;\n  label: string;\n  description: string;\n}\n\nexport interface SelectedItem {\n  id: string;\n  name: string;\n}\n\nexport interface DrilldownLevel {\n  dimension: GroupDimension;\n  timeGrouping: TimeGrouping;\n  filters: {\n    dateRange: [Date | null, Date | null];\n    whitelabels: SelectedItem[];\n    countries: SelectedItem[];\n    playerTiers: SelectedItem[];\n    gameTypes: SelectedItem[];\n  };\n}\n\nexport interface ReportFilters {\n  dimension?: GroupDimension;\n  timeGrouping?: TimeGrouping;\n  dateRange?: [Date | null, Date | null];\n  metrics?: string[];\n  whitelabels?: SelectedItem[];\n  countries?: SelectedItem[];\n  playerTiers?: SelectedItem[];\n  gameTypes?: SelectedItem[];\n  aggregation?: AggregationFunction;\n  sortBy?: string;\n  sortDirection?: SortDirection;\n  limit?: number;\n  primary?: {\n    dateRange: [Date | null, Date | null];\n    whitelabels: SelectedItem[];\n    countries: SelectedItem[];\n    playerTiers: SelectedItem[];\n    gameTypes: SelectedItem[];\n  };\n  comparison?: {\n    dateRange: [Date | null, Date | null];\n    whitelabels: SelectedItem[];\n    countries: SelectedItem[];\n    playerTiers: SelectedItem[];\n    gameTypes: SelectedItem[];\n  };\n}\n\nexport interface SavedReportConfig {\n  id: string;\n  name: string;\n  timestamp: string;\n  configuration: {\n    dimension: GroupDimension;\n    timeGrouping: TimeGrouping;\n    visualizationType: VisualizationType;\n    metrics: string[];\n    filters: {\n      dateRange: [Date | null, Date | null];\n      whitelabels: SelectedItem[];\n      countries: SelectedItem[];\n      playerTiers: SelectedItem[];\n      gameTypes: SelectedItem[];\n    };\n    aggregation: AggregationFunction;\n    sortBy: string;\n    sortDirection: SortDirection;\n    limit: number;\n  };\n}\n\nexport interface DailyActionsReportProps extends CommonProps {\n  initialFilters?: ReportFilters;\n  loading?: boolean;\n  error?: Error | string | null;\n  data?: any;\n  onFilterChange?: (filters: ReportFilters) => void;\n  onRefresh?: (filters: ReportFilters) => void;\n  onExport?: (format: string, data?: any) => void;\n  onSave?: (config: any) => void;\n  onShare?: (data?: any) => void;\n  onExecuteQuery?: (query: string) => Promise<any>;\n  onDrillDown?: (filters: ReportFilters, item: any) => void;\n  savedConfigurations?: SavedReportConfig[];\n}\n\n/**\n * DailyActionsReport - Advanced comprehensive player analytics reporting\n *\n * Features:\n * - Multi-dimensional analysis (by player, whitelabel, country, etc.)\n * - Flexible time grouping (day, week, month, year, custom)\n * - Multiple visualization types (tables, charts, maps, etc.)\n * - Advanced filtering and comparison capabilities\n * - Drill-down analysis from macro to micro level\n * - Export in multiple formats\n * - Save and share report configurations\n */\nconst DailyActionsReport: React.FC<DailyActionsReportProps> = ({\n  initialFilters = {},\n  loading = false,\n  error = null,\n  data = {},\n  onFilterChange,\n  onRefresh,\n  onExport,\n  onSave,\n  onShare,\n  onExecuteQuery,\n  onDrillDown,\n  savedConfigurations = [],\n  sx\n}) => {\n  // ===== State Management =====\n  const [activeTab, setActiveTab] = useState<ReportTab>('overview');\n  const [visualizationType, setVisualizationType] = useState<VisualizationType>('table');\n  const [groupDimension, setGroupDimension] = useState<GroupDimension>('player');\n  const [timeGrouping, setTimeGrouping] = useState<TimeGrouping>('day');\n  const [showQueryPanel, setShowQueryPanel] = useState<boolean>(true);\n  const [customReportName, setCustomReportName] = useState<string>('');\n  const [advancedFiltersOpen, setAdvancedFiltersOpen] = useState<boolean>(false);\n  const [comparisonMode, setComparisonMode] = useState<boolean>(false);\n  const [comparisonFilters, setComparisonFilters] = useState<{\n    dateRange?: [Date | null, Date | null];\n    whitelabels?: SelectedItem[];\n    countries?: SelectedItem[];\n    playerTiers?: SelectedItem[];\n    gameTypes?: SelectedItem[];\n  }>({});\n  const [metricToSortBy, setMetricToSortBy] = useState<string>('totalRevenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [rowLimit, setRowLimit] = useState<number>(20);\n  const [selectedDateRange, setSelectedDateRange] = useState<[Date | null, Date | null]>([null, null]);\n  const [aggregationFunction, setAggregationFunction] = useState<AggregationFunction>('sum');\n  const [selectedWhitelabels, setSelectedWhitelabels] = useState<SelectedItem[]>([]);\n  const [selectedCountries, setSelectedCountries] = useState<SelectedItem[]>([]);\n  const [selectedPlayerTiers, setSelectedPlayerTiers] = useState<SelectedItem[]>([]);\n  const [selectedGameTypes, setSelectedGameTypes] = useState<SelectedItem[]>([]);\n  const [selectedMetrics, setSelectedMetrics] = useState<string[]>([\n    'deposits', 'withdrawals', 'bets', 'wins', 'netGaming', 'uniquePlayers'\n  ]);\n  const [drilldownPath, setDrilldownPath] = useState<DrilldownLevel[]>([]);\n  const [reportMode, setReportMode] = useState<ReportMode>('standard'); // standard, advanced, expert\n  const [isQueryExecuting, setIsQueryExecuting] = useState<boolean>(false);\n  const [queryError, setQueryError] = useState<string | null>(null);\n  const [nlQueryResults, setNlQueryResults] = useState<any>(null);\n\n  // ===== Constants & Options =====\n\n  // Group Dimension Options\n  const dimensions: DimensionOption[] = [\n    { value: 'player', label: 'Player', icon: <GroupIcon fontSize=\"small\" /> },\n    { value: 'whitelabel', label: 'White Label', icon: <BusinessIcon fontSize=\"small\" /> },\n    { value: 'country', label: 'Country', icon: <PublicIcon fontSize=\"small\" /> },\n    { value: 'gametype', label: 'Game Type', icon: <SportsEsportsIcon fontSize=\"small\" /> },\n    { value: 'tier', label: 'Player Tier', icon: <AccountBalanceWalletIcon fontSize=\"small\" /> },\n    { value: 'device', label: 'Device Type', icon: <VisibilityIcon fontSize=\"small\" /> },\n    { value: 'playerStatus', label: 'Player Status', icon: <TrendingUpIcon fontSize=\"small\" /> },\n    { value: 'registrationSource', label: 'Registration Source', icon: <SearchIcon fontSize=\"small\" /> }\n  ];\n\n  // Time Grouping Options\n  const timeGroupings: TimeGroupingOption[] = [\n    { value: 'day', label: 'Daily', icon: <EventIcon fontSize=\"small\" /> },\n    { value: 'week', label: 'Weekly', icon: <CalendarViewMonthIcon fontSize=\"small\" /> },\n    { value: 'month', label: 'Monthly', icon: <CalendarViewMonthIcon fontSize=\"small\" /> },\n    { value: 'quarter', label: 'Quarterly', icon: <CalendarViewMonthIcon fontSize=\"small\" /> },\n    { value: 'year', label: 'Yearly', icon: <CalendarViewMonthIcon fontSize=\"small\" /> },\n    { value: 'all', label: 'All Time', icon: <CalendarViewMonthIcon fontSize=\"small\" /> }\n  ];\n\n  // Visualization Type Options\n  const visualizationTypes: VisualizationOption[] = [\n    { value: 'table', label: 'Table', icon: <TableChartIcon fontSize=\"small\" /> },\n    { value: 'bar', label: 'Bar Chart', icon: <BarChartIcon fontSize=\"small\" /> },\n    { value: 'line', label: 'Line Chart', icon: <TimelineIcon fontSize=\"small\" /> },\n    { value: 'pie', label: 'Pie Chart', icon: <PieChartIcon fontSize=\"small\" /> },\n    { value: 'map', label: 'Map View', icon: <MapIcon fontSize=\"small\" /> },\n    { value: 'mixed', label: 'Mixed View', icon: <TuneIcon fontSize=\"small\" /> }\n  ];\n\n  // Metric Options\n  const availableMetrics: MetricOption[] = [\n    { value: 'deposits', label: 'Deposits', category: 'Financial', type: 'currency' },\n    { value: 'withdrawals', label: 'Withdrawals', category: 'Financial', type: 'currency' },\n    { value: 'bets', label: 'Total Bets', category: 'Activity', type: 'currency' },\n    { value: 'wins', label: 'Total Wins', category: 'Activity', type: 'currency' },\n    { value: 'netGaming', label: 'Net Gaming Revenue', category: 'Financial', type: 'currency' },\n    { value: 'uniquePlayers', label: 'Unique Players', category: 'User', type: 'count' },\n    { value: 'activeUsers', label: 'Active Users', category: 'User', type: 'count' },\n    { value: 'newRegistrations', label: 'New Registrations', category: 'User', type: 'count' },\n    { value: 'sessions', label: 'Total Sessions', category: 'Activity', type: 'count' },\n    { value: 'avgSessionDuration', label: 'Avg. Session Duration', category: 'Activity', type: 'time' },\n    { value: 'gamesPlayed', label: 'Games Played', category: 'Activity', type: 'count' },\n    { value: 'betsPerPlayer', label: 'Bets per Player', category: 'Activity', type: 'ratio' },\n    { value: 'avgBetSize', label: 'Average Bet Size', category: 'Activity', type: 'currency' },\n    { value: 'conversionRate', label: 'Conversion Rate', category: 'Performance', type: 'percentage' },\n    { value: 'retentionRate', label: 'Retention Rate', category: 'Performance', type: 'percentage' },\n    { value: 'churnRate', label: 'Churn Rate', category: 'Performance', type: 'percentage' },\n    { value: 'depositConversion', label: 'Deposit Conversion', category: 'Performance', type: 'percentage' },\n    { value: 'arpu', label: 'ARPU', category: 'Financial', type: 'currency' },\n    { value: 'arppu', label: 'ARPPU', category: 'Financial', type: 'currency' },\n    { value: 'ltv', label: 'Lifetime Value', category: 'Financial', type: 'currency' }\n  ];\n\n  // Aggregation Function Options\n  const aggregationFunctions: AggregationOption[] = [\n    { value: 'sum', label: 'Sum' },\n    { value: 'avg', label: 'Average' },\n    { value: 'min', label: 'Minimum' },\n    { value: 'max', label: 'Maximum' },\n    { value: 'count', label: 'Count' },\n    { value: 'countDistinct', label: 'Count Distinct' }\n  ];\n\n  // Report Mode Options\n  const reportModes: ReportModeOption[] = [\n    { value: 'standard', label: 'Standard', description: 'Easy to use interface with common options' },\n    { value: 'advanced', label: 'Advanced', description: 'More options and customization capabilities' },\n    { value: 'expert', label: 'Expert', description: 'Full control over all report parameters' }\n  ];\n\n  // Natural language query suggestions specific to daily actions\n  const queryExamples: string[] = [\n    \"Show me top 10 players by total deposits for last month\",\n    \"Compare revenue by country for Q2 vs Q1\",\n    \"Which white labels have the highest player retention rate?\",\n    \"Show daily bets and wins trend for VIP players\",\n    \"What's the average session duration by device type?\",\n    \"Which games generate the most revenue by country?\",\n    \"Show me players with declining activity in the last 3 months\"\n  ];\n\n  // ===== Handlers =====\n\n  // Handle tab change\n  const handleTabChange = (event: React.SyntheticEvent, newValue: ReportTab): void => {\n    setActiveTab(newValue);\n  };\n\n  // Handle dimension change\n  const handleDimensionChange = (event: SelectChangeEvent): void => {\n    setGroupDimension(event.target.value as GroupDimension);\n  };\n\n  // Handle time grouping change\n  const handleTimeGroupingChange = (event: SelectChangeEvent): void => {\n    setTimeGrouping(event.target.value as TimeGrouping);\n  };\n\n  // Handle visualization type change\n  const handleVisualizationTypeChange = (event: SelectChangeEvent): void => {\n    setVisualizationType(event.target.value as VisualizationType);\n  };\n\n  // Handle metric selection change\n  const handleMetricChange = (event: SelectChangeEvent<string[]>): void => {\n    const {\n      target: { value },\n    } = event;\n    setSelectedMetrics(typeof value === 'string' ? value.split(',') : value);\n  };\n\n  // Handle natural language query submission\n  const handleQuerySubmit = async (query: string): Promise<void> => {\n    if (!onExecuteQuery) return;\n\n    setIsQueryExecuting(true);\n    setQueryError(null);\n\n    try {\n      const results = await onExecuteQuery(query);\n      setNlQueryResults(results);\n    } catch (err) {\n      const error = err as Error;\n      setQueryError(error.message || 'Failed to execute query');\n    } finally {\n      setIsQueryExecuting(false);\n    }\n  };\n\n  // Handle filter change and trigger data refresh\n  const handleApplyFilters = (): void => {\n    const filters: ReportFilters = {\n      dimension: groupDimension,\n      timeGrouping,\n      dateRange: selectedDateRange,\n      metrics: selectedMetrics,\n      whitelabels: selectedWhitelabels,\n      countries: selectedCountries,\n      playerTiers: selectedPlayerTiers,\n      gameTypes: selectedGameTypes,\n      aggregation: aggregationFunction,\n      sortBy: metricToSortBy,\n      sortDirection,\n      limit: rowLimit\n    };\n\n    if (onFilterChange) {\n      onFilterChange(filters);\n    }\n\n    if (onRefresh) {\n      onRefresh(filters);\n    }\n  };\n\n  // Handle drill down\n  const handleDrillDown = (item: any): void => {\n    // Add current view to drill down path\n    const newDrilldownPath = [...drilldownPath, {\n      dimension: groupDimension,\n      timeGrouping,\n      filters: {\n        dateRange: selectedDateRange,\n        whitelabels: selectedWhitelabels,\n        countries: selectedCountries,\n        playerTiers: selectedPlayerTiers,\n        gameTypes: selectedGameTypes\n      }\n    }];\n\n    setDrilldownPath(newDrilldownPath);\n\n    // Determine next dimension based on current\n    let nextDimension: GroupDimension = 'player';\n    if (groupDimension === 'whitelabel') nextDimension = 'player';\n    else if (groupDimension === 'country') nextDimension = 'whitelabel';\n    else if (groupDimension === 'gametype') nextDimension = 'player';\n\n    setGroupDimension(nextDimension);\n\n    // Apply drill down filters\n    const drillDownFilters: ReportFilters = {\n      dimension: nextDimension,\n      timeGrouping,\n      dateRange: selectedDateRange,\n      metrics: selectedMetrics,\n      whitelabels: groupDimension === 'whitelabel' ? [item.id] : selectedWhitelabels,\n      countries: groupDimension === 'country' ? [item.id] : selectedCountries,\n      playerTiers: groupDimension === 'tier' ? [item.id] : selectedPlayerTiers,\n      gameTypes: groupDimension === 'gametype' ? [item.id] : selectedGameTypes,\n      aggregation: aggregationFunction,\n      sortBy: metricToSortBy,\n      sortDirection,\n      limit: rowLimit\n    };\n\n    if (onDrillDown) {\n      onDrillDown(drillDownFilters, item);\n    }\n  };\n\n  // Handle drill up (go back in drill down path)\n  const handleDrillUp = (index: number): void => {\n    // Go back to the specific level in the drill path\n    if (index >= 0 && index < drilldownPath.length) {\n      const targetLevel = drilldownPath[index];\n      const newDrilldownPath = drilldownPath.slice(0, index);\n\n      setDrilldownPath(newDrilldownPath);\n      setGroupDimension(targetLevel.dimension);\n      setTimeGrouping(targetLevel.timeGrouping);\n      setSelectedDateRange(targetLevel.filters.dateRange);\n      setSelectedWhitelabels(targetLevel.filters.whitelabels);\n      setSelectedCountries(targetLevel.filters.countries);\n      setSelectedPlayerTiers(targetLevel.filters.playerTiers);\n      setSelectedGameTypes(targetLevel.filters.gameTypes);\n\n      // Apply the filters\n      handleApplyFilters();\n    }\n  };\n\n  // Toggle comparison mode\n  const handleToggleComparison = (): void => {\n    setComparisonMode(!comparisonMode);\n    if (!comparisonMode) {\n      // Save current filters for comparison\n      setComparisonFilters({\n        dateRange: selectedDateRange,\n        whitelabels: selectedWhitelabels,\n        countries: selectedCountries,\n        playerTiers: selectedPlayerTiers,\n        gameTypes: selectedGameTypes\n      });\n    }\n  };\n\n  // Apply comparison\n  const handleApplyComparison = (): void => {\n    // Create filters object with both primary and comparison filters\n    const filters: ReportFilters = {\n      dimension: groupDimension,\n      timeGrouping,\n      metrics: selectedMetrics,\n      aggregation: aggregationFunction,\n      sortBy: metricToSortBy,\n      sortDirection,\n      limit: rowLimit,\n      primary: {\n        dateRange: selectedDateRange,\n        whitelabels: selectedWhitelabels,\n        countries: selectedCountries,\n        playerTiers: selectedPlayerTiers,\n        gameTypes: selectedGameTypes\n      },\n      comparison: comparisonFilters as {\n        dateRange: [Date | null, Date | null];\n        whitelabels: SelectedItem[];\n        countries: SelectedItem[];\n        playerTiers: SelectedItem[];\n        gameTypes: SelectedItem[];\n      }\n    };\n\n    if (onFilterChange) {\n      onFilterChange(filters);\n    }\n\n    if (onRefresh) {\n      onRefresh(filters);\n    }\n  };\n\n  // Save current report configuration\n  const handleSaveReport = (): void => {\n    if (!customReportName.trim()) return;\n\n    const reportConfig = {\n      name: customReportName,\n      timestamp: new Date().toISOString(),\n      configuration: {\n        dimension: groupDimension,\n        timeGrouping,\n        visualizationType,\n        metrics: selectedMetrics,\n        filters: {\n          dateRange: selectedDateRange,\n          whitelabels: selectedWhitelabels,\n          countries: selectedCountries,\n          playerTiers: selectedPlayerTiers,\n          gameTypes: selectedGameTypes\n        },\n        aggregation: aggregationFunction,\n        sortBy: metricToSortBy,\n        sortDirection,\n        limit: rowLimit\n      }\n    };\n\n    if (onSave) {\n      onSave(reportConfig);\n    }\n\n    setCustomReportName('');\n  };\n\n  // Load a saved report configuration\n  const handleLoadConfiguration = (config: SavedReportConfig): void => {\n    if (!config || !config.configuration) return;\n\n    const { configuration } = config;\n\n    setGroupDimension(configuration.dimension);\n    setTimeGrouping(configuration.timeGrouping);\n    setVisualizationType(configuration.visualizationType);\n    setSelectedMetrics(configuration.metrics);\n    setSelectedDateRange(configuration.filters.dateRange);\n    setSelectedWhitelabels(configuration.filters.whitelabels);\n    setSelectedCountries(configuration.filters.countries);\n    setSelectedPlayerTiers(configuration.filters.playerTiers);\n    setSelectedGameTypes(configuration.filters.gameTypes);\n    setAggregationFunction(configuration.aggregation);\n    setMetricToSortBy(configuration.sortBy);\n    setSortDirection(configuration.sortDirection);\n    setRowLimit(configuration.limit);\n\n    // Apply loaded configuration\n    handleApplyFilters();\n  };\n\n  // Generate the report sections for ReportViewer\n  const generateReportSections = () => {\n    const sections = [];\n\n    // Main data visualization section\n    sections.push({\n      id: 'data-visualization',\n      title: `${dimensions.find(d => d.value === groupDimension)?.label || 'Data'} Analysis by ${timeGroupings.find(t => t.value === timeGrouping)?.label || 'Time'}`,\n      description: `${visualizationTypes.find(v => v.value === visualizationType)?.label || 'Visualization'} of selected metrics`,\n      content: (\n        <Box p={2}>\n          {loading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <Typography variant=\"body1\">\n              {/* In a real implementation, this would be dynamic based on visualizationType */}\n              Visualization of player daily actions data would be displayed here.\n              {comparisonMode && 'Comparison view is enabled.'}\n            </Typography>\n          )}\n        </Box>\n      )\n    });\n\n    // If we have NL query results, add that section\n    if (nlQueryResults) {\n      sections.push({\n        id: 'query-results',\n        title: 'Query Results',\n        description: 'Results from your natural language query',\n        content: (\n          <Box p={2}>\n            <Typography variant=\"body1\">\n              Query results would be displayed here.\n            </Typography>\n          </Box>\n        )\n      });\n    }\n\n    // Add summary section if in overview tab\n    if (activeTab === 'overview') {\n      sections.push({\n        id: 'summary-metrics',\n        title: 'Summary Metrics',\n        description: 'Key performance indicators and summary statistics',\n        content: (\n          <Box p={2}>\n            <Grid container spacing={3}>\n              {selectedMetrics.slice(0, 4).map((metric) => {\n                const metricInfo = availableMetrics.find(m => m.value === metric);\n                return (\n                  <Grid item xs={12} sm={6} md={3} key={metric}>\n                    <Paper sx={{ p: 2 }}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        {metricInfo?.label || metric}\n                      </Typography>\n                      <Typography variant=\"h4\" sx={{ mt: 1 }}>\n                        {loading ? (\n                          <CircularProgress size={24} />\n                        ) : (\n                          /* Mock data - would be replaced with actual data */\n                          metric === 'deposits' ? '$1,245,678' :\n                          metric === 'bets' ? '$3,456,789' :\n                          metric === 'wins' ? '$2,987,654' :\n                          metric === 'netGaming' ? '$469,135' :\n                          metric === 'uniquePlayers' ? '12,345' :\n                          '87.5%'\n                        )}\n                      </Typography>\n                      <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                        <Chip\n                          size=\"small\"\n                          color=\"success\"\n                          label=\"+8.2%\"\n                          icon={<TrendingUpIcon />}\n                          sx={{ height: 20, '& .MuiChip-label': { px: 1 }, '& .MuiChip-icon': { ml: 0.5 } }}\n                        />\n                        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: 1 }}>\n                          vs previous period\n                        </Typography>\n                      </Box>\n                    </Paper>\n                  </Grid>\n                );\n              })}\n            </Grid>\n          </Box>\n        )\n      });\n    }\n\n    // Add trend analysis section\n    sections.push({\n      id: 'trend-analysis',\n      title: 'Trend Analysis',\n      description: 'Trends and patterns over time',\n      content: (\n        <Box p={2}>\n          <Typography variant=\"body1\">\n            Time series analysis and trend visualization would be displayed here.\n          </Typography>\n        </Box>\n      )\n    });\n\n    return sections;\n  };\n\n  // ===== Main Render =====\n  return (\n    <Box sx={{ width: '100%', ...sx }}>\n      {/* Natural Language Query Panel */}\n      {showQueryPanel && (\n        <NaturalLanguageQueryPanel\n          onSearch={handleQuerySubmit}\n          onSaveQuery={(query: string) => {\n            // Save query logic would go here\n            console.log('Saving query:', query);\n          }}\n          loading={isQueryExecuting}\n          error={queryError}\n          showSuggestions={true}\n          suggestions={queryExamples}\n        />\n      )}\n\n      {/* Report Configuration and Control Panel */}\n      <Paper variant=\"outlined\" sx={{ p: 3, mb: 3, borderRadius: 1 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n          <Typography variant=\"h5\" sx={{ display: 'flex', alignItems: 'center' }}>\n            <TableChartIcon sx={{ mr: 1 }} />\n            Daily Actions Report\n          </Typography>\n\n          <Box sx={{ display: 'flex', gap: 2 }}>\n            {/* Save Report Config */}\n            <TextField\n              size=\"small\"\n              placeholder=\"Name this report\"\n              value={customReportName}\n              onChange={(e) => setCustomReportName(e.target.value)}\n              sx={{ width: 180 }}\n            />\n            <Button\n              variant=\"outlined\"\n              startIcon={<SaveIcon />}\n              disabled={!customReportName.trim()}\n              onClick={handleSaveReport}\n            >\n              Save\n            </Button>\n\n            {/* Load Saved Config */}\n            {savedConfigurations.length > 0 && (\n              <FormControl size=\"small\" sx={{ minWidth: 180 }}>\n                <InputLabel>Load Configuration</InputLabel>\n                <Select\n                  value=\"\"\n                  onChange={(e) => {\n                    const selectedConfig = savedConfigurations.find(config => config.id === e.target.value);\n                    if (selectedConfig) handleLoadConfiguration(selectedConfig);\n                  }}\n                  label=\"Load Configuration\"\n                >\n                  <MenuItem value=\"\" disabled>\n                    <em>Select saved report</em>\n                  </MenuItem>\n                  {savedConfigurations.map((config) => (\n                    <MenuItem key={config.id} value={config.id}>\n                      {config.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            )}\n\n            {/* Mode Selector */}\n            <FormControl size=\"small\" sx={{ minWidth: 130 }}>\n              <InputLabel>Report Mode</InputLabel>\n              <Select\n                value={reportMode}\n                onChange={(e) => setReportMode(e.target.value as ReportMode)}\n                label=\"Report Mode\"\n              >\n                {reportModes.map((mode) => (\n                  <MenuItem key={mode.value} value={mode.value}>\n                    {mode.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n\n            {/* Toggle NL Query Panel */}\n            <Button\n              variant={showQueryPanel ? \"contained\" : \"outlined\"}\n              color=\"primary\"\n              onClick={() => setShowQueryPanel(!showQueryPanel)}\n            >\n              {showQueryPanel ? \"Hide Query\" : \"Show Query\"}\n            </Button>\n          </Box>\n        </Box>\n\n        <Divider sx={{ my: 2 }} />\n\n        {/* Main Filter Controls */}\n        <Grid container spacing={3}>\n          {/* Group Dimension */}\n          <Grid item xs={12} sm={6} md={3}>\n            <FormControl fullWidth size=\"small\">\n              <InputLabel>Group By</InputLabel>\n              <Select\n                value={groupDimension}\n                onChange={handleDimensionChange}\n                label=\"Group By\"\n                startAdornment={\n                  <InputAdornment position=\"start\">\n                    {dimensions.find(d => d.value === groupDimension)?.icon || <GroupIcon fontSize=\"small\" />}\n                  </InputAdornment>\n                }\n              >\n                {dimensions.map((dimension) => (\n                  <MenuItem key={dimension.value} value={dimension.value}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      {dimension.icon}\n                      <Typography sx={{ ml: 1 }}>{dimension.label}</Typography>\n                    </Box>\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          {/* Time Grouping */}\n          <Grid item xs={12} sm={6} md={3}>\n            <FormControl fullWidth size=\"small\">\n              <InputLabel>Time Grouping</InputLabel>\n              <Select\n                value={timeGrouping}\n                onChange={handleTimeGroupingChange}\n                label=\"Time Grouping\"\n                startAdornment={\n                  <InputAdornment position=\"start\">\n                    {timeGroupings.find(t => t.value === timeGrouping)?.icon || <EventIcon fontSize=\"small\" />}\n                  </InputAdornment>\n                }\n              >\n                {timeGroupings.map((time) => (\n                  <MenuItem key={time.value} value={time.value}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      {time.icon}\n                      <Typography sx={{ ml: 1 }}>{time.label}</Typography>\n                    </Box>\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          {/* Visualization Type */}\n          <Grid item xs={12} sm={6} md={3}>\n            <FormControl fullWidth size=\"small\">\n              <InputLabel>Visualization</InputLabel>\n              <Select\n                value={visualizationType}\n                onChange={handleVisualizationTypeChange}\n                label=\"Visualization\"\n                startAdornment={\n                  <InputAdornment position=\"start\">\n                    {visualizationTypes.find(v => v.value === visualizationType)?.icon || <TableChartIcon fontSize=\"small\" />}\n                  </InputAdornment>\n                }\n              >\n                {visualizationTypes.map((viz) => (\n                  <MenuItem key={viz.value} value={viz.value}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      {viz.icon}\n                      <Typography sx={{ ml: 1 }}>{viz.label}</Typography>\n                    </Box>\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          {/* Date Range */}\n          <Grid item xs={12} sm={6} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <Box sx={{ display: 'flex', gap: 1 }}>\n                <DatePicker\n                  label=\"From\"\n                  value={selectedDateRange[0]}\n                  onChange={(newValue) => {\n                    setSelectedDateRange([newValue, selectedDateRange[1]]);\n                  }}\n                  slotProps={{ textField: { size: 'small', fullWidth: true } }}\n                />\n                <DatePicker\n                  label=\"To\"\n                  value={selectedDateRange[1]}\n                  onChange={(newValue) => {\n                    setSelectedDateRange([selectedDateRange[0], newValue]);\n                  }}\n                  slotProps={{ textField: { size: 'small', fullWidth: true } }}\n                />\n              </Box>\n            </LocalizationProvider>\n          </Grid>\n        </Grid>\n\n        {/* Advanced Filters Toggle */}\n        <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between' }}>\n          <Button\n            startIcon={<FilterListIcon />}\n            onClick={() => setAdvancedFiltersOpen(!advancedFiltersOpen)}\n            sx={{ borderBottom: advancedFiltersOpen ? '2px solid' : 'none', borderRadius: 0, pb: 0.5 }}\n            color=\"primary\"\n          >\n            {advancedFiltersOpen ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n          </Button>\n\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Button\n              variant=\"outlined\"\n              startIcon={<RefreshIcon />}\n              onClick={handleApplyFilters}\n              disabled={loading}\n            >\n              Refresh Data\n            </Button>\n\n            <Button\n              variant={comparisonMode ? 'contained' : 'outlined'}\n              startIcon={<CompareArrowsIcon />}\n              onClick={handleToggleComparison}\n              disabled={loading}\n              color={comparisonMode ? 'primary' : 'inherit'}\n            >\n              {comparisonMode ? 'Comparison Mode' : 'Enable Comparison'}\n            </Button>\n          </Box>\n        </Box>\n\n        {/* Advanced Filters Panel */}\n        <Collapse in={advancedFiltersOpen}>\n          <Box sx={{ mt: 3, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\n            <Grid container spacing={3}>\n              {/* Metrics Selection */}\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth size=\"small\">\n                  <InputLabel>Metrics</InputLabel>\n                  <Select\n                    multiple\n                    value={selectedMetrics}\n                    onChange={handleMetricChange}\n                    input={<OutlinedInput label=\"Metrics\" />}\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {selected.map((value) => (\n                          <Chip\n                            key={value}\n                            label={availableMetrics.find(m => m.value === value)?.label || value}\n                            size=\"small\"\n                          />\n                        ))}\n                      </Box>\n                    )}\n                    MenuProps={{\n                      PaperProps: {\n                        style: {\n                          maxHeight: 300,\n                        },\n                      },\n                    }}\n                  >\n                    <ListSubheader>Financial</ListSubheader>\n                    {availableMetrics.filter(m => m.category === 'Financial').map((metric) => (\n                      <MenuItem key={metric.value} value={metric.value}>\n                        <Checkbox checked={selectedMetrics.indexOf(metric.value) > -1} />\n                        <ListItemText primary={metric.label} />\n                      </MenuItem>\n                    ))}\n\n                    <ListSubheader>Activity</ListSubheader>\n                    {availableMetrics.filter(m => m.category === 'Activity').map((metric) => (\n                      <MenuItem key={metric.value} value={metric.value}>\n                        <Checkbox checked={selectedMetrics.indexOf(metric.value) > -1} />\n                        <ListItemText primary={metric.label} />\n                      </MenuItem>\n                    ))}\n\n                    <ListSubheader>User</ListSubheader>\n                    {availableMetrics.filter(m => m.category === 'User').map((metric) => (\n                      <MenuItem key={metric.value} value={metric.value}>\n                        <Checkbox checked={selectedMetrics.indexOf(metric.value) > -1} />\n                        <ListItemText primary={metric.label} />\n                      </MenuItem>\n                    ))}\n\n                    <ListSubheader>Performance</ListSubheader>\n                    {availableMetrics.filter(m => m.category === 'Performance').map((metric) => (\n                      <MenuItem key={metric.value} value={metric.value}>\n                        <Checkbox checked={selectedMetrics.indexOf(metric.value) > -1} />\n                        <ListItemText primary={metric.label} />\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Aggregation and Sorting */}\n              <Grid item xs={12} md={6}>\n                <Grid container spacing={2}>\n                  {/* Aggregation Function */}\n                  <Grid item xs={12} sm={4}>\n                    <FormControl fullWidth size=\"small\">\n                      <InputLabel>Aggregation</InputLabel>\n                      <Select\n                        value={aggregationFunction}\n                        onChange={(e) => setAggregationFunction(e.target.value as AggregationFunction)}\n                        label=\"Aggregation\"\n                      >\n                        {aggregationFunctions.map((agg) => (\n                          <MenuItem key={agg.value} value={agg.value}>\n                            {agg.label}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  {/* Sort By */}\n                  <Grid item xs={12} sm={4}>\n                    <FormControl fullWidth size=\"small\">\n                      <InputLabel>Sort By</InputLabel>\n                      <Select\n                        value={metricToSortBy}\n                        onChange={(e) => setMetricToSortBy(e.target.value)}\n                        label=\"Sort By\"\n                      >\n                        {selectedMetrics.map((metric) => (\n                          <MenuItem key={metric} value={metric}>\n                            {availableMetrics.find(m => m.value === metric)?.label || metric}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  {/* Sort Direction */}\n                  <Grid item xs={12} sm={4}>\n                    <FormControl fullWidth size=\"small\">\n                      <InputLabel>Direction</InputLabel>\n                      <Select\n                        value={sortDirection}\n                        onChange={(e) => setSortDirection(e.target.value as SortDirection)}\n                        label=\"Direction\"\n                      >\n                        <MenuItem value=\"asc\">Ascending</MenuItem>\n                        <MenuItem value=\"desc\">Descending</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  {/* Row Limit */}\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Row Limit\"\n                      type=\"number\"\n                      size=\"small\"\n                      value={rowLimit}\n                      onChange={(e) => setRowLimit(parseInt(e.target.value) || 20)}\n                      InputProps={{\n                        inputProps: {\n                          min: 1,\n                          max: 1000\n                        }\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Box>\n        </Collapse>\n\n        {/* Comparison Mode Settings */}\n        {comparisonMode && (\n          <Box sx={{ mt: 3, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: '1px dashed', borderColor: 'primary.main' }}>\n            <Typography variant=\"subtitle1\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n              <CompareArrowsIcon sx={{ mr: 1 }} />\n              Comparison Settings\n            </Typography>\n\n            <Grid container spacing={2}>\n              {/* Comparison Date Range */}\n              <Grid item xs={12} md={4}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <Box sx={{ display: 'flex', gap: 1 }}>\n                    <DatePicker\n                      label=\"Compare From\"\n                      value={comparisonFilters.dateRange ? comparisonFilters.dateRange[0] : null}\n                      onChange={(newValue) => {\n                        setComparisonFilters({\n                          ...comparisonFilters,\n                          dateRange: [newValue, comparisonFilters.dateRange ? comparisonFilters.dateRange[1] : null]\n                        });\n                      }}\n                      slotProps={{ textField: { size: 'small', fullWidth: true } }}\n                    />\n                    <DatePicker\n                      label=\"Compare To\"\n                      value={comparisonFilters.dateRange ? comparisonFilters.dateRange[1] : null}\n                      onChange={(newValue) => {\n                        setComparisonFilters({\n                          ...comparisonFilters,\n                          dateRange: [comparisonFilters.dateRange ? comparisonFilters.dateRange[0] : null, newValue]\n                        });\n                      }}\n                      slotProps={{ textField: { size: 'small', fullWidth: true } }}\n                    />\n                  </Box>\n                </LocalizationProvider>\n              </Grid>\n\n              {/* Quick Date Comparison Presets */}\n              <Grid item xs={12} md={4}>\n                <FormControl fullWidth size=\"small\">\n                  <InputLabel>Quick Compare</InputLabel>\n                  <Select\n                    value=\"\"\n                    onChange={(e) => {\n                      // Logic to set comparison date range based on preset\n                      const now = new Date();\n                      const primaryStart = selectedDateRange[0] || now;\n                      const primaryEnd = selectedDateRange[1] || now;\n                      const primaryRange = primaryEnd.getTime() - primaryStart.getTime();\n\n                      let comparisonStart, comparisonEnd;\n\n                      switch(e.target.value) {\n                        case 'previous_period':\n                          comparisonStart = new Date(primaryStart.getTime() - primaryRange);\n                          comparisonEnd = new Date(primaryEnd.getTime() - primaryRange);\n                          break;\n                        case 'previous_year':\n                          comparisonStart = new Date(primaryStart);\n                          comparisonStart.setFullYear(comparisonStart.getFullYear() - 1);\n                          comparisonEnd = new Date(primaryEnd);\n                          comparisonEnd.setFullYear(comparisonEnd.getFullYear() - 1);\n                          break;\n                        case 'ytd':\n                          comparisonStart = new Date(now.getFullYear() - 1, 0, 1);\n                          comparisonEnd = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n                          break;\n                        default:\n                          return;\n                      }\n\n                      setComparisonFilters({\n                        ...comparisonFilters,\n                        dateRange: [comparisonStart, comparisonEnd]\n                      });\n                    }}\n                    label=\"Quick Compare\"\n                  >\n                    <MenuItem value=\"\" disabled>\n                      <em>Select comparison period</em>\n                    </MenuItem>\n                    <MenuItem value=\"previous_period\">Previous Period</MenuItem>\n                    <MenuItem value=\"previous_year\">Previous Year</MenuItem>\n                    <MenuItem value=\"ytd\">Year-to-Date</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Apply Comparison Button */}\n              <Grid item xs={12} md={4} sx={{ display: 'flex', alignItems: 'center' }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleApplyComparison}\n                  fullWidth\n                  disabled={!comparisonFilters.dateRange || !comparisonFilters.dateRange[0] || !comparisonFilters.dateRange[1]}\n                >\n                  Apply Comparison\n                </Button>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n\n        {/* Drill Down Path Breadcrumbs */}\n        {drilldownPath.length > 0 && (\n          <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', flexWrap: 'wrap', gap: 1 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Drill Path:\n            </Typography>\n            {drilldownPath.map((level, index) => (\n              <React.Fragment key={index}>\n                <Chip\n                  label={`${dimensions.find(d => d.value === level.dimension)?.label || level.dimension}`}\n                  size=\"small\"\n                  onClick={() => handleDrillUp(index)}\n                  clickable\n                />\n                {index < drilldownPath.length - 1 && (\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mx: 0.5 }}>\n                    &gt;\n                  </Typography>\n                )}\n              </React.Fragment>\n            ))}\n            <Chip\n              label={dimensions.find(d => d.value === groupDimension)?.label || groupDimension}\n              size=\"small\"\n              color=\"primary\"\n              variant=\"outlined\"\n            />\n          </Box>\n        )}\n      </Paper>\n\n      {/* Tabs for report views */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Tabs\n          value={activeTab}\n          onChange={handleTabChange}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n        >\n          <Tab label=\"Overview\" value=\"overview\" icon={<TableChartIcon />} iconPosition=\"start\" />\n          <Tab label=\"Trends\" value=\"trends\" icon={<TimelineIcon />} iconPosition=\"start\" />\n          <Tab label=\"Players\" value=\"players\" icon={<GroupIcon />} iconPosition=\"start\" />\n          <Tab label=\"Geography\" value=\"geography\" icon={<PublicIcon />} iconPosition=\"start\" />\n          <Tab label=\"White Labels\" value=\"whitelabels\" icon={<BusinessIcon />} iconPosition=\"start\" />\n          <Tab label=\"Games\" value=\"games\" icon={<SportsEsportsIcon />} iconPosition=\"start\" />\n        </Tabs>\n      </Box>\n\n      {/* Main Report Content using ReportViewer */}\n      <ReportViewer\n        title={`Daily Actions - ${dimensions.find(d => d.value === groupDimension)?.label || 'Report'}`}\n        description={`Analysis of player metrics grouped by ${dimensions.find(d => d.value === groupDimension)?.label.toLowerCase() || 'dimension'} with ${timeGroupings.find(t => t.value === timeGrouping)?.label.toLowerCase() || 'time'} grouping.`}\n        loading={loading}\n        error={error}\n        sections={generateReportSections()}\n        data={data}\n        onRefresh={handleApplyFilters}\n        onExport={onExport}\n        onSave={handleSaveReport}\n        onShare={onShare}\n        showExport={true}\n      />\n\n      {/* Table View for Tabular Data (shown only when in table visualization) */}\n      {visualizationType === 'table' && data && (\n        <Card\n          title=\"Data Table\"\n          subheader=\"Detailed tabular view of the data\"\n          sx={{ mt: 3 }}\n        >\n          <Box p={2}>\n            <Typography variant=\"body1\">\n              Detailed data table would be displayed here.\n              {comparisonMode && ' Comparison data would be shown side by side.'}\n            </Typography>\n          </Box>\n        </Card>\n      )}\n    </Box>\n  );\n};\n\nexport default DailyActionsReport;\n","/**\n * Mock data for component showcase\n */\n\n// Mock data for filter components\nexport const mockFilterData = {\n  dataSource: {\n    schema: [\n      { id: 'date', name: 'Date', type: 'date', filterable: true, description: 'Transaction date' },\n      { id: 'amount', name: 'Amount', type: 'number', filterable: true, description: 'Transaction amount' },\n      { id: 'status', name: 'Status', type: 'string', filterable: true, description: 'Transaction status' },\n      { id: 'customer', name: 'Customer', type: 'string', filterable: true, description: 'Customer name' },\n      { id: 'country', name: 'Country', type: 'string', filterable: true, description: 'Country' },\n      { id: 'isActive', name: 'Is Active', type: 'boolean', filterable: true, description: 'Active status' }\n    ]\n  },\n  filters: [\n    {\n      id: 'filter_1',\n      field: 'date',\n      operator: 'between',\n      value: { from: new Date('2023-01-01'), to: new Date('2023-12-31') },\n      displayValue: 'From 01/01/2023 to 12/31/2023'\n    },\n    {\n      id: 'filter_2',\n      field: 'amount',\n      operator: 'greaterThan',\n      value: '1000',\n      displayValue: '1000'\n    }\n  ]\n};\n\n// Mock data for report components\nexport const mockReportData = {\n  sections: [\n    {\n      id: 'section-1',\n      title: 'Summary Metrics',\n      description: 'Key performance indicators',\n      content: 'This section would display summary metrics and KPIs.'\n    },\n    {\n      id: 'section-2',\n      title: 'Data Visualization',\n      description: 'Charts and graphs',\n      content: 'This section would display charts and data visualizations.'\n    },\n    {\n      id: 'section-3',\n      title: 'Detailed Data',\n      description: 'Tabular data display',\n      content: 'This section would display detailed tabular data.'\n    }\n  ],\n  data: {\n    summary: {\n      totalRevenue: 1245678,\n      totalOrders: 8765,\n      averageOrderValue: 142.12,\n      conversionRate: 3.45\n    },\n    byDimension: [\n      { id: 'dim-1', name: 'Category A', value: 450000 },\n      { id: 'dim-2', name: 'Category B', value: 325000 },\n      { id: 'dim-3', name: 'Category C', value: 275000 },\n      { id: 'dim-4', name: 'Category D', value: 195678 }\n    ]\n  }\n};\n\n// Mock data for natural language query\nexport const mockQuerySuggestions = [\n  \"Show me total revenue by month for last quarter\",\n  \"What are the top 5 performing products?\",\n  \"Compare conversion rates between desktop and mobile\",\n  \"Show user growth trend over the past year\",\n  \"Which countries have the highest average order value?\",\n  \"Show me daily active users for the past week\"\n];\n\n// Mock data for daily actions report\nexport const mockDailyActionsData = {\n  summary: {\n    totalRegistrations: 12345,\n    totalFTD: 5678,\n    totalDeposits: 98765,\n    totalCashouts: 76543,\n    totalGGR: 543210\n  },\n  dailyActions: [\n    {\n      id: 'day-1',\n      date: '2023-05-01',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 45,\n      ftd: 22,\n      deposits: 156,\n      paidCashouts: 89,\n      ggrCasino: 3450,\n      ggrSport: 1250,\n      ggrLive: 980,\n      totalGGR: 5680\n    },\n    {\n      id: 'day-2',\n      date: '2023-05-02',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 38,\n      ftd: 19,\n      deposits: 142,\n      paidCashouts: 76,\n      ggrCasino: 3120,\n      ggrSport: 1180,\n      ggrLive: 850,\n      totalGGR: 5150\n    },\n    {\n      id: 'day-3',\n      date: '2023-05-03',\n      whiteLabelName: 'Casino Royale',\n      whiteLabelId: 'casino-royale',\n      registrations: 52,\n      ftd: 26,\n      deposits: 178,\n      paidCashouts: 95,\n      ggrCasino: 3780,\n      ggrSport: 1320,\n      ggrLive: 1050,\n      totalGGR: 6150\n    },\n    {\n      id: 'day-4',\n      date: '2023-05-01',\n      whiteLabelName: 'Lucky Spin',\n      whiteLabelId: 'lucky-spin',\n      registrations: 35,\n      ftd: 17,\n      deposits: 128,\n      paidCashouts: 65,\n      ggrCasino: 2850,\n      ggrSport: 980,\n      ggrLive: 720,\n      totalGGR: 4550\n    }\n  ]\n};\n\nexport default {\n  mockFilterData,\n  mockReportData,\n  mockQuerySuggestions,\n  mockDailyActionsData\n};\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Tabs,\n  Tab,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemButton,\n  Button,\n  Card as MuiCard,\n  CardContent,\n  CardHeader\n} from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// Import report components\nimport {\n  ReportFilterSelector,\n  ReportColumnSelector,\n  ReportDataSourceSelector,\n  ReportFilterSelector as ReportFilter,\n  ReportList,\n  ReportPreview,\n  ReportScheduleDialog,\n  ReportShareDialog,\n  ReportTemplate\n} from '../../components/reports';\nimport NaturalLanguageQueryPanel from '../../components/reports/NaturalLanguageQueryPanel';\nimport ReportViewer from '../../components/reports/ReportViewer';\nimport DailyActionsReport from '../../components/reports/DailyActionsReport';\n\n// Import mock data\nimport {\n  mockFilterData,\n  mockReportData,\n  mockQuerySuggestions,\n  mockDailyActionsData\n} from '../../mockData/showcase';\n\n// Define component categories\ninterface ComponentCategory {\n  id: string;\n  name: string;\n  components: ComponentItem[];\n}\n\ninterface ComponentItem {\n  id: string;\n  name: string;\n  description: string;\n  component: React.ReactNode;\n}\n\n/**\n * Report Components Showcase Page\n * Displays report UI components with mock data for exploration\n */\nconst ReportComponentsShowcase: React.FC = () => {\n  const [selectedCategory, setSelectedCategory] = useState<string>('filters');\n  const [selectedComponent, setSelectedComponent] = useState<string>('reportFilterSelector');\n\n  // Prepare mock data for components\n  const mockReportSections = mockReportData.sections.map(section => ({\n    ...section,\n    content: (\n      <Box p={2}>\n        <Typography variant=\"body1\">\n          {section.content}\n        </Typography>\n      </Box>\n    )\n  }));\n\n  // Define component categories and their components\n  const componentCategories: ComponentCategory[] = [\n    {\n      id: 'filters',\n      name: 'Filters & Selectors',\n      components: [\n        {\n          id: 'reportFilterSelector',\n          name: 'Report Filter Selector',\n          description: 'Component for defining report filters',\n          component: (\n            <Paper sx={{ p: 3 }}>\n              <ReportFilterSelector\n                dataSource={mockFilterData.dataSource}\n                filters={mockFilterData.filters}\n                onChange={(filters) => console.log('Filters changed:', filters)}\n              />\n            </Paper>\n          )\n        },\n\n        {\n          id: 'reportColumnSelector',\n          name: 'Report Column Selector',\n          description: 'Component for selecting columns to display in a report',\n          component: (\n            <Paper sx={{ p: 3 }}>\n              <ReportColumnSelector\n                dataSource={{\n                  schema: [\n                    { id: 'date', name: 'Date', type: 'date' },\n                    { id: 'label', name: 'Label', type: 'string' },\n                    { id: 'country', name: 'Country', type: 'string' },\n                    { id: 'registrations', name: 'Registrations', type: 'number' },\n                    { id: 'deposits', name: 'Deposits', type: 'number' },\n                    { id: 'withdrawals', name: 'Withdrawals', type: 'number' }\n                  ]\n                }}\n                selectedColumns={[\n                  { id: 'date', name: 'Date', type: 'date', width: '150px', visible: true, aggregation: null },\n                  { id: 'label', name: 'Label', type: 'string', width: '150px', visible: true, aggregation: null },\n                  { id: 'registrations', name: 'Registrations', type: 'number', width: '150px', visible: true, aggregation: null },\n                  { id: 'deposits', name: 'Deposits', type: 'number', width: '150px', visible: true, aggregation: null },\n                  { id: 'withdrawals', name: 'Withdrawals', type: 'number', width: '150px', visible: false, aggregation: null }\n                ]}\n                onChange={(columns) => console.log('Columns changed:', columns)}\n              />\n            </Paper>\n          )\n        },\n        {\n          id: 'reportDataSourceSelector',\n          name: 'Report Data Source Selector',\n          description: 'Component for selecting the data source for a report',\n          component: (\n            <Paper sx={{ p: 3 }}>\n              <ReportDataSourceSelector\n                availableDataSources={[\n                  { id: 'dailyActions', name: 'Daily Actions', type: 'database', description: 'Daily player activity data' },\n                  { id: 'transactions', name: 'Transactions', type: 'database', description: 'Financial transaction data' },\n                  { id: 'players', name: 'Players', type: 'database', description: 'Player profile data' }\n                ]}\n                selected={{ id: 'dailyActions', name: 'Daily Actions', type: 'database', description: 'Daily player activity data' }}\n                onChange={(dataSource) => console.log('Data source changed:', dataSource)}\n              />\n            </Paper>\n          )\n        }\n      ]\n    },\n    {\n      id: 'reports',\n      name: 'Report Components',\n      components: [\n        {\n          id: 'reportViewer',\n          name: 'Report Viewer',\n          description: 'Component for displaying report data and sections',\n          component: (\n            <ReportViewer\n              title=\"Sample Report\"\n              description=\"This is a sample report for demonstration purposes\"\n              sections={mockReportSections}\n              data={mockReportData.data}\n              onRefresh={() => console.log('Refresh report')}\n              onExport={(format) => console.log('Export report as', format)}\n              showExport={true}\n            />\n          )\n        },\n        {\n          id: 'dailyActionsReport',\n          name: 'Daily Actions Report',\n          description: 'Comprehensive daily actions reporting component',\n          component: (\n            <DailyActionsReport\n              data={mockDailyActionsData}\n              onFilterChange={(filters) => console.log('Filters changed:', filters)}\n              onRefresh={(filters) => console.log('Refresh with filters:', filters)}\n              onExport={(format) => console.log('Export as', format)}\n            />\n          )\n        },\n        {\n          id: 'reportPreview',\n          name: 'Report Preview',\n          description: 'Component for previewing a report before generating it',\n          component: (\n            <Paper sx={{ p: 3 }}>\n              <ReportPreview\n                config={{\n                  name: 'Daily Actions Report',\n                  description: 'Summary of daily player actions',\n                  dataSource: { id: 'dailyActions', name: 'Daily Actions' },\n                  filters: [\n                    { column: 'dateRange', operator: 'equals', value: 'Last 7 days' },\n                    { column: 'labels', operator: 'equals', value: 'All' },\n                    { column: 'groupBy', operator: 'equals', value: 'Day' }\n                  ],\n                  columns: [\n                    { id: 'date', name: 'Date', type: 'date', width: '150px', visible: true, aggregation: null },\n                    { id: 'label', name: 'Label', type: 'string', width: '150px', visible: true, aggregation: null },\n                    { id: 'registrations', name: 'Registrations', type: 'number', width: '150px', visible: true, aggregation: null },\n                    { id: 'deposits', name: 'Deposits', type: 'number', width: '150px', visible: true, aggregation: null },\n                    { id: 'withdrawals', name: 'Withdrawals', type: 'number', width: '150px', visible: true, aggregation: null }\n                  ],\n                  sortBy: null,\n                  groupBy: null\n                }}\n                data={mockDailyActionsData.dailyActions}\n                onRefresh={() => console.log('Refresh report')}\n                onConfigChange={() => console.log('Edit report configuration')}\n              />\n            </Paper>\n          )\n        },\n        {\n          id: 'reportTemplate',\n          name: 'Report Template',\n          description: 'Component for creating and editing report templates',\n          component: (\n            <Paper sx={{ p: 3 }}>\n              <ReportTemplate\n                template={{\n                  id: '1',\n                  name: 'Daily Activity Summary',\n                  description: 'Daily summary of player activities',\n                  dataSource: 'dailyActions',\n                  filters: [\n                    { id: 'dateRange', field: 'dateRange', operator: 'equals', value: 'last7Days' },\n                    { id: 'groupBy', field: 'groupBy', operator: 'equals', value: 'day' }\n                  ],\n                  sections: [],\n                  isPublic: false,\n                  createdBy: 'admin',\n                  createdAt: null,\n                  updatedAt: null\n                }}\n                onSave={(template) => console.log('Template saved:', template)}\n              />\n            </Paper>\n          )\n        }\n      ]\n    },\n    {\n      id: 'query',\n      name: 'Query Components',\n      components: [\n        {\n          id: 'naturalLanguageQuery',\n          name: 'Natural Language Query',\n          description: 'Component for querying data using natural language',\n          component: (\n            <NaturalLanguageQueryPanel\n              onSearch={(query) => console.log('Search query:', query)}\n              suggestions={mockQuerySuggestions}\n            />\n          )\n        },\n\n      ]\n    },\n    {\n      id: 'management',\n      name: 'Report Management',\n      components: [\n        {\n          id: 'reportList',\n          name: 'Report List',\n          description: 'Component for displaying a list of reports',\n          component: (\n            <Paper sx={{ p: 3 }}>\n              <ReportList\n                reports={[\n                  {\n                    id: '1',\n                    name: 'Daily Activity Report',\n                    type: 'daily',\n                    createdAt: '2023-01-01',\n                    updatedAt: '2023-05-01',\n                    createdBy: 'admin'\n                  },\n                  {\n                    id: '2',\n                    name: 'Monthly Revenue Report',\n                    type: 'revenue',\n                    createdAt: '2023-02-01',\n                    updatedAt: '2023-05-01',\n                    createdBy: 'admin'\n                  },\n                  {\n                    id: '3',\n                    name: 'Player Retention Analysis',\n                    type: 'player',\n                    createdAt: '2023-03-01',\n                    updatedAt: '2023-05-01',\n                    createdBy: 'admin'\n                  }\n                ]}\n                onViewReport={(report) => console.log('View report:', report.id)}\n                onEditReport={(report) => console.log('Edit report:', report.id)}\n                onDeleteReport={(report) => console.log('Delete report:', report.id)}\n                onDuplicateReport={(report) => console.log('Duplicate report:', report.id)}\n              />\n            </Paper>\n          )\n        },\n\n        {\n          id: 'reportScheduleDialog',\n          name: 'Report Schedule Dialog',\n          description: 'Dialog for scheduling reports',\n          component: (\n            <Paper sx={{ p: 3 }}>\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                <Typography variant=\"body1\">\n                  Click the button below to open the schedule dialog:\n                </Typography>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => console.log('Open schedule dialog')}\n                >\n                  Schedule Report\n                </Button>\n                <ReportScheduleDialog\n                  open={false}\n                  onClose={() => console.log('Dialog closed')}\n                  onAddSchedule={(schedule) => console.log('Schedule added:', schedule)}\n                  report={{\n                    id: '1',\n                    title: 'Daily Activity Report',\n                    description: 'Daily summary of player activities',\n                    type: 'daily',\n                    createdAt: '2023-01-01',\n                    updatedAt: '2023-05-01',\n                    createdBy: 'admin'\n                  }}\n                  schedules={[\n                    {\n                      id: 'sched1',\n                      frequency: 'daily',\n                      weekday: 1,\n                      monthDay: 1,\n                      time: new Date('2023-01-01T08:00:00'),\n                      exportFormat: 'pdf',\n                      recipientIds: ['user1', 'user2'],\n                      includeEmail: true,\n                      includeNotification: true,\n                      active: true\n                    }\n                  ]}\n                />\n              </Box>\n            </Paper>\n          )\n        },\n        {\n          id: 'reportShareDialog',\n          name: 'Report Share Dialog',\n          description: 'Dialog for sharing reports',\n          component: (\n            <Paper sx={{ p: 3 }}>\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                <Typography variant=\"body1\">\n                  Click the button below to open the share dialog:\n                </Typography>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => console.log('Open share dialog')}\n                >\n                  Share Report\n                </Button>\n                <ReportShareDialog\n                  open={false}\n                  onClose={() => console.log('Dialog closed')}\n                  onAddUser={(users, permission) => console.log('Users added:', users, 'with permission:', permission)}\n                  report={{\n                    id: '1',\n                    name: 'Daily Activity Report',\n                    type: 'daily',\n                    createdAt: '2023-01-01',\n                    updatedAt: '2023-05-01',\n                    createdBy: 'admin'\n                  }}\n                  availableUsers={[\n                    { id: 'user1', name: 'John Doe', email: 'john@example.com' },\n                    { id: 'user2', name: 'Jane Smith', email: 'jane@example.com' }\n                  ]}\n                />\n              </Box>\n            </Paper>\n          )\n        }\n      ]\n    }\n  ];\n\n  // Find the currently selected component\n  const getSelectedComponent = () => {\n    const category = componentCategories.find(cat => cat.id === selectedCategory);\n    if (!category) return null;\n\n    const component = category.components.find(comp => comp.id === selectedComponent);\n    return component;\n  };\n\n  const currentComponent = getSelectedComponent();\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 4 }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n        <Button\n          component={RouterLink}\n          to=\"/showcase\"\n          startIcon={<ArrowBackIcon />}\n          sx={{ mr: 2 }}\n        >\n          Back to Showcase\n        </Button>\n        <Typography variant=\"h4\">\n          Report Components\n        </Typography>\n      </Box>\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" paragraph>\n        Components for building and displaying reports\n      </Typography>\n\n      <Grid container spacing={3}>\n        {/* Sidebar with component categories and list */}\n        <Grid item xs={12} md={3}>\n          <Paper sx={{ p: 0, height: '100%' }}>\n            <Tabs\n              value={selectedCategory}\n              onChange={(_, value) => {\n                setSelectedCategory(value);\n                // Select the first component in the category\n                const category = componentCategories.find(cat => cat.id === value);\n                if (category && category.components.length > 0) {\n                  setSelectedComponent(category.components[0].id);\n                }\n              }}\n              variant=\"scrollable\"\n              scrollButtons=\"auto\"\n              sx={{ borderBottom: 1, borderColor: 'divider' }}\n            >\n              {componentCategories.map((category) => (\n                <Tab key={category.id} label={category.name} value={category.id} />\n              ))}\n            </Tabs>\n\n            <List sx={{ pt: 0 }}>\n              {componentCategories\n                .find(cat => cat.id === selectedCategory)\n                ?.components.map((component) => (\n                  <ListItem key={component.id} disablePadding>\n                    <ListItemButton\n                      selected={selectedComponent === component.id}\n                      onClick={() => setSelectedComponent(component.id)}\n                    >\n                      <ListItemText\n                        primary={component.name}\n                        secondary={component.description}\n                        primaryTypographyProps={{\n                          fontWeight: selectedComponent === component.id ? 'bold' : 'normal'\n                        }}\n                      />\n                    </ListItemButton>\n                  </ListItem>\n                ))}\n            </List>\n          </Paper>\n        </Grid>\n\n        {/* Main content area */}\n        <Grid item xs={12} md={9}>\n          {currentComponent && (\n            <Box>\n              <MuiCard sx={{ mb: 3 }}>\n                <CardHeader\n                  title={currentComponent.name}\n                  subheader={currentComponent.description}\n                />\n                <Divider />\n                <CardContent>\n                  <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                    This is a preview of the component with mock data. No API calls are being made.\n                  </Typography>\n                </CardContent>\n              </MuiCard>\n\n              {/* Component display */}\n              {currentComponent.component}\n            </Box>\n          )}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ReportComponentsShowcase;\n","import React from 'react';\nimport {\n  Box,\n  Pagination as MuiPagination,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  useTheme,\n  useMediaQuery,\n  SelectChangeEvent\n} from '@mui/material';\nimport { PaginationProps } from '../../types/pagination';\n\n/**\n * Enhanced pagination component with page size selection\n */\nconst Pagination: React.FC<PaginationProps> = ({\n  page = 1,\n  count = 0,\n  pageSize = 10,\n  pageSizeOptions = [5, 10, 25, 50, 100],\n  onPageChange,\n  onPageSizeChange,\n  showPageSizeSelector = true,\n  showTotalCount = true,\n  labelPageSize = \"Items per page:\",\n  labelTotalItems = \"of\",\n  sx = {}\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  \n  // Calculate total number of pages\n  const totalPages = Math.ceil(count / pageSize);\n  \n  // Handle page change\n  const handlePageChange = (_event: React.ChangeEvent<unknown>, newPage: number): void => {\n    if (onPageChange) {\n      onPageChange(newPage);\n    }\n  };\n  \n  // Handle page size change\n  const handlePageSizeChange = (event: SelectChangeEvent<number>): void => {\n    const newPageSize = event.target.value as number;\n    if (onPageSizeChange) {\n      onPageSizeChange(newPageSize);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: { xs: 'column', sm: 'row' },\n        alignItems: { xs: 'flex-start', sm: 'center' },\n        justifyContent: 'space-between',\n        gap: 2,\n        mt: 2,\n        ...sx\n      }}\n    >\n      {/* Page size selector */}\n      {showPageSizeSelector && (\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {labelPageSize}\n          </Typography>\n          <FormControl size=\"small\" variant=\"outlined\">\n            <Select\n              value={pageSize}\n              onChange={handlePageSizeChange}\n              displayEmpty\n              sx={{ minWidth: 80 }}\n            >\n              {pageSizeOptions.map((option) => (\n                <MenuItem key={option} value={option}>\n                  {option}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Box>\n      )}\n      \n      {/* Pagination component */}\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        {showTotalCount && (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {isMobile \n              ? `${(page - 1) * pageSize + 1}-${Math.min(page * pageSize, count)} ${labelTotalItems} ${count}`\n              : `Showing ${(page - 1) * pageSize + 1}-${Math.min(page * pageSize, count)} ${labelTotalItems} ${count} items`\n            }\n          </Typography>\n        )}\n        \n        <MuiPagination\n          page={page}\n          count={totalPages}\n          onChange={handlePageChange}\n          color=\"primary\"\n          shape=\"rounded\"\n          size={isMobile ? \"small\" : \"medium\"}\n          showFirstButton={!isMobile}\n          showLastButton={!isMobile}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default Pagination;\n"],"names":["_ref","children","title","subheader","action","icon","sx","collapsible","defaultExpanded","variant","expanded","setExpanded","useState","_jsxs","Paper","borderRadius","overflow","_Fragment","Box","px","py","display","alignItems","justifyContent","_jsx","mr","Typography","component","color","IconButton","onClick","handleExpandToggle","ml","size","ExpandLessIcon","ExpandMoreIcon","Divider","Collapse","in","reports","onViewReport","onCreateReport","onEditReport","onDeleteReport","onDuplicateReport","onSearch","onFavoriteToggle","loading","totalCount","error","categories","showActions","searchTerm","setSearchTerm","selectedCategory","setSelectedCategory","sortBy","setSortBy","page","setPage","pageSize","setPageSize","menuAnchorEl","setMenuAnchorEl","activeReport","setActiveReport","sortMenuAnchorEl","setSortMenuAnchorEl","filterMenuAnchorEl","setFilterMenuAnchorEl","deleteDialogOpen","setDeleteDialogOpen","handleCategoryChange","category","handleSortChange","sortValue","handleMenuClose","handleViewReport","report","handleEditReport","handleCancelDelete","mb","Grid","container","spacing","item","xs","sm","md","TextField","fullWidth","placeholder","value","onChange","event","target","InputProps","startAdornment","InputAdornment","position","SearchIcon","gap","Button","startIcon","FilterListIcon","currentTarget","getCategoryLabel","find","c","id","name","SortIcon","getSortLabel","AddIcon","CircularProgress","length","p","textAlign","borderStyle","FolderIcon","fontSize","gutterBottom","paragraph","map","lg","Card","height","flexDirection","cursor","boxShadow","borderColor","CardContent","flexGrow","noWrap","fontWeight","Tooltip","isFavorite","e","handleToggleFavorite","stopPropagation","StarIcon","StarBorderIcon","handleMenuOpen","MoreVertIcon","Chip","label","mt","description","substring","formatDistanceToNow","Date","updatedAt","addSuffix","undefined","viewCount","VisibilityIcon","CardActions","EditIcon","Pagination","count","onPageChange","newPage","onPageSizeChange","newPageSize","Menu","anchorEl","open","Boolean","onClose","MenuItem","ListItemIcon","handleDuplicateReport","FileCopyIcon","handleDeleteReport","DeleteIcon","handleSortMenuClose","selected","handleFilterMenuClose","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","handleConfirmDelete","sharedUsers","availableUsers","isPublic","publicUrl","expirationDate","onAddUser","onRemoveUser","onPermissionChange","onPublicToggle","onExpirationChange","activeTab","setActiveTab","selectedUsers","setSelectedUsers","newPermission","setNewPermission","snackbar","setSnackbar","message","severity","tempPublicState","setTempPublicState","tempExpirationDate","setTempExpirationDate","useEffect","handleSelectUser","user","prev","some","u","filter","handleCloseSnackbar","filteredAvailableUsers","sharedUser","toLowerCase","includes","email","maxWidth","PaperProps","borderBottom","edge","CloseIcon","bgcolor","Tabs","handleTabChange","_event","newValue","Tab","Alert","FormControl","RadioGroup","row","FormControlLabel","control","Radio","PersonAddIcon","handleAddUsers","disabled","maxHeight","List","disablePadding","isSelected","ListItem","divider","dense","button","ListItemText","primary","secondary","Switch","checked","primaryTypographyProps","align","minWidth","permission","handleUserPermissionChange","style","padding","border","handleRemoveUser","handlePublicToggle","PublicIcon","LockIcon","readOnly","LinkIcon","endAdornment","copyToClipboard","text","navigator","clipboard","writeText","ContentCopyIcon","LocalizationProvider","dateAdapter","AdapterDateFns","now","DatePicker","date","slotProps","textField","minDate","toLocaleDateString","borderTop","handleSavePublicSettings","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","schedules","exportFormats","recipients","onAddSchedule","onUpdateSchedule","onDeleteSchedule","newSchedule","setNewSchedule","frequency","weekday","monthDay","time","setHours","exportFormat","recipientIds","includeEmail","includeNotification","active","errors","setErrors","isEditing","setIsEditing","editingId","setEditingId","resetForm","handleClose","handleInputChange","type","handleRecipientToggle","recipientId","updatedRecipients","getFrequencyText","schedule","getTimeText","toLocaleTimeString","hour","minute","getDeliveryMethodText","methods","push","join","ScheduleIcon","dividers","InputLabel","Select","labelId","Number","Array","from","_","i","day","TimePicker","format","EmailIcon","NotificationsIcon","deliveryMethod","FormHelperText","recipient","my","_exportFormats$find","EventIcon","flexWrap","f","CloudDownloadIcon","ListItemSecondaryAction","handleEditSchedule","handleDeleteSchedule","scheduleId","handleSaveSchedule","validateForm","newErrors","Object","keys","scheduleData","template","sections","dataSource","filters","createdBy","createdAt","onSave","onCancel","availableVisualizations","availableDataSources","currentTemplate","setCurrentTemplate","currentSection","setCurrentSection","sectionDialogOpen","setSectionDialogOpen","visualizationDialogOpen","setVisualizationDialogOpen","handleTemplateChange","field","handleOpenSectionDialog","arguments","visualizations","handleCloseSectionDialog","handleCloseVisualizationDialog","elevation","required","margin","source","multiline","rows","ViewListIcon","DragDropContext","onDragEnd","result","destination","items","reorderedItem","splice","index","Droppable","droppableId","provided","droppableProps","ref","innerRef","section","Draggable","draggableId","draggableProps","dragHandleProps","DragIndicatorIcon","handleDeleteSection","sectionId","s","SaveIcon","handleSaveTemplate","viz","handleRemoveVisualization","vizId","v","handleOpenVisualizationDialog","handleSaveSection","existingIndex","findIndex","handleAddVisualization","visualization","config","defaultConfig","dataField","width","selectedColumns","onSortChange","groupBy","onGroupChange","availableColumns","setAvailableColumns","schema","columns","isSortable","sortable","isGroupable","groupable","isAggregatable","aggregatable","aggregationFunctions","defaultColumns","slice","Math","min","col","visible","aggregation","columnId","direction","getColumnInfo","ViewColumnIcon","column","secondaryAction","newColumn","handleAddColumn","arrow","InfoOutlinedIcon","columnInfo","React","handleVisibilityChange","updatedColumns","handleWidthChange","handleAggregationChange","func","handleMoveUp","ArrowUpwardIcon","handleMoveDown","ArrowDownwardIcon","handleRemoveColumn","GroupWorkIcon","handleGroupChange","onNameChange","onDescriptionChange","getSourceIcon","StorageIcon","TableChartIcon","BarChartIcon","helperText","_source$tags","transition","CardActionArea","handleSourceSelect","Avatar","tags","tag","_filters$find","_filters$find2","_filters$find3","_filters$find4","filterFields","setFilterFields","activeFilter","setActiveFilter","availableFields","filterable","operators","getOperatorsForType","handleAddFilter","_filterFields$","newFilter","operator","displayValue","handleUpdateFilter","filterId","updatedFilters","updatedFilter","_fieldInfo$operators$","fieldInfo","getFieldInfo","fieldId","getOperatorsForField","formatFilterDisplay","_getOperatorsForField","op","Stack","pb","handleRemoveFilter","_filter$value","_filter$value3","_filter$value5","_filter$value7","_filter$value2","_filter$value2$to","to","_filter$value4","_filter$value4$from","_filter$value6","_filter$value8","renderValueInput","_config$dataSource","_config$columns$find","_config$sortBy2","_config$columns$find2","data","onRefresh","onDownload","onConfigChange","previewLimit","setPreviewLimit","getVisibleColumns","formatCellValue","renderer","toLocaleString","Intl","NumberFormat","currency","toFixed","getCellAlignment","getColumnWidth","RefreshIcon","DownloadIcon","_config$sortBy","_config$groupBy","m","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","rowIndex","hover","onSaveQuery","recentQueries","savedQueries","showSuggestions","suggestions","onApplySuggestion","query","setQuery","showHistory","setShowHistory","isListening","setIsListening","recognition","setRecognition","window","recognitionInstance","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","onresult","transcript","results","onerror","onend","handleSearch","trim","handleSelectQuery","selectedQuery","isSaved","queryText","saved","queryExamples","onKeyPress","key","handleClearQuery","ClearIcon","toggleSpeechRecognition","stop","start","MicIcon","handleToggleHistory","HistoryIcon","handleSaveQuery","BookmarkIcon","BookmarkBorderIcon","timestamp","LightbulbIcon","example","clickable","_data$byDimension","filterValues","onFilterChange","onFilterApply","onExport","onShare","showExport","headerActions","expandedSections","setExpandedSections","exportMenuAnchorEl","setExportMenuAnchorEl","moreMenuAnchorEl","setMoreMenuAnchorEl","handleExportMenuClose","handleMoreMenuClose","handleExport","ShareIcon","handlePrint","print","PrintIcon","handleExpandAll","handleCollapseAll","VisibilityOffIcon","FullscreenIcon","CodeIcon","LinearProgress","summary","byDimension","CardHeader","handleToggleSection","prevState","content","actions","_dimensions$find2","_timeGroupings$find2","_visualizationTypes$f2","_dimensions$find4","_dimensions$find5","_dimensions$find6","_timeGroupings$find3","initialFilters","onExecuteQuery","onDrillDown","savedConfigurations","visualizationType","setVisualizationType","groupDimension","setGroupDimension","timeGrouping","setTimeGrouping","showQueryPanel","setShowQueryPanel","customReportName","setCustomReportName","advancedFiltersOpen","setAdvancedFiltersOpen","comparisonMode","setComparisonMode","comparisonFilters","setComparisonFilters","metricToSortBy","setMetricToSortBy","sortDirection","setSortDirection","rowLimit","setRowLimit","selectedDateRange","setSelectedDateRange","aggregationFunction","setAggregationFunction","selectedWhitelabels","setSelectedWhitelabels","selectedCountries","setSelectedCountries","selectedPlayerTiers","setSelectedPlayerTiers","selectedGameTypes","setSelectedGameTypes","selectedMetrics","setSelectedMetrics","drilldownPath","setDrilldownPath","reportMode","setReportMode","isQueryExecuting","setIsQueryExecuting","queryError","setQueryError","nlQueryResults","setNlQueryResults","dimensions","GroupIcon","BusinessIcon","SportsEsportsIcon","AccountBalanceWalletIcon","TrendingUpIcon","timeGroupings","CalendarViewMonthIcon","visualizationTypes","TimelineIcon","PieChartIcon","MapIcon","TuneIcon","availableMetrics","handleApplyFilters","dimension","dateRange","metrics","whitelabels","countries","playerTiers","gameTypes","limit","handleSaveReport","reportConfig","toISOString","configuration","NaturalLanguageQueryPanel","async","err","console","log","selectedConfig","handleLoadConfiguration","mode","d","t","CompareArrowsIcon","handleToggleComparison","multiple","split","input","OutlinedInput","renderValue","_availableMetrics$fin","MenuProps","ListSubheader","metric","Checkbox","indexOf","agg","_availableMetrics$fin2","parseInt","inputProps","max","primaryStart","primaryEnd","primaryRange","getTime","comparisonStart","comparisonEnd","setFullYear","getFullYear","getMonth","getDate","handleApplyComparison","comparison","level","_dimensions$find3","targetLevel","newDrilldownPath","handleDrillUp","mx","scrollButtons","iconPosition","ReportViewer","generateReportSections","_dimensions$find","_timeGroupings$find","_visualizationTypes$f","metricInfo","mockFilterData","mockReportData","totalRevenue","totalOrders","averageOrderValue","conversionRate","mockQuerySuggestions","mockDailyActionsData","totalRegistrations","totalFTD","totalDeposits","totalCashouts","totalGGR","dailyActions","whiteLabelName","whiteLabelId","registrations","ftd","deposits","paidCashouts","ggrCasino","ggrSport","ggrLive","ReportComponentsShowcase","_componentCategories$","selectedComponent","setSelectedComponent","mockReportSections","componentCategories","components","ReportFilterSelector","ReportColumnSelector","ReportDataSourceSelector","DailyActionsReport","ReportPreview","ReportTemplate","ReportList","ReportScheduleDialog","ReportShareDialog","users","currentComponent","getSelectedComponent","cat","comp","Container","RouterLink","ArrowBackIcon","pt","ListItemButton","MuiCard","pageSizeOptions","showPageSizeSelector","showTotalCount","labelPageSize","labelTotalItems","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","totalPages","ceil","displayEmpty","option","MuiPagination","handlePageChange","shape","showFirstButton","showLastButton"],"sourceRoot":""}