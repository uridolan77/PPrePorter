{"version":3,"file":"static/js/349.b36742a2.chunk.js","mappings":"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","sources":["components/common/FilterPanel.tsx","components/common/ErrorBoundary.tsx","components/dashboard/DashboardHeader.tsx","components/common/TabPanel.tsx","components/common/EmptyState.tsx","components/common/KPICard.tsx","utils/formatters.js","components/dashboard/DashboardMetrics.tsx","components/common/Card.tsx","components/dashboard/CasinoRevenueChart.tsx","components/common/VirtualizedTable.tsx","components/dashboard/TopGamesChart.tsx","components/dashboard/DashboardCharts.tsx","components/dashboard/RecentTransactionsTable.tsx","components/dashboard/overview/RecentTransactionsSection.tsx","components/dashboard/tabs/EnhancedOverviewTab.tsx","components/dashboard/tabs/PerformanceTab.tsx","components/dashboard/tabs/PlayersTab.tsx","components/dashboard/tabs/GamesTab.tsx","components/dashboard/DashboardTabs.tsx","components/dashboard/TestPanel.tsx","pages/ApiDashboard.tsx","utils/testDataGenerator.ts","components/common/DateRangePicker.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Chip,\n  Divider,\n  FormControl,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Typography,\n  Collapse,\n  Tooltip,\n  Grid,\n  SelectChangeEvent\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport SaveIcon from '@mui/icons-material/Save';\nimport { CommonProps } from '../../types/common';\n\n// Filter type enum\nexport enum FilterType {\n  TEXT = 'text',\n  SELECT = 'select',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  NUMBER = 'number',\n  RANGE = 'range'\n}\n\n// Filter option interface\nexport interface FilterOption {\n  value: string | number;\n  label: string;\n}\n\n// Filter definition interface\nexport interface FilterDefinition {\n  id: string;\n  label: string;\n  type: FilterType | string;\n  options?: FilterOption[];\n  defaultValue?: any;\n  placeholder?: string;\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\n// Component props interface\nexport interface FilterPanelProps extends CommonProps {\n  title?: string;\n  filters: FilterDefinition[];\n  values: Record<string, any>;\n  onChange: (id: string, value: any) => void;\n  onApply?: () => void;\n  onReset?: () => void;\n  onFilterSave?: () => void;\n  expanded?: boolean;\n  defaultExpanded?: boolean;\n}\n\n/**\n * FilterPanel component for filtering data in reports and dashboards\n */\nconst FilterPanel: React.FC<FilterPanelProps> = ({\n  title = 'Filters',\n  filters = [],\n  values = {},\n  onChange,\n  onApply,\n  onReset,\n  onFilterSave,\n  expanded: controlledExpanded,\n  defaultExpanded = true,\n  sx\n}) => {\n  // State for uncontrolled expansion\n  const [internalExpanded, setInternalExpanded] = useState<boolean>(defaultExpanded);\n  \n  // Determine if component is controlled or uncontrolled\n  const isControlled = controlledExpanded !== undefined;\n  const expanded = isControlled ? controlledExpanded : internalExpanded;\n  \n  // Get active filters count\n  const activeFilters = Object.keys(values).filter(key => {\n    const value = values[key];\n    return value !== undefined && value !== null && value !== '';\n  });\n  \n  // Toggle expansion state\n  const toggleExpand = (): void => {\n    if (!isControlled) {\n      setInternalExpanded(!internalExpanded);\n    }\n  };\n  \n  // Handle filter change\n  const handleFilterChange = (id: string, value: any): void => {\n    if (onChange) {\n      onChange(id, value);\n    }\n  };\n  \n  // Handle apply filters\n  const handleApplyFilters = (): void => {\n    if (onApply) {\n      onApply();\n    }\n  };\n  \n  // Handle reset filters\n  const handleResetFilters = (): void => {\n    if (onReset) {\n      onReset();\n    }\n  };\n  \n  // Handle save filters\n  const handleSaveFilters = (): void => {\n    if (onFilterSave) {\n      onFilterSave();\n    }\n  };\n  \n  // Render filter input based on type\n  const renderFilterInput = (filter: FilterDefinition): React.ReactNode => {\n    const value = values[filter.id] !== undefined ? values[filter.id] : filter.defaultValue || '';\n    \n    switch (filter.type) {\n      case FilterType.SELECT:\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel id={`filter-${filter.id}-label`}>{filter.label}</InputLabel>\n            <Select\n              labelId={`filter-${filter.id}-label`}\n              id={`filter-${filter.id}`}\n              value={value}\n              label={filter.label}\n              onChange={(e: SelectChangeEvent<any>) => handleFilterChange(filter.id, e.target.value)}\n            >\n              <MenuItem value=\"\">\n                <em>Any</em>\n              </MenuItem>\n              {filter.options?.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n      \n      case FilterType.DATE:\n        return (\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <DatePicker\n              label={filter.label}\n              value={value || null}\n              onChange={(newValue) => handleFilterChange(filter.id, newValue)}\n              slotProps={{ textField: { size: 'small', fullWidth: true } }}\n            />\n          </LocalizationProvider>\n        );\n      \n      case FilterType.BOOLEAN:\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel id={`filter-${filter.id}-label`}>{filter.label}</InputLabel>\n            <Select\n              labelId={`filter-${filter.id}-label`}\n              id={`filter-${filter.id}`}\n              value={value}\n              label={filter.label}\n              onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            >\n              <MenuItem value=\"\">\n                <em>Any</em>\n              </MenuItem>\n              <MenuItem value=\"true\">Yes</MenuItem>\n              <MenuItem value=\"false\">No</MenuItem>\n            </Select>\n          </FormControl>\n        );\n      \n      case FilterType.NUMBER:\n        return (\n          <TextField\n            fullWidth\n            label={filter.label}\n            type=\"number\"\n            value={value}\n            onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            size=\"small\"\n            inputProps={{\n              min: filter.min,\n              max: filter.max,\n              step: filter.step || 1\n            }}\n          />\n        );\n      \n      case FilterType.RANGE:\n        // Range filter would be implemented here\n        return (\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <TextField\n              label={`Min ${filter.label}`}\n              type=\"number\"\n              value={value?.min || ''}\n              onChange={(e) => handleFilterChange(filter.id, { ...value, min: e.target.value })}\n              size=\"small\"\n              sx={{ flex: 1 }}\n            />\n            <TextField\n              label={`Max ${filter.label}`}\n              type=\"number\"\n              value={value?.max || ''}\n              onChange={(e) => handleFilterChange(filter.id, { ...value, max: e.target.value })}\n              size=\"small\"\n              sx={{ flex: 1 }}\n            />\n          </Box>\n        );\n      \n      // Default to text input\n      default:\n        return (\n          <TextField\n            fullWidth\n            label={filter.label}\n            value={value}\n            onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            size=\"small\"\n            placeholder={filter.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <Paper variant=\"outlined\" sx={{ mb: 2, ...sx }}>\n      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <FilterListIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\" component=\"div\">\n            {title}\n          </Typography>\n          \n          {activeFilters.length > 0 && (\n            <Chip\n              label={`${activeFilters.length} active`}\n              color=\"primary\"\n              size=\"small\"\n              sx={{ ml: 1 }}\n            />\n          )}\n        </Box>\n        \n        <Box>\n          <IconButton onClick={toggleExpand} size=\"small\">\n            {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          </IconButton>\n        </Box>\n      </Box>\n      \n      <Collapse in={expanded}>\n        <Divider />\n        \n        <Box sx={{ p: 2 }}>\n          <Grid container spacing={2}>\n            {filters.map((filter) => (\n              <Grid item xs={12} sm={6} md={4} key={filter.id}>\n                {renderFilterInput(filter)}\n              </Grid>\n            ))}\n          </Grid>\n          \n          {activeFilters.length > 0 && (\n            <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                Active filters:\n              </Typography>\n              \n              {activeFilters.map((key) => {\n                const filter = filters.find(f => f.id === key);\n                let displayValue = values[key];\n                \n                if (filter?.type === FilterType.SELECT && filter.options) {\n                  const option = filter.options.find(o => o.value === displayValue);\n                  displayValue = option ? option.label : displayValue;\n                }\n                \n                if (filter?.type === FilterType.BOOLEAN) {\n                  displayValue = displayValue === 'true' ? 'Yes' : 'No';\n                }\n                \n                if (filter?.type === FilterType.DATE && displayValue instanceof Date) {\n                  displayValue = displayValue.toLocaleDateString();\n                }\n                \n                return (\n                  <Chip\n                    key={key}\n                    label={`${filter?.label || key}: ${displayValue}`}\n                    onDelete={() => handleFilterChange(key, '')}\n                    size=\"small\"\n                  />\n                );\n              })}\n              \n              <Chip\n                label=\"Clear All\"\n                onDelete={handleResetFilters}\n                deleteIcon={<ClearIcon />}\n                size=\"small\"\n                color=\"secondary\"\n              />\n            </Box>\n          )}\n        </Box>\n        \n        <Divider />\n        \n        <Box sx={{ p: 2, display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\n          <Button variant=\"outlined\" onClick={handleResetFilters} startIcon={<ClearIcon />}>\n            Reset\n          </Button>\n          \n          {onFilterSave && (\n            <Tooltip title=\"Save these filters\">\n              <Button \n                variant=\"outlined\" \n                color=\"secondary\" \n                onClick={handleSaveFilters}\n                startIcon={<SaveIcon />}\n              >\n                Save\n              </Button>\n            </Tooltip>\n          )}\n          \n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onClick={handleApplyFilters}\n            startIcon={<FilterListIcon />}\n          >\n            Apply Filters\n          </Button>\n        </Box>\n      </Collapse>\n    </Paper>\n  );\n};\n\nexport default FilterPanel;\n","import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { Box, Typography, Button } from '@mui/material';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport { ErrorBoundaryProps, ErrorBoundaryState, ErrorState } from '../../types/common';\n\n/**\n * ErrorBoundary component\n * Catches JavaScript errors in child components and displays a fallback UI\n */\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    // Update state so the next render will show the fallback UI\n    return {\n      hasError: true,\n      error: {\n        message: error.message,\n        stack: error.stack\n      }\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    // Log the error to an error reporting service\n    console.error('Error caught by ErrorBoundary:', error, errorInfo);\n\n    // You could also log the error to an error reporting service here\n    // logErrorToService(error, errorInfo);\n  }\n\n  handleReset = (): void => {\n    this.setState({ hasError: false, error: null });\n  };\n\n  render(): ReactNode {\n    const { fallback, children } = this.props;\n    const { hasError, error } = this.state;\n\n    if (hasError) {\n      // Custom fallback UI\n      if (fallback) {\n        if (typeof fallback === 'function' && error) {\n          const result = fallback(error);\n          return result as ReactNode;\n        } else {\n          return fallback as ReactNode;\n        }\n      }\n\n      // Default fallback UI\n      return (\n        <Box sx={{ p: 3, textAlign: 'center' }}>\n          <ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main', mb: 2 }} />\n          <Typography variant=\"h6\" color=\"error\" gutterBottom>\n            Something went wrong\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            {error?.message || 'An unexpected error occurred'}\n          </Typography>\n          <Button\n            variant=\"outlined\"\n            startIcon={<RefreshIcon />}\n            onClick={this.handleReset}\n          >\n            Try Again\n          </Button>\n        </Box>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Paper,\n  Button,\n  IconButton,\n  Tooltip,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  useTheme\n} from '@mui/material';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport TuneIcon from '@mui/icons-material/Tune';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport BugReportIcon from '@mui/icons-material/BugReport';\nimport { CommonProps } from '../../types/common';\n\ninterface User {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  id?: string;\n}\n\ninterface DashboardHeaderProps extends CommonProps {\n  user?: User;\n  onRefresh?: () => void;\n  onToggleFilters?: () => void;\n  onFilterReset?: () => void;\n  onToggleTestPanel?: () => void;\n  filterMenuAnchor: HTMLElement | null;\n  onFilterMenuClick?: (event: React.MouseEvent<HTMLElement>) => void;\n  onFilterMenuClose?: () => void;\n  showTestPanel?: boolean;\n}\n\n/**\n * Dashboard Header Component\n * Contains welcome message, filter controls, and action buttons\n */\nconst DashboardHeader: React.FC<DashboardHeaderProps> = ({\n  user,\n  onRefresh,\n  onToggleFilters,\n  onFilterReset,\n  onToggleTestPanel,\n  filterMenuAnchor,\n  onFilterMenuClick,\n  onFilterMenuClose,\n  showTestPanel,\n  sx\n}) => {\n  const theme = useTheme();\n\n  return (\n    <ErrorBoundary\n      fallback={\n        <Paper\n          elevation={0}\n          sx={{\n            p: 3,\n            mb: 4,\n            bgcolor: theme.palette.error.light,\n            color: 'white',\n            borderRadius: 2\n          }}\n        >\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <ErrorOutlineIcon sx={{ mr: 2, fontSize: 32 }} />\n            <Typography variant=\"h6\">\n              Something went wrong loading the dashboard header\n            </Typography>\n          </Box>\n        </Paper>\n      }\n    >\n      <Paper\n        elevation={0}\n        sx={{\n          p: 3,\n          mb: 4,\n          bgcolor: theme.palette.primary.main,\n          color: 'white',\n          borderRadius: 2,\n          ...sx\n        }}\n      >\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={12} md={8}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            Welcome, {user?.firstName || 'User'}!\n          </Typography>\n          <Typography variant=\"body1\">\n            Here's an overview of your PP Reporter performance. Use the dashboard to monitor key metrics and gain insights.\n          </Typography>\n        </Grid>\n        <Grid item xs={12} md={4} sx={{ textAlign: 'right' }}>\n          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={onFilterMenuClick}\n              startIcon={<FilterListIcon />}\n              sx={{\n                bgcolor: 'white',\n                color: theme.palette.primary.main,\n                '&:hover': {\n                  bgcolor: theme.palette.grey[100]\n                }\n              }}\n              aria-label=\"Open filter menu\"\n            >\n              Filter\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={onRefresh}\n              startIcon={<RefreshIcon />}\n              sx={{\n                bgcolor: 'white',\n                color: theme.palette.primary.main,\n                '&:hover': {\n                  bgcolor: theme.palette.grey[100]\n                }\n              }}\n              aria-label=\"Refresh dashboard data\"\n            >\n              Refresh\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={onToggleTestPanel}\n              startIcon={<BugReportIcon />}\n              sx={{\n                bgcolor: 'white',\n                color: theme.palette.primary.main,\n                '&:hover': {\n                  bgcolor: theme.palette.grey[100]\n                }\n              }}\n              aria-label=\"Toggle test panel\"\n            >\n              Test\n            </Button>\n\n            {/* Filter Menu */}\n            <Menu\n              anchorEl={filterMenuAnchor}\n              open={Boolean(filterMenuAnchor)}\n              onClose={onFilterMenuClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n            >\n              <MenuItem onClick={onToggleFilters}>\n                <ListItemIcon>\n                  <TuneIcon fontSize=\"small\" />\n                </ListItemIcon>\n                <ListItemText>Advanced Filters</ListItemText>\n              </MenuItem>\n              <MenuItem onClick={onFilterReset}>\n                <ListItemIcon>\n                  <ClearIcon fontSize=\"small\" />\n                </ListItemIcon>\n                <ListItemText>Reset Filters</ListItemText>\n              </MenuItem>\n            </Menu>\n          </Box>\n        </Grid>\n      </Grid>\n    </Paper>\n    </ErrorBoundary>\n  );\n};\n\nexport default DashboardHeader;\n","import React from 'react';\nimport { Box } from '@mui/material';\nimport { TabPanelProps } from '../../types/common';\n\n/**\n * TabPanel component that displays content based on the active tab\n * Enhanced with proper accessibility attributes\n */\nconst TabPanel: React.FC<TabPanelProps> = ({\n  children,\n  value,\n  index,\n  label,\n  sx,\n  ...other\n}) => {\n  const isSelected = value === index;\n  \n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={!isSelected}\n      id={`tabpanel-${index}`}\n      aria-labelledby={`tab-${index}`}\n      aria-label={label}\n      {...other}\n    >\n      {isSelected && (\n        <Box sx={{ p: 3, ...sx }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n};\n\nexport default TabPanel;\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\nimport InfoIcon from '@mui/icons-material/Info';\nimport { EmptyStateProps } from '../../types/common';\n\n/**\n * EmptyState component\n * Displays a message when no data is available\n */\nconst EmptyState: React.FC<EmptyStateProps> = ({ \n  message = 'No data available', \n  icon = <InfoIcon sx={{ fontSize: 48, color: 'text.secondary' }} />,\n  action,\n  description,\n  sx = {}\n}) => {\n  return (\n    <Box \n      sx={{ \n        display: 'flex', \n        flexDirection: 'column', \n        alignItems: 'center', \n        justifyContent: 'center', \n        p: 4,\n        ...sx\n      }}\n    >\n      {icon}\n      <Typography \n        variant=\"body1\" \n        color=\"text.secondary\" \n        sx={{ mt: 2, textAlign: 'center' }}\n      >\n        {message}\n      </Typography>\n      \n      {description && (\n        <Typography \n          variant=\"body2\" \n          color=\"text.secondary\" \n          sx={{ mt: 1, textAlign: 'center' }}\n        >\n          {description}\n        </Typography>\n      )}\n      \n      {action && (\n        <Box sx={{ mt: 2 }}>\n          {action}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default EmptyState;\n","import React from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Tooltip,\n  CircularProgress,\n  Divider,\n  IconButton\n} from '@mui/material';\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\nimport TrendingFlatIcon from '@mui/icons-material/TrendingFlat';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { KPICardProps } from '../../types/common';\n\n/**\n * KPI (Key Performance Indicator) card component for displaying metrics with trends\n */\nconst KPICard: React.FC<KPICardProps> = ({\n  title,\n  value,\n  subtitle,\n  description,\n  trend = null,\n  trendLabel = 'vs previous period',\n  icon = null,\n  loading = false,\n  onMoreClick,\n  color,\n  isInverse = false,\n  sx\n}) => {\n  // Determine the trend direction and color\n  const getTrendInfo = () => {\n    if (trend === null) return { icon: null, color: 'text.secondary' };\n    \n    if (trend > 0) {\n      return {\n        icon: <TrendingUpIcon fontSize=\"small\" />,\n        color: isInverse ? 'error.main' : 'success.main'\n      };\n    }\n    \n    if (trend < 0) {\n      return {\n        icon: <TrendingDownIcon fontSize=\"small\" />,\n        color: isInverse ? 'success.main' : 'error.main'\n      };\n    }\n    \n    return {\n      icon: <TrendingFlatIcon fontSize=\"small\" />,\n      color: 'text.secondary'\n    };\n  };\n\n  const trendInfo = getTrendInfo();\n\n  // Format the trend percentage\n  const formatTrend = (value: number | null): string => {\n    if (value === null) return '';\n    const prefix = value > 0 ? '+' : '';\n    return `${prefix}${value}%`;\n  };\n\n  return (\n    <Card \n      variant=\"outlined\" \n      sx={{ \n        height: '100%', \n        display: 'flex',\n        flexDirection: 'column',\n        bgcolor: color,\n        ...sx\n      }}\n    >\n      <CardContent sx={{ flex: 1, position: 'relative', p: 2 }}>\n        {/* Card header with title and actions */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\n              {title}\n            </Typography>\n            \n            {description && (\n              <Tooltip title={description} arrow>\n                <IconButton size=\"small\" sx={{ ml: 0.5, p: 0 }}>\n                  <InfoOutlinedIcon fontSize=\"small\" color=\"action\" />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Box>\n          \n          {onMoreClick && (\n            <IconButton \n              size=\"small\" \n              onClick={onMoreClick}\n              sx={{ marginRight: -1 }}\n            >\n              <MoreVertIcon fontSize=\"small\" />\n            </IconButton>\n          )}\n        </Box>\n        \n        {/* Main content with value and icon */}\n        <Box \n          sx={{ \n            display: 'flex', \n            alignItems: 'center', \n            justifyContent: 'space-between',\n            mt: 1\n          }}\n        >\n          <Box>\n            {loading ? (\n              <CircularProgress size={24} />\n            ) : (\n              <>\n                <Typography variant=\"h4\" component=\"div\" fontWeight=\"medium\">\n                  {value}\n                </Typography>\n                \n                {subtitle && (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {subtitle}\n                  </Typography>\n                )}\n              </>\n            )}\n          </Box>\n          \n          {icon && (\n            <Box \n              sx={{ \n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                bgcolor: 'action.hover',\n                borderRadius: '50%',\n                width: 48,\n                height: 48\n              }}\n            >\n              {icon}\n            </Box>\n          )}\n        </Box>\n        \n        {/* Trend indicator */}\n        {trend !== null && (\n          <>\n            <Divider sx={{ my: 1.5 }} />\n            \n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <Box \n                sx={{ \n                  display: 'flex', \n                  alignItems: 'center', \n                  color: trendInfo.color,\n                  mr: 1\n                }}\n              >\n                {trendInfo.icon}\n                <Typography \n                  variant=\"body2\" \n                  component=\"span\" \n                  fontWeight=\"medium\"\n                  sx={{ color: trendInfo.color, ml: 0.5 }}\n                >\n                  {formatTrend(trend)}\n                </Typography>\n              </Box>\n              \n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {trendLabel}\n              </Typography>\n            </Box>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default KPICard;\n","/**\r\n * Utility functions for formatting values in the UI\r\n */\r\n\r\n/**\r\n * Format a number as currency\r\n * @param {number} value - The value to format\r\n * @param {string} currencyCode - Optional currency code (defaults to GBP)\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (value, currencyCode = 'GBP') => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return new Intl.NumberFormat('en-GB', {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a number with thousands separators\r\n * @param {number} value - The value to format\r\n * @param {number} decimals - Number of decimal places (default: 0)\r\n * @returns {string} Formatted number string\r\n */\r\nexport const formatNumber = (value, decimals = 0) => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return new Intl.NumberFormat('en-GB', {\r\n    minimumFractionDigits: decimals,\r\n    maximumFractionDigits: decimals\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a date in a localized format\r\n * @param {string|Date} date - The date to format\r\n * @returns {string} Formatted date string\r\n */\r\nexport const formatDate = (date) => {\r\n  if (!date) return '—';\r\n  \r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  return new Intl.DateTimeFormat('en-GB', {\r\n    day: '2-digit',\r\n    month: 'short',\r\n    year: 'numeric'\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Format a date with time\r\n * @param {string|Date} date - The date to format\r\n * @returns {string} Formatted date and time string\r\n */\r\nexport const formatDateTime = (date) => {\r\n  if (!date) return '—';\r\n  \r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  return new Intl.DateTimeFormat('en-GB', {\r\n    day: '2-digit',\r\n    month: 'short',\r\n    year: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    hour12: false\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Format a percentage value\r\n * @param {number} value - The percentage value to format\r\n * @returns {string} Formatted percentage string\r\n */\r\nexport const formatPercentage = (value) => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;\r\n};","import React, { memo } from 'react';\nimport { Grid, Typography, Box, Button } from '@mui/material';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport PeopleIcon from '@mui/icons-material/People';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport KPICard from '../common/KPICard';\nimport { formatCurrency } from '../../utils/formatters';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport EmptyState from '../common/EmptyState';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport { CommonProps } from '../../types/common';\nimport { DashboardStats } from '../../types/dashboard';\n\ninterface DashboardMetricsProps extends CommonProps {\n  stats?: DashboardStats | null;\n  loading?: boolean;\n  error?: Error | null;\n  title?: string;\n  onRetry?: () => void;\n}\n\n/**\n * DashboardMetrics component\n * Displays key performance indicators in a grid of cards\n */\nconst DashboardMetrics: React.FC<DashboardMetricsProps> = ({\n  stats,\n  loading = false,\n  error = null,\n  title = 'Key Metrics',\n  onRetry,\n  sx\n}) => {\n  // If there's an error, return an error message\n  if (error) {\n    return (\n      <EmptyState\n        message={`Error loading metrics: ${error.message}`}\n        icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n        action={onRetry ? <Button onClick={onRetry}>Retry</Button> : undefined}\n      />\n    );\n  }\n\n  // Default stats if none are provided\n  const metricsData: DashboardStats = stats || {\n    revenue: { value: 0, change: 0 },\n    players: { value: 0, change: 0 },\n    games: { value: 0, change: 0 },\n    engagement: { value: 0, change: 0 }\n  };\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Error displaying metrics\" />}>\n      <Box sx={{ mb: 4, ...sx }}>\n        <Typography variant=\"h5\" sx={{ mb: 2 }}>\n          {title}\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Total Revenue\"\n              value={formatCurrency(metricsData.revenue.value)}\n              trend={metricsData.revenue.change}\n              icon={<AttachMoneyIcon />}\n              loading={loading}\n              description=\"Total revenue across all games\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Active Players\"\n              value={metricsData.players.value.toLocaleString()}\n              trend={metricsData.players.change}\n              icon={<PeopleIcon />}\n              loading={loading}\n              description=\"Number of active players\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Popular Games\"\n              value={metricsData.games.value}\n              trend={metricsData.games.change}\n              icon={<VideogameAssetIcon />}\n              loading={loading}\n              description=\"Number of games with active players\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Engagement Rate\"\n              value={`${metricsData.engagement.value}%`}\n              trend={metricsData.engagement.change}\n              icon={<TimelineIcon />}\n              loading={loading}\n              description=\"Average player engagement rate\"\n            />\n          </Grid>\n        </Grid>\n      </Box>\n    </ErrorBoundary>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(DashboardMetrics);\n","import React, { useState } from 'react';\nimport { \n  Paper, \n  Typography, \n  Box, \n  Divider, \n  IconButton,\n  Collapse\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport { CardProps } from '../../types/common';\n\n/**\n * Card component for consistent UI elements across the application\n */\nconst Card: React.FC<CardProps> = ({\n  children,\n  title,\n  subheader,\n  action,\n  icon,\n  sx,\n  collapsible = false,\n  defaultExpanded = true,\n  variant = 'outlined'\n}) => {\n  const [expanded, setExpanded] = useState<boolean>(defaultExpanded);\n\n  const handleExpandToggle = (): void => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <Paper\n      variant={variant}\n      sx={{\n        borderRadius: 1,\n        overflow: 'hidden',\n        ...sx\n      }}\n    >\n      {/* Card Header */}\n      {(title || subheader) && (\n        <>\n          <Box\n            sx={{\n              px: 3,\n              py: 2,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between'\n            }}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {icon && (\n                <Box sx={{ mr: 1.5, display: 'flex', alignItems: 'center' }}>\n                  {icon}\n                </Box>\n              )}\n              <Box>\n                {title && (\n                  <Typography variant=\"h6\" component=\"div\">\n                    {title}\n                  </Typography>\n                )}\n                {subheader && (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {subheader}\n                  </Typography>\n                )}\n              </Box>\n            </Box>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {action}\n              {collapsible && (\n                <IconButton\n                  onClick={handleExpandToggle}\n                  sx={{ ml: action ? 1 : 0 }}\n                  size=\"small\"\n                >\n                  {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                </IconButton>\n              )}\n            </Box>\n          </Box>\n          <Divider />\n        </>\n      )}\n\n      {/* Card Content */}\n      {collapsible ? (\n        <Collapse in={expanded}>\n          <Box>{children}</Box>\n        </Collapse>\n      ) : (\n        <Box>{children}</Box>\n      )}\n    </Paper>\n  );\n};\n\nexport default Card;\n","import React, { memo, useMemo } from 'react';\nimport { Box, CircularProgress, Typography, useMediaQuery, useTheme } from '@mui/material';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line } from 'recharts';\nimport { formatCurrency, formatDate } from '../../utils/formatters';\nimport { CommonProps } from '../../types/common';\n\n// Revenue data item interface\ninterface RevenueDataItem {\n  date: string;\n  revenue?: number;\n  value?: number;\n  [key: string]: any;\n}\n\n// Chart data item interface\ninterface ChartDataItem {\n  date: string;\n  fullDate: string;\n  revenue: number;\n  formattedValue: string;\n}\n\n// Component props interface\ninterface CasinoRevenueChartProps extends CommonProps {\n  data: RevenueDataItem[];\n  isLoading?: boolean;\n  height?: number;\n  error?: Error | null;\n  onRetry?: () => void;\n}\n\n/**\n * Casino Revenue Chart component that displays revenue data over time\n * with responsive behavior for mobile devices\n */\nconst CasinoRevenueChart: React.FC<CasinoRevenueChartProps> = ({\n  data,\n  isLoading = false,\n  height = 300,\n  error = null,\n  onRetry,\n  sx\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // Format data for chart display - memoized to prevent unnecessary recalculations\n  const chartData: ChartDataItem[] = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.map(item => ({\n      date: formatDate(item.date),\n      fullDate: item.date,\n      revenue: parseFloat((item.revenue || item.value || 0).toString()),\n      formattedValue: formatCurrency(item.revenue || item.value || 0)\n    }));\n  }, [data]);\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Handle error state\n  if (error) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"error\">\n          Error loading revenue data: {error.message}\n          {onRetry && (\n            <Box component=\"span\" sx={{ ml: 2, cursor: 'pointer', textDecoration: 'underline' }} onClick={onRetry}>\n              Retry\n            </Box>\n          )}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Handle empty data state\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          No revenue data available\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Mobile view - Line chart (simpler, less CPU intensive)\n  if (isMobile) {\n    return (\n      <Box sx={{ width: '100%', height, ...sx }}>\n        <ResponsiveContainer>\n          <LineChart\n            data={chartData}\n            margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"date\"\n              tick={{ fontSize: 10 }}\n              interval=\"preserveStartEnd\"\n            />\n            <YAxis\n              tickFormatter={(value: number) => formatCurrency(value, 'GBP').replace('£', '')}\n              tick={{ fontSize: 10 }}\n              width={40}\n            />\n            <Tooltip\n              formatter={(value: number) => [formatCurrency(value), 'Revenue']}\n              labelFormatter={(label: string) => {\n                const item = chartData.find(d => d.date === label);\n                return item ? formatDate(item.fullDate) : label;\n              }}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"revenue\"\n              name=\"Revenue\"\n              stroke=\"#2e7d32\"\n              strokeWidth={2}\n              dot={{ r: 3 }}\n              activeDot={{ r: 5 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Box>\n    );\n  }\n\n  // Desktop view - Area chart\n  return (\n    <Box sx={{ width: '100%', height, ...sx }}>\n      <ResponsiveContainer>\n        <AreaChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis\n            tickFormatter={(value: number) => formatCurrency(value, 'GBP').replace('£', '')}\n          />\n          <Tooltip\n            formatter={(value: number) => [formatCurrency(value), 'Revenue']}\n          />\n          <Legend />\n          <Area\n            type=\"monotone\"\n            dataKey=\"revenue\"\n            name=\"Revenue\"\n            stroke=\"#2e7d32\"\n            fill=\"#4caf50\"\n            fillOpacity={0.3}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n};\n\n// Export memoized component\nexport default memo(CasinoRevenueChart);\n","import React, { useCallback, memo } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n  CircularProgress\n} from '@mui/material';\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\nimport { SxProps, Theme } from '@mui/material/styles';\nimport { ColumnDef } from '../../types/common';\n\nexport interface VirtualizedTableProps<T> {\n  data: T[];\n  columns: ColumnDef[];\n  height?: number;\n  width?: number | string;\n  rowHeight?: number;\n  loading?: boolean;\n  emptyMessage?: string;\n  onRowClick?: (row: T) => void;\n  headerHeight?: number;\n  sx?: SxProps<Theme>;\n}\n\n/**\n * VirtualizedTable component\n * A reusable virtualized table component using react-window for efficient rendering of large data sets\n */\nfunction VirtualizedTable<T extends Record<string, any>>({\n  data = [],\n  columns = [],\n  height = 400,\n  width = '100%',\n  rowHeight = 53,\n  loading = false,\n  emptyMessage = 'No data to display',\n  onRowClick,\n  headerHeight = 56,\n  sx = {}\n}: VirtualizedTableProps<T>): React.ReactElement {\n  // Memoized row renderer to prevent unnecessary re-renders\n  const Row = useCallback(\n    ({ index, style }: ListChildComponentProps) => {\n      const row = data[index];\n      return (\n        <TableRow\n          component=\"div\"\n          hover\n          onClick={onRowClick ? () => onRowClick(row) : undefined}\n          style={{\n            ...style,\n            display: 'flex',\n            alignItems: 'center',\n            boxSizing: 'border-box',\n            cursor: onRowClick ? 'pointer' : 'default'\n          }}\n        >\n          {columns.map((column) => {\n            const value = row[column.id];\n            const cellWidth = `${100 / columns.length}%`;\n\n            return (\n              <TableCell\n                component=\"div\"\n                key={column.id}\n                align={column.align || 'left'}\n                style={{\n                  width: cellWidth,\n                  display: 'flex',\n                  alignItems: 'center',\n                  boxSizing: 'border-box',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  whiteSpace: 'nowrap'\n                }}\n              >\n                {column.format ? column.format(value, row) : value}\n              </TableCell>\n            );\n          })}\n        </TableRow>\n      );\n    },\n    [data, columns, onRowClick]\n  );\n\n  // If loading, return a loading message\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // If no data, return an empty message\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyMessage}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Paper sx={{ height, width, overflow: 'hidden', ...sx }}>\n      <TableContainer component=\"div\" sx={{ height: '100%', width: '100%' }}>\n        <Table component=\"div\" sx={{ display: 'block', width: '100%', height: '100%' }}>\n          <TableHead component=\"div\" sx={{ display: 'block', width: '100%' }}>\n            <TableRow\n              component=\"div\"\n              sx={{\n                display: 'flex',\n                width: '100%',\n                height: headerHeight,\n                alignItems: 'center'\n              }}\n            >\n              {columns.map((column) => {\n                const cellWidth = `${100 / columns.length}%`;\n\n                return (\n                  <TableCell\n                    component=\"div\"\n                    key={column.id}\n                    align={column.align || 'left'}\n                    sx={{\n                      width: cellWidth,\n                      display: 'flex',\n                      alignItems: 'center',\n                      fontWeight: 'bold',\n                      boxSizing: 'border-box'\n                    }}\n                  >\n                    {column.label}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          </TableHead>\n\n          <TableBody\n            component=\"div\"\n            sx={{\n              display: 'block',\n              width: '100%',\n              height: `calc(${height}px - ${headerHeight}px)`,\n              overflow: 'hidden'\n            }}\n          >\n            <FixedSizeList\n              height={height - headerHeight}\n              width=\"100%\"\n              itemCount={data.length}\n              itemSize={rowHeight}\n              style={{ overflow: 'auto' }}\n            >\n              {Row}\n            </FixedSizeList>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}\n\nexport default memo(VirtualizedTable) as <T extends Record<string, any>>(props: VirtualizedTableProps<T>) => React.ReactElement;\n","import React, { memo, useMemo, useState } from 'react';\nimport { Box, CircularProgress, Typography, useTheme, Tabs, Tab } from '@mui/material';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Cell } from 'recharts';\nimport { formatCurrency } from '../../utils/formatters';\nimport { GameData } from '../../types/redux';\nimport VirtualizedTable from '../common/VirtualizedTable';\n\ninterface TopGamesChartProps {\n  data: GameData[];\n  isLoading?: boolean;\n  height?: number;\n  showLegend?: boolean;\n  error?: Error | null;\n  onRetry?: () => void;\n  sx?: any;\n  emptyStateMessage?: string;\n  errorFallback?: (error: Error) => React.ReactElement;\n  valueKey?: string;\n  nameKey?: string;\n}\n\n/**\n * Custom tooltip component for the chart\n */\nconst CustomTooltip: React.FC<any> = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return (\n      <Box\n        sx={{\n          bgcolor: 'background.paper',\n          p: 1.5,\n          border: '1px solid',\n          borderColor: 'divider',\n          borderRadius: 1,\n          boxShadow: 1,\n        }}\n      >\n        <Typography variant=\"subtitle2\" gutterBottom>\n          {payload[0].payload.name}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Revenue: {formatCurrency(payload[0].value)}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Players: {payload[0].payload.players.toLocaleString()}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return null;\n};\n\n/**\n * Top Games Chart component\n * Displays a bar chart of top games by revenue\n */\nconst TopGamesChart: React.FC<TopGamesChartProps> = ({\n  data,\n  isLoading = false,\n  height = 300,\n  showLegend = true,\n  error = null,\n  onRetry,\n  sx,\n  emptyStateMessage = \"No game data available\",\n  errorFallback,\n  valueKey = \"revenue\",\n  nameKey = \"name\"\n}) => {\n  const theme = useTheme();\n  const [viewMode, setViewMode] = useState<'chart' | 'table'>('chart');\n\n  // Handle view mode change\n  const handleViewModeChange = (event: React.SyntheticEvent, newValue: 'chart' | 'table') => {\n    setViewMode(newValue);\n  };\n\n  // Memoize the chart data to prevent unnecessary recalculations\n  const chartData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.map((game) => ({\n      name: game.name,\n      revenue: game.revenue,\n      players: game.players,\n      category: game.category\n    }));\n  }, [data]);\n\n  // Generate colors for the bars based on the theme\n  const colors = useMemo(() => {\n    return [\n      theme.palette.primary.main,\n      theme.palette.primary.light,\n      theme.palette.secondary.main,\n      theme.palette.secondary.light,\n      theme.palette.info.main,\n      theme.palette.info.light,\n      theme.palette.success.main,\n      theme.palette.success.light,\n      theme.palette.warning.main,\n      theme.palette.warning.light\n    ];\n  }, [theme]);\n\n  // Table columns\n  const tableColumns = useMemo(() => [\n    { id: 'name', label: 'Game Name', align: 'left' as const },\n    { id: 'category', label: 'Category', align: 'left' as const },\n    { id: 'revenue', label: 'Revenue', align: 'right' as const, format: (value: number) => formatCurrency(value) },\n    { id: 'players', label: 'Players', align: 'right' as const, format: (value: number) => value.toLocaleString() }\n  ], []);\n\n  if (isLoading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    if (errorFallback) {\n      return errorFallback(error);\n    }\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"error\">\n          Error loading games data: {error.message}\n          {onRetry && (\n            <Box component=\"span\" sx={{ ml: 2, cursor: 'pointer', textDecoration: 'underline' }} onClick={onRetry}>\n              Retry\n            </Box>\n          )}\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyStateMessage}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ width: '100%', ...sx }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n        <Tabs value={viewMode} onChange={handleViewModeChange} aria-label=\"view mode tabs\">\n          <Tab label=\"Chart\" value=\"chart\" />\n          <Tab label=\"Table\" value=\"table\" />\n        </Tabs>\n      </Box>\n\n      {viewMode === 'chart' ? (\n        // Chart view\n        <Box sx={{ width: '100%', height }}>\n          <ResponsiveContainer>\n            <BarChart\n              data={chartData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 70 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"name\"\n                angle={-45}\n                textAnchor=\"end\"\n                height={70}\n                tick={{ fontSize: 12 }}\n              />\n              <YAxis\n                tickFormatter={(value) => `£${value.toLocaleString()}`}\n                tick={{ fontSize: 12 }}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              {showLegend && <Legend />}\n              <Bar dataKey=\"revenue\" name=\"Revenue\" radius={[4, 4, 0, 0]}>\n                {chartData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n      ) : (\n        // Table view with virtualization\n        <VirtualizedTable\n          data={data}\n          columns={tableColumns}\n          height={height}\n          rowHeight={53}\n          loading={isLoading}\n          emptyMessage=\"No games data available\"\n        />\n      )}\n    </Box>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(TopGamesChart);\n","import React, { memo, useMemo } from 'react';\nimport { Grid, Typography, Box, FormControl, InputLabel, Select, MenuItem, Skeleton, SelectChangeEvent } from '@mui/material';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport EmptyState from '../common/EmptyState';\nimport Card from '../common/Card';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport CasinoRevenueChart from './CasinoRevenueChart';\nimport TopGamesChart from './TopGamesChart';\nimport { CommonProps } from '../../types/common';\nimport { DashboardChartData, TimePeriod } from '../../types/dashboard';\n\ninterface DashboardChartsProps extends CommonProps {\n  data?: DashboardChartData | null;\n  loading?: boolean;\n  error?: Error | null;\n  title?: string;\n  timePeriod?: TimePeriod;\n  onTimePeriodChange?: (period: TimePeriod) => void;\n}\n\n/**\n * DashboardCharts component\n * Displays charts and visualizations for dashboard data\n */\nconst DashboardCharts: React.FC<DashboardChartsProps> = ({\n  data,\n  loading,\n  error,\n  title = 'Performance Metrics',\n  timePeriod = 'week',\n  onTimePeriodChange,\n  sx\n}) => {\n  // Default data if none is provided\n  const chartsData: DashboardChartData = data || {\n    revenueByDay: [],\n    playersByGame: []\n  };\n\n  // Memoize the revenue data to prevent unnecessary transformations\n  const preparedRevenueData = useMemo(() => {\n    return chartsData.revenueByDay.map(item => ({\n      date: item.day,\n      revenue: item.value\n    }));\n  }, [chartsData.revenueByDay]);\n\n  // Memoize the games data to convert from GameDataPoint to GameData\n  const preparedGamesData = useMemo(() => {\n    return chartsData.playersByGame.map((item, index) => ({\n      id: `game-${index}`,\n      name: item.game,\n      revenue: item.value,\n      players: item.value,\n      sessions: 0,\n      category: 'Unknown'\n    }));\n  }, [chartsData.playersByGame]);\n\n  // Handle time period change\n  const handleTimePeriodChange = (event: SelectChangeEvent<string>) => {\n    if (onTimePeriodChange) {\n      onTimePeriodChange(event.target.value as TimePeriod);\n    }\n  };\n\n  // If there's an error, return an error message\n  if (error) {\n    return (\n      <EmptyState\n        message={`Error loading charts: ${error.message}`}\n        icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n      />\n    );\n  }\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Error displaying charts\" />}>\n      <Box sx={{ mb: 4, ...sx }}>\n        <Typography variant=\"h5\" sx={{ mb: 2 }}>\n          {title}\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Card\n              title=\"Revenue Trends\"\n              action={\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                    <InputLabel id=\"time-period-label\">Period</InputLabel>\n                    <Select\n                      labelId=\"time-period-label\"\n                      id=\"time-period-select\"\n                      value={timePeriod}\n                      label=\"Period\"\n                      onChange={handleTimePeriodChange}\n                    >\n                      <MenuItem value=\"day\">Day</MenuItem>\n                      <MenuItem value=\"week\">Week</MenuItem>\n                      <MenuItem value=\"month\">Month</MenuItem>\n                      <MenuItem value=\"quarter\">Quarter</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Box>\n              }\n            >\n              {loading ? (\n                <Box sx={{ p: 3 }}>\n                  <Skeleton variant=\"rectangular\" height={300} />\n                </Box>\n              ) : (\n                <CasinoRevenueChart\n                  data={preparedRevenueData}\n                  isLoading={loading}\n                />\n              )}\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Card title=\"Player Distribution by Game\">\n              {loading ? (\n                <Box sx={{ p: 3 }}>\n                  <Skeleton variant=\"rectangular\" height={300} />\n                </Box>\n              ) : (\n                <TopGamesChart\n                  data={preparedGamesData}\n                  isLoading={loading}\n                />\n              )}\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n    </ErrorBoundary>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(DashboardCharts);\n","import React, { memo, useMemo } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n  Chip,\n  CircularProgress,\n  Skeleton,\n  useTheme\n} from '@mui/material';\nimport { formatCurrency, formatDateTime } from '../../utils/formatters';\nimport { TransactionData } from '../../types/redux';\n\ninterface RecentTransactionsTableProps {\n  data: TransactionData[];\n  isLoading?: boolean;\n  maxHeight?: number | string;\n  showHeader?: boolean;\n  errorFallback?: (error: Error) => React.ReactElement;\n}\n\n/**\n * Recent Transactions Table component\n * Displays a table of recent transactions\n */\nconst RecentTransactionsTable: React.FC<RecentTransactionsTableProps> = ({\n  data,\n  isLoading = false,\n  maxHeight = 400,\n  showHeader = true\n}) => {\n  const theme = useTheme();\n\n  // Get status color based on transaction status\n  const getStatusColor = (status: string): string => {\n    switch (status.toLowerCase()) {\n      case 'completed':\n      case 'success':\n        return theme.palette.success.main;\n      case 'pending':\n      case 'processing':\n        return theme.palette.warning.main;\n      case 'failed':\n      case 'declined':\n        return theme.palette.error.main;\n      case 'refunded':\n        return theme.palette.info.main;\n      default:\n        return theme.palette.grey[500];\n    }\n  };\n\n  // Get transaction type color\n  const getTypeColor = (type: string): string => {\n    switch (type.toLowerCase()) {\n      case 'deposit':\n        return theme.palette.success.main;\n      case 'withdrawal':\n        return theme.palette.error.main;\n      case 'bonus':\n        return theme.palette.info.main;\n      case 'wager':\n        return theme.palette.warning.main;\n      case 'win':\n        return theme.palette.success.light;\n      default:\n        return theme.palette.grey[500];\n    }\n  };\n\n  // Loading skeleton\n  if (isLoading) {\n    return (\n      <TableContainer component={Paper} sx={{ maxHeight }}>\n        <Table stickyHeader size=\"small\">\n          {showHeader && (\n            <TableHead>\n              <TableRow>\n                <TableCell>Player</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell align=\"right\">Amount</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Status</TableCell>\n              </TableRow>\n            </TableHead>\n          )}\n          <TableBody>\n            {Array.from(new Array(5)).map((_, index) => (\n              <TableRow key={index}>\n                <TableCell><Skeleton width={120} /></TableCell>\n                <TableCell><Skeleton width={80} /></TableCell>\n                <TableCell align=\"right\"><Skeleton width={60} /></TableCell>\n                <TableCell><Skeleton width={100} /></TableCell>\n                <TableCell><Skeleton width={80} /></TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n\n  // No data state\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 200 }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          No transaction data available\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <TableContainer component={Paper} sx={{ maxHeight }}>\n      <Table stickyHeader size=\"small\">\n        {showHeader && (\n          <TableHead>\n            <TableRow>\n              <TableCell>Player</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell align=\"right\">Amount</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Status</TableCell>\n            </TableRow>\n          </TableHead>\n        )}\n        <TableBody>\n          {data.map((transaction) => (\n            <TableRow key={transaction.id} hover>\n              <TableCell>\n                <Typography variant=\"body2\" noWrap sx={{ maxWidth: 150 }}>\n                  {transaction.playerName}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Chip\n                  label={transaction.type}\n                  size=\"small\"\n                  sx={{\n                    bgcolor: `${getTypeColor(transaction.type)}20`,\n                    color: getTypeColor(transaction.type),\n                    fontWeight: 'medium',\n                    fontSize: '0.75rem'\n                  }}\n                />\n              </TableCell>\n              <TableCell align=\"right\">\n                <Typography\n                  variant=\"body2\"\n                  fontWeight=\"medium\"\n                  color={\n                    transaction.type.toLowerCase() === 'deposit' || transaction.type.toLowerCase() === 'win'\n                      ? 'success.main'\n                      : transaction.type.toLowerCase() === 'withdrawal'\n                      ? 'error.main'\n                      : 'text.primary'\n                  }\n                >\n                  {formatCurrency(transaction.amount, transaction.currency)}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {formatDateTime(transaction.timestamp)}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Chip\n                  label={transaction.status}\n                  size=\"small\"\n                  sx={{\n                    bgcolor: `${getStatusColor(transaction.status)}20`,\n                    color: getStatusColor(transaction.status),\n                    fontWeight: 'medium',\n                    fontSize: '0.75rem'\n                  }}\n                />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(RecentTransactionsTable);\n","import React, { useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  Tooltip,\n  Skeleton\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n// Common components\nimport Card from '../../common/Card';\nimport EmptyState from '../../common/EmptyState';\n\n// Dashboard components\nimport RecentTransactionsTable from '../RecentTransactionsTable';\n\n// Types\nimport { RecentTransactionsSectionProps, Transaction } from '../../../types/recentTransactionsSection';\n\n/**\n * Recent Transactions Section Component\n * Displays recent transactions in a table format\n */\nconst RecentTransactionsSection: React.FC<RecentTransactionsSectionProps> = ({\n  data,\n  isLoading = false,\n  onDownload = () => {},\n  onSettings = () => {}\n}) => {\n  // Memoize the transactions data to prevent unnecessary re-renders\n  const transactionsData: Transaction[] = useMemo(() => {\n    return data || [];\n  }, [data]);\n\n  return (\n    <Box sx={{ mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\">\n          Recent Transactions\n        </Typography>\n        <Box>\n          <Tooltip title=\"Download report\">\n            <IconButton\n              size=\"small\"\n              sx={{ mr: 1 }}\n              onClick={onDownload}\n              aria-label=\"Download transactions report\"\n            >\n              <DownloadIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Settings\">\n            <IconButton\n              size=\"small\"\n              onClick={onSettings}\n              aria-label=\"Transactions settings\"\n            >\n              <SettingsIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n      <Card>\n        {isLoading && transactionsData.length === 0 ? (\n          <Box sx={{ p: 3 }}>\n            <Skeleton variant=\"rectangular\" height={300} />\n          </Box>\n        ) : !transactionsData.length ? (\n          <EmptyState\n            message=\"No recent transactions available\"\n            icon={<AttachMoneyIcon sx={{ fontSize: 48 }} />}\n          />\n        ) : (\n          <RecentTransactionsTable\n            data={transactionsData as any}\n            isLoading={isLoading}\n            errorFallback={(error: Error) => (\n              <EmptyState\n                message={`Error loading transactions: ${error.message}`}\n                icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n              />\n            )}\n          />\n        )}\n      </Card>\n    </Box>\n  );\n};\n\nexport default RecentTransactionsSection;\n","import React, { memo, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n// Common components\nimport EmptyState from '../../common/EmptyState';\nimport ErrorBoundary from '../../common/ErrorBoundary';\n\n// Dashboard components\nimport DashboardMetrics from '../DashboardMetrics';\nimport DashboardCharts from '../DashboardCharts';\nimport RecentTransactionsSection from '../overview/RecentTransactionsSection';\n\n// Types\nimport {\n  EnhancedOverviewTabProps,\n  DashboardStats\n} from '../../../types/enhancedOverviewTab';\n\n/**\n * Enhanced Overview Tab component for the API Dashboard\n * Uses the new modular components for better organization and performance\n */\nconst EnhancedOverviewTab: React.FC<EnhancedOverviewTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  error = null\n}) => {\n  // State for time period filter\n  const [timePeriod, setTimePeriod] = useState<'day' | 'week' | 'month' | 'quarter' | 'year'>('week');\n\n  // Handle error state\n  if (error) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main', mb: 2 }} />\n        <Typography variant=\"h6\" color=\"error\" gutterBottom>\n          Error Loading Dashboard Data\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {error.message || \"An unexpected error occurred. Please try again later.\"}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Prepare metrics data for DashboardMetrics component\n  const metricsData: DashboardStats = {\n    revenue: dashboardData?.stats?.revenue || { value: 0, change: 0 },\n    players: dashboardData?.stats?.players || { value: 0, change: 0 },\n    games: {\n      value: dashboardData?.topGames?.length || 0,\n      change: 0\n    },\n    engagement: {\n      value: dashboardData?.stats?.engagementRate || 0,\n      change: dashboardData?.stats?.engagementChange || 0\n    }\n  };\n\n  // Prepare charts data for DashboardCharts component\n  const chartsData = {\n    revenueByDay: (dashboardData?.charts?.revenueByDay || []).map(item => ({\n      day: item.date,\n      value: item.value\n    })),\n    playersByGame: (dashboardData?.charts?.playersByGame || []).map(item => ({\n      game: item.name,\n      value: item.players\n    }))\n  };\n\n  // Handle time period change\n  const handleTimePeriodChange = (period: 'day' | 'week' | 'month' | 'quarter' | 'year'): void => {\n    setTimePeriod(period);\n    // In a real app, you would fetch new data based on the time period\n    console.log(`Time period changed to ${period}`);\n  };\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Something went wrong loading the dashboard\" icon={<ErrorOutlineIcon />} />}>\n      <Box>\n        {/* Metrics Section */}\n        <DashboardMetrics\n          stats={metricsData}\n          loading={isLoading}\n          error={error}\n          title=\"Key Performance Indicators\"\n        />\n\n        {/* Charts Section */}\n        <DashboardCharts\n          data={chartsData}\n          loading={isLoading}\n          error={error}\n          title=\"Performance Analytics\"\n          timePeriod={timePeriod}\n          onTimePeriodChange={handleTimePeriodChange}\n        />\n\n        {/* Recent Transactions Section */}\n        <RecentTransactionsSection\n          data={dashboardData?.recentTransactions}\n          isLoading={isLoading}\n          onDownload={() => console.log('Download transactions report')}\n          onSettings={() => console.log('Open transactions settings')}\n        />\n      </Box>\n    </ErrorBoundary>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(EnhancedOverviewTab);\n","import React, { useState, useMemo, ChangeEvent, MouseEvent } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  CircularProgress,\n  useTheme,\n  IconButton,\n  Tooltip,\n  ToggleButtonGroup,\n  ToggleButton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Skeleton,\n  Paper,\n  SelectChangeEvent,\n  Theme\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport ShowChartIcon from '@mui/icons-material/ShowChart';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport PieChartIcon from '@mui/icons-material/PieChart';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n// Utilities\nimport { formatCurrency, formatNumber, formatPercentage, formatDate } from '../../../utils/formatters';\n\n// Common components\nimport Card from '../../common/Card';\nimport KPICard from '../../common/KPICard';\nimport EmptyState from '../../common/EmptyState';\nimport LoadingOverlay from '../../common/LoadingOverlay';\nimport ErrorBoundary from '../../common/ErrorBoundary';\n\n// Dashboard components\nimport CasinoRevenueChart from '../CasinoRevenueChart';\nimport TopGamesChart from '../TopGamesChart';\nimport TrendAnalysis from '../TrendAnalysis';\n\nimport {\n  PieChart, Pie, Cell,\n  Legend, ResponsiveContainer,\n  Tooltip as RechartsTooltip\n} from 'recharts';\n\n// Types\nimport {\n  PerformanceTabProps,\n  RevenueDataPoint,\n  PlayerDistributionDataPoint,\n  KPIData\n} from '../../../types/performanceTab';\n\n/**\n * Performance Tab component for the API Dashboard\n * Displays performance metrics, charts, and analysis\n */\nconst PerformanceTab: React.FC<PerformanceTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  error = null,\n  theme\n}) => {\n  // Use theme from props or get it from useTheme hook\n  const defaultTheme = useTheme();\n  const currentTheme: Theme = theme || defaultTheme;\n\n  // State for chart type and time period\n  const [chartType, setChartType] = useState<string>('line');\n  const [timePeriod, setTimePeriod] = useState<string>('week');\n\n  // Chart colors - memoized to prevent recreation on each render\n  const COLORS = useMemo(() => [\n    currentTheme.palette.primary.main,\n    currentTheme.palette.secondary.main,\n    currentTheme.palette.success.main,\n    currentTheme.palette.error.main,\n    currentTheme.palette.warning.main,\n    currentTheme.palette.info.main\n  ], [currentTheme.palette]);\n\n  // Handle chart type change\n  const handleChartTypeChange = (_event: MouseEvent<HTMLElement>, newChartType: string | null): void => {\n    if (newChartType !== null) {\n      setChartType(newChartType);\n    }\n  };\n\n  // Handle time period change\n  const handleTimePeriodChange = (event: SelectChangeEvent): void => {\n    setTimePeriod(event.target.value);\n  };\n\n  // Memoize revenue data for charts\n  const revenueData: RevenueDataPoint[] = useMemo(() => {\n    return dashboardData?.charts?.revenueByDay || [\n      { day: 'Mon', value: 2100 },\n      { day: 'Tue', value: 2400 },\n      { day: 'Wed', value: 1800 },\n      { day: 'Thu', value: 2200 },\n      { day: 'Fri', value: 2600 },\n      { day: 'Sat', value: 3100 },\n      { day: 'Sun', value: 2500 }\n    ];\n  }, [dashboardData?.charts?.revenueByDay]);\n\n  // Memoize player distribution data for charts\n  const playerDistributionData: PlayerDistributionDataPoint[] = useMemo(() => {\n    return dashboardData?.charts?.playersByGame || [\n      { game: 'Poker', value: 450 },\n      { game: 'Slots', value: 380 },\n      { game: 'Roulette', value: 240 },\n      { game: 'Blackjack', value: 190 },\n      { game: 'Baccarat', value: 165 }\n    ];\n  }, [dashboardData?.charts?.playersByGame]);\n\n  // Memoize KPI data\n  const kpiData: KPIData = useMemo(() => {\n    return dashboardData?.kpis || {\n      averageSessionTime: 45,\n      conversionRate: 3.2,\n      churnRate: 5.7,\n      revenuePerUser: 87.5\n    };\n  }, [dashboardData?.kpis]);\n\n  // Prepare revenue data for the chart - memoized to prevent recalculation\n  const preparedRevenueData = useMemo(() => {\n    // Convert the revenueData to the format expected by CasinoRevenueChart\n    return revenueData.map(item => ({\n      date: item.day,\n      revenue: item.value\n    }));\n  }, [revenueData]);\n\n  // Handle error state\n  if (error) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main', mb: 2 }} />\n        <Typography variant=\"h6\" color=\"error\" gutterBottom>\n          Error Loading Performance Data\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {error.message || \"An unexpected error occurred. Please try again later.\"}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Render player distribution chart\n  const renderPlayerDistributionChart = (): React.ReactNode => {\n    if (isLoading) {\n      return (\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n          <CircularProgress />\n        </Box>\n      );\n    }\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={playerDistributionData}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            outerRadius={100}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n            nameKey=\"game\"\n            label={({ name, percent }: { name: string, percent: number }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n          >\n            {playerDistributionData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n            ))}\n          </Pie>\n          <RechartsTooltip formatter={(value: any, name: string | undefined, props: any) => [value, props.payload.game] as [any, any]} />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Something went wrong loading the performance data\" icon={<ErrorOutlineIcon />} />}>\n      <Box>\n        {/* Performance Metrics Section */}\n        <Box sx={{ mb: 4 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h5\">\n              Performance Metrics\n            </Typography>\n            <Box>\n              <Tooltip title=\"Download report\">\n                <IconButton size=\"small\" sx={{ mr: 1 }}>\n                  <DownloadIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Settings\">\n                <IconButton size=\"small\">\n                  <SettingsIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          </Box>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Card\n                title=\"Revenue Trends\"\n                action={\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                      <InputLabel id=\"time-period-label\">Period</InputLabel>\n                      <Select\n                        labelId=\"time-period-label\"\n                        id=\"time-period-select\"\n                        value={timePeriod}\n                        label=\"Period\"\n                        onChange={handleTimePeriodChange}\n                      >\n                        <MenuItem value=\"day\">Day</MenuItem>\n                        <MenuItem value=\"week\">Week</MenuItem>\n                        <MenuItem value=\"month\">Month</MenuItem>\n                        <MenuItem value=\"quarter\">Quarter</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Box>\n                }\n              >\n                {isLoading && revenueData.length === 0 ? (\n                  <Box sx={{ p: 3 }}>\n                    <Skeleton variant=\"rectangular\" height={300} />\n                  </Box>\n                ) : (\n                  <CasinoRevenueChart\n                    data={preparedRevenueData}\n                    isLoading={isLoading}\n                  />\n                )}\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Card title=\"Player Distribution by Game\">\n                {isLoading && playerDistributionData.length === 0 ? (\n                  <Box sx={{ p: 3 }}>\n                    <Skeleton variant=\"rectangular\" height={300} />\n                  </Box>\n                ) : (\n                  <TopGamesChart\n                    data={playerDistributionData.map((item, index) => ({\n                      id: `game-${index}`,\n                      name: item.game,\n                      revenue: item.value,\n                      players: item.value,\n                      sessions: 0,\n                      category: 'Game'\n                    }))}\n                    isLoading={isLoading}\n                    valueKey=\"revenue\"\n                    nameKey=\"name\"\n                    emptyStateMessage=\"No player distribution data available\"\n                  />\n                )}\n              </Card>\n            </Grid>\n          </Grid>\n        </Box>\n\n        {/* KPI Section */}\n        <Box sx={{ mb: 4 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h5\">\n              Key Performance Indicators\n            </Typography>\n          </Box>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Avg. Session Time\"\n                value={`${kpiData.averageSessionTime} min`}\n                icon={<TimelineIcon />}\n                loading={isLoading}\n                description=\"Average time users spend in a single session\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Conversion Rate\"\n                value={`${kpiData.conversionRate}%`}\n                icon={<TrendingUpIcon />}\n                loading={isLoading}\n                description=\"Percentage of visitors who register\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Churn Rate\"\n                value={`${kpiData.churnRate}%`}\n                icon={<TrendingDownIcon />}\n                loading={isLoading}\n                description=\"Percentage of users who stop using the platform\"\n                isInverse={true}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Revenue Per User\"\n                value={formatCurrency(kpiData.revenuePerUser)}\n                icon={<AttachMoneyIcon />}\n                loading={isLoading}\n                description=\"Average revenue generated per active user\"\n              />\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </ErrorBoundary>\n  );\n};\n\nexport default PerformanceTab;\n","import React, { useState, useMemo, ChangeEvent } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Paper,\n  CircularProgress,\n  useTheme,\n  IconButton,\n  Tooltip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  Avatar,\n  Button,\n  Theme\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid,\n  Tooltip as RechartsTooltip, Legend, ResponsiveContainer,\n  PieChart, Pie, Cell\n} from 'recharts';\n\n// Types\nimport {\n  PlayersTabProps,\n  PlayerRegistrationDataPoint,\n  PlayerDemographicsDataPoint,\n  PlayerAgeDataPoint,\n  Player\n} from '../../../types/playersTab';\n\n/**\n * Players Tab component for the API Dashboard\n * Displays player analytics, demographics, and player list\n */\nconst PlayersTab: React.FC<PlayersTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  theme\n}) => {\n  // Use theme from props or get it from useTheme hook\n  const defaultTheme = useTheme();\n  const currentTheme: Theme = theme || defaultTheme;\n\n  // State for pagination\n  const [page, setPage] = useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = useState<number>(5);\n\n  // Chart colors\n  const COLORS = useMemo(() => [\n    currentTheme.palette.primary.main,\n    currentTheme.palette.secondary.main,\n    currentTheme.palette.success.main,\n    currentTheme.palette.error.main,\n    currentTheme.palette.warning.main,\n    currentTheme.palette.info.main\n  ], [currentTheme.palette]);\n\n  // Handle page change\n  const handleChangePage = (_event: unknown, newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle rows per page change\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>): void => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Player acquisition data\n  const playerAcquisitionData: PlayerRegistrationDataPoint[] = dashboardData?.playerRegistrations || [\n    { date: '2023-05-01', count: 45 },\n    { date: '2023-05-02', count: 38 },\n    { date: '2023-05-03', count: 52 },\n    { date: '2023-05-04', count: 41 },\n    { date: '2023-05-05', count: 37 },\n    { date: '2023-05-06', count: 29 },\n    { date: '2023-05-07', count: 33 }\n  ];\n\n  // Player demographics data\n  const playerDemographicsData: PlayerDemographicsDataPoint[] = dashboardData?.playerDemographics || [\n    { name: 'Male', value: 65 },\n    { name: 'Female', value: 30 },\n    { name: 'Other', value: 5 }\n  ];\n\n  // Player age distribution data\n  const playerAgeData: PlayerAgeDataPoint[] = dashboardData?.playerAgeData || [\n    { age: '18-24', count: 120 },\n    { age: '25-34', count: 280 },\n    { age: '35-44', count: 210 },\n    { age: '45-54', count: 150 },\n    { age: '55+', count: 90 }\n  ];\n\n  // Player list data\n  const playerListData: Player[] = dashboardData?.recentPlayers || [\n    { id: 1, name: 'John Doe', registeredAt: '2023-05-01T08:30:00Z', status: 'active', country: 'USA' },\n    { id: 2, name: 'Jane Smith', registeredAt: '2023-05-02T10:15:00Z', status: 'active', country: 'Canada' },\n    { id: 3, name: 'Mike Johnson', registeredAt: '2023-05-03T14:45:00Z', status: 'inactive', country: 'UK' },\n    { id: 4, name: 'Lisa Brown', registeredAt: '2023-05-04T09:20:00Z', status: 'active', country: 'Australia' },\n    { id: 5, name: 'Robert Wilson', registeredAt: '2023-05-05T16:10:00Z', status: 'pending', country: 'Germany' }\n  ];\n\n  // Format date for display\n  const formatDate = (dateString: string): string => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n  };\n\n  // Get status color\n  const getStatusColor = (status: string | undefined): \"success\" | \"error\" | \"warning\" | \"default\" => {\n    switch (status?.toLowerCase()) {\n      case 'active':\n        return 'success';\n      case 'inactive':\n        return 'error';\n      case 'pending':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  // Get initials from name\n  const getInitials = (name: string | undefined): string => {\n    if (!name) return '';\n    return name\n      .split(' ')\n      .map(part => part[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  return (\n    <Box>\n      {/* Player Acquisition Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Player Acquisition\n          </Typography>\n          <Box>\n            <Tooltip title=\"Download report\">\n              <IconButton size=\"small\" sx={{ mr: 1 }}>\n                <DownloadIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Settings\">\n              <IconButton size=\"small\">\n                <SettingsIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n        <Paper sx={{ p: 3, borderRadius: 2 }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={playerAcquisitionData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" tickFormatter={formatDate} />\n                <YAxis />\n                <RechartsTooltip\n                  formatter={(value: any) => [value, 'New Players']}\n                  labelFormatter={formatDate}\n                />\n                <Legend />\n                <Bar\n                  dataKey=\"count\"\n                  name=\"New Players\"\n                  fill={currentTheme.palette.primary.main}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </Paper>\n      </Box>\n\n      {/* Player Demographics Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Player Demographics\n          </Typography>\n        </Box>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Gender Distribution\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 250 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <PieChart>\n                    <Pie\n                      data={playerDemographicsData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      label={({ name, percent }: { name: string, percent: number }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {playerDemographicsData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip formatter={(value: any) => [`${value}%`, 'Percentage']} />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Age Distribution\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 250 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={playerAgeData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"age\" />\n                    <YAxis />\n                    <RechartsTooltip formatter={(value: any) => [value, 'Players']} />\n                    <Legend />\n                    <Bar\n                      dataKey=\"count\"\n                      name=\"Players\"\n                      fill={currentTheme.palette.secondary.main}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Player List Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Player List\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<PersonAddIcon />}\n            size=\"small\"\n          >\n            Add Player\n          </Button>\n        </Box>\n        <Paper sx={{ borderRadius: 2 }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Player</TableCell>\n                      <TableCell>Registration Date</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Country</TableCell>\n                      <TableCell align=\"right\">Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {playerListData\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((player) => (\n                        <TableRow key={player.id}>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <Avatar sx={{ mr: 2, bgcolor: currentTheme.palette.primary.main }}>\n                                {getInitials(player.name)}\n                              </Avatar>\n                              <Typography variant=\"body1\">\n                                {player.name}\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell>{formatDate(player.registeredAt)}</TableCell>\n                          <TableCell>\n                            <Chip\n                              label={player.status}\n                              color={getStatusColor(player.status)}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                          <TableCell>{player.country}</TableCell>\n                          <TableCell align=\"right\">\n                            <Tooltip title=\"View\">\n                              <IconButton size=\"small\">\n                                <VisibilityIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Edit\">\n                              <IconButton size=\"small\">\n                                <EditIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Delete\">\n                              <IconButton size=\"small\">\n                                <DeleteIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={playerListData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </>\n          )}\n        </Paper>\n      </Box>\n    </Box>\n  );\n};\n\nexport default PlayersTab;","import React, { useState, ChangeEvent } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Paper,\n  CircularProgress,\n  useTheme,\n  IconButton,\n  Tooltip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  Rating,\n  Button,\n  Card,\n  CardContent,\n  CardMedia,\n  Theme\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport AddIcon from '@mui/icons-material/Add';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\n\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid,\n  Tooltip as RechartsTooltip, Legend, ResponsiveContainer,\n  PieChart, Pie, Cell, RadarChart, Radar, PolarGrid,\n  PolarAngleAxis, PolarRadiusAxis\n} from 'recharts';\n\n// Types\nimport {\n  GamesTabProps,\n  GameCategoryDataPoint,\n  GamePerformanceDataPoint,\n  GameListItem,\n  FeaturedGame\n} from '../../../types/gamesTab';\n\n/**\n * Games Tab component for the API Dashboard\n * Displays game analytics, performance metrics, and game list\n */\nconst GamesTab: React.FC<GamesTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  theme\n}) => {\n  // Use theme from props or get it from useTheme hook\n  const defaultTheme = useTheme();\n  const currentTheme: Theme = theme || defaultTheme;\n\n  // State for pagination\n  const [page, setPage] = useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = useState<number>(5);\n\n  // Chart colors\n  const COLORS = [\n    currentTheme.palette.primary.main,\n    currentTheme.palette.secondary.main,\n    currentTheme.palette.success.main,\n    currentTheme.palette.error.main,\n    currentTheme.palette.warning.main,\n    currentTheme.palette.info.main\n  ];\n\n  // Handle page change\n  const handleChangePage = (_event: unknown, newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle rows per page change\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>): void => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Format currency for display\n  const formatCurrency = (value: number): string => {\n    return value ? `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}` : '$0.00';\n  };\n\n  // Game category distribution data\n  const gameCategoryData: GameCategoryDataPoint[] = dashboardData?.gameCategoryData || [\n    { name: 'Slots', value: 45 },\n    { name: 'Table Games', value: 25 },\n    { name: 'Poker', value: 15 },\n    { name: 'Live Casino', value: 10 },\n    { name: 'Specialty', value: 5 }\n  ];\n\n  // Game performance data\n  const gamePerformanceData: GamePerformanceDataPoint[] = dashboardData?.gamePerformanceData || [\n    { name: 'Engagement', game1: 80, game2: 90, game3: 70 },\n    { name: 'Retention', game1: 85, game2: 75, game3: 80 },\n    { name: 'Revenue', game1: 90, game2: 80, game3: 85 },\n    { name: 'Popularity', game1: 70, game2: 85, game3: 75 },\n    { name: 'Growth', game1: 75, game2: 70, game3: 90 }\n  ];\n\n  // Game list data\n  const gameListData: GameListItem[] = dashboardData?.topGames || [\n    { id: 1, name: 'Poker Pro', revenue: 3200.56, players: 432, rating: 4.5, category: 'Poker' },\n    { id: 2, name: 'Blackjack Masters', revenue: 2800.32, players: 387, rating: 4.2, category: 'Table Games' },\n    { id: 3, name: 'Slots Royale', revenue: 2300.18, players: 356, rating: 4.7, category: 'Slots' },\n    { id: 4, name: 'Roulette King', revenue: 1900.45, players: 289, rating: 4.0, category: 'Table Games' },\n    { id: 5, name: 'Baccarat Elite', revenue: 1450.67, players: 218, rating: 3.8, category: 'Table Games' }\n  ];\n\n  // Featured games data\n  const featuredGamesData: FeaturedGame[] = dashboardData?.featuredGames || [\n    {\n      id: 1,\n      name: 'Poker Pro',\n      description: 'The ultimate poker experience with multiple game modes and tournaments.',\n      image: 'https://via.placeholder.com/300x150',\n      category: 'Poker',\n      rating: 4.5,\n      players: 432\n    },\n    {\n      id: 2,\n      name: 'Slots Royale',\n      description: 'Exciting slot machine game with progressive jackpots and bonus rounds.',\n      image: 'https://via.placeholder.com/300x150',\n      category: 'Slots',\n      rating: 4.7,\n      players: 356\n    },\n    {\n      id: 3,\n      name: 'Blackjack Masters',\n      description: 'Classic blackjack with advanced features and realistic gameplay.',\n      image: 'https://via.placeholder.com/300x150',\n      category: 'Table Games',\n      rating: 4.2,\n      players: 387\n    }\n  ];\n\n  return (\n    <Box>\n      {/* Featured Games Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Featured Games\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            size=\"small\"\n          >\n            Add Game\n          </Button>\n        </Box>\n        <Grid container spacing={3}>\n          {featuredGamesData.map((game) => (\n            <Grid item xs={12} md={4} key={game.id}>\n              <Card sx={{ height: '100%' }}>\n                <CardMedia\n                  component=\"img\"\n                  height=\"140\"\n                  image={game.image}\n                  alt={game.name}\n                />\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    {game.name}\n                  </Typography>\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <Chip\n                      label={game.category}\n                      size=\"small\"\n                      color=\"primary\"\n                      sx={{ mr: 1 }}\n                    />\n                    <Rating\n                      value={game.rating}\n                      precision={0.5}\n                      size=\"small\"\n                      readOnly\n                    />\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                    {game.description}\n                  </Typography>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <Typography variant=\"body2\">\n                      <strong>{game.players}</strong> active players\n                    </Typography>\n                    <Button size=\"small\" variant=\"outlined\">\n                      Details\n                    </Button>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      {/* Game Analytics Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Game Analytics\n          </Typography>\n          <Box>\n            <Tooltip title=\"Download report\">\n              <IconButton size=\"small\" sx={{ mr: 1 }}>\n                <DownloadIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Settings\">\n              <IconButton size=\"small\">\n                <SettingsIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Game Category Distribution\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={gameCategoryData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      label={({ name, percent }: { name: string, percent: number }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {gameCategoryData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip formatter={(value: any) => [`${value}%`, 'Percentage']} />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Game Performance Comparison\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <RadarChart outerRadius={90} data={gamePerformanceData}>\n                    <PolarGrid />\n                    <PolarAngleAxis dataKey=\"name\" />\n                    <PolarRadiusAxis angle={30} domain={[0, 100]} />\n                    <Radar\n                      name=\"Poker Pro\"\n                      dataKey=\"game1\"\n                      stroke={currentTheme.palette.primary.main}\n                      fill={currentTheme.palette.primary.main}\n                      fillOpacity={0.6}\n                    />\n                    <Radar\n                      name=\"Slots Royale\"\n                      dataKey=\"game2\"\n                      stroke={currentTheme.palette.secondary.main}\n                      fill={currentTheme.palette.secondary.main}\n                      fillOpacity={0.6}\n                    />\n                    <Radar\n                      name=\"Blackjack Masters\"\n                      dataKey=\"game3\"\n                      stroke={currentTheme.palette.success.main}\n                      fill={currentTheme.palette.success.main}\n                      fillOpacity={0.6}\n                    />\n                    <Legend />\n                    <RechartsTooltip />\n                  </RadarChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Game List Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Game Performance\n          </Typography>\n        </Box>\n        <Paper sx={{ borderRadius: 2 }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Game</TableCell>\n                      <TableCell>Category</TableCell>\n                      <TableCell>Rating</TableCell>\n                      <TableCell align=\"right\">Players</TableCell>\n                      <TableCell align=\"right\">Revenue</TableCell>\n                      <TableCell align=\"right\">Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {gameListData\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((game) => (\n                        <TableRow key={game.id}>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <VideogameAssetIcon sx={{ mr: 1, color: currentTheme.palette.primary.main }} />\n                              <Typography variant=\"body1\">\n                                {game.name}\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell>\n                            <Chip\n                              label={game.category}\n                              size=\"small\"\n                              color=\"primary\"\n                              variant=\"outlined\"\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <Rating\n                                value={game.rating}\n                                precision={0.5}\n                                size=\"small\"\n                                readOnly\n                              />\n                              <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                                ({game.rating})\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell align=\"right\">{game.players.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(game.revenue)}</TableCell>\n                          <TableCell align=\"right\">\n                            <Tooltip title=\"View\">\n                              <IconButton size=\"small\">\n                                <VisibilityIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Edit\">\n                              <IconButton size=\"small\">\n                                <EditIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Delete\">\n                              <IconButton size=\"small\">\n                                <DeleteIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={gameListData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </>\n          )}\n        </Paper>\n      </Box>\n    </Box>\n  );\n};\n\nexport default GamesTab;","import React, { memo, useCallback, useMemo } from 'react';\nimport { Box, Tabs, Tab, Theme } from '@mui/material';\nimport TabPanel from '../common/TabPanel';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport EmptyState from '../common/EmptyState';\nimport { CommonProps } from '../../types/common';\nimport { DashboardStats } from '../../types/dashboard';\n\n// Tab components\nimport OverviewTab from './tabs/OverviewTab';\nimport EnhancedOverviewTab from './tabs/EnhancedOverviewTab';\nimport PerformanceTab from './tabs/PerformanceTab';\nimport PlayersTab from './tabs/PlayersTab';\nimport GamesTab from './tabs/GamesTab';\n\ninterface DashboardTabsProps extends CommonProps {\n  activeTab: number;\n  onTabChange: (event: React.SyntheticEvent, newValue: number) => void;\n  dashboardData: any; // This should be typed more specifically based on your data structure\n  isLoading: boolean;\n  error: Error | null;\n  theme: Theme;\n}\n\n// Tab interface\ninterface TabItem {\n  id: number;\n  label: string;\n  component: React.ReactNode;\n}\n\n/**\n * Dashboard Tabs Component\n * Manages tab navigation and content rendering\n * Optimized with memoization to prevent unnecessary re-renders\n */\nconst DashboardTabs: React.FC<DashboardTabsProps> = ({\n  activeTab,\n  onTabChange,\n  dashboardData,\n  isLoading,\n  error,\n  theme,\n  sx\n}) => {\n  // Memoized tab change handler\n  const handleTabChange = useCallback((event: React.SyntheticEvent, newValue: number) => {\n    if (onTabChange) {\n      onTabChange(event, newValue);\n    }\n  }, [onTabChange]);\n\n  // Memoized tab components to prevent unnecessary re-renders\n  const tabComponents = useMemo((): TabItem[] => [\n    {\n      id: 0,\n      label: \"Dashboard Overview\",\n      component: (\n        <EnhancedOverviewTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n          error={error}\n        />\n      )\n    },\n    {\n      id: 1,\n      label: \"Performance Metrics\",\n      component: (\n        <PerformanceTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n          error={error}\n        />\n      )\n    },\n    {\n      id: 2,\n      label: \"Player Analytics\",\n      component: (\n        <PlayersTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n        />\n      )\n    },\n    {\n      id: 3,\n      label: \"Game Analytics\",\n      component: (\n        <GamesTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n        />\n      )\n    }\n  ], [dashboardData, isLoading, error, theme]);\n\n  // Memoized error fallback component\n  const errorFallback = useCallback((message: string) => (\n    <EmptyState\n      message={message}\n      icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n    />\n  ), []);\n\n  return (\n    <Box sx={sx}>\n      {/* Dashboard Tabs */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Tabs\n          value={activeTab}\n          onChange={handleTabChange}\n          aria-label=\"dashboard tabs\"\n          role=\"tablist\"\n        >\n          {tabComponents.map((tab) => (\n            <Tab\n              key={tab.id}\n              label={tab.label.split(' ')[0]} // Just use the first word for the tab label\n              id={`tab-${tab.id}`}\n              aria-controls={`tabpanel-${tab.id}`}\n              tabIndex={activeTab === tab.id ? 0 : -1}\n            />\n          ))}\n        </Tabs>\n      </Box>\n\n      {/* Tab Content */}\n      {tabComponents.map((tab) => (\n        <TabPanel key={tab.id} value={activeTab} index={tab.id} label={tab.label}>\n          <ErrorBoundary\n            fallback={errorFallback(`Something went wrong loading the ${tab.label.toLowerCase()}`)}\n          >\n            {tab.component}\n          </ErrorBoundary>\n        </TabPanel>\n      ))}\n    </Box>\n  );\n};\n\nexport default memo(DashboardTabs);\n","import React from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  IconButton,\n  Divider\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\ninterface TestPanelProps {\n  /**\n   * Current test scenario\n   */\n  testScenario: string;\n  \n  /**\n   * Handler for test scenario change\n   */\n  onTestScenarioChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  \n  /**\n   * Handler for closing the panel\n   */\n  onClose: () => void;\n}\n\n/**\n * Test panel component for simulating different data scenarios\n */\nconst TestPanel: React.FC<TestPanelProps> = ({\n  testScenario,\n  onTestScenarioChange,\n  onClose\n}) => {\n  return (\n    <Card sx={{ mb: 3, border: '1px dashed #999' }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n          <Typography variant=\"h6\" color=\"primary\">\n            Test Panel\n          </Typography>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Box>\n        \n        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n          This panel allows you to simulate different data scenarios for testing purposes.\n        </Typography>\n        \n        <Divider sx={{ my: 2 }} />\n        \n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Data Scenario</FormLabel>\n          <RadioGroup\n            aria-label=\"test-scenario\"\n            name=\"test-scenario\"\n            value={testScenario}\n            onChange={onTestScenarioChange}\n          >\n            <FormControlLabel \n              value=\"normal\" \n              control={<Radio />} \n              label=\"Normal - Fetch real data from API\" \n            />\n            <FormControlLabel \n              value=\"empty\" \n              control={<Radio />} \n              label=\"Empty - No data available\" \n            />\n            <FormControlLabel \n              value=\"partial\" \n              control={<Radio />} \n              label=\"Partial - Some data missing\" \n            />\n            <FormControlLabel \n              value=\"large\" \n              control={<Radio />} \n              label=\"Large - Large dataset for performance testing\" \n            />\n            <FormControlLabel \n              value=\"error\" \n              control={<Radio />} \n              label=\"Error - Simulate API error\" \n            />\n            <FormControlLabel \n              value=\"loading\" \n              control={<Radio />} \n              label=\"Loading - Perpetual loading state\" \n            />\n          </RadioGroup>\n        </FormControl>\n        \n        <Box sx={{ mt: 2, p: 1, bgcolor: 'info.light', borderRadius: 1 }}>\n          <Typography variant=\"caption\" color=\"info.contrastText\">\n            Note: This panel is for development and testing purposes only and should be removed in production.\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TestPanel;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Box,\n  Container,\n  CircularProgress,\n  Button,\n  Alert,\n  Typography,\n  useTheme\n} from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport { format, subDays, startOfDay, endOfDay } from 'date-fns';\n\nimport { useAuth } from '../hooks/useAuth';\nimport { fetchDashboardData } from '../store/slices/dashboardSlice';\nimport DateRangePicker from '../components/common/DateRangePicker';\nimport FilterPanel from '../components/common/FilterPanel';\nimport dashboardService from '../services/api/dashboardService';\n\n// Test data generators\nimport {\n  generateEmptyData,\n  generatePartialData,\n  generateLargeData,\n  generateErrorData\n} from '../utils/testDataGenerator';\n\n// Dashboard components\nimport DashboardHeader from '../components/dashboard/DashboardHeader';\nimport DashboardTabs from '../components/dashboard/DashboardTabs';\nimport TestPanel from '../components/dashboard/TestPanel';\nimport DashboardMetrics from '../components/dashboard/DashboardMetrics';\nimport DashboardCharts from '../components/dashboard/DashboardCharts';\n\n// Types\nimport { DashboardStats, DashboardChartData, RevenueDataPoint, GameDataPoint } from '../types/dashboard';\nimport { DashboardFilters } from '../types/redux';\n\n// Filter definition type\ninterface FilterDefinition {\n  id: string;\n  label: string;\n  type: 'select' | 'multiselect' | 'text' | 'number' | 'date' | 'daterange' | 'boolean' | 'radio';\n  options?: Array<{ value: string; label: string }>;\n}\n\n// Dashboard data interface\ninterface DashboardData {\n  stats?: DashboardStats;\n  playerRegistrations?: any[];\n  recentTransactions?: any[];\n  topGames?: any[];\n  casinoRevenue?: any;\n  kpis?: any;\n  charts?: DashboardChartData;\n}\n\n/**\n * API Dashboard component that connects to the backend API\n */\nconst ApiDashboard: React.FC = () => {\n  const theme = useTheme();\n  const { user } = useAuth();\n  const dispatch = useDispatch();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [showFilters, setShowFilters] = useState<boolean>(false);\n  const [filterMenuAnchor, setFilterMenuAnchor] = useState<HTMLElement | null>(null);\n\n  // Test data scenario state\n  const [testScenario, setTestScenario] = useState<string>('normal');\n  const [showTestPanel, setShowTestPanel] = useState<boolean>(false);\n\n  // Date range state\n  const [dateRange, setDateRange] = useState<{\n    start: Date;\n    end: Date;\n  }>({\n    start: startOfDay(subDays(new Date(), 30)),\n    end: endOfDay(new Date())\n  });\n\n  // Filter state\n  const [filters, setFilters] = useState<{\n    gameCategory: string;\n    playerStatus: string;\n    country: string;\n    minRevenue: string;\n    maxRevenue: string;\n  }>({\n    gameCategory: '',\n    playerStatus: '',\n    country: '',\n    minRevenue: '',\n    maxRevenue: ''\n  });\n\n  // Filter definitions\n  const filterDefinitions: FilterDefinition[] = [\n    {\n      id: 'gameCategory',\n      label: 'Game Category',\n      type: 'select',\n      options: [\n        { value: 'casino', label: 'Casino' },\n        { value: 'sports', label: 'Sports' },\n        { value: 'poker', label: 'Poker' },\n        { value: 'bingo', label: 'Bingo' },\n        { value: 'lottery', label: 'Lottery' }\n      ]\n    },\n    {\n      id: 'playerStatus',\n      label: 'Player Status',\n      type: 'select',\n      options: [\n        { value: 'active', label: 'Active' },\n        { value: 'inactive', label: 'Inactive' },\n        { value: 'new', label: 'New' },\n        { value: 'vip', label: 'VIP' }\n      ]\n    },\n    {\n      id: 'country',\n      label: 'Country',\n      type: 'select',\n      options: [\n        { value: 'us', label: 'United States' },\n        { value: 'uk', label: 'United Kingdom' },\n        { value: 'ca', label: 'Canada' },\n        { value: 'au', label: 'Australia' },\n        { value: 'de', label: 'Germany' }\n      ]\n    },\n    {\n      id: 'minRevenue',\n      label: 'Min Revenue',\n      type: 'number'\n    },\n    {\n      id: 'maxRevenue',\n      label: 'Max Revenue',\n      type: 'number'\n    }\n  ];\n\n  // Load dashboard data\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Handle tab change\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number): void => {\n    setActiveTab(newValue);\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (newRange: { start: Date | null; end: Date | null }): void => {\n    if (newRange.start && newRange.end) {\n      setDateRange({\n        start: newRange.start,\n        end: newRange.end\n      });\n      fetchData({\n        start: newRange.start,\n        end: newRange.end\n      }, filters);\n    }\n  };\n\n  // Handle filter change\n  const handleFilterChange = (filterId: string, value: string): void => {\n    setFilters(prev => ({\n      ...prev,\n      [filterId]: value\n    }));\n  };\n\n  // Handle filter apply\n  const handleFilterApply = (): void => {\n    fetchData(dateRange, filters);\n    setShowFilters(false);\n  };\n\n  // Handle filter reset\n  const handleFilterReset = (): void => {\n    const resetFilters = {\n      gameCategory: '',\n      playerStatus: '',\n      country: '',\n      minRevenue: '',\n      maxRevenue: ''\n    };\n    setFilters(resetFilters);\n    fetchData(dateRange, resetFilters);\n  };\n\n  // Toggle filter menu\n  const handleFilterMenuClick = (event: React.MouseEvent<HTMLElement>): void => {\n    setFilterMenuAnchor(event.currentTarget);\n  };\n\n  // Close filter menu\n  const handleFilterMenuClose = (): void => {\n    setFilterMenuAnchor(null);\n  };\n\n  // Toggle filter panel\n  const handleToggleFilters = (): void => {\n    setShowFilters(!showFilters);\n    handleFilterMenuClose();\n  };\n\n  // Fetch dashboard data from API or use test data\n  const fetchData = async (\n    dateRangeParam = dateRange,\n    filtersParam = filters\n  ): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n\n    // Handle test scenarios\n    if (testScenario !== 'normal') {\n      setTimeout(() => {\n        switch (testScenario) {\n          case 'empty':\n            setDashboardData(generateEmptyData());\n            setIsLoading(false);\n            break;\n          case 'partial':\n            setDashboardData(generatePartialData());\n            setIsLoading(false);\n            break;\n          case 'large':\n            setDashboardData(generateLargeData());\n            setIsLoading(false);\n            break;\n          case 'error':\n            const errorObj = generateErrorData();\n            setError(new Error(`Error connecting to API: ${errorObj.message}. This is a simulated error for testing.`));\n            setDashboardData(generatePartialData()); // Show partial data with error\n            setIsLoading(false);\n            break;\n          case 'loading':\n            // Keep loading state active for testing\n            break;\n          default:\n            setIsLoading(false);\n        }\n      }, 2000); // Simulate network delay\n\n      // If we're testing loading state, don't proceed with the rest\n      if (testScenario === 'loading') {\n        return;\n      }\n    } else {\n      try {\n        // Prepare date parameters\n        const startDate = dateRangeParam?.start ? format(dateRangeParam.start, 'yyyy-MM-dd') : null;\n        const endDate = dateRangeParam?.end ? format(dateRangeParam.end, 'yyyy-MM-dd') : null;\n\n        // Prepare filter parameters\n        const filterParams: DashboardFilters = {\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined,\n          minRevenue: filtersParam.minRevenue ? Number(filtersParam.minRevenue) : undefined,\n          maxRevenue: filtersParam.maxRevenue ? Number(filtersParam.maxRevenue) : undefined\n        };\n\n        // Get dashboard stats with filters\n        const stats = await dashboardService.getDashboardStats(filterParams);\n\n        // Get player registrations data with date range\n        const playerRegistrations = await dashboardService.getPlayerRegistrations({\n          startDate,\n          endDate,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined\n        });\n\n        // Get recent transactions with filters\n        const recentTransactions = await dashboardService.getRecentTransactions({\n          limit: 10,\n          startDate,\n          endDate,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined\n        });\n\n        // Get top games with filters\n        const topGames = await dashboardService.getTopGames({\n          metric: 'revenue',\n          limit: 5,\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined,\n          minRevenue: filtersParam.minRevenue ? Number(filtersParam.minRevenue) : undefined,\n          maxRevenue: filtersParam.maxRevenue ? Number(filtersParam.maxRevenue) : undefined\n        });\n\n        // Get casino revenue with date range\n        const casinoRevenue = await dashboardService.getCasinoRevenue({\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined\n        });\n\n        // Get KPI data with filters\n        const kpis = await dashboardService.getKpiData({\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined\n        });\n\n        // Combine all data\n        const apiData: DashboardData = {\n          stats,\n          playerRegistrations,\n          recentTransactions,\n          topGames,\n          casinoRevenue,\n          kpis,\n          charts: {\n            revenueByDay: casinoRevenue?.dailyRevenue?.map(item => ({\n              ...item,\n              day: item.day || format(new Date(item.date), 'EEE'),\n              value: item.value || item.revenue\n            })) || [],\n            playersByGame: topGames?.map(game => ({\n              game: game.name,\n              value: game.players\n            })) || []\n          }\n        };\n\n        setDashboardData(apiData);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n\n        // If API fails, fall back to mock data for demonstration\n        const mockData: DashboardData = {\n          stats: {\n            revenue: {\n              value: 12567.89,\n              change: 15.2,\n              period: 'vs last week'\n            },\n            players: {\n              value: 1432,\n              change: 7.5,\n              period: 'vs last week'\n            },\n            games: {\n              value: 256,\n              change: 12.8,\n              period: 'vs last week'\n            },\n            engagement: {\n              value: 5621,\n              change: -3.2,\n              period: 'vs last week'\n            }\n          },\n          topGames: [\n            { name: 'Poker Pro', revenue: 3200.56, players: 432 },\n            { name: 'Blackjack Masters', revenue: 2800.32, players: 387 },\n            { name: 'Slots Royale', revenue: 2300.18, players: 356 },\n            { name: 'Roulette King', revenue: 1900.45, players: 289 },\n            { name: 'Baccarat Elite', revenue: 1450.67, players: 218 }\n          ],\n          charts: {\n            revenueByDay: [\n              { day: 'Mon', value: 2100 },\n              { day: 'Tue', value: 2400 },\n              { day: 'Wed', value: 1800 },\n              { day: 'Thu', value: 2200 },\n              { day: 'Fri', value: 2600 },\n              { day: 'Sat', value: 3100 },\n              { day: 'Sun', value: 2500 }\n            ],\n            playersByGame: [\n              { game: 'Poker', value: 450 },\n              { game: 'Slots', value: 380 },\n              { game: 'Roulette', value: 240 },\n              { game: 'Blackjack', value: 190 },\n              { game: 'Baccarat', value: 165 }\n            ]\n          },\n          recentTransactions: [\n            { id: 1, playerId: 101, playerName: 'John Doe', amount: 100.00, type: 'deposit', timestamp: '2023-05-01T08:30:00Z' },\n            { id: 2, playerId: 102, playerName: 'Jane Smith', amount: 50.00, type: 'withdrawal', timestamp: '2023-05-02T10:15:00Z' },\n            { id: 3, playerId: 103, playerName: 'Mike Johnson', amount: 75.50, type: 'bet', timestamp: '2023-05-03T14:45:00Z' },\n            { id: 4, playerId: 104, playerName: 'Lisa Brown', amount: 120.25, type: 'win', timestamp: '2023-05-04T09:20:00Z' },\n            { id: 5, playerId: 105, playerName: 'Robert Wilson', amount: 200.00, type: 'deposit', timestamp: '2023-05-05T16:10:00Z' }\n          ]\n        };\n\n        // Show error message but still display mock data\n        setError(new Error(`Error connecting to API: ${(error as Error).message || 'Unknown error'}. Showing mock data instead.`));\n        setDashboardData(mockData);\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // Handle test scenario change\n  const handleTestScenarioChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const newScenario = event.target.value;\n    setTestScenario(newScenario);\n    fetchData(); // Refetch with new scenario\n  };\n\n  // Toggle test panel\n  const handleToggleTestPanel = (): void => {\n    setShowTestPanel(!showTestPanel);\n  };\n\n  // Handle refresh\n  const handleRefresh = (): void => {\n    fetchData();\n  };\n\n  // Render loading state\n  if (isLoading && !dashboardData) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mt: 8 }}>\n          <CircularProgress size={60} />\n          <Typography variant=\"h6\" sx={{ mt: 2 }}>\n            Loading dashboard...\n          </Typography>\n        </Box>\n      </Container>\n    );\n  }\n\n  // We'll show error as an alert but still display the dashboard with mock data\n  // This is different from the loading state where we show a loading spinner\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      {/* Error Alert */}\n      {error && (\n        <Alert\n          severity=\"warning\"\n          sx={{ mb: 3 }}\n          action={\n            <Button\n              color=\"inherit\"\n              size=\"small\"\n              onClick={handleRefresh}\n              startIcon={<RefreshIcon />}\n            >\n              Retry\n            </Button>\n          }\n        >\n          {error.message}\n        </Alert>\n      )}\n\n      {/* Dashboard Header */}\n      <DashboardHeader\n        user={user || undefined}\n        onRefresh={handleRefresh}\n        onToggleFilters={handleToggleFilters}\n        onFilterReset={handleFilterReset}\n        onToggleTestPanel={handleToggleTestPanel}\n        filterMenuAnchor={filterMenuAnchor}\n        onFilterMenuClick={handleFilterMenuClick}\n        onFilterMenuClose={handleFilterMenuClose}\n        showTestPanel={showTestPanel}\n      />\n\n      {/* Test Panel */}\n      {showTestPanel && (\n        <TestPanel\n          testScenario={testScenario}\n          onTestScenarioChange={handleTestScenarioChange}\n          onClose={handleToggleTestPanel}\n        />\n      )}\n\n      {/* Date Range Picker */}\n      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <DateRangePicker\n          startDate={dateRange.start}\n          endDate={dateRange.end}\n          onChange={handleDateRangeChange}\n          buttonLabel=\"Select Date Range\"\n        />\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Showing data from {dateRange.start ? format(dateRange.start, 'MMM d, yyyy') : 'all time'} to {dateRange.end ? format(dateRange.end, 'MMM d, yyyy') : 'present'}\n        </Typography>\n      </Box>\n\n      {/* Filter Panel */}\n      {showFilters && (\n        <FilterPanel\n          filters={filterDefinitions}\n          values={filters}\n          onChange={handleFilterChange}\n          onApply={() => handleFilterApply()}\n          onReset={handleFilterReset}\n          title=\"Dashboard Filters\"\n        />\n      )}\n\n      {/* Dashboard Tabs */}\n      <DashboardTabs\n        activeTab={activeTab}\n        onTabChange={handleTabChange}\n        dashboardData={dashboardData}\n        isLoading={isLoading}\n        error={error}\n        theme={theme}\n      />\n    </Container>\n  );\n};\n\nexport default ApiDashboard;\n","/**\n * Test data generator utility\n * Provides functions to generate different test data scenarios\n */\n\n/**\n * Generate empty data for testing empty state handling\n * @returns Empty dashboard data\n */\nexport const generateEmptyData = () => {\n  return {\n    stats: {\n      revenue: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      },\n      players: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      },\n      games: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      },\n      engagement: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      }\n    },\n    topGames: [],\n    recentTransactions: [],\n    playerRegistrations: [],\n    charts: {\n      revenueByDay: [],\n      playersByGame: []\n    }\n  };\n};\n\n/**\n * Generate partial data for testing partial data handling\n * @returns Partial dashboard data\n */\nexport const generatePartialData = () => {\n  return {\n    stats: {\n      revenue: {\n        value: 8765.43,\n        change: 5.2,\n        period: 'vs last week'\n      },\n      players: {\n        value: 876,\n        change: -2.1,\n        period: 'vs last week'\n      },\n      games: {\n        value: 45,\n        change: 3.5,\n        period: 'vs last week'\n      },\n      engagement: {\n        value: 67.8,\n        change: 1.2,\n        period: 'vs last week'\n      }\n    },\n    topGames: [\n      { id: 'poker-pro', name: 'Poker Pro', category: 'poker', revenue: 2100.56, players: 321 },\n      { id: 'blackjack-masters', name: 'Blackjack Masters', category: 'table', revenue: 1800.32, players: 287 },\n      // Other games are missing\n    ],\n    // recentTransactions is missing\n    recentTransactions: [],\n    playerRegistrations: [],\n    charts: {\n      revenueByDay: [\n        { day: 'Mon', value: 1100 },\n        { day: 'Tue', value: 1400 },\n        { day: 'Wed', value: 1200 },\n        // Other days are missing\n      ],\n      playersByGame: [\n        { game: 'Poker', value: 321 },\n        { game: 'Blackjack', value: 287 }\n      ]\n    }\n  };\n};\n\n/**\n * Generate large data for testing performance\n * @returns Large dashboard data\n */\nexport const generateLargeData = () => {\n  // Generate large arrays of data\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  const revenueByDay = [];\n  const recentTransactions = [];\n  const topGames = [];\n\n  // Generate 100 days of revenue data\n  for (let i = 0; i < 100; i++) {\n    const day = days[i % 7];\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n\n    revenueByDay.push({\n      day,\n      date: date.toISOString().split('T')[0],\n      value: Math.floor(Math.random() * 5000) + 1000\n    });\n  }\n\n  // Generate 1000 transactions\n  for (let i = 0; i < 1000; i++) {\n    const date = new Date();\n    date.setMinutes(date.getMinutes() - i * 30);\n\n    recentTransactions.push({\n      id: `tx-${i}`,\n      playerId: `player-${Math.floor(Math.random() * 100) + 1}`,\n      playerName: `Player ${Math.floor(Math.random() * 100) + 1}`,\n      amount: Math.floor(Math.random() * 1000) / 10,\n      type: ['deposit', 'withdrawal', 'bet', 'win'][Math.floor(Math.random() * 4)],\n      timestamp: date.toISOString(),\n      status: ['completed', 'pending', 'failed'][Math.floor(Math.random() * 3)]\n    });\n  }\n\n  // Generate 100 games\n  const gameTypes = ['Slots', 'Poker', 'Blackjack', 'Roulette', 'Baccarat', 'Craps', 'Bingo'];\n  for (let i = 0; i < 100; i++) {\n    const gameType = gameTypes[Math.floor(Math.random() * gameTypes.length)];\n    topGames.push({\n      id: `game-${i}`,\n      name: `${gameType} ${i + 1}`,\n      revenue: Math.floor(Math.random() * 10000) + 500,\n      players: Math.floor(Math.random() * 1000) + 50,\n      sessions: Math.floor(Math.random() * 5000) + 100,\n      category: gameType.toLowerCase()\n    });\n  }\n\n  return {\n    stats: {\n      revenue: {\n        value: 123456.78,\n        change: 25.4,\n        period: 'vs last week'\n      },\n      players: {\n        value: 12345,\n        change: 15.7,\n        period: 'vs last week'\n      },\n      games: {\n        value: 245,\n        change: 32.8,\n        period: 'vs last week'\n      },\n      engagement: {\n        value: 78.5,\n        change: 18.2,\n        period: 'vs last week'\n      }\n    },\n    topGames: topGames.slice(0, 20), // Top 20 games\n    recentTransactions: recentTransactions.slice(0, 50), // Latest 50 transactions\n    playerRegistrations: revenueByDay.map(day => ({\n      date: day.date,\n      registrations: Math.floor(Math.random() * 200) + 50,\n      ftd: Math.floor(Math.random() * 50) + 10\n    })),\n    charts: {\n      revenueByDay: revenueByDay.slice(0, 30), // Last 30 days\n      playersByGame: topGames.slice(0, 10).map(game => ({\n        game: game.name,\n        value: game.players\n      }))\n    }\n  };\n};\n\n/**\n * Generate error data for testing error handling\n * @returns Error object\n */\nexport const generateErrorData = () => {\n  const errorTypes = [\n    { code: 'API_ERROR', message: 'Failed to connect to API endpoint' },\n    { code: 'AUTH_ERROR', message: 'Authentication token expired' },\n    { code: 'TIMEOUT_ERROR', message: 'Request timed out after 30 seconds' },\n    { code: 'DATA_ERROR', message: 'Invalid data format received from server' },\n    { code: 'SERVER_ERROR', message: 'Internal server error (500)' }\n  ];\n\n  const randomError = errorTypes[Math.floor(Math.random() * errorTypes.length)];\n\n  return {\n    code: randomError.code,\n    message: randomError.message,\n    timestamp: new Date().toISOString()\n  };\n};\n","import React, { useState } from 'react';\nimport { Box, TextField, Button, Paper, Typography, IconButton, Popover } from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { format, startOfDay, endOfDay, subDays, startOfMonth, endOfMonth, isValid } from 'date-fns';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { DateRangePickerProps, DatePreset, DateRange } from '../../types/dateRangePicker';\n\n/**\n * A reusable date range picker component with presets\n */\nconst DateRangePicker: React.FC<DateRangePickerProps> = ({\n  startDate = null,\n  endDate = null,\n  onChange,\n  buttonLabel = \"Date Range\",\n  presets = null,\n  showClearButton = true,\n  autoApplyPresets = true,\n  disabled = false,\n  className,\n  sx\n}) => {\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const [tempStartDate, setTempStartDate] = useState<Date | null>(startDate);\n  const [tempEndDate, setTempEndDate] = useState<Date | null>(endDate);\n\n  // Default presets if none provided\n  const defaultPresets: DatePreset[] = [\n    { label: 'Today', getValue: () => ({ start: startOfDay(new Date()), end: endOfDay(new Date()) }) },\n    { label: 'Yesterday', getValue: () => ({ start: startOfDay(subDays(new Date(), 1)), end: endOfDay(subDays(new Date(), 1)) }) },\n    { label: 'Last 7 days', getValue: () => ({ start: startOfDay(subDays(new Date(), 6)), end: endOfDay(new Date()) }) },\n    { label: 'Last 30 days', getValue: () => ({ start: startOfDay(subDays(new Date(), 29)), end: endOfDay(new Date()) }) },\n    { label: 'This month', getValue: () => ({ start: startOfMonth(new Date()), end: endOfMonth(new Date()) }) },\n    { label: 'Last month', getValue: () => {\n      const date = new Date();\n      date.setMonth(date.getMonth() - 1);\n      return { start: startOfMonth(date), end: endOfMonth(date) };\n    }},\n  ];\n\n  const datePresets = presets || defaultPresets;\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>): void => {\n    setAnchorEl(event.currentTarget);\n    setTempStartDate(startDate);\n    setTempEndDate(endDate);\n  };\n\n  const handleClose = (): void => {\n    setAnchorEl(null);\n  };\n\n  const handleApply = (): void => {\n    if (onChange) {\n      onChange({ start: tempStartDate, end: tempEndDate });\n    }\n    handleClose();\n  };\n\n  const handleClear = (e?: React.MouseEvent): void => {\n    if (e) {\n      e.stopPropagation();\n    }\n    setTempStartDate(null);\n    setTempEndDate(null);\n    if (onChange) {\n      onChange({ start: null, end: null });\n    }\n    handleClose();\n  };\n\n  const handlePresetClick = (preset: DatePreset): void => {\n    const { start, end } = preset.getValue();\n    setTempStartDate(start);\n    setTempEndDate(end);\n    \n    if (autoApplyPresets) {\n      if (onChange) {\n        onChange({ start, end });\n      }\n      handleClose();\n    }\n  };\n\n  const formatButtonText = (): string => {\n    if (startDate && endDate && isValid(startDate) && isValid(endDate)) {\n      return `${format(startDate, 'MMM dd, yyyy')} - ${format(endDate, 'MMM dd, yyyy')}`;\n    }\n    return buttonLabel;\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'date-range-popover' : undefined;\n\n  return (\n    <div className={className} style={sx}>\n      <Button\n        variant=\"outlined\"\n        onClick={handleClick}\n        startIcon={<CalendarTodayIcon />}\n        endIcon={showClearButton && startDate && endDate && isValid(startDate) && isValid(endDate) ? (\n          <IconButton size=\"small\" onClick={handleClear}>\n            <ClearIcon fontSize=\"small\" />\n          </IconButton>\n        ) : undefined}\n        sx={{ \n          justifyContent: 'space-between', \n          minWidth: 200,\n          textTransform: 'none'\n        }}\n        disabled={disabled}\n      >\n        {formatButtonText()}\n      </Button>\n      \n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        PaperProps={{\n          elevation: 8,\n          sx: { p: 2, width: { xs: '90vw', sm: 400 } }\n        }}\n      >\n        <Typography variant=\"subtitle1\" gutterBottom>\n          Select Date Range\n        </Typography>\n        \n        <Box sx={{ mb: 2 }}>\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <Box sx={{ display: 'flex', gap: 2 }}>\n              <DatePicker\n                label=\"Start Date\"\n                value={tempStartDate}\n                onChange={(newValue) => setTempStartDate(newValue)}\n                slotProps={{ \n                  textField: { \n                    size: 'small', \n                    fullWidth: true,\n                    helperText: tempStartDate ? format(tempStartDate, 'EEEE') : '' \n                  } \n                }}\n              />\n              <DatePicker\n                label=\"End Date\"\n                value={tempEndDate}\n                onChange={(newValue) => setTempEndDate(newValue)}\n                minDate={tempStartDate}\n                slotProps={{ \n                  textField: { \n                    size: 'small', \n                    fullWidth: true,\n                    helperText: tempEndDate ? format(tempEndDate, 'EEEE') : '' \n                  } \n                }}\n              />\n            </Box>\n          </LocalizationProvider>\n        </Box>\n        \n        <Typography variant=\"subtitle2\" gutterBottom>\n          Presets\n        </Typography>\n        \n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n          {datePresets.map((preset, index) => (\n            <Button \n              key={index}\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={() => handlePresetClick(preset)}\n            >\n              {preset.label}\n            </Button>\n          ))}\n        </Box>\n        \n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1, mt: 2 }}>\n          <Button variant=\"outlined\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleApply}>\n            Apply\n          </Button>\n        </Box>\n      </Popover>\n    </div>\n  );\n};\n\nexport default DateRangePicker;\n"],"names":["FilterType","_ref","title","filters","values","onChange","onApply","onReset","onFilterSave","expanded","controlledExpanded","defaultExpanded","sx","internalExpanded","setInternalExpanded","useState","isControlled","undefined","activeFilters","Object","keys","filter","key","value","handleFilterChange","id","handleResetFilters","renderFilterInput","_filter$options","defaultValue","type","SELECT","_jsxs","FormControl","fullWidth","size","children","_jsx","InputLabel","label","Select","labelId","e","target","MenuItem","options","map","option","DATE","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","newValue","slotProps","textField","BOOLEAN","NUMBER","TextField","inputProps","min","max","step","RANGE","Box","display","gap","flex","placeholder","Paper","variant","mb","p","alignItems","justifyContent","FilterListIcon","mr","Typography","component","length","Chip","color","ml","IconButton","onClick","toggleExpand","ExpandLessIcon","ExpandMoreIcon","Collapse","in","Divider","Grid","container","spacing","item","xs","sm","md","mt","flexWrap","find","f","displayValue","o","Date","toLocaleDateString","onDelete","deleteIcon","ClearIcon","Button","startIcon","Tooltip","handleSaveFilters","SaveIcon","handleApplyFilters","ErrorBoundary","Component","constructor","props","super","handleReset","this","setState","hasError","error","state","getDerivedStateFromError","message","stack","componentDidCatch","errorInfo","console","render","fallback","textAlign","ErrorOutlineIcon","fontSize","gutterBottom","RefreshIcon","user","onRefresh","onToggleFilters","onFilterReset","onToggleTestPanel","filterMenuAnchor","onFilterMenuClick","onFilterMenuClose","showTestPanel","theme","useTheme","elevation","bgcolor","palette","light","borderRadius","primary","main","firstName","grey","BugReportIcon","Menu","anchorEl","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","ListItemIcon","TuneIcon","ListItemText","index","other","isSelected","role","hidden","icon","InfoIcon","action","description","flexDirection","subtitle","trend","trendLabel","loading","onMoreClick","isInverse","trendInfo","TrendingUpIcon","TrendingDownIcon","TrendingFlatIcon","Card","height","CardContent","position","arrow","InfoOutlinedIcon","marginRight","MoreVertIcon","CircularProgress","_Fragment","fontWeight","width","my","formatTrend","formatCurrency","currencyCode","arguments","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDate","date","dateObj","DateTimeFormat","day","month","year","formatDateTime","hour","minute","hour12","DashboardMetrics","stats","onRetry","EmptyState","metricsData","revenue","change","players","games","engagement","KPICard","AttachMoneyIcon","toLocaleString","PeopleIcon","VideogameAssetIcon","TimelineIcon","memo","subheader","collapsible","setExpanded","overflow","px","py","handleExpandToggle","CasinoRevenueChart","data","isLoading","isMobile","useMediaQuery","breakpoints","down","chartData","useMemo","fullDate","parseFloat","toString","formattedValue","cursor","textDecoration","ResponsiveContainer","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","interval","YAxis","tickFormatter","replace","formatter","labelFormatter","d","Line","name","stroke","strokeWidth","dot","r","activeDot","AreaChart","Legend","Area","fill","fillOpacity","VirtualizedTable","columns","rowHeight","emptyMessage","onRowClick","headerHeight","Row","useCallback","_ref2","row","TableRow","hover","boxSizing","column","cellWidth","TableCell","align","textOverflow","whiteSpace","TableContainer","Table","TableHead","TableBody","FixedSizeList","itemCount","itemSize","CustomTooltip","active","payload","border","borderColor","boxShadow","TopGamesChart","showLegend","emptyStateMessage","errorFallback","valueKey","nameKey","viewMode","setViewMode","game","category","colors","secondary","info","success","warning","tableColumns","borderBottom","Tabs","handleViewModeChange","event","Tab","BarChart","angle","textAnchor","content","Bar","radius","entry","Cell","DashboardCharts","timePeriod","onTimePeriodChange","chartsData","revenueByDay","playersByGame","preparedRevenueData","preparedGamesData","sessions","minWidth","Skeleton","RecentTransactionsTable","maxHeight","showHeader","getStatusColor","status","toLowerCase","getTypeColor","stickyHeader","Array","from","_","transaction","noWrap","maxWidth","playerName","amount","timestamp","onDownload","onSettings","transactionsData","DownloadIcon","SettingsIcon","EnhancedOverviewTab","_dashboardData$stats","_dashboardData$stats2","_dashboardData$topGam","_dashboardData$stats3","_dashboardData$stats4","_dashboardData$charts","_dashboardData$charts2","dashboardData","setTimePeriod","topGames","engagementRate","engagementChange","charts","period","log","RecentTransactionsSection","recentTransactions","_dashboardData$charts4","defaultTheme","currentTheme","chartType","setChartType","revenueData","playerDistributionData","_dashboardData$charts3","kpiData","kpis","averageSessionTime","conversionRate","churnRate","revenuePerUser","page","setPage","rowsPerPage","setRowsPerPage","COLORS","playerAcquisitionData","playerRegistrations","count","playerDemographicsData","playerDemographics","playerAgeData","age","playerListData","recentPlayers","registeredAt","country","dateString","RechartsTooltip","PieChart","Pie","cx","cy","labelLine","outerRadius","percent","toFixed","PersonAddIcon","slice","player","Avatar","split","part","join","toUpperCase","VisibilityIcon","EditIcon","DeleteIcon","TablePagination","rowsPerPageOptions","onPageChange","handleChangePage","_event","newPage","onRowsPerPageChange","parseInt","gameCategoryData","gamePerformanceData","game1","game2","game3","gameListData","rating","featuredGamesData","featuredGames","image","AddIcon","CardMedia","alt","Rating","precision","readOnly","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","domain","Radar","DashboardTabs","activeTab","onTabChange","handleTabChange","tabComponents","PerformanceTab","PlayersTab","GamesTab","tab","tabIndex","TabPanel","testScenario","onTestScenarioChange","CloseIcon","paragraph","FormLabel","RadioGroup","FormControlLabel","control","Radio","ApiDashboard","useAuth","setActiveTab","useDispatch","setIsLoading","setError","setDashboardData","showFilters","setShowFilters","setFilterMenuAnchor","setTestScenario","setShowTestPanel","dateRange","setDateRange","start","startOfDay","subDays","end","endOfDay","setFilters","gameCategory","playerStatus","minRevenue","maxRevenue","useEffect","fetchData","handleFilterReset","resetFilters","handleFilterMenuClose","async","dateRangeParam","filtersParam","setTimeout","generateLargeData","days","i","setDate","getDate","push","toISOString","Math","floor","random","setMinutes","getMinutes","playerId","gameTypes","gameType","registrations","ftd","errorObj","generateErrorData","errorTypes","code","randomError","Error","_casinoRevenue$dailyR","startDate","endDate","filterParams","Number","dashboardService","getDashboardStats","getPlayerRegistrations","getRecentTransactions","limit","getTopGames","metric","casinoRevenue","getCasinoRevenue","apiData","getKpiData","dailyRevenue","mockData","handleToggleTestPanel","handleRefresh","Container","Alert","severity","DashboardHeader","handleToggleFilters","currentTarget","TestPanel","newScenario","DateRangePicker","newRange","buttonLabel","FilterPanel","filterId","prev","presets","showClearButton","autoApplyPresets","disabled","className","setAnchorEl","tempStartDate","setTempStartDate","tempEndDate","setTempEndDate","datePresets","getValue","startOfMonth","endOfMonth","setMonth","getMonth","handleClose","CalendarTodayIcon","endIcon","isValid","stopPropagation","textTransform","Popover","PaperProps","helperText","minDate","preset","handlePresetClick","handleApply"],"sourceRoot":""}