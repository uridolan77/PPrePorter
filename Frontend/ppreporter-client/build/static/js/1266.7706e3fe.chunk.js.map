{"version":3,"file":"static/js/1266.7706e3fe.chunk.js","mappings":"+JAoBA,MAAMA,EAAkBC,GACD,kBAAVA,EACS,EAARA,EAAH,KAEFA,EAwET,EAjE6CC,IAC3C,MAAM,UAAEC,EAAS,GAAEC,EAAE,MAAEC,EAAK,SAAEC,KAAaC,GAAeL,EAGpDM,EAAmC,IACnCH,GAAS,CAAC,EACdI,QAAW,OAAFL,QAAE,IAAFA,OAAE,EAAFA,EAAIK,QACbC,cAAiB,OAAFN,QAAE,IAAFA,OAAE,EAAFA,EAAIM,cACnBC,eAAkB,OAAFP,QAAE,IAAFA,OAAE,EAAFA,EAAIO,eACpBC,WAAc,OAAFR,QAAE,IAAFA,OAAE,EAAFA,EAAIQ,WAChBC,SAAY,OAAFT,QAAE,IAAFA,OAAE,EAAFA,EAAIS,SACdC,IAAKd,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAIU,KACxBC,aAAcf,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAIY,IACjCC,UAAWjB,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAIc,IAC9BC,YAAanB,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAIgB,IAChCC,WAAYrB,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAIkB,IAC/BC,QAASvB,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAIoB,GAC5BC,WAAYzB,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAIsB,IAC/BC,cAAe3B,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAIwB,IAClCC,YAAa7B,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAI0B,IAChCC,aAAc/B,EAAiB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAI4B,IACjCC,OAAU,OAAF7B,QAAE,IAAFA,OAAE,EAAFA,EAAI6B,OACZC,MAAS,OAAF9B,QAAE,IAAFA,OAAE,EAAFA,EAAI8B,MACXC,SAAY,OAAF/B,QAAE,IAAFA,OAAE,EAAFA,EAAI+B,SACdC,SAAY,OAAFhC,QAAE,IAAFA,OAAE,EAAFA,EAAIgC,SACdC,UAAa,OAAFjC,QAAE,IAAFA,OAAE,EAAFA,EAAIiC,UACfC,UAAa,OAAFlC,QAAE,IAAFA,OAAE,EAAFA,EAAIkC,UACfC,SAAY,OAAFnC,QAAE,IAAFA,OAAE,EAAFA,EAAImC,SACdC,IAAO,OAAFpC,QAAE,IAAFA,OAAE,EAAFA,EAAIoC,IACTC,KAAQ,OAAFrC,QAAE,IAAFA,OAAE,EAAFA,EAAIqC,KACVC,MAAS,OAAFtC,QAAE,IAAFA,OAAE,EAAFA,EAAIsC,MACXC,OAAU,OAAFvC,QAAE,IAAFA,OAAE,EAAFA,EAAIuC,OACZC,aAAgB,OAAFxC,QAAE,IAAFA,OAAE,EAAFA,EAAIwC,aAClBC,OAAU,OAAFzC,QAAE,IAAFA,OAAE,EAAFA,EAAIyC,OACZC,YAAe,OAAF1C,QAAE,IAAFA,OAAE,EAAFA,EAAI0C,YACjBC,aAAgB,OAAF3C,QAAE,IAAFA,OAAE,EAAFA,EAAI2C,aAClBC,gBAAmB,OAAF5C,QAAE,IAAFA,OAAE,EAAFA,EAAI6C,QACrBC,MAAS,OAAF9C,QAAE,IAAFA,OAAE,EAAFA,EAAI8C,MACXC,SAAY,OAAF/C,QAAE,IAAFA,OAAE,EAAFA,EAAI+C,SACdC,SAAY,OAAFhD,QAAE,IAAFA,OAAE,EAAFA,EAAIgD,SACdC,UAAW,cAWb,GAPAC,OAAOC,KAAK/C,GAAagD,SAAQC,SACuBC,IAAlDlD,EAAYiD,WACPjD,EAAYiD,EACrB,IAIEtD,EAAW,CACb,MAAMwD,EAAe,IAChBpD,EACHF,MAAOG,EACPoD,GAAIzD,GAGN,OAAO0D,EAAAA,EAAAA,KAAA,UAASF,EAAYrD,SAAGA,GACjC,CAGA,OAAOuD,EAAAA,EAAAA,KAAA,OAAKxD,MAAOG,KAAiBD,EAAUD,SAAGA,GAAe,C,+JCnFlE,MAAMwD,GAAmBC,EAAAA,EAAAA,IAAO,UAAPA,CAAkB,CACzC7B,MAAO,SAmBH8B,EAA0CC,IAKzC,IAL0C,aAC/CC,EAAY,mBACZC,EAAkB,UAClBC,EAAS,MACTC,GACDJ,EAEC,MAAMK,GAAcC,EAAAA,EAAAA,UAAQ,IACrBF,EACEA,aAAiBG,MAAQH,EAAQ,IAAIG,MAAMH,EAAMI,YADrC,MAElB,CAACJ,IAGEK,GAAcC,EAAAA,EAAAA,cAAY,KAE9BC,QAAQC,IAAI,wBAAwB,GACnC,IAEH,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE3E,SAAA,EAEzBuD,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAG7E,UAChBuD,EAAAA,EAAAA,KAACuB,EAAAA,EAAa,CAACC,QAASX,EAAYpE,UAClCuD,EAAAA,EAAAA,KAACC,EAAgB,CAAC,kBAAgB,kBAAiBxD,UACjDuD,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CACfC,MAAOrB,EACPsB,QAASpB,EACTC,MAAOC,EACPmB,MAAM,wBACNC,QAAShB,WAOjBb,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAG7E,UAChBuD,EAAAA,EAAAA,KAACuB,EAAAA,EAAa,CAAA9E,UACZwE,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAACtF,MAAOuF,EAAAA,GAAWtF,SAAA,EACvBuD,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CACTC,QAAQ,KACRzF,MAAO0F,EAAAA,GACPC,GAAG,sBAAqB1F,SACzB,0BAGDwE,EAAAA,EAAAA,MAACmB,EAAAA,EAAyB,CAAA3F,SAAA,EACxBuD,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CAACC,QAAQ,KAAKzF,MAAO0F,EAAAA,GAAczF,SAAC,wBAG/CwE,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACC,QAAQ,QAAQ5C,MAAM,iBAAiBgD,MAAM,SAAQ5F,SAAA,CAAC,gGAEhEuD,EAAAA,EAAAA,KAAA,SAAM,yEAShBA,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAG7E,UAChBuD,EAAAA,EAAAA,KAACuB,EAAAA,EAAa,CAACC,QAASX,EAAYpE,UAClCwE,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAACtF,MAAOuF,EAAAA,GAAWtF,SAAA,EACvBuD,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CACTC,QAAQ,KACRzF,MAAO0F,EAAAA,GACPC,GAAG,uBAAsB1F,SAC1B,yBAGDuD,EAAAA,EAAAA,KAACsC,EAAAA,GAAuB,CACtBC,KAAMjC,EACNC,UAAWA,aAKd,EAIX,GAAeiC,EAAAA,EAAAA,MAAKrC,E,oCCtGb,MAAMsC,EAAYC,GAChBA,C,sBCRLC,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACXC,EAAQ,GAAU,EAAIC,EAAeE,UAAuB,EAAID,EAAYE,KAAK,OAAQ,CACtGC,EAAG,sOACD,S","sources":["components/common/SimpleBox.tsx","pages/analytics/tabs/OverviewTab.tsx","utils/styleUtils.ts","../node_modules/@mui/icons-material/Search.js"],"sourcesContent":["import React from 'react';\nimport { Box } from '@mui/material';\n\n/**\n * SimpleBox component\n * A simple div component that replaces MUI Box to avoid TypeScript union type complexity issues\n */\ninterface SimpleBoxProps {\n  component?: any;\n  sx?: any;\n  style?: React.CSSProperties;\n  children?: React.ReactNode;\n  [key: string]: any;\n}\n\n/**\n * Convert MUI spacing units to pixels\n * @param value - The spacing value in MUI units\n * @returns The spacing value in pixels\n */\nconst convertSpacing = (value: any): string | undefined => {\n  if (typeof value === 'number') {\n    return `${value * 8}px`;\n  }\n  return value;\n};\n\n/**\n * SimpleBox component\n * A simple replacement for MUI Box that avoids TypeScript union type issues\n */\nconst SimpleBox: React.FC<SimpleBoxProps> = (props) => {\n  const { component, sx, style, children, ...otherProps } = props;\n\n  // Create a simplified inline style object from sx prop\n  const inlineStyle: React.CSSProperties = {\n    ...(style || {}),\n    display: sx?.display,\n    flexDirection: sx?.flexDirection,\n    justifyContent: sx?.justifyContent,\n    alignItems: sx?.alignItems,\n    flexWrap: sx?.flexWrap,\n    gap: convertSpacing(sx?.gap),\n    marginBottom: convertSpacing(sx?.mb),\n    marginTop: convertSpacing(sx?.mt),\n    marginRight: convertSpacing(sx?.mr),\n    marginLeft: convertSpacing(sx?.ml),\n    padding: convertSpacing(sx?.p),\n    paddingTop: convertSpacing(sx?.pt),\n    paddingBottom: convertSpacing(sx?.pb),\n    paddingLeft: convertSpacing(sx?.pl),\n    paddingRight: convertSpacing(sx?.pr),\n    height: sx?.height,\n    width: sx?.width,\n    minWidth: sx?.minWidth,\n    maxWidth: sx?.maxWidth,\n    minHeight: sx?.minHeight,\n    maxHeight: sx?.maxHeight,\n    position: sx?.position,\n    top: sx?.top,\n    left: sx?.left,\n    right: sx?.right,\n    bottom: sx?.bottom,\n    borderRadius: sx?.borderRadius,\n    border: sx?.border,\n    borderColor: sx?.borderColor,\n    borderBottom: sx?.borderBottom,\n    backgroundColor: sx?.bgcolor,\n    color: sx?.color,\n    flexGrow: sx?.flexGrow,\n    overflow: sx?.overflow,\n    boxSizing: 'border-box',\n  };\n\n  // Filter out undefined values\n  Object.keys(inlineStyle).forEach(key => {\n    if (inlineStyle[key as keyof React.CSSProperties] === undefined) {\n      delete inlineStyle[key as keyof React.CSSProperties];\n    }\n  });\n\n  // If component prop is provided, render a div with the as attribute\n  if (component) {\n    const elementProps = {\n      ...otherProps,\n      style: inlineStyle,\n      as: component\n    };\n\n    return <div {...elementProps}>{children}</div>;\n  }\n\n  // Otherwise, render a regular div\n  return <div style={inlineStyle} {...otherProps}>{children}</div>;\n};\n\nexport default SimpleBox;\n","import React, { memo, useMemo, useCallback } from 'react';\nimport { Grid, Paper, Typography, styled } from '@mui/material';\nimport { DashboardMetrics, RecentTransactionsTable } from '../../../components/dashboard';\nimport { ChartPlaceholderContainer } from '../AnalyticsPageComponents';\nimport { DashboardStats } from '../../../types/dashboard';\nimport { TransactionData } from '../../../types/redux';\nimport { CARD_STYLE, HEADING_STYLE } from '../styles';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n// Styled component for section container\nconst SectionContainer = styled('section')({\n  width: '100%',\n});\n\ninterface OverviewTabProps {\n  summaryStats: DashboardStats | null;\n  recentTransactions: TransactionData[];\n  isLoading: boolean;\n  error: Error | string | null;\n}\n\n/**\n * OverviewTab component\n * Displays key metrics, performance overview, and recent transactions\n *\n * @param summaryStats - Dashboard summary statistics\n * @param recentTransactions - Recent transaction data\n * @param isLoading - Loading state indicator\n * @param error - Error state\n */\nconst OverviewTab: React.FC<OverviewTabProps> = ({\n  summaryStats,\n  recentTransactions,\n  isLoading,\n  error\n}) => {\n  // Convert error to Error object if it's a string\n  const errorObject = useMemo(() => {\n    if (!error) return null;\n    return error instanceof Error ? error : new Error(error.toString());\n  }, [error]);\n\n  // Handle error retry\n  const handleRetry = useCallback(() => {\n    // This would typically dispatch an action to reload the data\n    console.log('Retrying data load...');\n  }, []);\n\n  return (\n    <Grid container spacing={3}>\n      {/* Key Metrics */}\n      <Grid item xs={12}>\n        <ErrorBoundary onReset={handleRetry}>\n          <SectionContainer aria-labelledby=\"metrics-heading\">\n            <DashboardMetrics\n              stats={summaryStats}\n              loading={isLoading}\n              error={errorObject}\n              title=\"Key Analytics Metrics\"\n              onRetry={handleRetry}\n            />\n          </SectionContainer>\n        </ErrorBoundary>\n      </Grid>\n\n      {/* Charts */}\n      <Grid item xs={12}>\n        <ErrorBoundary>\n          <Paper style={CARD_STYLE}>\n            <Typography\n              variant=\"h6\"\n              style={HEADING_STYLE}\n              id=\"performance-heading\"\n            >\n              Performance Overview\n            </Typography>\n            <ChartPlaceholderContainer>\n              <Typography variant=\"h6\" style={HEADING_STYLE}>\n                Charts Placeholder\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n                This component requires additional visualization packages which are not currently installed.\n                <br />\n                Please install the required packages to view the charts.\n              </Typography>\n            </ChartPlaceholderContainer>\n          </Paper>\n        </ErrorBoundary>\n      </Grid>\n\n      {/* Recent Transactions */}\n      <Grid item xs={12}>\n        <ErrorBoundary onReset={handleRetry}>\n          <Paper style={CARD_STYLE}>\n            <Typography\n              variant=\"h6\"\n              style={HEADING_STYLE}\n              id=\"transactions-heading\"\n            >\n              Recent Transactions\n            </Typography>\n            <RecentTransactionsTable\n              data={recentTransactions}\n              isLoading={isLoading}\n            />\n          </Paper>\n        </ErrorBoundary>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default memo(OverviewTab);\n","import { SxProps, Theme } from '@mui/material';\n\n/**\n * A utility function to create sx props without TypeScript union type complexity issues.\n * This function simply returns the input object but with a type assertion that avoids\n * the \"union type too complex to represent\" error.\n *\n * @param styles The styles object to be used as sx props\n * @returns The same styles object with the correct type\n */\nexport const createSx = (styles: Record<string, any>): any => {\n  return styles;\n};\n\n/**\n * A utility function to create a style function that returns an object\n * This approach avoids TypeScript's complex union type issues\n *\n * @param stylesFn A function that returns a styles object\n * @returns A function that returns the styles object\n */\nexport const createStyleFn = <T extends any[]>(stylesFn: (...args: T) => Record<string, any>) => {\n  return (...args: T): any => stylesFn(...args);\n};\n\n/**\n * Style functions for common components\n * These functions return style objects directly to avoid TypeScript union type issues\n */\nexport const styles = {\n  card: () => ({\n    bgcolor: 'background.paper',\n    p: 2,\n    border: '1px solid',\n    borderColor: 'divider',\n    borderRadius: 1,\n    boxShadow: 1,\n  }),\n\n  panel: () => ({\n    bgcolor: 'background.paper',\n    p: 1.5,\n    border: '1px solid',\n    borderColor: 'divider',\n    borderRadius: 1,\n    boxShadow: 1,\n  }),\n\n  flexRow: () => ({\n    display: 'flex',\n    alignItems: 'center',\n    gap: 1,\n  }),\n\n  flexColumn: () => ({\n    display: 'flex',\n    flexDirection: 'column',\n    gap: 1,\n  }),\n\n  flexBetween: () => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n\n  flexCenter: () => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }),\n\n  marginBottom: (value: number) => ({\n    mb: value,\n  }),\n\n  padding: (value: number) => ({\n    p: value,\n  }),\n\n  fullWidth: () => ({\n    width: '100%',\n  }),\n\n  fullHeight: () => ({\n    height: '100%',\n  }),\n};\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["convertSpacing","value","props","component","sx","style","children","otherProps","inlineStyle","display","flexDirection","justifyContent","alignItems","flexWrap","gap","marginBottom","mb","marginTop","mt","marginRight","mr","marginLeft","ml","padding","p","paddingTop","pt","paddingBottom","pb","paddingLeft","pl","paddingRight","pr","height","width","minWidth","maxWidth","minHeight","maxHeight","position","top","left","right","bottom","borderRadius","border","borderColor","borderBottom","backgroundColor","bgcolor","color","flexGrow","overflow","boxSizing","Object","keys","forEach","key","undefined","elementProps","as","_jsx","SectionContainer","styled","OverviewTab","_ref","summaryStats","recentTransactions","isLoading","error","errorObject","useMemo","Error","toString","handleRetry","useCallback","console","log","_jsxs","Grid","container","spacing","item","xs","ErrorBoundary","onReset","DashboardMetrics","stats","loading","title","onRetry","Paper","CARD_STYLE","Typography","variant","HEADING_STYLE","id","ChartPlaceholderContainer","align","RecentTransactionsTable","data","memo","createSx","styles","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}