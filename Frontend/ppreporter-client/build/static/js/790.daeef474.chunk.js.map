{"version":3,"file":"static/js/790.daeef474.chunk.js","mappings":"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","sources":["components/dashboard/DashboardHeader.tsx","utils/formatters.js","components/dashboard/DashboardMetrics.tsx","components/dashboard/CasinoRevenueChart.tsx","components/common/VirtualizedTable.tsx","components/dashboard/TopGamesChart.tsx","components/dashboard/DashboardCharts.tsx","components/dashboard/RecentTransactionsTable.tsx","components/dashboard/overview/RecentTransactionsSection.tsx","components/dashboard/tabs/EnhancedOverviewTab.tsx","components/dashboard/tabs/PerformanceTab.tsx","components/dashboard/tabs/PlayersTab.tsx","components/dashboard/tabs/GamesTab.tsx","components/dashboard/DashboardTabs.tsx","components/dashboard/TestPanel.tsx","pages/ApiDashboard.tsx","utils/testDataGenerator.ts"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Paper,\n  Button,\n  IconButton,\n  Tooltip,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  useTheme\n} from '@mui/material';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport TuneIcon from '@mui/icons-material/Tune';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport BugReportIcon from '@mui/icons-material/BugReport';\nimport { CommonProps } from '../../types/common';\n\ninterface User {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  id?: string;\n}\n\ninterface DashboardHeaderProps extends CommonProps {\n  user?: User;\n  onRefresh?: () => void;\n  onToggleFilters?: () => void;\n  onFilterReset?: () => void;\n  onToggleTestPanel?: () => void;\n  filterMenuAnchor: HTMLElement | null;\n  onFilterMenuClick?: (event: React.MouseEvent<HTMLElement>) => void;\n  onFilterMenuClose?: () => void;\n  showTestPanel?: boolean;\n}\n\n/**\n * Dashboard Header Component\n * Contains welcome message, filter controls, and action buttons\n */\nconst DashboardHeader: React.FC<DashboardHeaderProps> = ({\n  user,\n  onRefresh,\n  onToggleFilters,\n  onFilterReset,\n  onToggleTestPanel,\n  filterMenuAnchor,\n  onFilterMenuClick,\n  onFilterMenuClose,\n  showTestPanel,\n  sx\n}) => {\n  const theme = useTheme();\n\n  return (\n    <ErrorBoundary\n      fallback={\n        <Paper\n          elevation={0}\n          sx={{\n            p: 3,\n            mb: 4,\n            bgcolor: theme.palette.error.light,\n            color: 'white',\n            borderRadius: 2\n          }}\n        >\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <ErrorOutlineIcon sx={{ mr: 2, fontSize: 32 }} />\n            <Typography variant=\"h6\">\n              Something went wrong loading the dashboard header\n            </Typography>\n          </Box>\n        </Paper>\n      }\n    >\n      <Paper\n        elevation={0}\n        sx={{\n          p: 3,\n          mb: 4,\n          bgcolor: theme.palette.primary.main,\n          color: 'white',\n          borderRadius: 2,\n          ...sx\n        }}\n      >\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={12} md={8}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            Welcome, {user?.firstName || 'User'}!\n          </Typography>\n          <Typography variant=\"body1\">\n            Here's an overview of your PP Reporter performance. Use the dashboard to monitor key metrics and gain insights.\n          </Typography>\n        </Grid>\n        <Grid item xs={12} md={4} sx={{ textAlign: 'right' }}>\n          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={onFilterMenuClick}\n              startIcon={<FilterListIcon />}\n              sx={{\n                bgcolor: 'white',\n                color: theme.palette.primary.main,\n                '&:hover': {\n                  bgcolor: theme.palette.grey[100]\n                }\n              }}\n              aria-label=\"Open filter menu\"\n            >\n              Filter\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={onRefresh}\n              startIcon={<RefreshIcon />}\n              sx={{\n                bgcolor: 'white',\n                color: theme.palette.primary.main,\n                '&:hover': {\n                  bgcolor: theme.palette.grey[100]\n                }\n              }}\n              aria-label=\"Refresh dashboard data\"\n            >\n              Refresh\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={onToggleTestPanel}\n              startIcon={<BugReportIcon />}\n              sx={{\n                bgcolor: 'white',\n                color: theme.palette.primary.main,\n                '&:hover': {\n                  bgcolor: theme.palette.grey[100]\n                }\n              }}\n              aria-label=\"Toggle test panel\"\n            >\n              Test\n            </Button>\n\n            {/* Filter Menu */}\n            <Menu\n              anchorEl={filterMenuAnchor}\n              open={Boolean(filterMenuAnchor)}\n              onClose={onFilterMenuClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n            >\n              <MenuItem onClick={onToggleFilters}>\n                <ListItemIcon>\n                  <TuneIcon fontSize=\"small\" />\n                </ListItemIcon>\n                <ListItemText>Advanced Filters</ListItemText>\n              </MenuItem>\n              <MenuItem onClick={onFilterReset}>\n                <ListItemIcon>\n                  <ClearIcon fontSize=\"small\" />\n                </ListItemIcon>\n                <ListItemText>Reset Filters</ListItemText>\n              </MenuItem>\n            </Menu>\n          </Box>\n        </Grid>\n      </Grid>\n    </Paper>\n    </ErrorBoundary>\n  );\n};\n\nexport default DashboardHeader;\n","/**\r\n * Utility functions for formatting values in the UI\r\n */\r\n\r\n/**\r\n * Format a number as currency\r\n * @param {number} value - The value to format\r\n * @param {string} currencyCode - Optional currency code (defaults to GBP)\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (value, currencyCode = 'GBP') => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return new Intl.NumberFormat('en-GB', {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a number with thousands separators\r\n * @param {number} value - The value to format\r\n * @param {number} decimals - Number of decimal places (default: 0)\r\n * @returns {string} Formatted number string\r\n */\r\nexport const formatNumber = (value, decimals = 0) => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return new Intl.NumberFormat('en-GB', {\r\n    minimumFractionDigits: decimals,\r\n    maximumFractionDigits: decimals\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a date in a localized format\r\n * @param {string|Date} date - The date to format\r\n * @returns {string} Formatted date string\r\n */\r\nexport const formatDate = (date) => {\r\n  if (!date) return '—';\r\n  \r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  return new Intl.DateTimeFormat('en-GB', {\r\n    day: '2-digit',\r\n    month: 'short',\r\n    year: 'numeric'\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Format a date with time\r\n * @param {string|Date} date - The date to format\r\n * @returns {string} Formatted date and time string\r\n */\r\nexport const formatDateTime = (date) => {\r\n  if (!date) return '—';\r\n  \r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  return new Intl.DateTimeFormat('en-GB', {\r\n    day: '2-digit',\r\n    month: 'short',\r\n    year: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    hour12: false\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Format a percentage value\r\n * @param {number} value - The percentage value to format\r\n * @returns {string} Formatted percentage string\r\n */\r\nexport const formatPercentage = (value) => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;\r\n};","import React, { memo } from 'react';\nimport { Grid, Typography, Box, Button } from '@mui/material';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport PeopleIcon from '@mui/icons-material/People';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport KPICard from '../common/KPICard';\nimport { formatCurrency } from '../../utils/formatters';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport EmptyState from '../common/EmptyState';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport { CommonProps } from '../../types/common';\nimport { DashboardStats } from '../../types/dashboard';\n\ninterface DashboardMetricsProps extends CommonProps {\n  stats?: DashboardStats | null;\n  loading?: boolean;\n  error?: Error | null;\n  title?: string;\n  onRetry?: () => void;\n}\n\n/**\n * DashboardMetrics component\n * Displays key performance indicators in a grid of cards\n */\nconst DashboardMetrics: React.FC<DashboardMetricsProps> = ({\n  stats,\n  loading = false,\n  error = null,\n  title = 'Key Metrics',\n  onRetry,\n  sx\n}) => {\n  // If there's an error, return an error message\n  if (error) {\n    return (\n      <EmptyState\n        message={`Error loading metrics: ${error.message}`}\n        icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n        action={onRetry ? <Button onClick={onRetry}>Retry</Button> : undefined}\n      />\n    );\n  }\n\n  // Default stats if none are provided\n  const metricsData: DashboardStats = stats || {\n    revenue: { value: 0, change: 0 },\n    players: { value: 0, change: 0 },\n    games: { value: 0, change: 0 },\n    engagement: { value: 0, change: 0 }\n  };\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Error displaying metrics\" />}>\n      <Box sx={{ mb: 4, ...sx }}>\n        <Typography variant=\"h5\" sx={{ mb: 2 }}>\n          {title}\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Total Revenue\"\n              value={formatCurrency(metricsData.revenue.value)}\n              trend={metricsData.revenue.change}\n              icon={<AttachMoneyIcon />}\n              loading={loading}\n              description=\"Total revenue across all games\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Active Players\"\n              value={metricsData.players.value.toLocaleString()}\n              trend={metricsData.players.change}\n              icon={<PeopleIcon />}\n              loading={loading}\n              description=\"Number of active players\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Popular Games\"\n              value={metricsData.games.value}\n              trend={metricsData.games.change}\n              icon={<VideogameAssetIcon />}\n              loading={loading}\n              description=\"Number of games with active players\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <KPICard\n              title=\"Engagement Rate\"\n              value={`${metricsData.engagement.value}%`}\n              trend={metricsData.engagement.change}\n              icon={<TimelineIcon />}\n              loading={loading}\n              description=\"Average player engagement rate\"\n            />\n          </Grid>\n        </Grid>\n      </Box>\n    </ErrorBoundary>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(DashboardMetrics);\n","import React, { memo, useMemo } from 'react';\nimport { Box, CircularProgress, Typography, useMediaQuery, useTheme } from '@mui/material';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line } from 'recharts';\nimport { formatCurrency, formatDate } from '../../utils/formatters';\nimport { CommonProps } from '../../types/common';\n\n// Revenue data item interface\ninterface RevenueDataItem {\n  date: string;\n  revenue?: number;\n  value?: number;\n  [key: string]: any;\n}\n\n// Chart data item interface\ninterface ChartDataItem {\n  date: string;\n  fullDate: string;\n  revenue: number;\n  formattedValue: string;\n}\n\n// Component props interface\ninterface CasinoRevenueChartProps extends CommonProps {\n  data: RevenueDataItem[];\n  isLoading?: boolean;\n  height?: number;\n  error?: Error | null;\n  onRetry?: () => void;\n}\n\n/**\n * Casino Revenue Chart component that displays revenue data over time\n * with responsive behavior for mobile devices\n */\nconst CasinoRevenueChart: React.FC<CasinoRevenueChartProps> = ({\n  data,\n  isLoading = false,\n  height = 300,\n  error = null,\n  onRetry,\n  sx\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // Format data for chart display - memoized to prevent unnecessary recalculations\n  const chartData: ChartDataItem[] = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.map(item => ({\n      date: formatDate(item.date),\n      fullDate: item.date,\n      revenue: parseFloat((item.revenue || item.value || 0).toString()),\n      formattedValue: formatCurrency(item.revenue || item.value || 0)\n    }));\n  }, [data]);\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Handle error state\n  if (error) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"error\">\n          Error loading revenue data: {error.message}\n          {onRetry && (\n            <Box component=\"span\" sx={{ ml: 2, cursor: 'pointer', textDecoration: 'underline' }} onClick={onRetry}>\n              Retry\n            </Box>\n          )}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Handle empty data state\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          No revenue data available\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Mobile view - Line chart (simpler, less CPU intensive)\n  if (isMobile) {\n    return (\n      <Box sx={{ width: '100%', height, ...sx }}>\n        <ResponsiveContainer>\n          <LineChart\n            data={chartData}\n            margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"date\"\n              tick={{ fontSize: 10 }}\n              interval=\"preserveStartEnd\"\n            />\n            <YAxis\n              tickFormatter={(value: number) => formatCurrency(value, 'GBP').replace('£', '')}\n              tick={{ fontSize: 10 }}\n              width={40}\n            />\n            <Tooltip\n              formatter={(value: number) => [formatCurrency(value), 'Revenue']}\n              labelFormatter={(label: string) => {\n                const item = chartData.find(d => d.date === label);\n                return item ? formatDate(item.fullDate) : label;\n              }}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"revenue\"\n              name=\"Revenue\"\n              stroke=\"#2e7d32\"\n              strokeWidth={2}\n              dot={{ r: 3 }}\n              activeDot={{ r: 5 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Box>\n    );\n  }\n\n  // Desktop view - Area chart\n  return (\n    <Box sx={{ width: '100%', height, ...sx }}>\n      <ResponsiveContainer>\n        <AreaChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis\n            tickFormatter={(value: number) => formatCurrency(value, 'GBP').replace('£', '')}\n          />\n          <Tooltip\n            formatter={(value: number) => [formatCurrency(value), 'Revenue']}\n          />\n          <Legend />\n          <Area\n            type=\"monotone\"\n            dataKey=\"revenue\"\n            name=\"Revenue\"\n            stroke=\"#2e7d32\"\n            fill=\"#4caf50\"\n            fillOpacity={0.3}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n};\n\n// Export memoized component\nexport default memo(CasinoRevenueChart);\n","import React, { useCallback, memo } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n  CircularProgress\n} from '@mui/material';\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\nimport { SxProps, Theme } from '@mui/material/styles';\nimport { ColumnDef } from '../../types/common';\n\nexport interface VirtualizedTableProps<T> {\n  data: T[];\n  columns: ColumnDef[];\n  height?: number;\n  width?: number | string;\n  rowHeight?: number;\n  loading?: boolean;\n  emptyMessage?: string;\n  onRowClick?: (row: T) => void;\n  headerHeight?: number;\n  sx?: SxProps<Theme>;\n}\n\n/**\n * VirtualizedTable component\n * A reusable virtualized table component using react-window for efficient rendering of large data sets\n */\nfunction VirtualizedTable<T extends Record<string, any>>({\n  data = [],\n  columns = [],\n  height = 400,\n  width = '100%',\n  rowHeight = 53,\n  loading = false,\n  emptyMessage = 'No data to display',\n  onRowClick,\n  headerHeight = 56,\n  sx = {}\n}: VirtualizedTableProps<T>): React.ReactElement {\n  // Memoized row renderer to prevent unnecessary re-renders\n  const Row = useCallback(\n    ({ index, style }: ListChildComponentProps) => {\n      const row = data[index];\n      return (\n        <TableRow\n          component=\"div\"\n          hover\n          onClick={onRowClick ? () => onRowClick(row) : undefined}\n          style={{\n            ...style,\n            display: 'flex',\n            alignItems: 'center',\n            boxSizing: 'border-box',\n            cursor: onRowClick ? 'pointer' : 'default'\n          }}\n        >\n          {columns.map((column) => {\n            const value = row[column.id];\n            const cellWidth = `${100 / columns.length}%`;\n\n            return (\n              <TableCell\n                component=\"div\"\n                key={column.id}\n                align={column.align || 'left'}\n                style={{\n                  width: cellWidth,\n                  display: 'flex',\n                  alignItems: 'center',\n                  boxSizing: 'border-box',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  whiteSpace: 'nowrap'\n                }}\n              >\n                {column.format ? column.format(value, row) : value}\n              </TableCell>\n            );\n          })}\n        </TableRow>\n      );\n    },\n    [data, columns, onRowClick]\n  );\n\n  // If loading, return a loading message\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // If no data, return an empty message\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyMessage}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Paper sx={{ height, width, overflow: 'hidden', ...sx }}>\n      <TableContainer component=\"div\" sx={{ height: '100%', width: '100%' }}>\n        <Table component=\"div\" sx={{ display: 'block', width: '100%', height: '100%' }}>\n          <TableHead component=\"div\" sx={{ display: 'block', width: '100%' }}>\n            <TableRow\n              component=\"div\"\n              sx={{\n                display: 'flex',\n                width: '100%',\n                height: headerHeight,\n                alignItems: 'center'\n              }}\n            >\n              {columns.map((column) => {\n                const cellWidth = `${100 / columns.length}%`;\n\n                return (\n                  <TableCell\n                    component=\"div\"\n                    key={column.id}\n                    align={column.align || 'left'}\n                    sx={{\n                      width: cellWidth,\n                      display: 'flex',\n                      alignItems: 'center',\n                      fontWeight: 'bold',\n                      boxSizing: 'border-box'\n                    }}\n                  >\n                    {column.label}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          </TableHead>\n\n          <TableBody\n            component=\"div\"\n            sx={{\n              display: 'block',\n              width: '100%',\n              height: `calc(${height}px - ${headerHeight}px)`,\n              overflow: 'hidden'\n            }}\n          >\n            <FixedSizeList\n              height={height - headerHeight}\n              width=\"100%\"\n              itemCount={data.length}\n              itemSize={rowHeight}\n              style={{ overflow: 'auto' }}\n            >\n              {Row}\n            </FixedSizeList>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}\n\nexport default memo(VirtualizedTable) as <T extends Record<string, any>>(props: VirtualizedTableProps<T>) => React.ReactElement;\n","import React, { memo, useMemo, useState } from 'react';\nimport { Box, CircularProgress, Typography, useTheme, Tabs, Tab } from '@mui/material';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Cell } from 'recharts';\nimport { formatCurrency } from '../../utils/formatters';\nimport { GameData } from '../../types/redux';\nimport VirtualizedTable from '../common/VirtualizedTable';\n\ninterface TopGamesChartProps {\n  data: GameData[];\n  isLoading?: boolean;\n  height?: number;\n  showLegend?: boolean;\n  error?: Error | null;\n  onRetry?: () => void;\n  sx?: any;\n  emptyStateMessage?: string;\n  errorFallback?: (error: Error) => React.ReactElement;\n  valueKey?: string;\n  nameKey?: string;\n}\n\n/**\n * Custom tooltip component for the chart\n */\nconst CustomTooltip: React.FC<any> = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return (\n      <Box\n        sx={{\n          bgcolor: 'background.paper',\n          p: 1.5,\n          border: '1px solid',\n          borderColor: 'divider',\n          borderRadius: 1,\n          boxShadow: 1,\n        }}\n      >\n        <Typography variant=\"subtitle2\" gutterBottom>\n          {payload[0].payload.name}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Revenue: {formatCurrency(payload[0].value)}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Players: {payload[0].payload.players.toLocaleString()}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return null;\n};\n\n/**\n * Top Games Chart component\n * Displays a bar chart of top games by revenue\n */\nconst TopGamesChart: React.FC<TopGamesChartProps> = ({\n  data,\n  isLoading = false,\n  height = 300,\n  showLegend = true,\n  error = null,\n  onRetry,\n  sx,\n  emptyStateMessage = \"No game data available\",\n  errorFallback,\n  valueKey = \"revenue\",\n  nameKey = \"name\"\n}) => {\n  const theme = useTheme();\n  const [viewMode, setViewMode] = useState<'chart' | 'table'>('chart');\n\n  // Handle view mode change\n  const handleViewModeChange = (event: React.SyntheticEvent, newValue: 'chart' | 'table') => {\n    setViewMode(newValue);\n  };\n\n  // Memoize the chart data to prevent unnecessary recalculations\n  const chartData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.map((game) => ({\n      name: game.name,\n      revenue: game.revenue,\n      players: game.players,\n      category: game.category\n    }));\n  }, [data]);\n\n  // Generate colors for the bars based on the theme\n  const colors = useMemo(() => {\n    return [\n      theme.palette.primary.main,\n      theme.palette.primary.light,\n      theme.palette.secondary.main,\n      theme.palette.secondary.light,\n      theme.palette.info.main,\n      theme.palette.info.light,\n      theme.palette.success.main,\n      theme.palette.success.light,\n      theme.palette.warning.main,\n      theme.palette.warning.light\n    ];\n  }, [theme]);\n\n  // Table columns\n  const tableColumns = useMemo(() => [\n    { id: 'name', label: 'Game Name', align: 'left' as const },\n    { id: 'category', label: 'Category', align: 'left' as const },\n    { id: 'revenue', label: 'Revenue', align: 'right' as const, format: (value: number) => formatCurrency(value) },\n    { id: 'players', label: 'Players', align: 'right' as const, format: (value: number) => value.toLocaleString() }\n  ], []);\n\n  if (isLoading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    if (errorFallback) {\n      return errorFallback(error);\n    }\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"error\">\n          Error loading games data: {error.message}\n          {onRetry && (\n            <Box component=\"span\" sx={{ ml: 2, cursor: 'pointer', textDecoration: 'underline' }} onClick={onRetry}>\n              Retry\n            </Box>\n          )}\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, ...sx }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyStateMessage}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ width: '100%', ...sx }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n        <Tabs value={viewMode} onChange={handleViewModeChange} aria-label=\"view mode tabs\">\n          <Tab label=\"Chart\" value=\"chart\" />\n          <Tab label=\"Table\" value=\"table\" />\n        </Tabs>\n      </Box>\n\n      {viewMode === 'chart' ? (\n        // Chart view\n        <Box sx={{ width: '100%', height }}>\n          <ResponsiveContainer>\n            <BarChart\n              data={chartData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 70 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"name\"\n                angle={-45}\n                textAnchor=\"end\"\n                height={70}\n                tick={{ fontSize: 12 }}\n              />\n              <YAxis\n                tickFormatter={(value) => `£${value.toLocaleString()}`}\n                tick={{ fontSize: 12 }}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              {showLegend && <Legend />}\n              <Bar dataKey=\"revenue\" name=\"Revenue\" radius={[4, 4, 0, 0]}>\n                {chartData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n      ) : (\n        // Table view with virtualization\n        <VirtualizedTable\n          data={data}\n          columns={tableColumns}\n          height={height}\n          rowHeight={53}\n          loading={isLoading}\n          emptyMessage=\"No games data available\"\n        />\n      )}\n    </Box>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(TopGamesChart);\n","import React, { memo, useMemo } from 'react';\nimport { Grid, Typography, Box, FormControl, InputLabel, Select, MenuItem, Skeleton, SelectChangeEvent } from '@mui/material';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport EmptyState from '../common/EmptyState';\nimport Card from '../common/Card';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport CasinoRevenueChart from './CasinoRevenueChart';\nimport TopGamesChart from './TopGamesChart';\nimport { CommonProps } from '../../types/common';\nimport { DashboardChartData, TimePeriod } from '../../types/dashboard';\n\ninterface DashboardChartsProps extends CommonProps {\n  data?: DashboardChartData | null;\n  loading?: boolean;\n  error?: Error | null;\n  title?: string;\n  timePeriod?: TimePeriod;\n  onTimePeriodChange?: (period: TimePeriod) => void;\n}\n\n/**\n * DashboardCharts component\n * Displays charts and visualizations for dashboard data\n */\nconst DashboardCharts: React.FC<DashboardChartsProps> = ({\n  data,\n  loading,\n  error,\n  title = 'Performance Metrics',\n  timePeriod = 'week',\n  onTimePeriodChange,\n  sx\n}) => {\n  // Default data if none is provided\n  const chartsData: DashboardChartData = data || {\n    revenueByDay: [],\n    playersByGame: []\n  };\n\n  // Memoize the revenue data to prevent unnecessary transformations\n  const preparedRevenueData = useMemo(() => {\n    return chartsData.revenueByDay.map(item => ({\n      date: item.day,\n      revenue: item.value\n    }));\n  }, [chartsData.revenueByDay]);\n\n  // Memoize the games data to convert from GameDataPoint to GameData\n  const preparedGamesData = useMemo(() => {\n    return chartsData.playersByGame.map((item, index) => ({\n      id: `game-${index}`,\n      name: item.game,\n      revenue: item.value,\n      players: item.value,\n      sessions: 0,\n      category: 'Unknown'\n    }));\n  }, [chartsData.playersByGame]);\n\n  // Handle time period change\n  const handleTimePeriodChange = (event: SelectChangeEvent<string>) => {\n    if (onTimePeriodChange) {\n      onTimePeriodChange(event.target.value as TimePeriod);\n    }\n  };\n\n  // If there's an error, return an error message\n  if (error) {\n    return (\n      <EmptyState\n        message={`Error loading charts: ${error.message}`}\n        icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n      />\n    );\n  }\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Error displaying charts\" />}>\n      <Box sx={{ mb: 4, ...sx }}>\n        <Typography variant=\"h5\" sx={{ mb: 2 }}>\n          {title}\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Card\n              title=\"Revenue Trends\"\n              action={\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                    <InputLabel id=\"time-period-label\">Period</InputLabel>\n                    <Select\n                      labelId=\"time-period-label\"\n                      id=\"time-period-select\"\n                      value={timePeriod}\n                      label=\"Period\"\n                      onChange={handleTimePeriodChange}\n                    >\n                      <MenuItem value=\"day\">Day</MenuItem>\n                      <MenuItem value=\"week\">Week</MenuItem>\n                      <MenuItem value=\"month\">Month</MenuItem>\n                      <MenuItem value=\"quarter\">Quarter</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Box>\n              }\n            >\n              {loading ? (\n                <Box sx={{ p: 3 }}>\n                  <Skeleton variant=\"rectangular\" height={300} />\n                </Box>\n              ) : (\n                <CasinoRevenueChart\n                  data={preparedRevenueData}\n                  isLoading={loading}\n                />\n              )}\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Card title=\"Player Distribution by Game\">\n              {loading ? (\n                <Box sx={{ p: 3 }}>\n                  <Skeleton variant=\"rectangular\" height={300} />\n                </Box>\n              ) : (\n                <TopGamesChart\n                  data={preparedGamesData}\n                  isLoading={loading}\n                />\n              )}\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n    </ErrorBoundary>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(DashboardCharts);\n","import React, { memo, useMemo } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n  Chip,\n  CircularProgress,\n  Skeleton,\n  useTheme\n} from '@mui/material';\nimport { formatCurrency, formatDateTime } from '../../utils/formatters';\nimport { TransactionData } from '../../types/redux';\n\ninterface RecentTransactionsTableProps {\n  data: TransactionData[];\n  isLoading?: boolean;\n  maxHeight?: number | string;\n  showHeader?: boolean;\n  errorFallback?: (error: Error) => React.ReactElement;\n}\n\n/**\n * Recent Transactions Table component\n * Displays a table of recent transactions\n */\nconst RecentTransactionsTable: React.FC<RecentTransactionsTableProps> = ({\n  data,\n  isLoading = false,\n  maxHeight = 400,\n  showHeader = true\n}) => {\n  const theme = useTheme();\n\n  // Get status color based on transaction status\n  const getStatusColor = (status: string): string => {\n    switch (status.toLowerCase()) {\n      case 'completed':\n      case 'success':\n        return theme.palette.success.main;\n      case 'pending':\n      case 'processing':\n        return theme.palette.warning.main;\n      case 'failed':\n      case 'declined':\n        return theme.palette.error.main;\n      case 'refunded':\n        return theme.palette.info.main;\n      default:\n        return theme.palette.grey[500];\n    }\n  };\n\n  // Get transaction type color\n  const getTypeColor = (type: string): string => {\n    switch (type.toLowerCase()) {\n      case 'deposit':\n        return theme.palette.success.main;\n      case 'withdrawal':\n        return theme.palette.error.main;\n      case 'bonus':\n        return theme.palette.info.main;\n      case 'wager':\n        return theme.palette.warning.main;\n      case 'win':\n        return theme.palette.success.light;\n      default:\n        return theme.palette.grey[500];\n    }\n  };\n\n  // Loading skeleton\n  if (isLoading) {\n    return (\n      <TableContainer component={Paper} sx={{ maxHeight }}>\n        <Table stickyHeader size=\"small\">\n          {showHeader && (\n            <TableHead>\n              <TableRow>\n                <TableCell>Player</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell align=\"right\">Amount</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Status</TableCell>\n              </TableRow>\n            </TableHead>\n          )}\n          <TableBody>\n            {Array.from(new Array(5)).map((_, index) => (\n              <TableRow key={index}>\n                <TableCell><Skeleton width={120} /></TableCell>\n                <TableCell><Skeleton width={80} /></TableCell>\n                <TableCell align=\"right\"><Skeleton width={60} /></TableCell>\n                <TableCell><Skeleton width={100} /></TableCell>\n                <TableCell><Skeleton width={80} /></TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n\n  // No data state\n  if (!data || data.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 200 }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          No transaction data available\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <TableContainer component={Paper} sx={{ maxHeight }}>\n      <Table stickyHeader size=\"small\">\n        {showHeader && (\n          <TableHead>\n            <TableRow>\n              <TableCell>Player</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell align=\"right\">Amount</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Status</TableCell>\n            </TableRow>\n          </TableHead>\n        )}\n        <TableBody>\n          {data.map((transaction) => (\n            <TableRow key={transaction.id} hover>\n              <TableCell>\n                <Typography variant=\"body2\" noWrap sx={{ maxWidth: 150 }}>\n                  {transaction.playerName}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Chip\n                  label={transaction.type}\n                  size=\"small\"\n                  sx={{\n                    bgcolor: `${getTypeColor(transaction.type)}20`,\n                    color: getTypeColor(transaction.type),\n                    fontWeight: 'medium',\n                    fontSize: '0.75rem'\n                  }}\n                />\n              </TableCell>\n              <TableCell align=\"right\">\n                <Typography\n                  variant=\"body2\"\n                  fontWeight=\"medium\"\n                  color={\n                    transaction.type.toLowerCase() === 'deposit' || transaction.type.toLowerCase() === 'win'\n                      ? 'success.main'\n                      : transaction.type.toLowerCase() === 'withdrawal'\n                      ? 'error.main'\n                      : 'text.primary'\n                  }\n                >\n                  {formatCurrency(transaction.amount, transaction.currency)}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {formatDateTime(transaction.timestamp)}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Chip\n                  label={transaction.status}\n                  size=\"small\"\n                  sx={{\n                    bgcolor: `${getStatusColor(transaction.status)}20`,\n                    color: getStatusColor(transaction.status),\n                    fontWeight: 'medium',\n                    fontSize: '0.75rem'\n                  }}\n                />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(RecentTransactionsTable);\n","import React, { useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  Tooltip,\n  Skeleton\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n// Common components\nimport Card from '../../common/Card';\nimport EmptyState from '../../common/EmptyState';\n\n// Dashboard components\nimport RecentTransactionsTable from '../RecentTransactionsTable';\n\n// Types\nimport { RecentTransactionsSectionProps, Transaction } from '../../../types/recentTransactionsSection';\n\n/**\n * Recent Transactions Section Component\n * Displays recent transactions in a table format\n */\nconst RecentTransactionsSection: React.FC<RecentTransactionsSectionProps> = ({\n  data,\n  isLoading = false,\n  onDownload = () => {},\n  onSettings = () => {}\n}) => {\n  // Memoize the transactions data to prevent unnecessary re-renders\n  const transactionsData: Transaction[] = useMemo(() => {\n    return data || [];\n  }, [data]);\n\n  return (\n    <Box sx={{ mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\">\n          Recent Transactions\n        </Typography>\n        <Box>\n          <Tooltip title=\"Download report\">\n            <IconButton\n              size=\"small\"\n              sx={{ mr: 1 }}\n              onClick={onDownload}\n              aria-label=\"Download transactions report\"\n            >\n              <DownloadIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Settings\">\n            <IconButton\n              size=\"small\"\n              onClick={onSettings}\n              aria-label=\"Transactions settings\"\n            >\n              <SettingsIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n      <Card>\n        {isLoading && transactionsData.length === 0 ? (\n          <Box sx={{ p: 3 }}>\n            <Skeleton variant=\"rectangular\" height={300} />\n          </Box>\n        ) : !transactionsData.length ? (\n          <EmptyState\n            message=\"No recent transactions available\"\n            icon={<AttachMoneyIcon sx={{ fontSize: 48 }} />}\n          />\n        ) : (\n          <RecentTransactionsTable\n            data={transactionsData as any}\n            isLoading={isLoading}\n            errorFallback={(error: Error) => (\n              <EmptyState\n                message={`Error loading transactions: ${error.message}`}\n                icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n              />\n            )}\n          />\n        )}\n      </Card>\n    </Box>\n  );\n};\n\nexport default RecentTransactionsSection;\n","import React, { memo, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n// Common components\nimport EmptyState from '../../common/EmptyState';\nimport ErrorBoundary from '../../common/ErrorBoundary';\n\n// Dashboard components\nimport DashboardMetrics from '../DashboardMetrics';\nimport DashboardCharts from '../DashboardCharts';\nimport RecentTransactionsSection from '../overview/RecentTransactionsSection';\n\n// Types\nimport {\n  EnhancedOverviewTabProps,\n  DashboardStats\n} from '../../../types/enhancedOverviewTab';\n\n/**\n * Enhanced Overview Tab component for the API Dashboard\n * Uses the new modular components for better organization and performance\n */\nconst EnhancedOverviewTab: React.FC<EnhancedOverviewTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  error = null\n}) => {\n  // State for time period filter\n  const [timePeriod, setTimePeriod] = useState<'day' | 'week' | 'month' | 'quarter' | 'year'>('week');\n\n  // Handle error state\n  if (error) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main', mb: 2 }} />\n        <Typography variant=\"h6\" color=\"error\" gutterBottom>\n          Error Loading Dashboard Data\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {error.message || \"An unexpected error occurred. Please try again later.\"}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Prepare metrics data for DashboardMetrics component\n  const metricsData: DashboardStats = {\n    revenue: dashboardData?.stats?.revenue || { value: 0, change: 0 },\n    players: dashboardData?.stats?.players || { value: 0, change: 0 },\n    games: {\n      value: dashboardData?.topGames?.length || 0,\n      change: 0\n    },\n    engagement: {\n      value: dashboardData?.stats?.engagementRate || 0,\n      change: dashboardData?.stats?.engagementChange || 0\n    }\n  };\n\n  // Prepare charts data for DashboardCharts component\n  const chartsData = {\n    revenueByDay: (dashboardData?.charts?.revenueByDay || []).map(item => ({\n      day: item.date,\n      value: item.value\n    })),\n    playersByGame: (dashboardData?.charts?.playersByGame || []).map(item => ({\n      game: item.name,\n      value: item.players\n    }))\n  };\n\n  // Handle time period change\n  const handleTimePeriodChange = (period: 'day' | 'week' | 'month' | 'quarter' | 'year'): void => {\n    setTimePeriod(period);\n    // In a real app, you would fetch new data based on the time period\n    console.log(`Time period changed to ${period}`);\n  };\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Something went wrong loading the dashboard\" icon={<ErrorOutlineIcon />} />}>\n      <Box>\n        {/* Metrics Section */}\n        <DashboardMetrics\n          stats={metricsData}\n          loading={isLoading}\n          error={error}\n          title=\"Key Performance Indicators\"\n        />\n\n        {/* Charts Section */}\n        <DashboardCharts\n          data={chartsData}\n          loading={isLoading}\n          error={error}\n          title=\"Performance Analytics\"\n          timePeriod={timePeriod}\n          onTimePeriodChange={handleTimePeriodChange}\n        />\n\n        {/* Recent Transactions Section */}\n        <RecentTransactionsSection\n          data={dashboardData?.recentTransactions}\n          isLoading={isLoading}\n          onDownload={() => console.log('Download transactions report')}\n          onSettings={() => console.log('Open transactions settings')}\n        />\n      </Box>\n    </ErrorBoundary>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(EnhancedOverviewTab);\n","import React, { useState, useMemo, ChangeEvent, MouseEvent } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  CircularProgress,\n  useTheme,\n  IconButton,\n  Tooltip,\n  ToggleButtonGroup,\n  ToggleButton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Skeleton,\n  Paper,\n  SelectChangeEvent,\n  Theme\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport ShowChartIcon from '@mui/icons-material/ShowChart';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport PieChartIcon from '@mui/icons-material/PieChart';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n// Utilities\nimport { formatCurrency, formatNumber, formatPercentage, formatDate } from '../../../utils/formatters';\n\n// Common components\nimport Card from '../../common/Card';\nimport KPICard from '../../common/KPICard';\nimport EmptyState from '../../common/EmptyState';\nimport LoadingOverlay from '../../common/LoadingOverlay';\nimport ErrorBoundary from '../../common/ErrorBoundary';\n\n// Dashboard components\nimport CasinoRevenueChart from '../CasinoRevenueChart';\nimport TopGamesChart from '../TopGamesChart';\nimport TrendAnalysis from '../TrendAnalysis';\n\nimport {\n  PieChart, Pie, Cell,\n  Legend, ResponsiveContainer,\n  Tooltip as RechartsTooltip\n} from 'recharts';\n\n// Types\nimport {\n  PerformanceTabProps,\n  RevenueDataPoint,\n  PlayerDistributionDataPoint,\n  KPIData\n} from '../../../types/performanceTab';\n\n/**\n * Performance Tab component for the API Dashboard\n * Displays performance metrics, charts, and analysis\n */\nconst PerformanceTab: React.FC<PerformanceTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  error = null,\n  theme\n}) => {\n  // Use theme from props or get it from useTheme hook\n  const defaultTheme = useTheme();\n  const currentTheme: Theme = theme || defaultTheme;\n\n  // State for chart type and time period\n  const [chartType, setChartType] = useState<string>('line');\n  const [timePeriod, setTimePeriod] = useState<string>('week');\n\n  // Chart colors - memoized to prevent recreation on each render\n  const COLORS = useMemo(() => [\n    currentTheme.palette.primary.main,\n    currentTheme.palette.secondary.main,\n    currentTheme.palette.success.main,\n    currentTheme.palette.error.main,\n    currentTheme.palette.warning.main,\n    currentTheme.palette.info.main\n  ], [currentTheme.palette]);\n\n  // Handle chart type change\n  const handleChartTypeChange = (_event: MouseEvent<HTMLElement>, newChartType: string | null): void => {\n    if (newChartType !== null) {\n      setChartType(newChartType);\n    }\n  };\n\n  // Handle time period change\n  const handleTimePeriodChange = (event: SelectChangeEvent): void => {\n    setTimePeriod(event.target.value);\n  };\n\n  // Memoize revenue data for charts\n  const revenueData: RevenueDataPoint[] = useMemo(() => {\n    return dashboardData?.charts?.revenueByDay || [\n      { day: 'Mon', value: 2100 },\n      { day: 'Tue', value: 2400 },\n      { day: 'Wed', value: 1800 },\n      { day: 'Thu', value: 2200 },\n      { day: 'Fri', value: 2600 },\n      { day: 'Sat', value: 3100 },\n      { day: 'Sun', value: 2500 }\n    ];\n  }, [dashboardData?.charts?.revenueByDay]);\n\n  // Memoize player distribution data for charts\n  const playerDistributionData: PlayerDistributionDataPoint[] = useMemo(() => {\n    return dashboardData?.charts?.playersByGame || [\n      { game: 'Poker', value: 450 },\n      { game: 'Slots', value: 380 },\n      { game: 'Roulette', value: 240 },\n      { game: 'Blackjack', value: 190 },\n      { game: 'Baccarat', value: 165 }\n    ];\n  }, [dashboardData?.charts?.playersByGame]);\n\n  // Memoize KPI data\n  const kpiData: KPIData = useMemo(() => {\n    return dashboardData?.kpis || {\n      averageSessionTime: 45,\n      conversionRate: 3.2,\n      churnRate: 5.7,\n      revenuePerUser: 87.5\n    };\n  }, [dashboardData?.kpis]);\n\n  // Prepare revenue data for the chart - memoized to prevent recalculation\n  const preparedRevenueData = useMemo(() => {\n    // Convert the revenueData to the format expected by CasinoRevenueChart\n    return revenueData.map(item => ({\n      date: item.day,\n      revenue: item.value\n    }));\n  }, [revenueData]);\n\n  // Handle error state\n  if (error) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main', mb: 2 }} />\n        <Typography variant=\"h6\" color=\"error\" gutterBottom>\n          Error Loading Performance Data\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {error.message || \"An unexpected error occurred. Please try again later.\"}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Render player distribution chart\n  const renderPlayerDistributionChart = (): React.ReactNode => {\n    if (isLoading) {\n      return (\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n          <CircularProgress />\n        </Box>\n      );\n    }\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={playerDistributionData}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            outerRadius={100}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n            nameKey=\"game\"\n            label={({ name, percent }: { name: string, percent: number }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n          >\n            {playerDistributionData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n            ))}\n          </Pie>\n          <RechartsTooltip formatter={(value: any, name: string | undefined, props: any) => [value, props.payload.game] as [any, any]} />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  return (\n    <ErrorBoundary fallback={<EmptyState message=\"Something went wrong loading the performance data\" icon={<ErrorOutlineIcon />} />}>\n      <Box>\n        {/* Performance Metrics Section */}\n        <Box sx={{ mb: 4 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h5\">\n              Performance Metrics\n            </Typography>\n            <Box>\n              <Tooltip title=\"Download report\">\n                <IconButton size=\"small\" sx={{ mr: 1 }}>\n                  <DownloadIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Settings\">\n                <IconButton size=\"small\">\n                  <SettingsIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          </Box>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Card\n                title=\"Revenue Trends\"\n                action={\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                      <InputLabel id=\"time-period-label\">Period</InputLabel>\n                      <Select\n                        labelId=\"time-period-label\"\n                        id=\"time-period-select\"\n                        value={timePeriod}\n                        label=\"Period\"\n                        onChange={handleTimePeriodChange}\n                      >\n                        <MenuItem value=\"day\">Day</MenuItem>\n                        <MenuItem value=\"week\">Week</MenuItem>\n                        <MenuItem value=\"month\">Month</MenuItem>\n                        <MenuItem value=\"quarter\">Quarter</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Box>\n                }\n              >\n                {isLoading && revenueData.length === 0 ? (\n                  <Box sx={{ p: 3 }}>\n                    <Skeleton variant=\"rectangular\" height={300} />\n                  </Box>\n                ) : (\n                  <CasinoRevenueChart\n                    data={preparedRevenueData}\n                    isLoading={isLoading}\n                  />\n                )}\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Card title=\"Player Distribution by Game\">\n                {isLoading && playerDistributionData.length === 0 ? (\n                  <Box sx={{ p: 3 }}>\n                    <Skeleton variant=\"rectangular\" height={300} />\n                  </Box>\n                ) : (\n                  <TopGamesChart\n                    data={playerDistributionData.map((item, index) => ({\n                      id: `game-${index}`,\n                      name: item.game,\n                      revenue: item.value,\n                      players: item.value,\n                      sessions: 0,\n                      category: 'Game'\n                    }))}\n                    isLoading={isLoading}\n                    valueKey=\"revenue\"\n                    nameKey=\"name\"\n                    emptyStateMessage=\"No player distribution data available\"\n                  />\n                )}\n              </Card>\n            </Grid>\n          </Grid>\n        </Box>\n\n        {/* KPI Section */}\n        <Box sx={{ mb: 4 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h5\">\n              Key Performance Indicators\n            </Typography>\n          </Box>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Avg. Session Time\"\n                value={`${kpiData.averageSessionTime} min`}\n                icon={<TimelineIcon />}\n                loading={isLoading}\n                description=\"Average time users spend in a single session\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Conversion Rate\"\n                value={`${kpiData.conversionRate}%`}\n                icon={<TrendingUpIcon />}\n                loading={isLoading}\n                description=\"Percentage of visitors who register\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Churn Rate\"\n                value={`${kpiData.churnRate}%`}\n                icon={<TrendingDownIcon />}\n                loading={isLoading}\n                description=\"Percentage of users who stop using the platform\"\n                isInverse={true}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <KPICard\n                title=\"Revenue Per User\"\n                value={formatCurrency(kpiData.revenuePerUser)}\n                icon={<AttachMoneyIcon />}\n                loading={isLoading}\n                description=\"Average revenue generated per active user\"\n              />\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </ErrorBoundary>\n  );\n};\n\nexport default PerformanceTab;\n","import React, { useState, useMemo, ChangeEvent } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Paper,\n  CircularProgress,\n  useTheme,\n  IconButton,\n  Tooltip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  Avatar,\n  Button,\n  Theme\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid,\n  Tooltip as RechartsTooltip, Legend, ResponsiveContainer,\n  PieChart, Pie, Cell\n} from 'recharts';\n\n// Types\nimport {\n  PlayersTabProps,\n  PlayerRegistrationDataPoint,\n  PlayerDemographicsDataPoint,\n  PlayerAgeDataPoint,\n  Player\n} from '../../../types/playersTab';\n\n/**\n * Players Tab component for the API Dashboard\n * Displays player analytics, demographics, and player list\n */\nconst PlayersTab: React.FC<PlayersTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  theme\n}) => {\n  // Use theme from props or get it from useTheme hook\n  const defaultTheme = useTheme();\n  const currentTheme: Theme = theme || defaultTheme;\n\n  // State for pagination\n  const [page, setPage] = useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = useState<number>(5);\n\n  // Chart colors\n  const COLORS = useMemo(() => [\n    currentTheme.palette.primary.main,\n    currentTheme.palette.secondary.main,\n    currentTheme.palette.success.main,\n    currentTheme.palette.error.main,\n    currentTheme.palette.warning.main,\n    currentTheme.palette.info.main\n  ], [currentTheme.palette]);\n\n  // Handle page change\n  const handleChangePage = (_event: unknown, newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle rows per page change\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>): void => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Player acquisition data\n  const playerAcquisitionData: PlayerRegistrationDataPoint[] = dashboardData?.playerRegistrations || [\n    { date: '2023-05-01', count: 45 },\n    { date: '2023-05-02', count: 38 },\n    { date: '2023-05-03', count: 52 },\n    { date: '2023-05-04', count: 41 },\n    { date: '2023-05-05', count: 37 },\n    { date: '2023-05-06', count: 29 },\n    { date: '2023-05-07', count: 33 }\n  ];\n\n  // Player demographics data\n  const playerDemographicsData: PlayerDemographicsDataPoint[] = dashboardData?.playerDemographics || [\n    { name: 'Male', value: 65 },\n    { name: 'Female', value: 30 },\n    { name: 'Other', value: 5 }\n  ];\n\n  // Player age distribution data\n  const playerAgeData: PlayerAgeDataPoint[] = dashboardData?.playerAgeData || [\n    { age: '18-24', count: 120 },\n    { age: '25-34', count: 280 },\n    { age: '35-44', count: 210 },\n    { age: '45-54', count: 150 },\n    { age: '55+', count: 90 }\n  ];\n\n  // Player list data\n  const playerListData: Player[] = dashboardData?.recentPlayers || [\n    { id: 1, name: 'John Doe', registeredAt: '2023-05-01T08:30:00Z', status: 'active', country: 'USA' },\n    { id: 2, name: 'Jane Smith', registeredAt: '2023-05-02T10:15:00Z', status: 'active', country: 'Canada' },\n    { id: 3, name: 'Mike Johnson', registeredAt: '2023-05-03T14:45:00Z', status: 'inactive', country: 'UK' },\n    { id: 4, name: 'Lisa Brown', registeredAt: '2023-05-04T09:20:00Z', status: 'active', country: 'Australia' },\n    { id: 5, name: 'Robert Wilson', registeredAt: '2023-05-05T16:10:00Z', status: 'pending', country: 'Germany' }\n  ];\n\n  // Format date for display\n  const formatDate = (dateString: string): string => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n  };\n\n  // Get status color\n  const getStatusColor = (status: string | undefined): \"success\" | \"error\" | \"warning\" | \"default\" => {\n    switch (status?.toLowerCase()) {\n      case 'active':\n        return 'success';\n      case 'inactive':\n        return 'error';\n      case 'pending':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  // Get initials from name\n  const getInitials = (name: string | undefined): string => {\n    if (!name) return '';\n    return name\n      .split(' ')\n      .map(part => part[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  return (\n    <Box>\n      {/* Player Acquisition Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Player Acquisition\n          </Typography>\n          <Box>\n            <Tooltip title=\"Download report\">\n              <IconButton size=\"small\" sx={{ mr: 1 }}>\n                <DownloadIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Settings\">\n              <IconButton size=\"small\">\n                <SettingsIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n        <Paper sx={{ p: 3, borderRadius: 2 }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={playerAcquisitionData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" tickFormatter={formatDate} />\n                <YAxis />\n                <RechartsTooltip\n                  formatter={(value: any) => [value, 'New Players']}\n                  labelFormatter={formatDate}\n                />\n                <Legend />\n                <Bar\n                  dataKey=\"count\"\n                  name=\"New Players\"\n                  fill={currentTheme.palette.primary.main}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </Paper>\n      </Box>\n\n      {/* Player Demographics Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Player Demographics\n          </Typography>\n        </Box>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Gender Distribution\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 250 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <PieChart>\n                    <Pie\n                      data={playerDemographicsData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      label={({ name, percent }: { name: string, percent: number }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {playerDemographicsData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip formatter={(value: any) => [`${value}%`, 'Percentage']} />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Age Distribution\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 250 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={playerAgeData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"age\" />\n                    <YAxis />\n                    <RechartsTooltip formatter={(value: any) => [value, 'Players']} />\n                    <Legend />\n                    <Bar\n                      dataKey=\"count\"\n                      name=\"Players\"\n                      fill={currentTheme.palette.secondary.main}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Player List Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Player List\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<PersonAddIcon />}\n            size=\"small\"\n          >\n            Add Player\n          </Button>\n        </Box>\n        <Paper sx={{ borderRadius: 2 }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Player</TableCell>\n                      <TableCell>Registration Date</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Country</TableCell>\n                      <TableCell align=\"right\">Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {playerListData\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((player) => (\n                        <TableRow key={player.id}>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <Avatar sx={{ mr: 2, bgcolor: currentTheme.palette.primary.main }}>\n                                {getInitials(player.name)}\n                              </Avatar>\n                              <Typography variant=\"body1\">\n                                {player.name}\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell>{formatDate(player.registeredAt)}</TableCell>\n                          <TableCell>\n                            <Chip\n                              label={player.status}\n                              color={getStatusColor(player.status)}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                          <TableCell>{player.country}</TableCell>\n                          <TableCell align=\"right\">\n                            <Tooltip title=\"View\">\n                              <IconButton size=\"small\">\n                                <VisibilityIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Edit\">\n                              <IconButton size=\"small\">\n                                <EditIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Delete\">\n                              <IconButton size=\"small\">\n                                <DeleteIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={playerListData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </>\n          )}\n        </Paper>\n      </Box>\n    </Box>\n  );\n};\n\nexport default PlayersTab;","import React, { useState, ChangeEvent } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Paper,\n  CircularProgress,\n  useTheme,\n  IconButton,\n  Tooltip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  Rating,\n  Button,\n  Card,\n  CardContent,\n  CardMedia,\n  Theme\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport AddIcon from '@mui/icons-material/Add';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\n\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid,\n  Tooltip as RechartsTooltip, Legend, ResponsiveContainer,\n  PieChart, Pie, Cell, RadarChart, Radar, PolarGrid,\n  PolarAngleAxis, PolarRadiusAxis\n} from 'recharts';\n\n// Types\nimport {\n  GamesTabProps,\n  GameCategoryDataPoint,\n  GamePerformanceDataPoint,\n  GameListItem,\n  FeaturedGame\n} from '../../../types/gamesTab';\n\n/**\n * Games Tab component for the API Dashboard\n * Displays game analytics, performance metrics, and game list\n */\nconst GamesTab: React.FC<GamesTabProps> = ({\n  dashboardData,\n  isLoading = false,\n  theme\n}) => {\n  // Use theme from props or get it from useTheme hook\n  const defaultTheme = useTheme();\n  const currentTheme: Theme = theme || defaultTheme;\n\n  // State for pagination\n  const [page, setPage] = useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = useState<number>(5);\n\n  // Chart colors\n  const COLORS = [\n    currentTheme.palette.primary.main,\n    currentTheme.palette.secondary.main,\n    currentTheme.palette.success.main,\n    currentTheme.palette.error.main,\n    currentTheme.palette.warning.main,\n    currentTheme.palette.info.main\n  ];\n\n  // Handle page change\n  const handleChangePage = (_event: unknown, newPage: number): void => {\n    setPage(newPage);\n  };\n\n  // Handle rows per page change\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>): void => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Format currency for display\n  const formatCurrency = (value: number): string => {\n    return value ? `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}` : '$0.00';\n  };\n\n  // Game category distribution data\n  const gameCategoryData: GameCategoryDataPoint[] = dashboardData?.gameCategoryData || [\n    { name: 'Slots', value: 45 },\n    { name: 'Table Games', value: 25 },\n    { name: 'Poker', value: 15 },\n    { name: 'Live Casino', value: 10 },\n    { name: 'Specialty', value: 5 }\n  ];\n\n  // Game performance data\n  const gamePerformanceData: GamePerformanceDataPoint[] = dashboardData?.gamePerformanceData || [\n    { name: 'Engagement', game1: 80, game2: 90, game3: 70 },\n    { name: 'Retention', game1: 85, game2: 75, game3: 80 },\n    { name: 'Revenue', game1: 90, game2: 80, game3: 85 },\n    { name: 'Popularity', game1: 70, game2: 85, game3: 75 },\n    { name: 'Growth', game1: 75, game2: 70, game3: 90 }\n  ];\n\n  // Game list data\n  const gameListData: GameListItem[] = dashboardData?.topGames || [\n    { id: 1, name: 'Poker Pro', revenue: 3200.56, players: 432, rating: 4.5, category: 'Poker' },\n    { id: 2, name: 'Blackjack Masters', revenue: 2800.32, players: 387, rating: 4.2, category: 'Table Games' },\n    { id: 3, name: 'Slots Royale', revenue: 2300.18, players: 356, rating: 4.7, category: 'Slots' },\n    { id: 4, name: 'Roulette King', revenue: 1900.45, players: 289, rating: 4.0, category: 'Table Games' },\n    { id: 5, name: 'Baccarat Elite', revenue: 1450.67, players: 218, rating: 3.8, category: 'Table Games' }\n  ];\n\n  // Featured games data\n  const featuredGamesData: FeaturedGame[] = dashboardData?.featuredGames || [\n    {\n      id: 1,\n      name: 'Poker Pro',\n      description: 'The ultimate poker experience with multiple game modes and tournaments.',\n      image: 'https://via.placeholder.com/300x150',\n      category: 'Poker',\n      rating: 4.5,\n      players: 432\n    },\n    {\n      id: 2,\n      name: 'Slots Royale',\n      description: 'Exciting slot machine game with progressive jackpots and bonus rounds.',\n      image: 'https://via.placeholder.com/300x150',\n      category: 'Slots',\n      rating: 4.7,\n      players: 356\n    },\n    {\n      id: 3,\n      name: 'Blackjack Masters',\n      description: 'Classic blackjack with advanced features and realistic gameplay.',\n      image: 'https://via.placeholder.com/300x150',\n      category: 'Table Games',\n      rating: 4.2,\n      players: 387\n    }\n  ];\n\n  return (\n    <Box>\n      {/* Featured Games Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Featured Games\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            size=\"small\"\n          >\n            Add Game\n          </Button>\n        </Box>\n        <Grid container spacing={3}>\n          {featuredGamesData.map((game) => (\n            <Grid item xs={12} md={4} key={game.id}>\n              <Card sx={{ height: '100%' }}>\n                <CardMedia\n                  component=\"img\"\n                  height=\"140\"\n                  image={game.image}\n                  alt={game.name}\n                />\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    {game.name}\n                  </Typography>\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <Chip\n                      label={game.category}\n                      size=\"small\"\n                      color=\"primary\"\n                      sx={{ mr: 1 }}\n                    />\n                    <Rating\n                      value={game.rating}\n                      precision={0.5}\n                      size=\"small\"\n                      readOnly\n                    />\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                    {game.description}\n                  </Typography>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <Typography variant=\"body2\">\n                      <strong>{game.players}</strong> active players\n                    </Typography>\n                    <Button size=\"small\" variant=\"outlined\">\n                      Details\n                    </Button>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      {/* Game Analytics Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Game Analytics\n          </Typography>\n          <Box>\n            <Tooltip title=\"Download report\">\n              <IconButton size=\"small\" sx={{ mr: 1 }}>\n                <DownloadIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Settings\">\n              <IconButton size=\"small\">\n                <SettingsIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Game Category Distribution\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={gameCategoryData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      label={({ name, percent }: { name: string, percent: number }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {gameCategoryData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip formatter={(value: any) => [`${value}%`, 'Percentage']} />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Game Performance Comparison\n              </Typography>\n              {isLoading ? (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, height: 300 }}>\n                  <CircularProgress />\n                </Box>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <RadarChart outerRadius={90} data={gamePerformanceData}>\n                    <PolarGrid />\n                    <PolarAngleAxis dataKey=\"name\" />\n                    <PolarRadiusAxis angle={30} domain={[0, 100]} />\n                    <Radar\n                      name=\"Poker Pro\"\n                      dataKey=\"game1\"\n                      stroke={currentTheme.palette.primary.main}\n                      fill={currentTheme.palette.primary.main}\n                      fillOpacity={0.6}\n                    />\n                    <Radar\n                      name=\"Slots Royale\"\n                      dataKey=\"game2\"\n                      stroke={currentTheme.palette.secondary.main}\n                      fill={currentTheme.palette.secondary.main}\n                      fillOpacity={0.6}\n                    />\n                    <Radar\n                      name=\"Blackjack Masters\"\n                      dataKey=\"game3\"\n                      stroke={currentTheme.palette.success.main}\n                      fill={currentTheme.palette.success.main}\n                      fillOpacity={0.6}\n                    />\n                    <Legend />\n                    <RechartsTooltip />\n                  </RadarChart>\n                </ResponsiveContainer>\n              )}\n            </Paper>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Game List Section */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">\n            Game Performance\n          </Typography>\n        </Box>\n        <Paper sx={{ borderRadius: 2 }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Game</TableCell>\n                      <TableCell>Category</TableCell>\n                      <TableCell>Rating</TableCell>\n                      <TableCell align=\"right\">Players</TableCell>\n                      <TableCell align=\"right\">Revenue</TableCell>\n                      <TableCell align=\"right\">Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {gameListData\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((game) => (\n                        <TableRow key={game.id}>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <VideogameAssetIcon sx={{ mr: 1, color: currentTheme.palette.primary.main }} />\n                              <Typography variant=\"body1\">\n                                {game.name}\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell>\n                            <Chip\n                              label={game.category}\n                              size=\"small\"\n                              color=\"primary\"\n                              variant=\"outlined\"\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <Rating\n                                value={game.rating}\n                                precision={0.5}\n                                size=\"small\"\n                                readOnly\n                              />\n                              <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                                ({game.rating})\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell align=\"right\">{game.players.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(game.revenue)}</TableCell>\n                          <TableCell align=\"right\">\n                            <Tooltip title=\"View\">\n                              <IconButton size=\"small\">\n                                <VisibilityIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Edit\">\n                              <IconButton size=\"small\">\n                                <EditIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Delete\">\n                              <IconButton size=\"small\">\n                                <DeleteIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={gameListData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </>\n          )}\n        </Paper>\n      </Box>\n    </Box>\n  );\n};\n\nexport default GamesTab;","import React, { memo, useCallback, useMemo } from 'react';\nimport { Box, Tabs, Tab, Theme } from '@mui/material';\nimport TabPanel from '../common/TabPanel';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport EmptyState from '../common/EmptyState';\nimport { CommonProps } from '../../types/common';\nimport { DashboardStats } from '../../types/dashboard';\n\n// Tab components\nimport OverviewTab from './tabs/OverviewTab';\nimport EnhancedOverviewTab from './tabs/EnhancedOverviewTab';\nimport PerformanceTab from './tabs/PerformanceTab';\nimport PlayersTab from './tabs/PlayersTab';\nimport GamesTab from './tabs/GamesTab';\n\ninterface DashboardTabsProps extends CommonProps {\n  activeTab: number;\n  onTabChange: (event: React.SyntheticEvent, newValue: number) => void;\n  dashboardData: any; // This should be typed more specifically based on your data structure\n  isLoading: boolean;\n  error: Error | null;\n  theme: Theme;\n}\n\n// Tab interface\ninterface TabItem {\n  id: number;\n  label: string;\n  component: React.ReactNode;\n}\n\n/**\n * Dashboard Tabs Component\n * Manages tab navigation and content rendering\n * Optimized with memoization to prevent unnecessary re-renders\n */\nconst DashboardTabs: React.FC<DashboardTabsProps> = ({\n  activeTab,\n  onTabChange,\n  dashboardData,\n  isLoading,\n  error,\n  theme,\n  sx\n}) => {\n  // Memoized tab change handler\n  const handleTabChange = useCallback((event: React.SyntheticEvent, newValue: number) => {\n    if (onTabChange) {\n      onTabChange(event, newValue);\n    }\n  }, [onTabChange]);\n\n  // Memoized tab components to prevent unnecessary re-renders\n  const tabComponents = useMemo((): TabItem[] => [\n    {\n      id: 0,\n      label: \"Dashboard Overview\",\n      component: (\n        <EnhancedOverviewTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n          error={error}\n        />\n      )\n    },\n    {\n      id: 1,\n      label: \"Performance Metrics\",\n      component: (\n        <PerformanceTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n          error={error}\n        />\n      )\n    },\n    {\n      id: 2,\n      label: \"Player Analytics\",\n      component: (\n        <PlayersTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n        />\n      )\n    },\n    {\n      id: 3,\n      label: \"Game Analytics\",\n      component: (\n        <GamesTab\n          dashboardData={dashboardData}\n          isLoading={isLoading}\n        />\n      )\n    }\n  ], [dashboardData, isLoading, error, theme]);\n\n  // Memoized error fallback component\n  const errorFallback = useCallback((message: string) => (\n    <EmptyState\n      message={message}\n      icon={<ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main' }} />}\n    />\n  ), []);\n\n  return (\n    <Box sx={sx}>\n      {/* Dashboard Tabs */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Tabs\n          value={activeTab}\n          onChange={handleTabChange}\n          aria-label=\"dashboard tabs\"\n          role=\"tablist\"\n        >\n          {tabComponents.map((tab) => (\n            <Tab\n              key={tab.id}\n              label={tab.label.split(' ')[0]} // Just use the first word for the tab label\n              id={`tab-${tab.id}`}\n              aria-controls={`tabpanel-${tab.id}`}\n              tabIndex={activeTab === tab.id ? 0 : -1}\n            />\n          ))}\n        </Tabs>\n      </Box>\n\n      {/* Tab Content */}\n      {tabComponents.map((tab) => (\n        <TabPanel key={tab.id} value={activeTab} index={tab.id} label={tab.label}>\n          <ErrorBoundary\n            fallback={errorFallback(`Something went wrong loading the ${tab.label.toLowerCase()}`)}\n          >\n            {tab.component}\n          </ErrorBoundary>\n        </TabPanel>\n      ))}\n    </Box>\n  );\n};\n\nexport default memo(DashboardTabs);\n","import React from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  IconButton,\n  Divider\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\ninterface TestPanelProps {\n  /**\n   * Current test scenario\n   */\n  testScenario: string;\n  \n  /**\n   * Handler for test scenario change\n   */\n  onTestScenarioChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  \n  /**\n   * Handler for closing the panel\n   */\n  onClose: () => void;\n}\n\n/**\n * Test panel component for simulating different data scenarios\n */\nconst TestPanel: React.FC<TestPanelProps> = ({\n  testScenario,\n  onTestScenarioChange,\n  onClose\n}) => {\n  return (\n    <Card sx={{ mb: 3, border: '1px dashed #999' }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n          <Typography variant=\"h6\" color=\"primary\">\n            Test Panel\n          </Typography>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Box>\n        \n        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n          This panel allows you to simulate different data scenarios for testing purposes.\n        </Typography>\n        \n        <Divider sx={{ my: 2 }} />\n        \n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Data Scenario</FormLabel>\n          <RadioGroup\n            aria-label=\"test-scenario\"\n            name=\"test-scenario\"\n            value={testScenario}\n            onChange={onTestScenarioChange}\n          >\n            <FormControlLabel \n              value=\"normal\" \n              control={<Radio />} \n              label=\"Normal - Fetch real data from API\" \n            />\n            <FormControlLabel \n              value=\"empty\" \n              control={<Radio />} \n              label=\"Empty - No data available\" \n            />\n            <FormControlLabel \n              value=\"partial\" \n              control={<Radio />} \n              label=\"Partial - Some data missing\" \n            />\n            <FormControlLabel \n              value=\"large\" \n              control={<Radio />} \n              label=\"Large - Large dataset for performance testing\" \n            />\n            <FormControlLabel \n              value=\"error\" \n              control={<Radio />} \n              label=\"Error - Simulate API error\" \n            />\n            <FormControlLabel \n              value=\"loading\" \n              control={<Radio />} \n              label=\"Loading - Perpetual loading state\" \n            />\n          </RadioGroup>\n        </FormControl>\n        \n        <Box sx={{ mt: 2, p: 1, bgcolor: 'info.light', borderRadius: 1 }}>\n          <Typography variant=\"caption\" color=\"info.contrastText\">\n            Note: This panel is for development and testing purposes only and should be removed in production.\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TestPanel;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Box,\n  Container,\n  CircularProgress,\n  Button,\n  Alert,\n  Typography,\n  useTheme\n} from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport { format, subDays, startOfDay, endOfDay } from 'date-fns';\n\nimport { useAuth } from '../hooks/useAuth';\nimport { fetchDashboardData } from '../store/slices/dashboardSlice';\nimport DateRangePicker from '../components/common/DateRangePicker';\nimport FilterPanel from '../components/common/FilterPanel';\nimport dashboardService from '../services/api/dashboardService';\n\n// Test data generators\nimport {\n  generateEmptyData,\n  generatePartialData,\n  generateLargeData,\n  generateErrorData\n} from '../utils/testDataGenerator';\n\n// Dashboard components\nimport DashboardHeader from '../components/dashboard/DashboardHeader';\nimport DashboardTabs from '../components/dashboard/DashboardTabs';\nimport TestPanel from '../components/dashboard/TestPanel';\nimport DashboardMetrics from '../components/dashboard/DashboardMetrics';\nimport DashboardCharts from '../components/dashboard/DashboardCharts';\n\n// Types\nimport { DashboardStats, DashboardChartData, RevenueDataPoint, GameDataPoint } from '../types/dashboard';\nimport { DashboardFilters } from '../types/redux';\n\n// Filter definition type\ninterface FilterDefinition {\n  id: string;\n  label: string;\n  type: 'select' | 'multiselect' | 'text' | 'number' | 'date' | 'daterange' | 'boolean' | 'radio';\n  options?: Array<{ value: string; label: string }>;\n}\n\n// Dashboard data interface\ninterface DashboardData {\n  stats?: DashboardStats;\n  playerRegistrations?: any[];\n  recentTransactions?: any[];\n  topGames?: any[];\n  casinoRevenue?: any;\n  kpis?: any;\n  charts?: DashboardChartData;\n}\n\n/**\n * API Dashboard component that connects to the backend API\n */\nconst ApiDashboard: React.FC = () => {\n  const theme = useTheme();\n  const { user } = useAuth();\n  const dispatch = useDispatch();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [showFilters, setShowFilters] = useState<boolean>(false);\n  const [filterMenuAnchor, setFilterMenuAnchor] = useState<HTMLElement | null>(null);\n\n  // Test data scenario state\n  const [testScenario, setTestScenario] = useState<string>('normal');\n  const [showTestPanel, setShowTestPanel] = useState<boolean>(false);\n\n  // Date range state\n  const [dateRange, setDateRange] = useState<{\n    start: Date;\n    end: Date;\n  }>({\n    start: startOfDay(subDays(new Date(), 30)),\n    end: endOfDay(new Date())\n  });\n\n  // Filter state\n  const [filters, setFilters] = useState<{\n    gameCategory: string;\n    playerStatus: string;\n    country: string;\n    minRevenue: string;\n    maxRevenue: string;\n  }>({\n    gameCategory: '',\n    playerStatus: '',\n    country: '',\n    minRevenue: '',\n    maxRevenue: ''\n  });\n\n  // Filter definitions\n  const filterDefinitions: FilterDefinition[] = [\n    {\n      id: 'gameCategory',\n      label: 'Game Category',\n      type: 'select',\n      options: [\n        { value: 'casino', label: 'Casino' },\n        { value: 'sports', label: 'Sports' },\n        { value: 'poker', label: 'Poker' },\n        { value: 'bingo', label: 'Bingo' },\n        { value: 'lottery', label: 'Lottery' }\n      ]\n    },\n    {\n      id: 'playerStatus',\n      label: 'Player Status',\n      type: 'select',\n      options: [\n        { value: 'active', label: 'Active' },\n        { value: 'inactive', label: 'Inactive' },\n        { value: 'new', label: 'New' },\n        { value: 'vip', label: 'VIP' }\n      ]\n    },\n    {\n      id: 'country',\n      label: 'Country',\n      type: 'select',\n      options: [\n        { value: 'us', label: 'United States' },\n        { value: 'uk', label: 'United Kingdom' },\n        { value: 'ca', label: 'Canada' },\n        { value: 'au', label: 'Australia' },\n        { value: 'de', label: 'Germany' }\n      ]\n    },\n    {\n      id: 'minRevenue',\n      label: 'Min Revenue',\n      type: 'number'\n    },\n    {\n      id: 'maxRevenue',\n      label: 'Max Revenue',\n      type: 'number'\n    }\n  ];\n\n  // Load dashboard data\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Handle tab change\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number): void => {\n    setActiveTab(newValue);\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (newRange: { start: Date | null; end: Date | null }): void => {\n    if (newRange.start && newRange.end) {\n      setDateRange({\n        start: newRange.start,\n        end: newRange.end\n      });\n      fetchData({\n        start: newRange.start,\n        end: newRange.end\n      }, filters);\n    }\n  };\n\n  // Handle filter change\n  const handleFilterChange = (filterId: string, value: string): void => {\n    setFilters(prev => ({\n      ...prev,\n      [filterId]: value\n    }));\n  };\n\n  // Handle filter apply\n  const handleFilterApply = (): void => {\n    fetchData(dateRange, filters);\n    setShowFilters(false);\n  };\n\n  // Handle filter reset\n  const handleFilterReset = (): void => {\n    const resetFilters = {\n      gameCategory: '',\n      playerStatus: '',\n      country: '',\n      minRevenue: '',\n      maxRevenue: ''\n    };\n    setFilters(resetFilters);\n    fetchData(dateRange, resetFilters);\n  };\n\n  // Toggle filter menu\n  const handleFilterMenuClick = (event: React.MouseEvent<HTMLElement>): void => {\n    setFilterMenuAnchor(event.currentTarget);\n  };\n\n  // Close filter menu\n  const handleFilterMenuClose = (): void => {\n    setFilterMenuAnchor(null);\n  };\n\n  // Toggle filter panel\n  const handleToggleFilters = (): void => {\n    setShowFilters(!showFilters);\n    handleFilterMenuClose();\n  };\n\n  // Fetch dashboard data from API or use test data\n  const fetchData = async (\n    dateRangeParam = dateRange,\n    filtersParam = filters\n  ): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n\n    // Handle test scenarios\n    if (testScenario !== 'normal') {\n      setTimeout(() => {\n        switch (testScenario) {\n          case 'empty':\n            setDashboardData(generateEmptyData());\n            setIsLoading(false);\n            break;\n          case 'partial':\n            setDashboardData(generatePartialData());\n            setIsLoading(false);\n            break;\n          case 'large':\n            setDashboardData(generateLargeData());\n            setIsLoading(false);\n            break;\n          case 'error':\n            const errorObj = generateErrorData();\n            setError(new Error(`Error connecting to API: ${errorObj.message}. This is a simulated error for testing.`));\n            setDashboardData(generatePartialData()); // Show partial data with error\n            setIsLoading(false);\n            break;\n          case 'loading':\n            // Keep loading state active for testing\n            break;\n          default:\n            setIsLoading(false);\n        }\n      }, 2000); // Simulate network delay\n\n      // If we're testing loading state, don't proceed with the rest\n      if (testScenario === 'loading') {\n        return;\n      }\n    } else {\n      try {\n        // Prepare date parameters\n        const startDate = dateRangeParam?.start ? format(dateRangeParam.start, 'yyyy-MM-dd') : null;\n        const endDate = dateRangeParam?.end ? format(dateRangeParam.end, 'yyyy-MM-dd') : null;\n\n        // Prepare filter parameters\n        const filterParams: DashboardFilters = {\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined,\n          minRevenue: filtersParam.minRevenue ? Number(filtersParam.minRevenue) : undefined,\n          maxRevenue: filtersParam.maxRevenue ? Number(filtersParam.maxRevenue) : undefined\n        };\n\n        // Get dashboard stats with filters\n        const stats = await dashboardService.getDashboardStats(filterParams);\n\n        // Get player registrations data with date range\n        const playerRegistrations = await dashboardService.getPlayerRegistrations({\n          startDate,\n          endDate,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined\n        });\n\n        // Get recent transactions with filters\n        const recentTransactions = await dashboardService.getRecentTransactions({\n          limit: 10,\n          startDate,\n          endDate,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined\n        });\n\n        // Get top games with filters\n        const topGames = await dashboardService.getTopGames({\n          metric: 'revenue',\n          limit: 5,\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined,\n          minRevenue: filtersParam.minRevenue ? Number(filtersParam.minRevenue) : undefined,\n          maxRevenue: filtersParam.maxRevenue ? Number(filtersParam.maxRevenue) : undefined\n        });\n\n        // Get casino revenue with date range\n        const casinoRevenue = await dashboardService.getCasinoRevenue({\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined\n        });\n\n        // Get KPI data with filters\n        const kpis = await dashboardService.getKpiData({\n          startDate,\n          endDate,\n          gameCategory: filtersParam.gameCategory || undefined,\n          playerStatus: filtersParam.playerStatus || undefined,\n          country: filtersParam.country || undefined\n        });\n\n        // Combine all data\n        const apiData: DashboardData = {\n          stats,\n          playerRegistrations,\n          recentTransactions,\n          topGames,\n          casinoRevenue,\n          kpis,\n          charts: {\n            revenueByDay: casinoRevenue?.dailyRevenue?.map(item => ({\n              ...item,\n              day: item.day || format(new Date(item.date), 'EEE'),\n              value: item.value || item.revenue\n            })) || [],\n            playersByGame: topGames?.map(game => ({\n              game: game.name,\n              value: game.players\n            })) || []\n          }\n        };\n\n        setDashboardData(apiData);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n\n        // If API fails, fall back to mock data for demonstration\n        const mockData: DashboardData = {\n          stats: {\n            revenue: {\n              value: 12567.89,\n              change: 15.2,\n              period: 'vs last week'\n            },\n            players: {\n              value: 1432,\n              change: 7.5,\n              period: 'vs last week'\n            },\n            games: {\n              value: 256,\n              change: 12.8,\n              period: 'vs last week'\n            },\n            engagement: {\n              value: 5621,\n              change: -3.2,\n              period: 'vs last week'\n            }\n          },\n          topGames: [\n            { name: 'Poker Pro', revenue: 3200.56, players: 432 },\n            { name: 'Blackjack Masters', revenue: 2800.32, players: 387 },\n            { name: 'Slots Royale', revenue: 2300.18, players: 356 },\n            { name: 'Roulette King', revenue: 1900.45, players: 289 },\n            { name: 'Baccarat Elite', revenue: 1450.67, players: 218 }\n          ],\n          charts: {\n            revenueByDay: [\n              { day: 'Mon', value: 2100 },\n              { day: 'Tue', value: 2400 },\n              { day: 'Wed', value: 1800 },\n              { day: 'Thu', value: 2200 },\n              { day: 'Fri', value: 2600 },\n              { day: 'Sat', value: 3100 },\n              { day: 'Sun', value: 2500 }\n            ],\n            playersByGame: [\n              { game: 'Poker', value: 450 },\n              { game: 'Slots', value: 380 },\n              { game: 'Roulette', value: 240 },\n              { game: 'Blackjack', value: 190 },\n              { game: 'Baccarat', value: 165 }\n            ]\n          },\n          recentTransactions: [\n            { id: 1, playerId: 101, playerName: 'John Doe', amount: 100.00, type: 'deposit', timestamp: '2023-05-01T08:30:00Z' },\n            { id: 2, playerId: 102, playerName: 'Jane Smith', amount: 50.00, type: 'withdrawal', timestamp: '2023-05-02T10:15:00Z' },\n            { id: 3, playerId: 103, playerName: 'Mike Johnson', amount: 75.50, type: 'bet', timestamp: '2023-05-03T14:45:00Z' },\n            { id: 4, playerId: 104, playerName: 'Lisa Brown', amount: 120.25, type: 'win', timestamp: '2023-05-04T09:20:00Z' },\n            { id: 5, playerId: 105, playerName: 'Robert Wilson', amount: 200.00, type: 'deposit', timestamp: '2023-05-05T16:10:00Z' }\n          ]\n        };\n\n        // Show error message but still display mock data\n        setError(new Error(`Error connecting to API: ${(error as Error).message || 'Unknown error'}. Showing mock data instead.`));\n        setDashboardData(mockData);\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // Handle test scenario change\n  const handleTestScenarioChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const newScenario = event.target.value;\n    setTestScenario(newScenario);\n    fetchData(); // Refetch with new scenario\n  };\n\n  // Toggle test panel\n  const handleToggleTestPanel = (): void => {\n    setShowTestPanel(!showTestPanel);\n  };\n\n  // Handle refresh\n  const handleRefresh = (): void => {\n    fetchData();\n  };\n\n  // Render loading state\n  if (isLoading && !dashboardData) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mt: 8 }}>\n          <CircularProgress size={60} />\n          <Typography variant=\"h6\" sx={{ mt: 2 }}>\n            Loading dashboard...\n          </Typography>\n        </Box>\n      </Container>\n    );\n  }\n\n  // We'll show error as an alert but still display the dashboard with mock data\n  // This is different from the loading state where we show a loading spinner\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      {/* Error Alert */}\n      {error && (\n        <Alert\n          severity=\"warning\"\n          sx={{ mb: 3 }}\n          action={\n            <Button\n              color=\"inherit\"\n              size=\"small\"\n              onClick={handleRefresh}\n              startIcon={<RefreshIcon />}\n            >\n              Retry\n            </Button>\n          }\n        >\n          {error.message}\n        </Alert>\n      )}\n\n      {/* Dashboard Header */}\n      <DashboardHeader\n        user={user || undefined}\n        onRefresh={handleRefresh}\n        onToggleFilters={handleToggleFilters}\n        onFilterReset={handleFilterReset}\n        onToggleTestPanel={handleToggleTestPanel}\n        filterMenuAnchor={filterMenuAnchor}\n        onFilterMenuClick={handleFilterMenuClick}\n        onFilterMenuClose={handleFilterMenuClose}\n        showTestPanel={showTestPanel}\n      />\n\n      {/* Test Panel */}\n      {showTestPanel && (\n        <TestPanel\n          testScenario={testScenario}\n          onTestScenarioChange={handleTestScenarioChange}\n          onClose={handleToggleTestPanel}\n        />\n      )}\n\n      {/* Date Range Picker */}\n      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <DateRangePicker\n          startDate={dateRange.start}\n          endDate={dateRange.end}\n          onChange={handleDateRangeChange}\n          buttonLabel=\"Select Date Range\"\n        />\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Showing data from {dateRange.start ? format(dateRange.start, 'MMM d, yyyy') : 'all time'} to {dateRange.end ? format(dateRange.end, 'MMM d, yyyy') : 'present'}\n        </Typography>\n      </Box>\n\n      {/* Filter Panel */}\n      {showFilters && (\n        <FilterPanel\n          filters={filterDefinitions}\n          values={filters}\n          onChange={handleFilterChange}\n          onApply={() => handleFilterApply()}\n          onReset={handleFilterReset}\n          title=\"Dashboard Filters\"\n        />\n      )}\n\n      {/* Dashboard Tabs */}\n      <DashboardTabs\n        activeTab={activeTab}\n        onTabChange={handleTabChange}\n        dashboardData={dashboardData}\n        isLoading={isLoading}\n        error={error}\n        theme={theme}\n      />\n    </Container>\n  );\n};\n\nexport default ApiDashboard;\n","/**\n * Test data generator utility\n * Provides functions to generate different test data scenarios\n */\n\n/**\n * Generate empty data for testing empty state handling\n * @returns Empty dashboard data\n */\nexport const generateEmptyData = () => {\n  return {\n    stats: {\n      revenue: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      },\n      players: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      },\n      games: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      },\n      engagement: {\n        value: 0,\n        change: 0,\n        period: 'vs last week'\n      }\n    },\n    topGames: [],\n    recentTransactions: [],\n    playerRegistrations: [],\n    charts: {\n      revenueByDay: [],\n      playersByGame: []\n    }\n  };\n};\n\n/**\n * Generate partial data for testing partial data handling\n * @returns Partial dashboard data\n */\nexport const generatePartialData = () => {\n  return {\n    stats: {\n      revenue: {\n        value: 8765.43,\n        change: 5.2,\n        period: 'vs last week'\n      },\n      players: {\n        value: 876,\n        change: -2.1,\n        period: 'vs last week'\n      },\n      games: {\n        value: 45,\n        change: 3.5,\n        period: 'vs last week'\n      },\n      engagement: {\n        value: 67.8,\n        change: 1.2,\n        period: 'vs last week'\n      }\n    },\n    topGames: [\n      { id: 'poker-pro', name: 'Poker Pro', category: 'poker', revenue: 2100.56, players: 321 },\n      { id: 'blackjack-masters', name: 'Blackjack Masters', category: 'table', revenue: 1800.32, players: 287 },\n      // Other games are missing\n    ],\n    // recentTransactions is missing\n    recentTransactions: [],\n    playerRegistrations: [],\n    charts: {\n      revenueByDay: [\n        { day: 'Mon', value: 1100 },\n        { day: 'Tue', value: 1400 },\n        { day: 'Wed', value: 1200 },\n        // Other days are missing\n      ],\n      playersByGame: [\n        { game: 'Poker', value: 321 },\n        { game: 'Blackjack', value: 287 }\n      ]\n    }\n  };\n};\n\n/**\n * Generate large data for testing performance\n * @returns Large dashboard data\n */\nexport const generateLargeData = () => {\n  // Generate large arrays of data\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  const revenueByDay = [];\n  const recentTransactions = [];\n  const topGames = [];\n\n  // Generate 100 days of revenue data\n  for (let i = 0; i < 100; i++) {\n    const day = days[i % 7];\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n\n    revenueByDay.push({\n      day,\n      date: date.toISOString().split('T')[0],\n      value: Math.floor(Math.random() * 5000) + 1000\n    });\n  }\n\n  // Generate 1000 transactions\n  for (let i = 0; i < 1000; i++) {\n    const date = new Date();\n    date.setMinutes(date.getMinutes() - i * 30);\n\n    recentTransactions.push({\n      id: `tx-${i}`,\n      playerId: `player-${Math.floor(Math.random() * 100) + 1}`,\n      playerName: `Player ${Math.floor(Math.random() * 100) + 1}`,\n      amount: Math.floor(Math.random() * 1000) / 10,\n      type: ['deposit', 'withdrawal', 'bet', 'win'][Math.floor(Math.random() * 4)],\n      timestamp: date.toISOString(),\n      status: ['completed', 'pending', 'failed'][Math.floor(Math.random() * 3)]\n    });\n  }\n\n  // Generate 100 games\n  const gameTypes = ['Slots', 'Poker', 'Blackjack', 'Roulette', 'Baccarat', 'Craps', 'Bingo'];\n  for (let i = 0; i < 100; i++) {\n    const gameType = gameTypes[Math.floor(Math.random() * gameTypes.length)];\n    topGames.push({\n      id: `game-${i}`,\n      name: `${gameType} ${i + 1}`,\n      revenue: Math.floor(Math.random() * 10000) + 500,\n      players: Math.floor(Math.random() * 1000) + 50,\n      sessions: Math.floor(Math.random() * 5000) + 100,\n      category: gameType.toLowerCase()\n    });\n  }\n\n  return {\n    stats: {\n      revenue: {\n        value: 123456.78,\n        change: 25.4,\n        period: 'vs last week'\n      },\n      players: {\n        value: 12345,\n        change: 15.7,\n        period: 'vs last week'\n      },\n      games: {\n        value: 245,\n        change: 32.8,\n        period: 'vs last week'\n      },\n      engagement: {\n        value: 78.5,\n        change: 18.2,\n        period: 'vs last week'\n      }\n    },\n    topGames: topGames.slice(0, 20), // Top 20 games\n    recentTransactions: recentTransactions.slice(0, 50), // Latest 50 transactions\n    playerRegistrations: revenueByDay.map(day => ({\n      date: day.date,\n      registrations: Math.floor(Math.random() * 200) + 50,\n      ftd: Math.floor(Math.random() * 50) + 10\n    })),\n    charts: {\n      revenueByDay: revenueByDay.slice(0, 30), // Last 30 days\n      playersByGame: topGames.slice(0, 10).map(game => ({\n        game: game.name,\n        value: game.players\n      }))\n    }\n  };\n};\n\n/**\n * Generate error data for testing error handling\n * @returns Error object\n */\nexport const generateErrorData = () => {\n  const errorTypes = [\n    { code: 'API_ERROR', message: 'Failed to connect to API endpoint' },\n    { code: 'AUTH_ERROR', message: 'Authentication token expired' },\n    { code: 'TIMEOUT_ERROR', message: 'Request timed out after 30 seconds' },\n    { code: 'DATA_ERROR', message: 'Invalid data format received from server' },\n    { code: 'SERVER_ERROR', message: 'Internal server error (500)' }\n  ];\n\n  const randomError = errorTypes[Math.floor(Math.random() * errorTypes.length)];\n\n  return {\n    code: randomError.code,\n    message: randomError.message,\n    timestamp: new Date().toISOString()\n  };\n};\n"],"names":["_ref","user","onRefresh","onToggleFilters","onFilterReset","onToggleTestPanel","filterMenuAnchor","onFilterMenuClick","onFilterMenuClose","showTestPanel","sx","theme","useTheme","_jsx","ErrorBoundary","fallback","Paper","elevation","p","mb","bgcolor","palette","error","light","color","borderRadius","children","_jsxs","Box","display","alignItems","ErrorOutlineIcon","mr","fontSize","Typography","variant","primary","main","Grid","container","spacing","item","xs","md","component","gutterBottom","firstName","textAlign","justifyContent","gap","Button","onClick","startIcon","FilterListIcon","grey","RefreshIcon","BugReportIcon","Menu","anchorEl","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","ListItemIcon","TuneIcon","ListItemText","ClearIcon","formatCurrency","value","currencyCode","arguments","length","undefined","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDate","date","dateObj","Date","DateTimeFormat","day","month","year","formatDateTime","hour","minute","hour12","DashboardMetrics","stats","loading","title","onRetry","EmptyState","message","icon","action","metricsData","revenue","change","players","games","engagement","sm","KPICard","trend","AttachMoneyIcon","description","toLocaleString","PeopleIcon","VideogameAssetIcon","TimelineIcon","memo","CasinoRevenueChart","data","isLoading","height","isMobile","useMediaQuery","breakpoints","down","chartData","useMemo","map","fullDate","parseFloat","toString","formattedValue","CircularProgress","ml","cursor","textDecoration","width","ResponsiveContainer","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","interval","YAxis","tickFormatter","replace","Tooltip","formatter","labelFormatter","label","find","d","Line","type","name","stroke","strokeWidth","dot","r","activeDot","AreaChart","Legend","Area","fill","fillOpacity","VirtualizedTable","columns","rowHeight","emptyMessage","onRowClick","headerHeight","Row","useCallback","_ref2","index","row","TableRow","hover","boxSizing","column","id","cellWidth","TableCell","align","overflow","textOverflow","whiteSpace","TableContainer","Table","TableHead","fontWeight","TableBody","FixedSizeList","itemCount","itemSize","CustomTooltip","active","payload","border","borderColor","boxShadow","TopGamesChart","showLegend","emptyStateMessage","errorFallback","valueKey","nameKey","viewMode","setViewMode","useState","game","category","colors","secondary","info","success","warning","tableColumns","borderBottom","Tabs","onChange","handleViewModeChange","event","newValue","Tab","BarChart","angle","textAnchor","content","Bar","radius","entry","Cell","DashboardCharts","timePeriod","onTimePeriodChange","chartsData","revenueByDay","playersByGame","preparedRevenueData","preparedGamesData","sessions","Card","FormControl","size","minWidth","InputLabel","Select","labelId","target","Skeleton","RecentTransactionsTable","maxHeight","showHeader","getStatusColor","status","toLowerCase","getTypeColor","stickyHeader","Array","from","_","transaction","noWrap","maxWidth","playerName","Chip","amount","timestamp","onDownload","onSettings","transactionsData","IconButton","DownloadIcon","SettingsIcon","EnhancedOverviewTab","_dashboardData$stats","_dashboardData$stats2","_dashboardData$topGam","_dashboardData$stats3","_dashboardData$stats4","_dashboardData$charts","_dashboardData$charts2","dashboardData","setTimePeriod","topGames","engagementRate","engagementChange","charts","period","console","log","RecentTransactionsSection","recentTransactions","_dashboardData$charts4","defaultTheme","currentTheme","chartType","setChartType","revenueData","playerDistributionData","_dashboardData$charts3","kpiData","kpis","averageSessionTime","conversionRate","churnRate","revenuePerUser","TrendingUpIcon","TrendingDownIcon","isInverse","page","setPage","rowsPerPage","setRowsPerPage","COLORS","playerAcquisitionData","playerRegistrations","count","playerDemographicsData","playerDemographics","playerAgeData","age","playerListData","recentPlayers","registeredAt","country","dateString","toLocaleDateString","RechartsTooltip","PieChart","Pie","cx","cy","labelLine","outerRadius","percent","toFixed","PersonAddIcon","_Fragment","slice","player","Avatar","split","part","join","toUpperCase","VisibilityIcon","EditIcon","DeleteIcon","TablePagination","rowsPerPageOptions","onPageChange","handleChangePage","_event","newPage","onRowsPerPageChange","parseInt","gameCategoryData","gamePerformanceData","game1","game2","game3","gameListData","rating","featuredGamesData","featuredGames","image","AddIcon","CardMedia","alt","CardContent","Rating","precision","readOnly","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","domain","Radar","DashboardTabs","activeTab","onTabChange","handleTabChange","tabComponents","PerformanceTab","PlayersTab","GamesTab","role","tab","tabIndex","TabPanel","testScenario","onTestScenarioChange","CloseIcon","paragraph","Divider","my","FormLabel","RadioGroup","FormControlLabel","control","Radio","mt","ApiDashboard","useAuth","setActiveTab","useDispatch","setIsLoading","setError","setDashboardData","showFilters","setShowFilters","setFilterMenuAnchor","setTestScenario","setShowTestPanel","dateRange","setDateRange","start","startOfDay","subDays","end","endOfDay","filters","setFilters","gameCategory","playerStatus","minRevenue","maxRevenue","useEffect","fetchData","handleFilterReset","resetFilters","handleFilterMenuClose","async","dateRangeParam","filtersParam","setTimeout","generateLargeData","days","i","setDate","getDate","push","toISOString","Math","floor","random","setMinutes","getMinutes","playerId","gameTypes","gameType","registrations","ftd","errorObj","generateErrorData","errorTypes","code","randomError","Error","_casinoRevenue$dailyR","startDate","endDate","filterParams","Number","dashboardService","getDashboardStats","getPlayerRegistrations","getRecentTransactions","limit","getTopGames","metric","casinoRevenue","getCasinoRevenue","apiData","getKpiData","dailyRevenue","mockData","handleToggleTestPanel","handleRefresh","Container","flexDirection","Alert","severity","DashboardHeader","handleToggleFilters","currentTarget","TestPanel","newScenario","DateRangePicker","newRange","buttonLabel","FilterPanel","options","values","handleFilterChange","filterId","prev","onApply","onReset"],"sourceRoot":""}