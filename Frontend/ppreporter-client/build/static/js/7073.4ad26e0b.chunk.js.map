{"version":3,"file":"static/js/7073.4ad26e0b.chunk.js","mappings":"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","sources":["components/common/MultiSelect.tsx","utils/formatters.js","services/api/gamesService.ts","services/api/contextualService.ts","services/api/dailyActionGamesService.ts","services/api/financialService.ts","services/api/performanceService.ts","services/api/geographicService.ts","services/api/index.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Chip,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n  Typography,\n  Checkbox,\n  ListItemText,\n  TextField,\n  InputAdornment,\n  Divider,\n  Button,\n  FormHelperText,\n  Tooltip,\n  IconButton,\n  CircularProgress\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { CommonProps } from '../../types/common';\n\n// Option interface for select items\nexport interface MultiSelectOption {\n  value: string | number;\n  label: string;\n  disabled?: boolean;\n  group?: string;\n  description?: string;\n}\n\n// Props interface for the MultiSelect component\nexport interface MultiSelectProps extends CommonProps {\n  /**\n   * Array of options to display in the select\n   */\n  options: MultiSelectOption[];\n\n  /**\n   * Currently selected values\n   */\n  value: (string | number)[];\n\n  /**\n   * Callback fired when the value changes\n   */\n  onChange: (value: (string | number)[]) => void;\n\n  /**\n   * Label for the select\n   */\n  label?: string;\n\n  /**\n   * Placeholder text when no options are selected\n   */\n  placeholder?: string;\n\n  /**\n   * Whether the component is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the component is required\n   */\n  required?: boolean;\n\n  /**\n   * Error message to display\n   */\n  error?: string;\n\n  /**\n   * Helper text to display below the select\n   */\n  helperText?: string;\n\n  /**\n   * Maximum height of the dropdown menu in pixels\n   */\n  maxMenuHeight?: number;\n\n  /**\n   * Whether to show a search input in the dropdown\n   */\n  searchable?: boolean;\n\n  /**\n   * Whether to show select all/none options\n   */\n  showSelectAllOption?: boolean;\n\n  /**\n   * Custom render function for the selected values\n   */\n  renderValue?: (selected: (string | number)[]) => React.ReactNode;\n\n  /**\n   * Size of the select component\n   */\n  size?: 'small' | 'medium';\n\n  /**\n   * Width of the component\n   */\n  width?: string | number;\n\n  /**\n   * Custom ID for the component\n   */\n  id?: string;\n\n  /**\n   * Custom name for the component\n   */\n  name?: string;\n\n  /**\n   * Whether the component is in a loading state\n   */\n  loading?: boolean;\n\n  /**\n   * Whether the component should take up the full width of its container\n   */\n  fullWidth?: boolean;\n}\n\n/**\n * MultiSelect component\n *\n * A reusable multi-select dropdown component with search functionality,\n * select all option, and chip display for selected values.\n */\nconst MultiSelect: React.FC<MultiSelectProps> = ({\n  options = [],\n  value = [],\n  onChange,\n  label = '',\n  placeholder = 'Select items',\n  disabled = false,\n  required = false,\n  error = '',\n  helperText = '',\n  maxMenuHeight = 300,\n  searchable = true,\n  showSelectAllOption = true,\n  renderValue,\n  size = 'small',\n  width,\n  id,\n  name,\n  sx,\n  className,\n  style,\n  loading = false,\n  fullWidth = true\n}) => {\n  // State for search term\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  // Filter options based on search term\n  const filteredOptions = options.filter(option =>\n    option.label.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Handle select change\n  const handleChange = (event: SelectChangeEvent<(string | number)[]>) => {\n    const newValue = event.target.value as (string | number)[];\n    onChange(newValue);\n  };\n\n  // Handle search input change\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  };\n\n  // Clear search term\n  const handleClearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Handle select all\n  const handleSelectAll = () => {\n    // Only select from filtered options that aren't disabled\n    const selectableOptions = filteredOptions\n      .filter(option => !option.disabled)\n      .map(option => option.value);\n\n    onChange(selectableOptions);\n  };\n\n  // Handle select none\n  const handleSelectNone = () => {\n    onChange([]);\n  };\n\n  // Handle removing a single item\n  const handleRemoveItem = (valueToRemove: string | number) => (event: React.MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation(); // Prevent the dropdown from opening\n    const newValue = value.filter(val => val.toString() !== valueToRemove.toString());\n    onChange(newValue);\n  };\n\n  // Default render function for selected values\n  const defaultRenderValue = (selected: (string | number)[]) => {\n    if (!selected || selected.length === 0) {\n      return <Typography color=\"text.secondary\">{placeholder}</Typography>;\n    }\n\n    // Always show chips for all selected items\n    return (\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>\n        {selected.map((selectedValue) => {\n          const option = options.find(opt => opt.value.toString() === selectedValue.toString());\n          return (\n            <Chip\n              key={selectedValue}\n              label={option ? option.label : selectedValue}\n              size=\"small\"\n              onDelete={handleRemoveItem(selectedValue)}\n              onClick={(e) => e.stopPropagation()} // Prevent opening dropdown when clicking the chip\n              deleteIcon={\n                <ClearIcon\n                  fontSize=\"small\"\n                  onMouseDown={(e) => e.stopPropagation()} // Extra prevention\n                />\n              }\n              sx={{\n                '& .MuiChip-deleteIcon': {\n                  display: 'none',\n                  opacity: 0.7,\n                  '&:hover': {\n                    opacity: 1,\n                  }\n                },\n                '&:hover .MuiChip-deleteIcon': {\n                  display: 'block',\n                },\n              }}\n            />\n          );\n        })}\n      </div>\n    );\n  };\n\n  // If loading, show a loading message\n  if (loading) {\n    return (\n      <FormControl\n        fullWidth\n        size={size}\n        error={!!error}\n        disabled={true}\n        required={required}\n        sx={{\n          width: width,\n          ...sx\n        }}\n        className={className}\n        style={style}\n      >\n        {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n        <Select\n          labelId={`${id || 'multi-select'}-label`}\n          id={id || 'multi-select'}\n          name={name}\n          multiple\n          value={[]}\n          input={<OutlinedInput label={label} />}\n          renderValue={() => <Typography color=\"text.secondary\">Loading options...</Typography>}\n        >\n          <MenuItem disabled>\n            <div style={{ display: 'flex', alignItems: 'center', padding: 8 }}>\n              <CircularProgress size={20} style={{ marginRight: 8 }} />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Loading options...\n              </Typography>\n            </div>\n          </MenuItem>\n        </Select>\n        {helperText && (\n          <FormHelperText>{helperText}</FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n\n  // If no options are provided, show a message\n  if (!options || options.length === 0) {\n    return (\n      <FormControl\n        fullWidth\n        size={size}\n        error={!!error}\n        disabled={true}\n        required={required}\n        sx={{\n          width: width,\n          ...sx\n        }}\n        className={className}\n        style={style}\n      >\n        {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n        <Select\n          labelId={`${id || 'multi-select'}-label`}\n          id={id || 'multi-select'}\n          name={name}\n          multiple\n          value={[]}\n          input={<OutlinedInput label={label} />}\n          renderValue={() => <Typography color=\"text.secondary\">No options available</Typography>}\n        >\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options available\n            </Typography>\n          </MenuItem>\n        </Select>\n        {helperText && (\n          <FormHelperText>{helperText}</FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n\n  // Reset search when dropdown closes\n  const handleClose = () => {\n    setSearchTerm('');\n  };\n\n  return (\n    <FormControl\n      fullWidth\n      size={size}\n      error={!!error}\n      disabled={disabled}\n      required={required}\n      sx={{\n        width: width || '100%',\n        minWidth: '100%',\n        ...sx\n      }}\n      className={className}\n      style={style}\n    >\n      {label && <InputLabel id={`${id || 'multi-select'}-label`}>{label}</InputLabel>}\n\n      <Select\n        labelId={`${id || 'multi-select'}-label`}\n        id={id || 'multi-select'}\n        name={name}\n        multiple\n        value={value}\n        onChange={handleChange}\n        input={<OutlinedInput label={label} />}\n        renderValue={renderValue || defaultRenderValue}\n        onClose={handleClose}\n        // Add a custom click handler to prevent opening when clicking on chips\n        onClick={(e) => {\n          // Check if the click was on a chip or delete icon\n          if (\n            e.target instanceof HTMLElement &&\n            (e.target.classList.contains('MuiChip-root') ||\n             e.target.classList.contains('MuiChip-label') ||\n             e.target.classList.contains('MuiChip-deleteIcon') ||\n             e.target.closest('.MuiChip-deleteIcon'))\n          ) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }}\n        MenuProps={{\n          PaperProps: {\n            style: {\n              maxHeight: maxMenuHeight,\n            },\n          },\n        }}\n      >\n        {/* Search input and Select All/Clear All in a sticky container */}\n        <div\n          style={{\n            position: 'sticky',\n            top: 0,\n            backgroundColor: '#fff',\n            zIndex: 2,\n            borderBottom: '1px solid rgba(0, 0, 0, 0.12)'\n          }}\n        >\n          {/* Search input */}\n          {searchable && (\n            <div style={{ padding: 8 }}>\n              <TextField\n                size=\"small\"\n                placeholder=\"Search...\"\n                fullWidth\n                value={searchTerm}\n                onChange={handleSearchChange}\n                onClick={(e) => e.stopPropagation()}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SearchIcon fontSize=\"small\" />\n                    </InputAdornment>\n                  ),\n                  endAdornment: searchTerm ? (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        size=\"small\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleClearSearch();\n                        }}\n                      >\n                        <ClearIcon fontSize=\"small\" />\n                      </IconButton>\n                    </InputAdornment>\n                  ) : null,\n                }}\n              />\n            </div>\n          )}\n\n          {/* Select all/none options */}\n          {showSelectAllOption && filteredOptions.length > 0 && (\n            <div style={{ paddingLeft: 8, paddingRight: 8, paddingTop: 4, paddingBottom: 4, display: 'flex', justifyContent: 'space-between' }}>\n              <Button size=\"small\" onClick={handleSelectAll}>Select All</Button>\n              <Button size=\"small\" onClick={handleSelectNone}>Clear All</Button>\n            </div>\n          )}\n        </div>\n\n        {/* No options message */}\n        {filteredOptions.length === 0 && (\n          <MenuItem disabled>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No options found\n            </Typography>\n          </MenuItem>\n        )}\n\n        {/* Options */}\n        {filteredOptions.map((option) => (\n          <MenuItem\n            key={option.value}\n            value={option.value}\n            disabled={option.disabled}\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            }}\n          >\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <Checkbox\n                checked={value.some(val =>\n                  val.toString() === option.value.toString()\n                )}\n              />\n              <ListItemText\n                primary={option.label}\n                secondary={option.group}\n              />\n            </div>\n            {option.description && (\n              <Tooltip title={option.description} arrow>\n                <InfoOutlinedIcon fontSize=\"small\" color=\"action\" style={{ marginLeft: 8 }} />\n              </Tooltip>\n            )}\n          </MenuItem>\n        ))}\n      </Select>\n\n      {/* Helper text or error message */}\n      {(helperText || error) && (\n        <FormHelperText>{error || helperText}</FormHelperText>\n      )}\n    </FormControl>\n  );\n};\n\nexport default MultiSelect;\n","/**\r\n * Utility functions for formatting values in the UI\r\n */\r\n\r\n/**\r\n * Format a number as currency\r\n * @param {number} value - The value to format\r\n * @param {string} currencyCode - Optional currency code (defaults to GBP)\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (value, currencyCode = 'GBP') => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return new Intl.NumberFormat('en-GB', {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a number with thousands separators\r\n * @param {number} value - The value to format\r\n * @param {number} decimals - Number of decimal places (default: 0)\r\n * @returns {string} Formatted number string\r\n */\r\nexport const formatNumber = (value, decimals = 0) => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return new Intl.NumberFormat('en-GB', {\r\n    minimumFractionDigits: decimals,\r\n    maximumFractionDigits: decimals\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a date in a localized format\r\n * @param {string|Date} date - The date to format\r\n * @returns {string} Formatted date string\r\n */\r\nexport const formatDate = (date) => {\r\n  if (!date) return '—';\r\n  \r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  return new Intl.DateTimeFormat('en-GB', {\r\n    day: '2-digit',\r\n    month: 'short',\r\n    year: 'numeric'\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Format a date with time\r\n * @param {string|Date} date - The date to format\r\n * @returns {string} Formatted date and time string\r\n */\r\nexport const formatDateTime = (date) => {\r\n  if (!date) return '—';\r\n  \r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  return new Intl.DateTimeFormat('en-GB', {\r\n    day: '2-digit',\r\n    month: 'short',\r\n    year: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    hour12: false\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Format a percentage value\r\n * @param {number} value - The percentage value to format\r\n * @returns {string} Formatted percentage string\r\n */\r\nexport const formatPercentage = (value) => {\r\n  if (value === null || value === undefined) return '—';\r\n  \r\n  return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;\r\n};","import apiClient from './apiClient';\nimport {\n  Game,\n  GamePerformance,\n  GameCategory,\n  GameProvider,\n  PlayerDemographics,\n  GameSession,\n  GamesQueryParams,\n  TopGamesQueryParams,\n  GamePerformanceQueryParams\n} from '../../types/games';\nimport { ApiResponse } from '../../types/api';\n\n/**\n * Get all games with pagination and filtering\n * @param params - Query parameters\n * @returns Promise object with games data\n */\nconst getGames = async (params: GamesQueryParams = {}): Promise<ApiResponse<Game[]>> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games');\n    const response = await apiClient.get<ApiResponse<Game[]>>('/api/games', { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game by ID\n * @param id - Game ID\n * @returns Promise object with game data\n */\nconst getGameById = async (id: string): Promise<Game> => {\n  try {\n    console.log(`[GAMES_SERVICE] Using API endpoint: /api/games/${id}`);\n    const response = await apiClient.get<Game>(`/api/games/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game performance metrics\n * @param id - Game ID\n * @param params - Query parameters\n * @returns Promise object with game performance data\n */\nconst getGamePerformance = async (id: string, params: GamePerformanceQueryParams = {}): Promise<GamePerformance> => {\n  try {\n    console.log(`[GAMES_SERVICE] Using API endpoint: /api/games/${id}/performance`);\n    const response = await apiClient.get<GamePerformance>(`/api/games/${id}/performance`, { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get top games by metric\n * @param params - Query parameters\n * @returns Promise object with top games data\n */\nconst getTopGames = async (params: TopGamesQueryParams = {}): Promise<Game[]> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games/top');\n    const response = await apiClient.get<Game[]>('/api/games/top', { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game categories\n * @returns Promise object with game categories\n */\nconst getGameCategories = async (): Promise<GameCategory[]> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games/categories');\n    const response = await apiClient.get<GameCategory[]>('/api/games/categories');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game providers\n * @returns Promise object with game providers\n */\nconst getGameProviders = async (): Promise<GameProvider[]> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games/providers');\n    const response = await apiClient.get<GameProvider[]>('/api/games/providers');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game player demographics\n * @param id - Game ID\n * @returns Promise object with player demographics for the game\n */\nconst getGamePlayerDemographics = async (id: string): Promise<PlayerDemographics> => {\n  try {\n    console.log(`[GAMES_SERVICE] Using API endpoint: /api/games/${id}/player-demographics`);\n    const response = await apiClient.get<PlayerDemographics>(`/api/games/${id}/player-demographics`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get game session data\n * @param id - Game ID\n * @param params - Query parameters\n * @returns Promise object with game session data\n */\nconst getGameSessions = async (id: string, params: GamePerformanceQueryParams = {}): Promise<GameSession[]> => {\n  try {\n    console.log(`[GAMES_SERVICE] Using API endpoint: /api/games/${id}/sessions`);\n    const response = await apiClient.get<GameSession[]>(`/api/games/${id}/sessions`, { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Export games data\n * @param params - Query parameters\n * @returns Promise object with blob data\n */\nconst exportGames = async (params: GamesQueryParams = {}): Promise<Blob> => {\n  try {\n    console.log('[GAMES_SERVICE] Using API endpoint: /api/games/export');\n    const response = await apiClient.get('/api/games/export', {\n      params,\n      responseType: 'blob'\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default {\n  getGames,\n  getGameById,\n  getGamePerformance,\n  getTopGames,\n  getGameCategories,\n  getGameProviders,\n  getGamePlayerDemographics,\n  getGameSessions,\n  exportGames\n};\n","import apiClient from './apiClient';\nimport { Metric, DataPoint, InsightType, Explanation } from '../../types/contextualExplanation';\n\n/**\n * Parameters for contextual explanation request\n */\ninterface ContextualExplanationParams {\n  metric: Metric;\n  data: DataPoint[];\n  insightType?: InsightType;\n}\n\n/**\n * Parameters for detailed analysis request\n */\ninterface DetailedAnalysisParams {\n  metric: Metric;\n  data: DataPoint[];\n  analysisType: string;\n}\n\n/**\n * Parameters for insights with recommendations request\n */\ninterface InsightsRecommendationsParams {\n  metric: Metric;\n  data: DataPoint[];\n}\n\n/**\n * Sensitivity settings for anomaly detection\n */\ninterface SensitivitySettings {\n  threshold?: number;\n  windowSize?: number;\n  method?: string;\n}\n\n/**\n * Parameters for anomaly detection request\n */\ninterface AnomalyDetectionParams {\n  metric: Metric;\n  data: DataPoint[];\n  sensitivity?: SensitivitySettings;\n}\n\n/**\n * Parameters for forecast request\n */\ninterface ForecastParams {\n  metric: Metric;\n  data: DataPoint[];\n  forecastPeriods: number;\n}\n\n/**\n * Forecast data point\n */\ninterface ForecastDataPoint extends DataPoint {\n  confidence?: {\n    lower: number;\n    upper: number;\n  };\n  isForecast: boolean;\n}\n\n/**\n * Forecast response\n */\ninterface ForecastResponse {\n  forecast: ForecastDataPoint[];\n  accuracy: {\n    mape?: number;\n    rmse?: number;\n    mae?: number;\n  };\n  model: string;\n}\n\n/**\n * Get contextual explanation for a metric\n * @param params - Request parameters\n * @returns Promise object with explanation data\n */\nconst getContextualExplanation = async (params: ContextualExplanationParams): Promise<Explanation> => {\n  try {\n    const response = await apiClient.post<Explanation>('/contextual/explain', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get detailed analysis for a metric\n * @param params - Request parameters\n * @returns Promise object with detailed analysis\n */\nconst getDetailedAnalysis = async (params: DetailedAnalysisParams): Promise<any> => {\n  try {\n    const response = await apiClient.post('/contextual/detailed-analysis', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get metric insights with recommendations\n * @param params - Request parameters\n * @returns Promise object with insights and recommendations\n */\nconst getInsightsWithRecommendations = async (params: InsightsRecommendationsParams): Promise<any> => {\n  try {\n    const response = await apiClient.post('/contextual/insights-recommendations', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get anomaly detection for a metric\n * @param params - Request parameters\n * @returns Promise object with detected anomalies\n */\nconst getAnomalyDetection = async (params: AnomalyDetectionParams): Promise<DataPoint[]> => {\n  try {\n    const response = await apiClient.post<DataPoint[]>('/contextual/anomaly-detection', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get forecast for a metric\n * @param params - Request parameters\n * @returns Promise object with forecast data\n */\nconst getForecast = async (params: ForecastParams): Promise<ForecastResponse> => {\n  try {\n    const response = await apiClient.post<ForecastResponse>('/contextual/forecast', params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default {\n  getContextualExplanation,\n  getDetailedAnalysis,\n  getInsightsWithRecommendations,\n  getAnomalyDetection,\n  getForecast\n};\n","import apiClient from './apiClient';\nimport { DailyActionGamesResponse, DailyActionGame } from '../../types/reports';\n// Import from TypeScript version of constants\nimport { API_ENDPOINTS } from '../../config/constants';\n\n// Fallback endpoint in case the import structure is different\nconst DAILY_ACTION_GAMES_ENDPOINT = '/api/reports/daily-action-games';\n\n/**\n * Query parameters for daily action games\n */\nexport interface DailyActionGamesQueryParams {\n  /**\n   * Start date (YYYY-MM-DD)\n   */\n  startDate?: string;\n\n  /**\n   * End date (YYYY-MM-DD)\n   */\n  endDate?: string;\n\n  /**\n   * Player ID\n   */\n  playerId?: number;\n\n  /**\n   * Game ID\n   */\n  gameId?: number;\n\n  /**\n   * API version\n   */\n  'api-version'?: string;\n}\n\n/**\n * Service for Daily Action Games API integration\n */\nclass DailyActionGamesService {\n  /**\n   * Get daily action games data\n   * @param params Query parameters\n   * @returns Promise with daily action games data\n   */\n  async getData(params: DailyActionGamesQueryParams = {}): Promise<DailyActionGamesResponse> {\n    try {\n      console.log('[DAILY_ACTION_GAMES_SERVICE] Fetching data with params:', params);\n\n      // Try to get the endpoint from the TypeScript structure, fall back to direct path if not available\n      let endpoint;\n      try {\n        // Check if the nested structure exists\n        if (API_ENDPOINTS.REPORTS && API_ENDPOINTS.REPORTS.DAILY_ACTION_GAMES) {\n          endpoint = API_ENDPOINTS.REPORTS.DAILY_ACTION_GAMES + '/data';\n          console.log('[DAILY_ACTION_GAMES_SERVICE] Using TypeScript structure endpoint');\n        } else if ((API_ENDPOINTS as any).DAILY_ACTION_GAMES) {\n          // Try the JavaScript structure\n          endpoint = (API_ENDPOINTS as any).DAILY_ACTION_GAMES.GET_DATA;\n          console.log('[DAILY_ACTION_GAMES_SERVICE] Using JavaScript structure endpoint');\n        } else {\n          // Fall back to hardcoded endpoint\n          endpoint = DAILY_ACTION_GAMES_ENDPOINT + '/data';\n          console.log('[DAILY_ACTION_GAMES_SERVICE] Using fallback endpoint');\n        }\n      } catch (error) {\n        // If any error occurs during endpoint resolution, use the fallback\n        console.error('[DAILY_ACTION_GAMES_SERVICE] Error resolving endpoint:', error);\n        endpoint = DAILY_ACTION_GAMES_ENDPOINT + '/data';\n        console.log('[DAILY_ACTION_GAMES_SERVICE] Using fallback endpoint after error');\n      }\n\n      console.log('[DAILY_ACTION_GAMES_SERVICE] Using API endpoint:', endpoint);\n      const response = await apiClient.get<any>(\n        endpoint,\n        { params }\n      );\n      console.log('[DAILY_ACTION_GAMES_SERVICE] Raw response data:', response.data);\n\n      // Based on the screenshot, the response appears to be an array of objects with properties like\n      // id, gameDate, playerId, gameId, platform, etc.\n\n      // Check if the response has the expected structure\n      if (response.data && Array.isArray(response.data)) {\n        // If the response is an array, wrap it in the expected structure\n        console.log('[DAILY_ACTION_GAMES_SERVICE] Converting array response to expected format');\n\n        // Map the response data to our expected format\n        const mappedData = response.data.map((item: any, index: number) => {\n          // Create a game object with default values\n          const game: DailyActionGame = {\n            id: item.id || index + 1,\n            gameDate: item.gameDate || new Date().toISOString(),\n            playerId: typeof item.playerId === 'number' ? item.playerId : 0,\n            gameId: typeof item.gameId === 'number' ? item.gameId : 0,\n            platform: item.platform || 'Unknown',\n            realBetAmount: typeof item.realBetAmount === 'number' ? item.realBetAmount : 0,\n            realWinAmount: typeof item.realWinAmount === 'number' ? item.realWinAmount : 0,\n            bonusBetAmount: typeof item.bonusBetAmount === 'number' ? item.bonusBetAmount : 0,\n            bonusWinAmount: typeof item.bonusWinAmount === 'number' ? item.bonusWinAmount : 0,\n            netGamingRevenue: typeof item.netGamingRevenue === 'number' ? item.netGamingRevenue : 0,\n            numberOfRealBets: typeof item.numberOfRealBets === 'number' ? item.numberOfRealBets : 0,\n            numberOfBonusBets: typeof item.numberOfBonusBets === 'number' ? item.numberOfBonusBets : 0,\n            numberOfSessions: typeof item.numberOfSessions === 'number' ? item.numberOfSessions : 0,\n            numberOfRealWins: typeof item.numberOfRealWins === 'number' ? item.numberOfRealWins : 0,\n            numberOfBonusWins: typeof item.numberOfBonusWins === 'number' ? item.numberOfBonusWins : 0,\n            realBetAmountOriginal: typeof item.realBetAmountOriginal === 'number' ? item.realBetAmountOriginal : 0,\n            realWinAmountOriginal: typeof item.realWinAmountOriginal === 'number' ? item.realWinAmountOriginal : 0,\n            bonusBetAmountOriginal: typeof item.bonusBetAmountOriginal === 'number' ? item.bonusBetAmountOriginal : 0,\n            bonusWinAmountOriginal: typeof item.bonusWinAmountOriginal === 'number' ? item.bonusWinAmountOriginal : 0,\n            netGamingRevenueOriginal: typeof item.netGamingRevenueOriginal === 'number' ? item.netGamingRevenueOriginal : 0,\n            updateDate: item.updateDate || new Date().toISOString()\n          };\n\n          console.log(`[DAILY_ACTION_GAMES_SERVICE] Mapped game ${index}:`, game);\n          return game;\n        });\n\n        const formattedResponse: DailyActionGamesResponse = {\n          data: mappedData,\n          totalCount: mappedData.length,\n          startDate: params.startDate || new Date().toISOString().split('T')[0],\n          endDate: params.endDate || new Date().toISOString().split('T')[0]\n        };\n\n        console.log('[DAILY_ACTION_GAMES_SERVICE] Formatted response:', formattedResponse);\n        return formattedResponse;\n      } else if (response.data && response.data.data && Array.isArray(response.data.data)) {\n        // If the response already has the expected structure\n        console.log('[DAILY_ACTION_GAMES_SERVICE] Response already in expected format');\n        return response.data as DailyActionGamesResponse;\n      } else if (response.data && typeof response.data === 'object') {\n        // If the response is an object but not in the expected format,\n        // try to extract data from it\n        console.log('[DAILY_ACTION_GAMES_SERVICE] Response is an object, trying to extract data');\n\n        // Create an array from the object values if possible\n        const extractedData = Object.values(response.data).filter(item => item && typeof item === 'object');\n\n        if (extractedData.length > 0) {\n          console.log('[DAILY_ACTION_GAMES_SERVICE] Extracted data from object:', extractedData);\n\n          // Map the extracted data to our expected format\n          const mappedData = extractedData.map((item: any, index: number) => {\n            // Create a game object with default values\n            const game: DailyActionGame = {\n              id: item.id || index + 1,\n              gameDate: item.gameDate || new Date().toISOString(),\n              playerId: typeof item.playerId === 'number' ? item.playerId : 0,\n              gameId: typeof item.gameId === 'number' ? item.gameId : 0,\n              platform: item.platform || 'Unknown',\n              realBetAmount: typeof item.realBetAmount === 'number' ? item.realBetAmount : 0,\n              realWinAmount: typeof item.realWinAmount === 'number' ? item.realWinAmount : 0,\n              bonusBetAmount: typeof item.bonusBetAmount === 'number' ? item.bonusBetAmount : 0,\n              bonusWinAmount: typeof item.bonusWinAmount === 'number' ? item.bonusWinAmount : 0,\n              netGamingRevenue: typeof item.netGamingRevenue === 'number' ? item.netGamingRevenue : 0,\n              numberOfRealBets: typeof item.numberOfRealBets === 'number' ? item.numberOfRealBets : 0,\n              numberOfBonusBets: typeof item.numberOfBonusBets === 'number' ? item.numberOfBonusBets : 0,\n              numberOfSessions: typeof item.numberOfSessions === 'number' ? item.numberOfSessions : 0,\n              numberOfRealWins: typeof item.numberOfRealWins === 'number' ? item.numberOfRealWins : 0,\n              numberOfBonusWins: typeof item.numberOfBonusWins === 'number' ? item.numberOfBonusWins : 0,\n              realBetAmountOriginal: typeof item.realBetAmountOriginal === 'number' ? item.realBetAmountOriginal : 0,\n              realWinAmountOriginal: typeof item.realWinAmountOriginal === 'number' ? item.realWinAmountOriginal : 0,\n              bonusBetAmountOriginal: typeof item.bonusBetAmountOriginal === 'number' ? item.bonusBetAmountOriginal : 0,\n              bonusWinAmountOriginal: typeof item.bonusWinAmountOriginal === 'number' ? item.bonusWinAmountOriginal : 0,\n              netGamingRevenueOriginal: typeof item.netGamingRevenueOriginal === 'number' ? item.netGamingRevenueOriginal : 0,\n              updateDate: item.updateDate || new Date().toISOString()\n            };\n\n            return game;\n          });\n\n          const formattedResponse: DailyActionGamesResponse = {\n            data: mappedData,\n            totalCount: mappedData.length,\n            startDate: params.startDate || new Date().toISOString().split('T')[0],\n            endDate: params.endDate || new Date().toISOString().split('T')[0]\n          };\n\n          console.log('[DAILY_ACTION_GAMES_SERVICE] Formatted response from extracted data:', formattedResponse);\n          return formattedResponse;\n        }\n      }\n\n      // If we couldn't extract data in any way, return an empty response\n      console.warn('[DAILY_ACTION_GAMES_SERVICE] Unexpected response format, returning empty data');\n      return {\n        data: [],\n        totalCount: 0,\n        startDate: params.startDate || new Date().toISOString().split('T')[0],\n        endDate: params.endDate || new Date().toISOString().split('T')[0]\n      };\n    } catch (error) {\n      console.error('[DAILY_ACTION_GAMES_SERVICE] Error fetching data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Export daily action games data\n   * @param params Query parameters\n   * @param format Export format (csv, excel, pdf)\n   * @returns Promise with blob data\n   */\n  async exportData(\n    params: DailyActionGamesQueryParams = {},\n    format: 'csv' | 'excel' | 'pdf' = 'csv'\n  ): Promise<Blob> {\n    try {\n      console.log('[DAILY_ACTION_GAMES_SERVICE] Exporting data with params:', { ...params, format });\n\n      const exportParams = {\n        ...params,\n        format\n      };\n\n      // Try to get the endpoint from the TypeScript structure, fall back to direct path if not available\n      let endpoint;\n      try {\n        // Check if the nested structure exists\n        if (API_ENDPOINTS.REPORTS && API_ENDPOINTS.REPORTS.DAILY_ACTION_GAMES) {\n          endpoint = API_ENDPOINTS.REPORTS.DAILY_ACTION_GAMES + '/export';\n          console.log('[DAILY_ACTION_GAMES_SERVICE] Using TypeScript structure endpoint for export');\n        } else if ((API_ENDPOINTS as any).DAILY_ACTION_GAMES) {\n          // Try the JavaScript structure\n          endpoint = (API_ENDPOINTS as any).DAILY_ACTION_GAMES.EXPORT;\n          console.log('[DAILY_ACTION_GAMES_SERVICE] Using JavaScript structure endpoint for export');\n        } else {\n          // Fall back to hardcoded endpoint\n          endpoint = DAILY_ACTION_GAMES_ENDPOINT + '/export';\n          console.log('[DAILY_ACTION_GAMES_SERVICE] Using fallback endpoint for export');\n        }\n      } catch (error) {\n        // If any error occurs during endpoint resolution, use the fallback\n        console.error('[DAILY_ACTION_GAMES_SERVICE] Error resolving export endpoint:', error);\n        endpoint = DAILY_ACTION_GAMES_ENDPOINT + '/export';\n        console.log('[DAILY_ACTION_GAMES_SERVICE] Using fallback endpoint for export after error');\n      }\n\n      console.log('[DAILY_ACTION_GAMES_SERVICE] Using API endpoint for export:', endpoint);\n      const response = await apiClient.get(endpoint, {\n        params: exportParams,\n        responseType: 'blob'\n      });\n\n      console.log('[DAILY_ACTION_GAMES_SERVICE] Export response received');\n      return response.data;\n    } catch (error) {\n      console.error('[DAILY_ACTION_GAMES_SERVICE] Error exporting data:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new DailyActionGamesService();\n","import apiClient from './apiClient';\nimport { API_ENDPOINTS } from '../../config/constants';\nimport { FinancialData, FinancialSummary, FinancialFilters, FinancialMetadata } from '../../types/financial';\nimport { ApiResponse } from '../../types/api';\nimport { AxiosRequestConfig } from 'axios';\n\n// Define the FINANCIAL endpoints structure with fallback handling\nlet FINANCIAL_ENDPOINTS: any;\n\n// Check which structure we have\n// Use type assertion to avoid TypeScript errors\nif ((API_ENDPOINTS as any).FINANCIAL) {\n  // Using the JavaScript structure\n  FINANCIAL_ENDPOINTS = (API_ENDPOINTS as any).FINANCIAL;\n} else if (API_ENDPOINTS.REPORTS && API_ENDPOINTS.REPORTS.REVENUE) {\n  // Using the TypeScript structure\n  FINANCIAL_ENDPOINTS = {\n    GET_DATA: `${API_ENDPOINTS.REPORTS.REVENUE}/data`,\n    GET_METADATA: `${API_ENDPOINTS.REPORTS.REVENUE}/metadata`,\n    GET_SUMMARY: `${API_ENDPOINTS.REPORTS.REVENUE}/summary`,\n    EXPORT: `${API_ENDPOINTS.REPORTS.REVENUE}/export`,\n    SAVE_CONFIG: `${API_ENDPOINTS.REPORTS.REVENUE}/config/save`,\n    GET_CONFIGS: `${API_ENDPOINTS.REPORTS.REVENUE}/config/list`\n  };\n} else {\n  // Fallback to hardcoded endpoints if neither structure is available\n  FINANCIAL_ENDPOINTS = {\n    GET_DATA: '/api/reports/financial/data',\n    GET_METADATA: '/api/reports/financial/metadata',\n    GET_SUMMARY: '/api/reports/financial/summary',\n    EXPORT: '/api/reports/financial/export',\n    SAVE_CONFIG: '/api/reports/financial/config/save',\n    GET_CONFIGS: '/api/reports/financial/config/list'\n  };\n}\n\n/**\n * Get financial data\n * @param filters - Filter parameters\n * @returns Promise with financial data\n */\nconst getData = async (filters: FinancialFilters): Promise<ApiResponse<FinancialData[]>> => {\n  try {\n    const response = await apiClient.get(FINANCIAL_ENDPOINTS.GET_DATA, { params: filters });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get financial metadata\n * @returns Promise with financial metadata\n */\nconst getMetadata = async (): Promise<FinancialMetadata> => {\n  try {\n    const response = await apiClient.get(FINANCIAL_ENDPOINTS.GET_METADATA);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get financial summary\n * @param filters - Filter parameters\n * @returns Promise with financial summary\n */\nconst getSummary = async (filters: FinancialFilters): Promise<FinancialSummary> => {\n  try {\n    const response = await apiClient.get(FINANCIAL_ENDPOINTS.GET_SUMMARY, { params: filters });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Export financial data\n * @param filters - Filter parameters\n * @param format - Export format (pdf, excel, csv)\n * @returns Promise with blob data\n */\nconst exportData = async (filters: FinancialFilters, format: string): Promise<Blob> => {\n  try {\n    const response = await apiClient.get(FINANCIAL_ENDPOINTS.EXPORT, {\n      params: { ...filters, format },\n      responseType: 'blob'\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Save report configuration\n * @param config - Report configuration\n * @returns Promise with saved configuration\n */\nconst saveConfig = async (config: any): Promise<any> => {\n  try {\n    const response = await apiClient.post(FINANCIAL_ENDPOINTS.SAVE_CONFIG, config);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get saved report configurations\n * @returns Promise with list of configurations\n */\nconst getConfigs = async (): Promise<any[]> => {\n  try {\n    const response = await apiClient.get(FINANCIAL_ENDPOINTS.GET_CONFIGS);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default {\n  getData,\n  getMetadata,\n  getSummary,\n  exportData,\n  saveConfig,\n  getConfigs\n};\n","import apiClient from './apiClient';\nimport { API_ENDPOINTS } from '../../config/constants';\nimport { PerformanceData, PerformanceSummary, PerformanceFilters, PerformanceMetadata } from '../../types/performance';\nimport { ApiResponse } from '../../types/api';\nimport { AxiosRequestConfig } from 'axios';\n\n// Define the PERFORMANCE endpoints structure with fallback handling\nlet PERFORMANCE_ENDPOINTS: any;\n\n// Check which structure we have\n// Use type assertion to avoid TypeScript errors\nif ((API_ENDPOINTS as any).PERFORMANCE) {\n  // Using the JavaScript structure\n  PERFORMANCE_ENDPOINTS = (API_ENDPOINTS as any).PERFORMANCE;\n} else if (API_ENDPOINTS.REPORTS) {\n  // Using the TypeScript structure\n  PERFORMANCE_ENDPOINTS = {\n    GET_DATA: '/api/reports/performance/data',\n    GET_METADATA: '/api/reports/performance/metadata',\n    GET_SUMMARY: '/api/reports/performance/summary',\n    EXPORT: '/api/reports/performance/export',\n    SAVE_CONFIG: '/api/reports/performance/config/save',\n    GET_CONFIGS: '/api/reports/performance/config/list'\n  };\n} else {\n  // Fallback to hardcoded endpoints if neither structure is available\n  PERFORMANCE_ENDPOINTS = {\n    GET_DATA: '/api/reports/performance/data',\n    GET_METADATA: '/api/reports/performance/metadata',\n    GET_SUMMARY: '/api/reports/performance/summary',\n    EXPORT: '/api/reports/performance/export',\n    SAVE_CONFIG: '/api/reports/performance/config/save',\n    GET_CONFIGS: '/api/reports/performance/config/list'\n  };\n}\n\n/**\n * Get performance data\n * @param filters - Filter parameters\n * @returns Promise with performance data\n */\nconst getData = async (filters: PerformanceFilters): Promise<ApiResponse<PerformanceData[]>> => {\n  try {\n    const response = await apiClient.get(PERFORMANCE_ENDPOINTS.GET_DATA, { params: filters });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get performance metadata\n * @returns Promise with performance metadata\n */\nconst getMetadata = async (): Promise<PerformanceMetadata> => {\n  try {\n    const response = await apiClient.get(PERFORMANCE_ENDPOINTS.GET_METADATA);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get performance summary\n * @param filters - Filter parameters\n * @returns Promise with performance summary\n */\nconst getSummary = async (filters: PerformanceFilters): Promise<PerformanceSummary> => {\n  try {\n    const response = await apiClient.get(PERFORMANCE_ENDPOINTS.GET_SUMMARY, { params: filters });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Export performance data\n * @param filters - Filter parameters\n * @param format - Export format (pdf, excel, csv)\n * @returns Promise with blob data\n */\nconst exportData = async (filters: PerformanceFilters, format: string): Promise<Blob> => {\n  try {\n    const response = await apiClient.get(PERFORMANCE_ENDPOINTS.EXPORT, {\n      params: { ...filters, format },\n      responseType: 'blob'\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Save report configuration\n * @param config - Report configuration\n * @returns Promise with saved configuration\n */\nconst saveConfig = async (config: any): Promise<any> => {\n  try {\n    const response = await apiClient.post(PERFORMANCE_ENDPOINTS.SAVE_CONFIG, config);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get saved report configurations\n * @returns Promise with list of configurations\n */\nconst getConfigs = async (): Promise<any[]> => {\n  try {\n    const response = await apiClient.get(PERFORMANCE_ENDPOINTS.GET_CONFIGS);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default {\n  getData,\n  getMetadata,\n  getSummary,\n  exportData,\n  saveConfig,\n  getConfigs\n};\n","import apiClient from './apiClient';\nimport { API_ENDPOINTS } from '../../config/constants';\nimport { GeographicData, GeographicSummary, GeographicFilters, GeographicMetadata } from '../../types/geographic';\nimport { ApiResponse } from '../../types/api';\nimport { AxiosRequestConfig } from 'axios';\n\n// Define the GEOGRAPHIC endpoints structure with fallback handling\nlet GEOGRAPHIC_ENDPOINTS: any;\n\n// Check which structure we have\n// Use type assertion to avoid TypeScript errors\nif ((API_ENDPOINTS as any).GEOGRAPHIC) {\n  // Using the JavaScript structure\n  GEOGRAPHIC_ENDPOINTS = (API_ENDPOINTS as any).GEOGRAPHIC;\n} else if (API_ENDPOINTS.REPORTS) {\n  // Using the TypeScript structure\n  GEOGRAPHIC_ENDPOINTS = {\n    GET_DATA: '/api/reports/geographic/data',\n    GET_METADATA: '/api/reports/geographic/metadata',\n    GET_SUMMARY: '/api/reports/geographic/summary',\n    EXPORT: '/api/reports/geographic/export',\n    SAVE_CONFIG: '/api/reports/geographic/config/save',\n    GET_CONFIGS: '/api/reports/geographic/config/list'\n  };\n} else {\n  // Fallback to hardcoded endpoints if neither structure is available\n  GEOGRAPHIC_ENDPOINTS = {\n    GET_DATA: '/api/reports/geographic/data',\n    GET_METADATA: '/api/reports/geographic/metadata',\n    GET_SUMMARY: '/api/reports/geographic/summary',\n    EXPORT: '/api/reports/geographic/export',\n    SAVE_CONFIG: '/api/reports/geographic/config/save',\n    GET_CONFIGS: '/api/reports/geographic/config/list'\n  };\n}\n\n/**\n * Get geographic data\n * @param filters - Filter parameters\n * @returns Promise with geographic data\n */\nconst getData = async (filters: GeographicFilters): Promise<ApiResponse<GeographicData[]>> => {\n  try {\n    const response = await apiClient.get(GEOGRAPHIC_ENDPOINTS.GET_DATA, { params: filters });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get geographic metadata\n * @returns Promise with geographic metadata\n */\nconst getMetadata = async (): Promise<GeographicMetadata> => {\n  try {\n    const response = await apiClient.get(GEOGRAPHIC_ENDPOINTS.GET_METADATA);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get geographic summary\n * @param filters - Filter parameters\n * @returns Promise with geographic summary\n */\nconst getSummary = async (filters: GeographicFilters): Promise<GeographicSummary> => {\n  try {\n    const response = await apiClient.get(GEOGRAPHIC_ENDPOINTS.GET_SUMMARY, { params: filters });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Export geographic data\n * @param filters - Filter parameters\n * @param format - Export format (pdf, excel, csv)\n * @returns Promise with blob data\n */\nconst exportData = async (filters: GeographicFilters, format: string): Promise<Blob> => {\n  try {\n    const response = await apiClient.get(GEOGRAPHIC_ENDPOINTS.EXPORT, {\n      params: { ...filters, format },\n      responseType: 'blob'\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Save report configuration\n * @param config - Report configuration\n * @returns Promise with saved configuration\n */\nconst saveConfig = async (config: any): Promise<any> => {\n  try {\n    const response = await apiClient.post(GEOGRAPHIC_ENDPOINTS.SAVE_CONFIG, config);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Get saved report configurations\n * @returns Promise with list of configurations\n */\nconst getConfigs = async (): Promise<any[]> => {\n  try {\n    const response = await apiClient.get(GEOGRAPHIC_ENDPOINTS.GET_CONFIGS);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default {\n  getData,\n  getMetadata,\n  getSummary,\n  exportData,\n  saveConfig,\n  getConfigs\n};\n","import apiClient from './apiClient';\nimport dashboardService from './dashboardService';\nimport contextualService from './contextualService';\nimport playersService from './playersService';\nimport gamesService from './gamesService';\nimport dailyActionGamesService from './dailyActionGamesService';\nimport financialService from './financialService';\nimport performanceService from './performanceService';\nimport geographicService from './geographicService';\n\n/**\n * API services index\n * Exports all API services for centralized access\n */\nexport default {\n  client: apiClient,\n  dashboard: dashboardService,\n  contextual: contextualService,\n  players: playersService,\n  games: gamesService,\n  dailyActionGames: dailyActionGamesService,\n  financial: financialService,\n  performance: performanceService,\n  geographic: geographicService\n};\n"],"names":["_ref","options","value","onChange","label","placeholder","disabled","required","error","helperText","maxMenuHeight","searchable","showSelectAllOption","renderValue","size","width","id","name","sx","className","style","loading","fullWidth","searchTerm","setSearchTerm","useState","filteredOptions","filter","option","toLowerCase","includes","_jsxs","FormControl","children","_jsx","InputLabel","Select","labelId","multiple","input","OutlinedInput","Typography","color","MenuItem","display","alignItems","padding","CircularProgress","marginRight","variant","FormHelperText","length","minWidth","event","newValue","target","selected","flexWrap","gap","map","selectedValue","find","opt","toString","Chip","onDelete","valueToRemove","preventDefault","stopPropagation","val","onClick","e","deleteIcon","ClearIcon","fontSize","onMouseDown","opacity","onClose","handleClose","HTMLElement","classList","contains","closest","MenuProps","PaperProps","maxHeight","position","top","backgroundColor","zIndex","borderBottom","TextField","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","paddingLeft","paddingRight","paddingTop","paddingBottom","justifyContent","Button","handleSelectAll","selectableOptions","handleSelectNone","Checkbox","checked","some","ListItemText","primary","secondary","group","description","Tooltip","title","arrow","InfoOutlinedIcon","marginLeft","formatCurrency","currencyCode","arguments","undefined","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","format","formatNumber","decimals","formatDate","date","dateObj","Date","DateTimeFormat","day","month","year","formatDateTime","hour","minute","hour12","formatPercentage","toFixed","getGames","async","params","console","log","apiClient","get","data","getGameById","getGamePerformance","getTopGames","getGameCategories","getGameProviders","getGamePlayerDemographics","getGameSessions","exportGames","responseType","getContextualExplanation","post","getDetailedAnalysis","getInsightsWithRecommendations","getAnomalyDetection","getForecast","DAILY_ACTION_GAMES_ENDPOINT","getData","endpoint","API_ENDPOINTS","REPORTS","DAILY_ACTION_GAMES","GET_DATA","response","Array","isArray","mappedData","item","index","game","gameDate","toISOString","playerId","gameId","platform","realBetAmount","realWinAmount","bonusBetAmount","bonusWinAmount","netGamingRevenue","numberOfRealBets","numberOfBonusBets","numberOfSessions","numberOfRealWins","numberOfBonusWins","realBetAmountOriginal","realWinAmountOriginal","bonusBetAmountOriginal","bonusWinAmountOriginal","netGamingRevenueOriginal","updateDate","formattedResponse","totalCount","startDate","split","endDate","extractedData","Object","values","warn","exportData","exportParams","EXPORT","FINANCIAL_ENDPOINTS","FINANCIAL","REVENUE","GET_METADATA","GET_SUMMARY","SAVE_CONFIG","GET_CONFIGS","filters","getMetadata","getSummary","saveConfig","config","getConfigs","PERFORMANCE_ENDPOINTS","PERFORMANCE","GEOGRAPHIC_ENDPOINTS","GEOGRAPHIC","client","dashboard","dashboardService","contextual","contextualService","players","playersService","games","gamesService","dailyActionGames","dailyActionGamesService","financial","financialService","performance","performanceService","geographic","geographicService"],"sourceRoot":""}