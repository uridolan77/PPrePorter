{"version":3,"file":"static/js/32.8c74501d.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/web/Html.js","components/reports/visualizations/ThreeComponents.tsx"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { Vector3, DoubleSide, OrthographicCamera, PerspectiveCamera, Vector2 } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst v1 = /* @__PURE__ */new Vector3();\nconst v2 = /* @__PURE__ */new Vector3();\nconst v3 = /* @__PURE__ */new Vector3();\nconst v4 = /* @__PURE__ */new Vector2();\nfunction defaultCalculatePosition(el, camera, size) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  objectPos.project(camera);\n  const widthHalf = size.width / 2;\n  const heightHalf = size.height / 2;\n  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];\n}\nfunction isObjectBehindCamera(el, camera) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n  const deltaCamObj = objectPos.sub(cameraPos);\n  const camDir = camera.getWorldDirection(v3);\n  return deltaCamObj.angleTo(camDir) > Math.PI / 2;\n}\nfunction isObjectVisible(el, camera, raycaster, occlude) {\n  const elPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const screenPos = elPos.clone();\n  screenPos.project(camera);\n  v4.set(screenPos.x, screenPos.y);\n  raycaster.setFromCamera(v4, camera);\n  const intersects = raycaster.intersectObjects(occlude, true);\n  if (intersects.length) {\n    const intersectionDistance = intersects[0].distance;\n    const pointDistance = elPos.distanceTo(raycaster.ray.origin);\n    return pointDistance < intersectionDistance;\n  }\n  return true;\n}\nfunction objectScale(el, camera) {\n  if (camera instanceof OrthographicCamera) {\n    return camera.zoom;\n  } else if (camera instanceof PerspectiveCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const vFOV = camera.fov * Math.PI / 180;\n    const dist = objectPos.distanceTo(cameraPos);\n    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;\n    return 1 / scaleFOV;\n  } else {\n    return 1;\n  }\n}\nfunction objectZIndex(el, camera, zIndexRange) {\n  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const dist = objectPos.distanceTo(cameraPos);\n    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);\n    const B = zIndexRange[1] - A * camera.far;\n    return Math.round(A * dist + B);\n  }\n  return undefined;\n}\nconst epsilon = value => Math.abs(value) < 1e-10 ? 0 : value;\nfunction getCSSMatrix(matrix, multipliers, prepend = '') {\n  let matrix3d = 'matrix3d(';\n  for (let i = 0; i !== 16; i++) {\n    matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? ',' : ')');\n  }\n  return prepend + matrix3d;\n}\nconst getCameraCSSMatrix = (multipliers => {\n  return matrix => getCSSMatrix(matrix, multipliers);\n})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);\nconst getObjectCSSMatrix = (scaleMultipliers => {\n  return (matrix, factor) => getCSSMatrix(matrix, scaleMultipliers(factor), 'translate(-50%,-50%)');\n})(f => [1 / f, 1 / f, 1 / f, 1, -1 / f, -1 / f, -1 / f, -1, 1 / f, 1 / f, 1 / f, 1, 1, 1, 1, 1]);\nfunction isRefObject(ref) {\n  return ref && typeof ref === 'object' && 'current' in ref;\n}\nconst Html = /* @__PURE__ */React.forwardRef(({\n  children,\n  eps = 0.001,\n  style,\n  className,\n  prepend,\n  center,\n  fullscreen,\n  portal,\n  distanceFactor,\n  sprite = false,\n  transform = false,\n  occlude,\n  onOcclude,\n  castShadow,\n  receiveShadow,\n  material,\n  geometry,\n  zIndexRange = [16777271, 0],\n  calculatePosition = defaultCalculatePosition,\n  as = 'div',\n  wrapperClass,\n  pointerEvents = 'auto',\n  ...props\n}, ref) => {\n  const {\n    gl,\n    camera,\n    scene,\n    size,\n    raycaster,\n    events,\n    viewport\n  } = useThree();\n  const [el] = React.useState(() => document.createElement(as));\n  const root = React.useRef();\n  const group = React.useRef(null);\n  const oldZoom = React.useRef(0);\n  const oldPosition = React.useRef([0, 0]);\n  const transformOuterRef = React.useRef(null);\n  const transformInnerRef = React.useRef(null);\n  // Append to the connected element, which makes HTML work with views\n  const target = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;\n  const occlusionMeshRef = React.useRef(null);\n  const isMeshSizeSet = React.useRef(false);\n  const isRayCastOcclusion = React.useMemo(() => {\n    return occlude && occlude !== 'blending' || Array.isArray(occlude) && occlude.length && isRefObject(occlude[0]);\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    const el = gl.domElement;\n    if (occlude && occlude === 'blending') {\n      el.style.zIndex = `${Math.floor(zIndexRange[0] / 2)}`;\n      el.style.position = 'absolute';\n      el.style.pointerEvents = 'none';\n    } else {\n      el.style.zIndex = null;\n      el.style.position = null;\n      el.style.pointerEvents = null;\n    }\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    if (group.current) {\n      const currentRoot = root.current = ReactDOM.createRoot(el);\n      scene.updateMatrixWorld();\n      if (transform) {\n        el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;\n      } else {\n        const vec = calculatePosition(group.current, camera, size);\n        el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;\n      }\n      if (target) {\n        if (prepend) target.prepend(el);else target.appendChild(el);\n      }\n      return () => {\n        if (target) target.removeChild(el);\n        currentRoot.unmount();\n      };\n    }\n  }, [target, transform]);\n  React.useLayoutEffect(() => {\n    if (wrapperClass) el.className = wrapperClass;\n  }, [wrapperClass]);\n  const styles = React.useMemo(() => {\n    if (transform) {\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: size.width,\n        height: size.height,\n        transformStyle: 'preserve-3d',\n        pointerEvents: 'none'\n      };\n    } else {\n      return {\n        position: 'absolute',\n        transform: center ? 'translate3d(-50%,-50%,0)' : 'none',\n        ...(fullscreen && {\n          top: -size.height / 2,\n          left: -size.width / 2,\n          width: size.width,\n          height: size.height\n        }),\n        ...style\n      };\n    }\n  }, [style, center, fullscreen, size, transform]);\n  const transformInnerStyles = React.useMemo(() => ({\n    position: 'absolute',\n    pointerEvents\n  }), [pointerEvents]);\n  React.useLayoutEffect(() => {\n    isMeshSizeSet.current = false;\n    if (transform) {\n      var _root$current;\n      (_root$current = root.current) == null || _root$current.render(/*#__PURE__*/React.createElement(\"div\", {\n        ref: transformOuterRef,\n        style: styles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformInnerRef,\n        style: transformInnerStyles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        className: className,\n        style: style,\n        children: children\n      }))));\n    } else {\n      var _root$current2;\n      (_root$current2 = root.current) == null || _root$current2.render(/*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        style: styles,\n        className: className,\n        children: children\n      }));\n    }\n  });\n  const visible = React.useRef(true);\n  useFrame(gl => {\n    if (group.current) {\n      camera.updateMatrixWorld();\n      group.current.updateWorldMatrix(true, false);\n      const vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);\n      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps || Math.abs(oldPosition.current[0] - vec[0]) > eps || Math.abs(oldPosition.current[1] - vec[1]) > eps) {\n        const isBehindCamera = isObjectBehindCamera(group.current, camera);\n        let raytraceTarget = false;\n        if (isRayCastOcclusion) {\n          if (Array.isArray(occlude)) {\n            raytraceTarget = occlude.map(item => item.current);\n          } else if (occlude !== 'blending') {\n            raytraceTarget = [scene];\n          }\n        }\n        const previouslyVisible = visible.current;\n        if (raytraceTarget) {\n          const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);\n          visible.current = isvisible && !isBehindCamera;\n        } else {\n          visible.current = !isBehindCamera;\n        }\n        if (previouslyVisible !== visible.current) {\n          if (onOcclude) onOcclude(!visible.current);else el.style.display = visible.current ? 'block' : 'none';\n        }\n        const halfRange = Math.floor(zIndexRange[0] / 2);\n        const zRange = occlude ? isRayCastOcclusion //\n        ? [zIndexRange[0], halfRange] : [halfRange - 1, 0] : zIndexRange;\n        el.style.zIndex = `${objectZIndex(group.current, camera, zRange)}`;\n        if (transform) {\n          const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];\n          const fov = camera.projectionMatrix.elements[5] * heightHalf;\n          const {\n            isOrthographicCamera,\n            top,\n            left,\n            bottom,\n            right\n          } = camera;\n          const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);\n          const cameraTransform = isOrthographicCamera ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;\n          let matrix = group.current.matrixWorld;\n          if (sprite) {\n            matrix = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(group.current.scale);\n            matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;\n            matrix.elements[15] = 1;\n          }\n          el.style.width = size.width + 'px';\n          el.style.height = size.height + 'px';\n          el.style.perspective = isOrthographicCamera ? '' : `${fov}px`;\n          if (transformOuterRef.current && transformInnerRef.current) {\n            transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;\n            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix, 1 / ((distanceFactor || 10) / 400));\n          }\n        } else {\n          const scale = distanceFactor === undefined ? 1 : objectScale(group.current, camera) * distanceFactor;\n          el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale})`;\n        }\n        oldPosition.current = vec;\n        oldZoom.current = camera.zoom;\n      }\n    }\n    if (!isRayCastOcclusion && occlusionMeshRef.current && !isMeshSizeSet.current) {\n      if (transform) {\n        if (transformOuterRef.current) {\n          const el = transformOuterRef.current.children[0];\n          if (el != null && el.clientWidth && el != null && el.clientHeight) {\n            const {\n              isOrthographicCamera\n            } = camera;\n            if (isOrthographicCamera || geometry) {\n              if (props.scale) {\n                if (!Array.isArray(props.scale)) {\n                  occlusionMeshRef.current.scale.setScalar(1 / props.scale);\n                } else if (props.scale instanceof Vector3) {\n                  occlusionMeshRef.current.scale.copy(props.scale.clone().divideScalar(1));\n                } else {\n                  occlusionMeshRef.current.scale.set(1 / props.scale[0], 1 / props.scale[1], 1 / props.scale[2]);\n                }\n              }\n            } else {\n              const ratio = (distanceFactor || 10) / 400;\n              const w = el.clientWidth * ratio;\n              const h = el.clientHeight * ratio;\n              occlusionMeshRef.current.scale.set(w, h, 1);\n            }\n            isMeshSizeSet.current = true;\n          }\n        }\n      } else {\n        const ele = el.children[0];\n        if (ele != null && ele.clientWidth && ele != null && ele.clientHeight) {\n          const ratio = 1 / viewport.factor;\n          const w = ele.clientWidth * ratio;\n          const h = ele.clientHeight * ratio;\n          occlusionMeshRef.current.scale.set(w, h, 1);\n          isMeshSizeSet.current = true;\n        }\n        occlusionMeshRef.current.lookAt(gl.camera.position);\n      }\n    }\n  });\n  const shaders = React.useMemo(() => ({\n    vertexShader: !transform ? /* glsl */`\n          /*\n            This shader is from the THREE's SpriteMaterial.\n            We need to turn the backing plane into a Sprite\n            (make it always face the camera) if \"transfrom\"\n            is false.\n          */\n          #include <common>\n\n          void main() {\n            vec2 center = vec2(0., 1.);\n            float rotation = 0.0;\n\n            // This is somewhat arbitrary, but it seems to work well\n            // Need to figure out how to derive this dynamically if it even matters\n            float size = 0.03;\n\n            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n            vec2 scale;\n            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n            bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n            if ( isPerspective ) scale *= - mvPosition.z;\n\n            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;\n            vec2 rotatedPosition;\n            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n            mvPosition.xy += rotatedPosition;\n\n            gl_Position = projectionMatrix * mvPosition;\n          }\n      ` : undefined,\n    fragmentShader: /* glsl */`\n        void main() {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n      `\n  }), [transform]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: group\n  }), occlude && !isRayCastOcclusion && /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: castShadow,\n    receiveShadow: receiveShadow,\n    ref: occlusionMeshRef\n  }, geometry || /*#__PURE__*/React.createElement(\"planeGeometry\", null), material || /*#__PURE__*/React.createElement(\"shaderMaterial\", {\n    side: DoubleSide,\n    vertexShader: shaders.vertexShader,\n    fragmentShader: shaders.fragmentShader\n  })));\n});\n\nexport { Html };\n","import React, { useRef, useEffect } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, Text, Html } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { DataPoint3D } from './Interactive3DChart';\n\ninterface SceneProps {\n  normalizedData: any[];\n  autoRotate: boolean;\n  rotationSpeed: number;\n  enableZoom: boolean;\n  enableRotation: boolean;\n  enableGrid: boolean;\n  enableAxes: boolean;\n  enableLabels: boolean;\n  darkMode: boolean;\n  xLabel: string;\n  yLabel: string;\n  zLabel: string;\n  chartType: '3dScatter' | '3dBar' | '3dSurface';\n  getPointColor: (point: DataPoint3D) => string;\n  getPointSize: (point: DataPoint3D) => number;\n  handlePointClick: (point: DataPoint3D) => void;\n  selectedPoint: DataPoint3D | null;\n  hoveredPoint: DataPoint3D | null;\n  setHoveredPoint: (point: DataPoint3D | null) => void;\n}\n\n// Scene component\nconst Scene: React.FC<SceneProps> = ({\n  normalizedData,\n  autoRotate,\n  rotationSpeed,\n  enableZoom,\n  enableRotation,\n  enableGrid,\n  enableAxes,\n  enableLabels,\n  darkMode,\n  xLabel,\n  yLabel,\n  zLabel,\n  chartType,\n  getPointColor,\n  getPointSize,\n  handlePointClick,\n  selectedPoint,\n  hoveredPoint,\n  setHoveredPoint\n}) => {\n  const { camera } = useThree();\n  const controlsRef = useRef<any>();\n  const theme = useThree().gl.domElement.parentElement?.parentElement?.getAttribute('data-theme') === 'dark' \n    ? { palette: { primary: { main: '#90caf9' }, success: { main: '#66bb6a' }, error: { main: '#f44336' } } }\n    : { palette: { primary: { main: '#1976d2' }, success: { main: '#2e7d32' }, error: { main: '#d32f2f' } } };\n\n  // Set initial camera position\n  useEffect(() => {\n    camera.position.set(10, 10, 10);\n    camera.lookAt(0, 0, 0);\n  }, [camera]);\n\n  // Auto-rotate\n  useFrame(() => {\n    if (autoRotate && controlsRef.current) {\n      controlsRef.current.autoRotateSpeed = rotationSpeed;\n      controlsRef.current.update();\n    }\n  });\n\n  return (\n    <>\n      <OrbitControls\n        ref={controlsRef}\n        autoRotate={autoRotate}\n        enableZoom={enableZoom}\n        enableRotate={enableRotation}\n        enablePan={true}\n      />\n\n      {/* Ambient light */}\n      <ambientLight intensity={darkMode ? 0.3 : 0.5} />\n\n      {/* Directional light */}\n      <directionalLight\n        position={[10, 10, 10]}\n        intensity={darkMode ? 0.7 : 1}\n        castShadow\n      />\n\n      {/* Grid */}\n      {enableGrid && (\n        <gridHelper\n          args={[10, 10, darkMode ? 0x444444 : 0xcccccc, darkMode ? 0x222222 : 0xe0e0e0]}\n          position={[0, -5, 0]}\n        />\n      )}\n\n      {/* Axes */}\n      {enableAxes && (\n        <>\n          {/* X axis */}\n          <line>\n            <bufferGeometry attach=\"geometry\">\n              <bufferAttribute\n                attach=\"attributes-position\"\n                args={[new Float32Array([-5, -5, -5, 5, -5, -5]), 3, false]}\n              />\n            </bufferGeometry>\n            <lineBasicMaterial\n              attach=\"material\"\n              color={theme.palette.error.main}\n              linewidth={2}\n            />\n          </line>\n\n          {/* Y axis */}\n          <line>\n            <bufferGeometry attach=\"geometry\">\n              <bufferAttribute\n                attach=\"attributes-position\"\n                args={[new Float32Array([-5, -5, -5, -5, 5, -5]), 3, false]}\n              />\n            </bufferGeometry>\n            <lineBasicMaterial\n              attach=\"material\"\n              color={theme.palette.success.main}\n              linewidth={2}\n            />\n          </line>\n\n          {/* Z axis */}\n          <line>\n            <bufferGeometry attach=\"geometry\">\n              <bufferAttribute\n                attach=\"attributes-position\"\n                args={[new Float32Array([-5, -5, -5, -5, -5, 5]), 3, false]}\n              />\n            </bufferGeometry>\n            <lineBasicMaterial\n              attach=\"material\"\n              color={theme.palette.primary.main}\n              linewidth={2}\n            />\n          </line>\n\n          {/* Axis labels */}\n          <Text\n            position={[6, -5, -5]}\n            color={theme.palette.error.main}\n            fontSize={0.5}\n            anchorX=\"center\"\n            anchorY=\"middle\"\n          >\n            {xLabel}\n          </Text>\n\n          <Text\n            position={[-5, 6, -5]}\n            color={theme.palette.success.main}\n            fontSize={0.5}\n            anchorX=\"center\"\n            anchorY=\"middle\"\n          >\n            {yLabel}\n          </Text>\n\n          <Text\n            position={[-5, -5, 6]}\n            color={theme.palette.primary.main}\n            fontSize={0.5}\n            anchorX=\"center\"\n            anchorY=\"middle\"\n          >\n            {zLabel}\n          </Text>\n        </>\n      )}\n\n      {/* Data points */}\n      {chartType === '3dScatter' && normalizedData.map((point) => (\n        <mesh\n          key={point.id}\n          position={[point.normalizedX, point.normalizedY, point.normalizedZ]}\n          scale={getPointSize(point)}\n          onClick={() => handlePointClick(point)}\n          onPointerOver={() => setHoveredPoint(point)}\n          onPointerOut={() => setHoveredPoint(null)}\n        >\n          <sphereGeometry args={[1, 32, 32]} />\n          <meshStandardMaterial\n            color={getPointColor(point)}\n            roughness={0.5}\n            metalness={0.2}\n            emissive={selectedPoint?.id === point.id ? '#ffffff' : '#000000'}\n            emissiveIntensity={selectedPoint?.id === point.id ? 0.5 : 0}\n          />\n\n          {/* Label */}\n          {enableLabels && (point.label || hoveredPoint?.id === point.id) && (\n            <Html\n              position={[0, 1.2, 0]}\n              center\n              style={{\n                backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                color: 'white',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                fontSize: '12px',\n                pointerEvents: 'none',\n                whiteSpace: 'nowrap'\n              }}\n            >\n              {point.label || `(${point.x}, ${point.y}, ${point.z})`}\n            </Html>\n          )}\n        </mesh>\n      ))}\n\n      {/* 3D Bars */}\n      {chartType === '3dBar' && normalizedData.map((point) => (\n        <mesh\n          key={point.id}\n          position={[\n            point.normalizedX,\n            (point.normalizedY + 5) / 2, // Position at half height\n            point.normalizedZ\n          ]}\n          scale={[\n            getPointSize(point),\n            Math.max(0.1, point.normalizedY + 5), // Height based on Y value\n            getPointSize(point)\n          ]}\n          onClick={() => handlePointClick(point)}\n          onPointerOver={() => setHoveredPoint(point)}\n          onPointerOut={() => setHoveredPoint(null)}\n        >\n          <boxGeometry args={[1, 1, 1]} />\n          <meshStandardMaterial\n            color={getPointColor(point)}\n            roughness={0.5}\n            metalness={0.2}\n            emissive={selectedPoint?.id === point.id ? '#ffffff' : '#000000'}\n            emissiveIntensity={selectedPoint?.id === point.id ? 0.5 : 0}\n          />\n\n          {/* Label */}\n          {enableLabels && (point.label || hoveredPoint?.id === point.id) && (\n            <Html\n              position={[0, (point.normalizedY + 5) / 2 + 0.6, 0]}\n              center\n              style={{\n                backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                color: 'white',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                fontSize: '12px',\n                pointerEvents: 'none',\n                whiteSpace: 'nowrap'\n              }}\n            >\n              {point.label || `(${point.x}, ${point.y}, ${point.z})`}\n            </Html>\n          )}\n        </mesh>\n      ))}\n    </>\n  );\n};\n\ninterface ThreeComponentsProps {\n  normalizedData: any[];\n  autoRotate: boolean;\n  rotationSpeed: number;\n  enableZoom: boolean;\n  enableRotation: boolean;\n  enableGrid: boolean;\n  enableAxes: boolean;\n  enableLabels: boolean;\n  darkMode: boolean;\n  xLabel: string;\n  yLabel: string;\n  zLabel: string;\n  chartType: '3dScatter' | '3dBar' | '3dSurface';\n  getPointColor: (point: DataPoint3D) => string;\n  getPointSize: (point: DataPoint3D) => number;\n  handlePointClick: (point: DataPoint3D) => void;\n  selectedPoint: DataPoint3D | null;\n  hoveredPoint: DataPoint3D | null;\n  setHoveredPoint: (point: DataPoint3D | null) => void;\n}\n\nconst ThreeComponents: React.FC<ThreeComponentsProps> = (props) => {\n  return (\n    <Canvas\n      camera={{ position: [10, 10, 10], fov: 60 }}\n      style={{ background: props.darkMode ? '#111' : '#f5f5f5' }}\n    >\n      <Scene {...props} />\n    </Canvas>\n  );\n};\n\nexport default ThreeComponents;\n"],"names":["v1","Vector3","v2","v3","v4","Vector2","defaultCalculatePosition","el","camera","size","objectPos","setFromMatrixPosition","matrixWorld","project","widthHalf","width","heightHalf","height","x","y","epsilon","value","Math","abs","getCSSMatrix","matrix","multipliers","prepend","arguments","length","undefined","matrix3d","i","elements","getCameraCSSMatrix","getObjectCSSMatrix","factor","f","Html","React","_ref","ref","children","eps","style","className","center","fullscreen","portal","distanceFactor","sprite","transform","occlude","onOcclude","castShadow","receiveShadow","material","geometry","zIndexRange","calculatePosition","as","wrapperClass","pointerEvents","props","gl","scene","raycaster","events","viewport","useThree","document","createElement","root","group","oldZoom","oldPosition","transformOuterRef","transformInnerRef","target","current","connected","domElement","parentNode","occlusionMeshRef","isMeshSizeSet","isRayCastOcclusion","Array","isArray","isRefObject","zIndex","floor","position","currentRoot","ReactDOM","updateMatrixWorld","cssText","vec","appendChild","removeChild","unmount","styles","top","left","transformStyle","transformInnerStyles","_root$current","_root$current2","render","visible","useFrame","updateWorldMatrix","zoom","isBehindCamera","cameraPos","deltaCamObj","sub","camDir","getWorldDirection","angleTo","PI","isObjectBehindCamera","raytraceTarget","map","item","previouslyVisible","isvisible","elPos","screenPos","clone","set","setFromCamera","intersects","intersectObjects","intersectionDistance","distance","distanceTo","ray","origin","isObjectVisible","display","halfRange","zRange","PerspectiveCamera","OrthographicCamera","dist","A","far","near","B","round","objectZIndex","fov","projectionMatrix","isOrthographicCamera","bottom","right","cameraMatrix","matrixWorldInverse","cameraTransform","transpose","copyPosition","scale","perspective","vFOV","tan","objectScale","clientWidth","clientHeight","copy","divideScalar","setScalar","ratio","w","h","ele","lookAt","shaders","vertexShader","fragmentShader","_extends","side","DoubleSide","Scene","_useThree$gl$domEleme","_useThree$gl$domEleme2","normalizedData","autoRotate","rotationSpeed","enableZoom","enableRotation","enableGrid","enableAxes","enableLabels","darkMode","xLabel","yLabel","zLabel","chartType","getPointColor","getPointSize","handlePointClick","selectedPoint","hoveredPoint","setHoveredPoint","controlsRef","useRef","theme","parentElement","getAttribute","palette","primary","main","success","error","useEffect","autoRotateSpeed","update","_jsxs","_Fragment","_jsx","OrbitControls","enableRotate","enablePan","intensity","args","attach","Float32Array","color","linewidth","Text","fontSize","anchorX","anchorY","point","normalizedX","normalizedY","normalizedZ","onClick","onPointerOver","onPointerOut","roughness","metalness","emissive","id","emissiveIntensity","label","backgroundColor","padding","borderRadius","whiteSpace","z","max","Canvas","background"],"sourceRoot":""}