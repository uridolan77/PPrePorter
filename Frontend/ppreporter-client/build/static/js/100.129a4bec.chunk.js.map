{"version":3,"file":"static/js/100.129a4bec.chunk.js","mappings":"4KAqBe,SAASA,EAAQC,EAAWC,IACzCC,EAAAA,EAAAA,GAAa,EAAGC,WAChB,IAAIC,GAASC,EAAAA,EAAAA,GAAUJ,GACvB,OAAOK,EAAAA,EAAAA,GAAQN,GAAYI,EAC7B,C,ycC8GA,MA2mDA,EA3mDmCG,KAAO,IAADC,EAAAC,EAEvC,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAeb,EAAAA,EAAAA,GAAQ,IAAIc,KAAQ,KAC9DC,EAASC,IAAcH,EAAAA,EAAAA,UAAe,IAAIC,OAG1CG,EAAqBC,IAA0BL,EAAAA,EAAAA,UAAmB,KAClEM,EAAaC,IAAkBP,EAAAA,EAAAA,UAAuB,KACtDQ,EAAoBC,IAAyBT,EAAAA,EAAAA,UAA8B,KAG3EU,EAAmBC,IAAwBX,EAAAA,EAAAA,UAAmB,KAC9DY,EAAWC,IAAgBb,EAAAA,EAAAA,UAAoB,KAC/Cc,GAAkBC,KAAuBf,EAAAA,EAAAA,UAA8B,KAEvEgB,GAASC,KAAcjB,EAAAA,EAAAA,UAAiB,QAGxCkB,GAAgBC,KAAqBnB,EAAAA,EAAAA,UAAuC,CACjF,CAAEoB,GAAI,MAAOC,KAAM,OACnB,CAAED,GAAI,QAASC,KAAM,SACrB,CAAED,GAAI,OAAQC,KAAM,QACpB,CAAED,GAAI,QAASC,KAAM,eACrB,CAAED,GAAI,SAAUC,KAAM,UACtB,CAAED,GAAI,UAAWC,KAAM,WACvB,CAAED,GAAI,UAAWC,KAAM,WACvB,CAAED,GAAI,WAAYC,KAAM,YACxB,CAAED,GAAI,SAAUC,KAAM,UACtB,CAAED,GAAI,WAAYC,KAAM,YACxB,CAAED,GAAI,UAAWC,KAAM,cAIlBC,GAAcC,KAAmBvB,EAAAA,EAAAA,UAAwB,KACzDwB,GAASC,KAAczB,EAAAA,EAAAA,WAAkB,IACzC0B,GAAOC,KAAY3B,EAAAA,EAAAA,UAAwB,OAK3C4B,GAAqBC,KAA0B7B,EAAAA,EAAAA,WAAkB,IACjE8B,GAAkBC,KAAuB/B,EAAAA,EAAAA,WAAkB,IAC3DgC,GAAoBC,KAAyBjC,EAAAA,EAAAA,WAAkB,IAC/DkC,GAAgBC,KAAqBnC,EAAAA,EAAAA,UAAmB,CAC7D,aAAc,gBAAiB,MAAO,WAAY,eAClD,YAAa,WAAY,UAAW,cAE/BoC,GAAiBC,KAAsBrC,EAAAA,EAAAA,UAA8B,CAAC,IAGtEsC,GAASC,KAAcvC,EAAAA,EAAAA,UAAkB,CAC9CwC,mBAAoB,EACpBC,SAAU,EACVC,cAAe,EACfC,cAAe,EACfC,SAAU,KAMZC,EAAAA,EAAAA,YAAU,KACcC,WACpB,IACEC,QAAQC,IAAI,0CAKZ,GAFoBC,EAAAA,GAASC,8BAAyF,SAAzDC,aAAaC,QAAQ,gCAEjE,CACfL,QAAQC,IAAI,qDAGZ,MAAMK,QAAuB,+BAIvBC,EAHkBD,EAAeE,QAGFC,YAAY,mCAEjD,GAAIF,EAAc,CAChB,GAAIA,EAAahD,YAAa,CAC5ByC,QAAQC,IAAI,8CAA+CM,EAAahD,aACxEC,EAAe+C,EAAahD,aAG5B,MAAMmD,EAAUH,EAAahD,YAAYoD,KAAKC,IAAc,CAC1DC,MAAOD,EAAGvC,GACVyC,MAAOF,EAAGtC,SAEZZ,EAAsBgD,EACxB,CAGA,GAAIH,EAAa1C,UAAW,CAC1BmC,QAAQC,IAAI,2CAA4CM,EAAa1C,WACrEC,EAAayC,EAAa1C,WAG1B,MAAMkD,EAAiBR,EAAa1C,UAAU8C,KAAKK,IAAgB,CACjEH,MAAOG,EAAQ3C,GACfyC,MAAOE,EAAQ1C,SAEjBN,GAAoB+C,EACtB,MACEf,QAAQC,IAAI,wDAEZnC,EAAa,IACbE,GAAoB,IAGtB,MACF,CACF,CAGA,MAAMiD,QAAaC,EAAAA,EAAoBC,cAIvC,GAHAnB,QAAQC,IAAI,kDAAmDgB,GAG3DA,GAAQA,EAAK1D,YAAa,CAC5ByC,QAAQC,IAAI,sDAAuDgB,EAAK1D,aACxE,MAAM6D,EAAqBH,EAAK1D,aAAe,GAC/CC,EAAe4D,GAGf,MAAMV,EAAUU,EAAmBT,KAAKC,IAAc,CACpDC,MAAOD,EAAGvC,GACVyC,MAAOF,EAAGtC,SAEZZ,EAAsBgD,EACxB,MACEV,QAAQC,IAAI,8DACZzC,EAAe,IACfE,EAAsB,IAIxB,GAAIuD,GAAQA,EAAKpD,UAAW,CAC1BmC,QAAQC,IAAI,mDAAoDgB,EAAKpD,WACrE,MAAMwD,EAAmBJ,EAAKpD,WAAa,GAC3CC,EAAauD,GAGb,MAAMN,EAAiBM,EAAiBV,KAAKK,IAAgB,CAC3DH,MAAOG,EAAQ3C,GACfyC,MAAOE,EAAQ1C,SAEjBN,GAAoB+C,EACtB,MACEf,QAAQC,IAAI,2DACZnC,EAAa,IACbE,GAAoB,GAExB,CAAE,MAAOsD,GACPtB,QAAQrB,MAAM,gDAAiD2C,GAC/D1C,GAAS,mDACX,GAMF2C,EAAe,GACd,KAGHzB,EAAAA,EAAAA,YAAU,KAER,MAMM0B,EAAQC,YAAW,KANA1B,WACvBC,QAAQC,IAAI,oDACNyB,IAAmB,EAKzBC,EAAkB,GACjB,KAEH,MAAO,IAAMC,aAAaJ,EAAM,GAE/B,IAGH,MAAME,GAAoB3B,UACxBrB,IAAW,GACXE,GAAS,MAET,IAEE,MAAMiD,GAAqBC,EAAAA,EAAAA,GAAW/E,EAAW,cAI3CgF,EAAmB,CACvBhF,UAAW8E,EACX1E,SALuB2E,EAAAA,EAAAA,GAAW3E,EAAS,cAQ3Cc,QAAS+D,GAA6B/D,KAIpCZ,GAAuBA,EAAoB4E,OAAS,GACtDjC,QAAQC,IAAI,qDAAsD5C,GAElE0E,EAAQG,cAAgB7E,EAAoBsD,KAAItC,GAAM8D,SAAS9D,MAE/D2B,QAAQC,IAAI,sDAIVtC,GAAqBA,EAAkBsE,OAAS,GAClDjC,QAAQC,IAAI,iDAAkDtC,GAE9DoE,EAAQK,WAAazE,GAErBqC,QAAQC,IAAI,kDAIVoC,OAAOC,KAAKjD,IAAiB4C,OAAS,IACxCjC,QAAQC,IAAI,gDAAiDZ,IAGzDA,GAAgBkD,eAClBR,EAAQS,kBAAmBV,EAAAA,EAAAA,GAAWzC,GAAgBkD,aAAc,eAElElD,GAAgBoD,mBAClBV,EAAQW,kBAAmBZ,EAAAA,EAAAA,GAAWzC,GAAgBoD,iBAAkB,eAEtEpD,GAAgBsD,kBAClBZ,EAAQY,iBAAkBb,EAAAA,EAAAA,GAAWzC,GAAgBsD,gBAAiB,eAEpEtD,GAAgBuD,YAClBb,EAAQc,eAAgBf,EAAAA,EAAAA,GAAWzC,GAAgBuD,UAAW,eAI5DvD,GAAgByD,WAClBf,EAAQe,SAAWzD,GAAgByD,UAEjCzD,GAAgB0D,gBAClBhB,EAAQgB,cAAgB1D,GAAgB0D,eAEtC1D,GAAgB2D,UAClBjB,EAAQkB,UAAY5D,GAAgB2D,QAAQE,MAAM,KAAKvC,KAAKtC,GAAeA,EAAG8E,UAI5E9D,GAAgB+D,aAAe/D,GAAgB+D,YAAYnB,OAAS,IACtEF,EAAQsB,UAAYhE,GAAgB+D,aAElC/D,GAAgBiE,UAAYjE,GAAgBiE,SAASrB,OAAS,IAChEF,EAAQwB,UAAYlE,GAAgBiE,UAElCjE,GAAgBmE,QAAUnE,GAAgBmE,OAAOvB,OAAS,IAC5DF,EAAQ0B,SAAWpE,GAAgBmE,QAEjCnE,GAAgBqE,QAAUrE,GAAgBqE,OAAOzB,OAAS,IAC5DF,EAAQ4B,QAAUtE,GAAgBqE,QAEhCrE,GAAgBuE,UAAYvE,GAAgBuE,SAAS3B,OAAS,IAChEF,EAAQ8B,WAAaxE,GAAgBuE,UAInCvE,GAAgByE,aAClB/B,EAAQ+B,WAA4C,QAA/BzE,GAAgByE,YAEnCzE,GAAgB0E,cAClBhC,EAAQgC,YAA8C,QAAhC1E,GAAgB0E,aAEpC1E,GAAgB2E,eAClBjC,EAAQiC,aAAgD,QAAjC3E,GAAgB2E,cAErC3E,GAAgB4E,cAClBlC,EAAQkC,YAA8C,QAAhC5E,GAAgB4E,aAEpC5E,GAAgB6E,eAClBnC,EAAQmC,aAAgD,QAAjC7E,GAAgB6E,eAI3ClE,QAAQC,IAAI,qCAAqChC,sBAA2B8D,EAAQ9D,YAGpF+B,QAAQC,IAAI,8CAA8ChC,wCAE1D+B,QAAQC,IAAI,yDAA0D8B,GAGtE,IACE/B,QAAQC,IAAI,yDAIZ,GAFoBC,EAAAA,GAASC,8BAAyF,SAAzDC,aAAaC,QAAQ,gCAEjE,CACfL,QAAQC,IAAI,+EAGZ,MACMkE,SADuB,gCACU3D,QAGvCR,QAAQC,IAAI,wEAAyE8B,GACrF,MAAMqC,EAAkBD,EAAgB1D,YAAY,iCAAkCsB,GAEtF,GAAIqC,GAAmBA,EAAgB7F,aAAc,CACnDyB,QAAQC,IAAI,uDAAwDmE,GACpEpE,QAAQC,IAAI,qDAAsDmE,EAAgB7F,cAGlFC,GAAgB4F,EAAgB7F,cAAgB,IAGhD,MAAM8F,EAAuB,CAC3B5E,mBAAoB2E,EAAgB3E,oBAAsB,EAC1DC,SAAU0E,EAAgB1E,UAAY,EACtCC,cAAeyE,EAAgBzE,eAAiB,EAChDC,cAAewE,EAAgBxE,eAAiB,EAChDC,SAAUuE,EAAgBvE,UAAY,GAKxC,OAFAL,GAAW6E,QACX3F,IAAW,EAEb,CAAO,CACLsB,QAAQC,IAAI,iHAGZ,MAAMqE,EAAkBH,EAAgB1D,YAAY,8BAA+BsB,GAEnF,GAAIuC,EAAiB,CAkBnB,GAjBAtE,QAAQC,IAAI,uDAAwDqE,GAGhEA,EAAgB/F,cAAgB+F,EAAgB/F,aAAa0D,OAAS,GACxEjC,QAAQC,IAAI,0DAA2DqE,EAAgB/F,cACvFC,GAAgB8F,EAAgB/F,eACvB+F,EAAgBrD,MAAQqD,EAAgBrD,KAAKgB,OAAS,GAE/DjC,QAAQC,IAAI,wDAAyDqE,EAAgBrD,MACrFzC,GAAgB8F,EAAgBrD,QAGhCjB,QAAQC,IAAI,uDACZzB,GAAgB,KAId8F,EAAgB/E,QAClBC,GAAW8E,EAAgB/E,aACtB,CAEL,MAAM0B,EAAOqD,EAAgB/F,cAAgB+F,EAAgBrD,MAAQ,GAC/DoD,EAAuB,CAC3B5E,mBAAoB6E,EAAgB7E,oBAAsBwB,EAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKC,eAAiB,IAAI,GAC3IhF,SAAU4E,EAAgB5E,UAAYuB,EAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKE,KAAO,IAAI,GAC7GhF,cAAe2E,EAAgB3E,eAAiBsB,EAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKG,UAAY,IAAI,GAC5HhF,cAAe0E,EAAgB1E,eAAiBqB,EAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKI,cAAgB,IAAI,GAChIhF,SAAUyE,EAAgBzE,UAAYoB,EAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAK5E,UAAY,IAAI,IAGpHL,GAAW6E,EACb,CAGA,YADA3F,IAAW,EAEb,CACF,CACF,CACF,CAAE,MAAOoG,GACP9E,QAAQrB,MAAM,yDAA0DmG,EAC1E,CAGA,IACE9E,QAAQC,IAAI,mDAAoD8B,GAGhE/B,QAAQC,IAAI,yDAA0DhC,IAGtE+B,QAAQC,IAAI,qCAAsC,2CAClDD,QAAQC,IAAI,wCAAyC8E,KAAKC,UAAUjD,EAAS,KAAM,IAGnF,MAAMkD,QAAiB/D,EAAAA,EAAoBgE,eAAenD,GAM1D,GAHA/B,QAAQC,IAAI,qCAAsC8E,KAAKC,UAAUC,EAAU,KAAM,IAG7EA,GAAYA,EAAShE,KAAM,CAAC,IAADkE,EAAAC,EAa7B,GAZApF,QAAQC,IAAI,8CAA+C,CACzDoF,MAAOJ,EAAShE,KAAKgB,OACrBqD,UAAWL,EAAShE,KAAK,GACzBhD,QAASA,GACTsH,eAAgBxD,EAAQ9D,QACxBuH,mBAAgDC,KAAjB,QAAhBN,EAAAF,EAAShE,KAAK,UAAE,IAAAkE,OAAA,EAAhBA,EAAkBO,YACjCC,iBAA4CF,KAAf,QAAhBL,EAAAH,EAAShE,KAAK,UAAE,IAAAmE,OAAA,EAAhBA,EAAkBQ,UAC/BC,YAAaZ,EAAShE,KAAKN,KAAK8D,GAAsBA,EAAKiB,aAAYI,OAAOC,SAASC,MAAM,EAAG,GAChGC,sBAAuBC,MAAMC,KAAK,IAAIC,IAAInB,EAAShE,KAAKN,KAAK8D,GAAsBA,EAAK4B,mBAAkBL,MAAM,EAAG,MAIrG,UAAZ/H,GAAqB,CACvB,MAAMqI,EAAmBrB,EAAShE,KAAKsD,QAAO,CAACgC,EAA8B9B,KAC3E,MAAMnG,EAAOmG,EAAK4B,gBAAkB,UAEpC,OADAE,EAAIjI,IAASiI,EAAIjI,IAAS,GAAK,EACxBiI,CAAG,GACT,CAAC,GAEEC,EAAanE,OAAOoE,QAAQH,GAC/BR,QAAOY,IAAA,IAAEC,EAAGtB,GAAMqB,EAAA,OAAMrB,EAAmB,CAAC,IAC5C1E,KAAIiG,IAAA,IAAEtI,EAAM+G,GAAMuB,EAAA,MAAK,GAAGtI,MAAS+G,IAAkB,IAEpDmB,EAAWvE,OAAS,GACtBjC,QAAQC,IAAI,0DAA2DuG,EAE3E,CAKA,GAHAhI,GAAgByG,EAAShE,MAGrBgE,EAAS1F,QACXC,GAAWyF,EAAS1F,aACf,CAEL,MAAM8E,EAAuB,CAC3B5E,mBAAoBwF,EAAShE,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKC,eAAiB,IAAI,GAC9GhF,SAAUuF,EAAShE,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKE,KAAO,IAAI,GAC1FhF,cAAesF,EAAShE,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKG,UAAY,IAAI,GACpGhF,cAAeqF,EAAShE,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKI,cAAgB,IAAI,GACxGhF,SAAUoF,EAAShE,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAK5E,UAAY,IAAI,IAGjGL,GAAW6E,EACb,CACF,MACErE,QAAQrB,MAAM,gDAAiDsG,GAC/DrG,GAAS,0CAEb,CAAE,MAAOiI,GACP7G,QAAQrB,MAAM,iDAAkDkI,GAGhE,MAAMC,EAAcC,OAAOF,GAG3B,GAFuBC,EAAYE,SAAS,iBAExB,CAClBhH,QAAQC,IAAI,0EAEZ,IAEE,MAAMK,QAAuB,+BAIvB2G,EAHkB3G,EAAeE,QAGNC,YAAY,2CAE7C,GAAIwG,GAAYA,EAAShG,KAAM,CAI7B,GAHAjB,QAAQC,IAAI,wCAAyCgH,GACrDzI,GAAgByI,EAAShG,MAErBgG,EAAS1H,QACXC,GAAWyH,EAAS1H,aACf,CAEL,MAAM8E,EAAuB,CAC3B5E,mBAAoBwH,EAAShG,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKC,eAAiB,IAAI,GAC9GhF,SAAUuH,EAAShG,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKE,KAAO,IAAI,GAC1FhF,cAAesH,EAAShG,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKG,UAAY,IAAI,GACpGhF,cAAeqH,EAAShG,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAKI,cAAgB,IAAI,GACxGhF,SAAUoH,EAAShG,KAAKsD,QAAO,CAACC,EAAaC,IAAsBD,GAAOC,EAAK5E,UAAY,IAAI,IAGjGL,GAAW6E,EACb,CAIA,YADAzF,GAAS,+CAEX,CACF,CAAE,MAAOsI,GACPlH,QAAQrB,MAAM,gDAAiDuI,EACjE,CACF,CAEA,MAAML,CACR,CACF,CAAE,MAAOvF,GACPtB,QAAQrB,MAAM,qDAAsD2C,GAGpE,MACM6F,EADcJ,OAAOzF,GACM0F,SAAS,iBACtC,uGACA,6DAEJpI,GAASuI,EACX,CAAC,QACCzI,IAAW,EACb,GAII0I,GAAqBA,KACzBpH,QAAQC,IAAI,qDAGZ,MAAMoH,EAAkB,CACtBtK,WAAW+E,EAAAA,EAAAA,GAAW/E,EAAW,cACjCI,SAAS2E,EAAAA,EAAAA,GAAW3E,EAAS,cAC7BE,sBACAM,uBACG0B,IAGLW,QAAQC,IAAI,wCAAyCoH,GACrD3F,IAAmB,EAgCf4F,GAAevH,UACnB,IACErB,IAAW,GACXsB,QAAQC,IAAI,oDAAqD,CAC/DlD,WAAW+E,EAAAA,EAAAA,GAAW/E,EAAW,cACjCI,SAAS2E,EAAAA,EAAAA,GAAW3E,EAAS,cAC7BE,sBACAM,oBACAM,aAIF,MAAM8D,EAAyB,CAC7BhF,WAAW+E,EAAAA,EAAAA,GAAW/E,EAAW,cACjCI,SAAS2E,EAAAA,EAAAA,GAAW3E,EAAS,cAC7B+E,cAAe7E,EAAoB4E,OAAS,EAAI5E,EAAoBsD,KAAItC,GAAM8D,SAAS9D,UAAOoH,EAC9FrD,WAAYzE,EAAkBsE,OAAS,EAAItE,OAAoB8H,EAC/DxH,QAAS+D,GAA6B/D,KAIpCoE,OAAOC,KAAKjD,IAAiB4C,OAAS,IACxCjC,QAAQC,IAAI,0DAA2DZ,IAGnEA,GAAgBkD,eAClBR,EAAQS,kBAAmBV,EAAAA,EAAAA,GAAWzC,GAAgBkD,aAAc,eAElElD,GAAgBoD,mBAClBV,EAAQW,kBAAmBZ,EAAAA,EAAAA,GAAWzC,GAAgBoD,iBAAkB,eAEtEpD,GAAgBsD,kBAClBZ,EAAQY,iBAAkBb,EAAAA,EAAAA,GAAWzC,GAAgBsD,gBAAiB,eAEpEtD,GAAgBuD,YAClBb,EAAQc,eAAgBf,EAAAA,EAAAA,GAAWzC,GAAgBuD,UAAW,eAI5DvD,GAAgByD,WAClBf,EAAQe,SAAWzD,GAAgByD,UAEjCzD,GAAgB0D,gBAClBhB,EAAQgB,cAAgB1D,GAAgB0D,eAEtC1D,GAAgB2D,UAClBjB,EAAQkB,UAAY5D,GAAgB2D,QAAQE,MAAM,KAAKvC,KAAKtC,GAAeA,EAAG8E,UAI5E9D,GAAgB+D,aAAe/D,GAAgB+D,YAAYnB,OAAS,IACtEF,EAAQsB,UAAYhE,GAAgB+D,aAElC/D,GAAgBiE,UAAYjE,GAAgBiE,SAASrB,OAAS,IAChEF,EAAQwB,UAAYlE,GAAgBiE,UAElCjE,GAAgBmE,QAAUnE,GAAgBmE,OAAOvB,OAAS,IAC5DF,EAAQ0B,SAAWpE,GAAgBmE,QAEjCnE,GAAgBqE,QAAUrE,GAAgBqE,OAAOzB,OAAS,IAC5DF,EAAQ4B,QAAUtE,GAAgBqE,QAEhCrE,GAAgBuE,UAAYvE,GAAgBuE,SAAS3B,OAAS,IAChEF,EAAQ8B,WAAaxE,GAAgBuE,UAInCvE,GAAgByE,aAClB/B,EAAQ+B,WAA4C,QAA/BzE,GAAgByE,YAEnCzE,GAAgB0E,cAClBhC,EAAQgC,YAA8C,QAAhC1E,GAAgB0E,aAEpC1E,GAAgB2E,eAClBjC,EAAQiC,aAAgD,QAAjC3E,GAAgB2E,cAErC3E,GAAgB4E,cAClBlC,EAAQkC,YAA8C,QAAhC5E,GAAgB4E,aAEpC5E,GAAgB6E,eAClBnC,EAAQmC,aAAgD,QAAjC7E,GAAgB6E,eAK3C,MAAMqD,QAAarG,EAAAA,EAAoBsG,qBAAqBzF,EAAS,OAG/D0F,EAAMC,OAAOC,IAAIC,gBAAgBL,GACjCM,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAOP,EACTI,EAAEI,SAAW,iBAAgBnG,EAAAA,EAAAA,GAAW/E,EAAW,gBAAe+E,EAAAA,EAAAA,GAAW3E,EAAS,eAAec,SACrG6J,SAASI,KAAKC,YAAYN,GAC1BA,EAAEO,QAGFV,OAAOC,IAAIU,gBAAgBZ,GAC3BK,SAASI,KAAKI,YAAYT,EAC5B,CAAE,MAAOlJ,IACPqB,QAAQrB,MAAM,6CAA8CA,IAC5DC,GAAS,iDACX,CAAC,QACCF,IAAW,EACb,GAII6J,GAAkB1H,GACf,IAAI2H,KAAKC,aAAa,QAAS,CACpCC,MAAO,WACP9E,SAAU,MACV+E,sBAAuB,IACtBC,OAAO/H,GAaNgI,GAA6BA,CAACxK,EAAYwC,KAC9CvB,GAAmB,IACdD,GACH,CAAChB,GAAKwC,GACN,EAoEEmB,GAAgC8G,IAGc,CAChD,IAAO,EACP,MAAS,EACT,KAAQ,EACR,MAAS,EACT,QAAW,EACX,QAAW,EACX,SAAY,EACZ,OAAU,EACV,SAAY,EACZ,QAAW,EACX,OAAU,IAGUA,IAAkB,GAG1C,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,SAAS,KAAIC,SAAA,EACtBH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,EAAGC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,cAAeN,SAAA,EAC7FH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAAAD,SAAA,EACFO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAV,SAAC,0BAGtCO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,QAAQE,MAAM,iBAAgBX,SAAC,+EAIrDO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLH,QAAQ,YACRE,MAAM,UACNE,UAAWC,EAAAA,GACXC,GAAG,kCACHC,WAAWT,EAAAA,EAAAA,KAACU,EAAAA,EAAc,IAAIjB,SAC/B,wBAMHH,EAAAA,EAAAA,MAACqB,EAAAA,EAAK,CAAChB,GAAI,CAAEiB,EAAG,EAAGhB,GAAI,GAAIH,SAAA,EACzBH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQE,WAAY,SAAUD,eAAgB,gBAAiBF,GAAI,GAAIH,SAAA,EACzFH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQE,WAAY,UAAWN,SAAA,EACjDO,EAAAA,EAAAA,KAACU,EAAAA,EAAc,CAACf,GAAI,CAAEkB,GAAI,MAC1Bb,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SAAC,gBAE3BO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLD,MAAM,UACNU,QAhI0BC,KAClC1L,IAAwBD,GAAoB,EAgIpC4L,QAAS5L,IAAsB4K,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,KAAMjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,IAAIzB,SAEtErK,GAAsB,wBAA0B,8BAKrDkK,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE5B,SAAA,EACzBO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAACwB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAejC,UAChDO,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACTtK,MAAM,aACND,MAAO9D,EACPsO,SAAWC,GAAaA,GAAYtO,EAAasO,GACjDC,UAAW,CAAEC,UAAW,CAAEC,WAAW,WAK3ChC,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAACwB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAejC,UAChDO,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACTtK,MAAM,WACND,MAAO1D,EACPkO,SAAWC,GAAaA,GAAYlO,EAAWkO,GAC/CC,UAAW,CAAEC,UAAW,CAAEC,WAAW,WAK3ChC,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAACiC,EAAAA,EAAW,CACV5K,MAAM,eACNJ,QAASjD,EACToD,MAAOxD,EACPgO,SAxTqBM,IAC/B3L,QAAQC,IAAI,gDAAiD0L,GAE7D,MAAMC,EAAeD,EAAOhL,KAAIkL,GAAKA,EAAEC,aACvCxO,EAAuBsO,GAGvB5L,QAAQC,IAAI,oDAAqD2L,EAAa,EAkTpEG,YAAY,sBACZC,YAAU,EACVC,qBAAmB,EACnBC,MAAM,OACN9C,GAAI,CACF8C,MAAO,OACP,2BAA4B,CAC1BA,MAAO,OACPC,OAAQ,QAEV,sBAAuB,CACrBA,OAAQ,OACR7C,QAAS,OACTE,WAAY,gBAMpBC,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAACiC,EAAAA,EAAW,CACV5K,MAAM,YACNJ,QAAS3C,GACT8C,MAAOlD,EACP0N,SAtUmBM,IAC7B3L,QAAQC,IAAI,6CAA8C0L,GAE1D,MAAMC,EAAeD,EAAOhL,KAAIkL,GAAKA,EAAEC,aACvClO,EAAqBgO,GAGrB5L,QAAQC,IAAI,kDAAmD2L,EAAa,EAgUlEG,YAAY,mBACZC,YAAU,EACVC,qBAAmB,EACnBC,MAAM,OACN9C,GAAI,CACF8C,MAAO,OACP,2BAA4B,CAC1BA,MAAO,OACPC,OAAQ,QAEV,sBAAuB,CACrBA,OAAQ,OACR7C,QAAS,OACTE,WAAY,gBAMpBT,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,SAAA,EACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,cACZO,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACLzL,MAAO5C,GACPoN,SApVekB,IAC3BvM,QAAQC,IAAI,6CAA6CsM,EAAMC,OAAO3L,SACtE3C,GAAWqO,EAAMC,OAAO3L,MAAM,EAmVlBC,MAAM,WACNsI,GAAI,CACFqD,WAAY,OACZ,sBAAuB,CACrB5C,MAAO,iBAETX,SAED/K,GAAewC,KAAK+L,IACnBjD,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAEP9L,MAAO6L,EAAOrO,GACd+K,GAAI,CACFqD,WAAY,OACZ5C,MAAO,gBACPX,SAEDwD,EAAOpO,MAPHoO,EAAOrO,YAYpB0K,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,UAAUE,MAAM,UAAUT,GAAI,CAAEE,QAAS,QAASsD,GAAI,GAAI1D,SAAA,CAAC,uBACL,QAApDrM,EAAAsB,GAAe0O,MAAKH,GAAUA,EAAOrO,KAAOJ,YAAQ,IAAApB,OAAA,EAApDA,EAAsDyB,KAAKwO,gBAAiB7O,GAAQ6O,cAAc,4CAM5HrD,EAAAA,EAAAA,KAACsD,EAAAA,EAAQ,CAACC,GAAInO,GAAqBoO,QAAQ,OAAOC,eAAa,EAAAhE,UAC7DH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEwD,GAAI,GAAI1D,SAAA,EACjBO,EAAAA,EAAAA,KAAC0D,EAAAA,EAAO,CAAC/D,GAAI,CAAEC,GAAI,MACnBI,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYC,cAAY,EAAAV,SAAC,sBAI7CH,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE5B,SAAA,EAEzBO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAG7B,UAChBO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,UAAUD,cAAY,EAAAV,SAAC,0BAK/DO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAAC2D,EAAAA,EAAS,CACRtM,MAAM,WACN2K,WAAS,EACT5K,MAAOxB,GAAgByD,UAAY,GACnCuI,SAAWgC,GAAMxE,GAA2B,WAAYwE,EAAEb,OAAO3L,YAIrE4I,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAAC2D,EAAAA,EAAS,CACRtM,MAAM,iBACN2K,WAAS,EACT5K,MAAOxB,GAAgB0D,eAAiB,GACxCsI,SAAWgC,GAAMxE,GAA2B,gBAAiBwE,EAAEb,OAAO3L,YAI1E4I,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,mBACZO,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACLgB,UAAQ,EACRzM,MAAOxB,GAAgB+D,aAAe,GACtCiI,SAAWgC,GAAMxE,GAA2B,cAAewE,EAAEb,OAAO3L,OACpEC,MAAM,gBACNyM,YAAcC,IACZ/D,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQmE,SAAU,OAAQC,IAAK,IAAMxE,SACrDsE,EAAsB7M,KAAKE,IAC3B4I,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CAAa7M,MAAOD,EAAO+M,KAAK,SAA1B/M,OAGfqI,SAED,CAAC,SAAU,QAAS,OAAQ,SAASvI,KAAKkN,IACzCpE,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAY9L,MAAOgN,EAAK3E,SAC9B2E,GADYA,aAQvBpE,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,cACZO,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACLgB,UAAQ,EACRzM,MAAOxB,GAAgBiE,UAAY,GACnC+H,SAAWgC,GAAMxE,GAA2B,WAAYwE,EAAEb,OAAO3L,OACjEC,MAAM,WACNyM,YAAcC,IACZ/D,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQmE,SAAU,OAAQC,IAAK,IAAMxE,SACrDsE,EAAsB7M,KAAKE,IAC3B4I,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CAAa7M,MAAOD,EAAO+M,KAAK,SAA1B/M,OAGfqI,SAED,CAAC,SAAU,OAAOvI,KAAK2C,IACtBmG,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAgB9L,MAAOyC,EAAS4F,SACtC5F,GADYA,aASvBmG,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAI3B,GAAI,CAAEwD,GAAI,GAAI1D,UAC/BO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,UAAUD,cAAY,EAAAV,SAAC,qBAK/DO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,YACZO,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACLgB,UAAQ,EACRzM,MAAOxB,GAAgBmE,QAAU,GACjC6H,SAAWgC,GAAMxE,GAA2B,SAAUwE,EAAEb,OAAO3L,OAC/DC,MAAM,SACNyM,YAAcC,IACZ/D,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQmE,SAAU,OAAQC,IAAK,IAAMxE,SACrDsE,EAAsB7M,KAAKE,IAC3B4I,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CAAa7M,MAAOD,EAAO+M,KAAK,SAA1B/M,OAGfqI,SAED,CAAC,SAAU,UAAW,YAAYvI,KAAK6C,IACtCiG,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAc9L,MAAO2C,EAAO0F,SAClC1F,GADYA,aAQvBiG,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,YACZO,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACLgB,UAAQ,EACRzM,MAAOxB,GAAgBqE,QAAU,GACjC2H,SAAWgC,GAAMxE,GAA2B,SAAUwE,EAAEb,OAAO3L,OAC/DC,MAAM,SACNyM,YAAcC,IACZ/D,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQmE,SAAU,OAAQC,IAAK,IAAMxE,SACrDsE,EAAsB7M,KAAKE,IAC3B4I,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CAAa7M,MAAOD,EAAO+M,KAAK,SAA1B/M,OAGfqI,SAED,CAAC,OAAQ,UAAUvI,KAAK+C,IACvB+F,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAc9L,MAAO6C,EAAOwF,SAClCxF,GADYA,aAQvB+F,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,cACZO,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACLgB,UAAQ,EACRzM,MAAOxB,GAAgBuE,UAAY,GACnCyH,SAAWgC,GAAMxE,GAA2B,WAAYwE,EAAEb,OAAO3L,OACjEC,MAAM,WACNyM,YAAcC,IACZ/D,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQmE,SAAU,OAAQC,IAAK,IAAMxE,SACrDsE,EAAsB7M,KAAKE,IAC3B4I,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CAAa7M,MAAOD,EAAO+M,KAAK,SAA1B/M,OAGfqI,SAED,CAAC,MAAO,MAAO,MAAO,MAAO,OAAOvI,KAAKiD,IACxC6F,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAgB9L,MAAO+C,EAASsF,SACtCtF,GADYA,aAQvB6F,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,kBACZO,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACLgB,UAAQ,EACRzM,MAAOxB,GAAgByO,aAAe,GACtCzC,SAAWgC,GAAMxE,GAA2B,cAAewE,EAAEb,OAAO3L,OACpEC,MAAM,eACNyM,YAAcC,IACZ/D,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQmE,SAAU,OAAQC,IAAK,IAAMxE,SACrDsE,EAAsB7M,KAAKE,IAC3B4I,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CAAa7M,MAAOD,EAAO+M,KAAK,SAA1B/M,OAGfqI,SAED,CAAC,OAAQ,OAAOvI,KAAKoN,IACpBtE,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAY9L,MAAOkN,EAAK7E,SAC9B6E,GADYA,aASvBtE,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAI3B,GAAI,CAAEwD,GAAI,GAAI1D,UAC/BO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,UAAUD,cAAY,EAAAV,SAAC,oBAK/DO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAACwB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAejC,UAChDO,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACTtK,MAAM,oBACND,MAAOxB,GAAgBkD,cAAgB,KACvC8I,SAAWC,GAAazC,GAA2B,eAAgByC,GACnEC,UAAW,CAAEC,UAAW,CAAEC,WAAW,WAK3ChC,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAACwB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAejC,UAChDO,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACTtK,MAAM,qBACND,MAAOxB,GAAgBoD,kBAAoB,KAC3C4I,SAAWC,GAAazC,GAA2B,mBAAoByC,GACvEC,UAAW,CAAEC,UAAW,CAAEC,WAAW,WAK3ChC,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAACwB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAejC,UAChDO,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACTtK,MAAM,oBACND,MAAOxB,GAAgBsD,iBAAmB,KAC1C0I,SAAWC,GAAazC,GAA2B,kBAAmByC,GACtEC,UAAW,CAAEC,UAAW,CAAEC,WAAW,WAK3ChC,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBO,EAAAA,EAAAA,KAACwB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAejC,UAChDO,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACTtK,MAAM,aACND,MAAOxB,GAAgBuD,WAAa,KACpCyI,SAAWC,GAAazC,GAA2B,YAAayC,GAChEC,UAAW,CAAEC,UAAW,CAAEC,WAAW,WAM3ChC,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAI3B,GAAI,CAAEwD,GAAI,GAAI1D,UAC/BO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,UAAUD,cAAY,EAAAV,SAAC,iCAK/DO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,iBACZH,EAAAA,EAAAA,MAACuD,EAAAA,EAAM,CACLzL,MAAOxB,GAAgByE,YAAc,GACrCuH,SAAWgC,GAAMxE,GAA2B,aAAcwE,EAAEb,OAAO3L,OACnEC,MAAM,cAAaoI,SAAA,EAEnBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,GAAEqI,UAACO,EAAAA,EAAAA,KAAA,MAAAP,SAAI,WACvBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,MAAKqI,SAAC,SACtBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,KAAIqI,SAAC,gBAK3BO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,kBACZH,EAAAA,EAAAA,MAACuD,EAAAA,EAAM,CACLzL,MAAOxB,GAAgB0E,aAAe,GACtCsH,SAAWgC,GAAMxE,GAA2B,cAAewE,EAAEb,OAAO3L,OACpEC,MAAM,eAAcoI,SAAA,EAEpBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,GAAEqI,UAACO,EAAAA,EAAAA,KAAA,MAAAP,SAAI,WACvBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,MAAKqI,SAAC,SACtBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,KAAIqI,SAAC,gBAK3BO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,mBACZH,EAAAA,EAAAA,MAACuD,EAAAA,EAAM,CACLzL,MAAOxB,GAAgB2E,cAAgB,GACvCqH,SAAWgC,GAAMxE,GAA2B,eAAgBwE,EAAEb,OAAO3L,OACrEC,MAAM,gBAAeoI,SAAA,EAErBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,GAAEqI,UAACO,EAAAA,EAAAA,KAAA,MAAAP,SAAI,WACvBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,MAAKqI,SAAC,SACtBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,KAAIqI,SAAC,gBAK3BO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,kBACZH,EAAAA,EAAAA,MAACuD,EAAAA,EAAM,CACLzL,MAAOxB,GAAgB4E,aAAe,GACtCoH,SAAWgC,GAAMxE,GAA2B,cAAewE,EAAEb,OAAO3L,OACpEC,MAAM,eAAcoI,SAAA,EAEpBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,GAAEqI,UAACO,EAAAA,EAAAA,KAAA,MAAAP,SAAI,WACvBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,MAAKqI,SAAC,SACtBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,KAAIqI,SAAC,gBAK3BO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,UACvBH,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAAAvC,SAAA,EACpBO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAAnD,SAAC,mBACZH,EAAAA,EAAAA,MAACuD,EAAAA,EAAM,CACLzL,MAAOxB,GAAgB6E,cAAgB,GACvCmH,SAAWgC,GAAMxE,GAA2B,eAAgBwE,EAAEb,OAAO3L,OACrEC,MAAM,gBAAeoI,SAAA,EAErBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,GAAEqI,UAACO,EAAAA,EAAAA,KAAA,MAAAP,SAAI,WACvBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,MAAKqI,SAAC,SACtBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,KAAIqI,SAAC,gBAM3BH,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAI3B,GAAI,CAAEwD,GAAI,GAAI1D,SAAA,EAC/BO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,UAAUD,cAAY,EAAAV,SAAC,sBAG7DO,EAAAA,EAAAA,KAAC2D,EAAAA,EAAS,CACRtM,MAAM,UACNiL,YAAY,kDACZN,WAAS,EACTuC,WAAS,EACTC,KAAM,EACNpN,MAAOxB,GAAgB2D,SAAW,GAClCqI,SAAWgC,GAAMxE,GAA2B,UAAWwE,EAAEb,OAAO3L,OAChEqN,WAAW,sEAKjBzE,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQC,eAAgB,WAAYqD,GAAI,GAAI1D,UAC9DO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLH,QAAQ,WACRY,QA/iBqB4D,KACjC7O,GAAmB,CAAC,EAAE,EA+iBV8J,GAAI,CAAEkB,GAAI,GAAIpB,SACf,mCAQPH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQC,eAAgB,WAAYC,WAAY,SAAUoD,GAAI,GAAI1D,SAAA,EACpFO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLH,QAAQ,YACRE,MAAM,UACNK,WAAWT,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,IACvB7D,QAASnD,GACTgC,GAAI,CAAEkB,GAAI,GAAIpB,SACf,mBAIDO,EAAAA,EAAAA,KAAA,QAAAP,UACEO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLH,QAAQ,WACRO,WAAWT,EAAAA,EAAAA,KAAC4E,EAAAA,EAAY,IACxBC,SAAU7P,IAAmC,IAAxBF,GAAa0D,OAClCsI,QAASjD,GAAa4B,SACvB,oBAQPH,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAG1B,GAAI,CAAEC,GAAI,GAAIH,SAAA,EACxCO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIwD,GAAI,EAAGvD,GAAI,IAAI9B,UAChCO,EAAAA,EAAAA,KAAC+E,EAAAA,EAAI,CAAAtF,UACHH,EAAAA,EAAAA,MAAC0F,EAAAA,EAAW,CAAAvF,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,mBAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrB3J,GAAQE,mBAAmBiP,2BAMpCjF,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIwD,GAAI,EAAGvD,GAAI,IAAI9B,UAChCO,EAAAA,EAAAA,KAAC+E,EAAAA,EAAI,CAAAtF,UACHH,EAAAA,EAAAA,MAAC0F,EAAAA,EAAW,CAAAvF,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,2BAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrB3J,GAAQG,SAASgP,2BAM1BjF,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIwD,GAAI,EAAGvD,GAAI,IAAI9B,UAChCO,EAAAA,EAAAA,KAAC+E,EAAAA,EAAI,CAAAtF,UACHH,EAAAA,EAAAA,MAAC0F,EAAAA,EAAW,CAAAvF,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,cAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrBX,GAAehJ,GAAQI,yBAMhC8J,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIwD,GAAI,EAAGvD,GAAI,IAAI9B,UAChCO,EAAAA,EAAAA,KAAC+E,EAAAA,EAAI,CAAAtF,UACHH,EAAAA,EAAAA,MAAC0F,EAAAA,EAAW,CAAAvF,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,cAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrBX,GAAehJ,GAAQK,yBAMhC6J,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIwD,GAAI,EAAGvD,GAAI,IAAI9B,UAChCO,EAAAA,EAAAA,KAAC+E,EAAAA,EAAI,CAAAtF,UACHH,EAAAA,EAAAA,MAAC0F,EAAAA,EAAW,CAAAvF,SAAA,EACVO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYE,MAAM,iBAAiBD,cAAY,EAAAV,SAAC,eAGpEO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SACrBX,GAAehJ,GAAQM,uBAQlCkJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAK,CAAChB,GAAI,CAAEiB,EAAG,GAAInB,SAAA,EAClBH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQE,WAAY,SAAUH,GAAI,GAAIH,SAAA,EACxDO,EAAAA,EAAAA,KAACkF,EAAAA,EAAc,CAACvF,GAAI,CAAEkB,GAAI,MAC1Bb,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIT,SAAC,0BAG1BvK,KACC8K,EAAAA,EAAAA,KAACmF,EAAAA,EAAK,CAACC,SAAS,QAAQzF,GAAI,CAAEC,GAAI,GAAIH,SACnCvK,KAIJF,IACCgL,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQC,eAAgB,SAAUc,EAAG,GAAInB,UAC3DO,EAAAA,EAAAA,KAACqF,EAAAA,EAAgB,MAEO,IAAxBvQ,GAAa0D,QACfwH,EAAAA,EAAAA,KAACmF,EAAAA,EAAK,CAACC,SAAS,OAAM3F,SAAC,mHAIvBO,EAAAA,EAAAA,KAACsF,EAAAA,GAAa,CACZ9N,KAAM1C,GACNyQ,QAAS,CACP,CACE3Q,GAAI,aACJyC,OAA2D,QAApDhE,EAAAqB,GAAe0O,MAAKH,GAAUA,EAAOrO,KAAOJ,YAAQ,IAAAnB,OAAA,EAApDA,EAAsDwB,OAAQL,GACrE2K,OAAQA,CAAC/H,EAAYoO,IACZA,EAAIvJ,WAAauJ,EAAIvJ,WACd,QAAZzH,IAAqBgR,EAAIC,MAAOpN,EAAAA,EAAAA,GAAW,IAAI5E,KAAK+R,EAAIC,MAAO,gBACnD,UAAZjR,IAAuBgR,EAAIC,MAAOpN,EAAAA,EAAAA,GAAW,IAAI5E,KAAK+R,EAAIC,MAAO,aACrD,SAAZjR,IAAsBgR,EAAIC,MAAOpN,EAAAA,EAAAA,GAAW,IAAI5E,KAAK+R,EAAIC,MAAO,QACpD,UAAZjR,GAAsBgR,EAAI5I,eACd,YAAZpI,IAAyBgR,EAAIjO,QAAUiO,EAAIjO,QAC/B,YAAZ/C,IAAyBgR,EAAIE,QAAUF,EAAIE,QAC/B,aAAZlR,IAA0BgR,EAAIrL,SAAWqL,EAAIrL,SACjC,WAAZ3F,IAAwBgR,EAAIvL,OAASuL,EAAIvL,OAC7B,aAAZzF,IAA0BgR,EAAI3L,SAAW2L,EAAI3L,SACjC,YAAZrF,IAAyBgR,EAAIG,QAAUH,EAAIG,QAC3CH,EAAIhR,GAAQ6O,gBAAuC,OAGzD,CACEzO,GAAI,gBACJyC,MAAO,gBACPuO,MAAO,QACPtB,KAAM,UAER,CACE1P,GAAI,MACJyC,MAAO,MACPuO,MAAO,QACPtB,KAAM,UAER,CACE1P,GAAI,WACJyC,MAAO,WACPuO,MAAO,QACPtB,KAAM,WACNnF,OAAS/H,GAAkB0H,GAAe1H,IAE5C,CACExC,GAAI,eACJyC,MAAO,WACPuO,MAAO,QACPtB,KAAM,WACNnF,OAAS/H,GAAkB0H,GAAe1H,IAE5C,CACExC,GAAI,YACJyC,MAAO,aACPuO,MAAO,QACPtB,KAAM,WACNnF,OAAS/H,GAAkB0H,GAAe1H,IAE5C,CACExC,GAAI,WACJyC,MAAO,aACPuO,MAAO,QACPtB,KAAM,WACNnF,OAAS/H,GAAkB0H,GAAe1H,IAE5C,CACExC,GAAI,UACJyC,MAAO,WACPuO,MAAO,QACPtB,KAAM,WACNnF,OAAS/H,GAAkB0H,GAAe1H,IAE5C,CACExC,GAAI,WACJyC,MAAO,YACPuO,MAAO,QACPtB,KAAM,WACNnF,OAAS/H,GAAkB0H,GAAe1H,KAG9CyO,MAAM,qBACN7Q,QAASA,GACT8Q,UAAWnI,GACXoI,SAAUlI,GACVmI,SAAU,CACRC,SAAS,EACTC,WAAW,EACXC,YAAY,EACZC,QAAQ,GAEVC,aAAa,gHACb1G,GAAI,CAAE2G,UAAW,QAASC,SAAU,QACpCC,QAAQ,KAERC,uBAAuB,EACvBC,yBAAyB,EACzBC,qBAAqB,EACrBC,wBAAwB,EACxBC,mBAAmB,EACnBC,kBAAkB,EAClBC,sBAAsB,EACtBC,0BAA0B,EAC1BC,qBAAqB,EACrBC,wBAAwB,EACxBC,iBAAiB,EACjBC,kBAAmB,CACjB,CACExS,GAAI,mBACJyC,MAAO,oBACPiN,KAAM+C,EAAAA,EAAWC,OACjBC,IAAK,GAEP,CACE3S,GAAI,mBACJyC,MAAO,oBACPiN,KAAM+C,EAAAA,EAAWC,OACjBC,IAAK,GAEP,CACE3S,GAAI,SACJyC,MAAO,UACPiN,KAAM+C,EAAAA,EAAWC,OACjBC,IAAK,GAEP,CACE3S,GAAI,SACJyC,MAAO,UACPiN,KAAM+C,EAAAA,EAAWC,OACjBC,IAAK,IAGTC,iBAAkB,CAChB,iBACA,UACA,UACA,WACA,SACA,WACA,WAEFC,gBAAiB,CAAC,cAClBC,gBAAiB,CACf,CACEC,eAAgB,QAChBC,eAAgB,MAChBvQ,MAAO,cACPwQ,gBAAkBrC,IAAQ,CACxBlS,UAAWkS,EAAIC,MAAOpN,EAAAA,EAAAA,GAAW,IAAI5E,KAAK+R,EAAIC,MAAO,cAAgB,GACrE/R,QAAS8R,EAAIC,MAAOpN,EAAAA,EAAAA,GAAW,IAAI5E,KAAK+R,EAAIC,MAAO,cAAgB,GACnEjR,QAAS,SAGb,CACEmT,eAAgB,QAChBC,eAAgB,SAChBvQ,MAAO,eACPwQ,gBAAkBrC,IAAQ,CACxBsC,aAActC,EAAIsC,cAAgB,GAClCtT,QAAS,aAIfuT,aAAc,CACZ,CAAEC,SAAU,gBAAiBC,SAAU,MAAO5Q,MAAO,uBACrD,CAAE2Q,SAAU,gBAAiBC,SAAU,MAAO5Q,MAAO,qBACrD,CAAE2Q,SAAU,MAAOC,SAAU,MAAO5Q,MAAO,aAC3C,CAAE2Q,SAAU,MAAOC,SAAU,MAAO5Q,MAAO,WAC3C,CAAE2Q,SAAU,WAAYC,SAAU,MAAO5Q,MAAO,kBAChD,CAAE2Q,SAAU,eAAgBC,SAAU,MAAO5Q,MAAO,kBACpD,CAAE2Q,SAAU,WAAYC,SAAU,MAAO5Q,MAAO,aAChD,CAAE2Q,SAAU,WAAYC,SAAU,MAAO5Q,MAAO,YAElD6Q,gBAAkB1C,IAChBlG,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEiB,EAAG,GAAInB,SAAA,EAChBH,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,YAAYC,cAAY,EAAAV,SAAA,CAAC,eAClB,QAAZjL,IAAiC,UAAZA,IAAmC,SAAZA,IACvD6D,EAAAA,EAAAA,GAAW,IAAI5E,KAAK+R,EAAIC,MAAO,gBAC/BD,EAAIvJ,YAAc,oBAEtBqD,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE5B,SAAA,EACzBH,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,SAAA,EACvBH,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,QAAOT,SAAA,EACzBO,EAAAA,EAAAA,KAAA,UAAAP,SAAQ,mBAAuB,IAAE+F,EAAIvK,kBAEvCqE,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,QAAOT,SAAA,EACzBO,EAAAA,EAAAA,KAAA,UAAAP,SAAQ,SAAa,IAAE+F,EAAItK,QAE7BoE,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,QAAOT,SAAA,EACzBO,EAAAA,EAAAA,KAAA,UAAAP,SAAQ,cAAkB,IAAEX,GAAe0G,EAAIrK,cAEjDmE,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,QAAOT,SAAA,EACzBO,EAAAA,EAAAA,KAAA,UAAAP,SAAQ,cAAkB,IAAEX,GAAe0G,EAAIpK,qBAGnDkE,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIC,GAAI,EAAE9B,SAAA,EACvBH,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,QAAOT,SAAA,EACzBO,EAAAA,EAAAA,KAAA,UAAAP,SAAQ,gBAAoB,IAAEX,GAAe0G,EAAI2C,eAEnD7I,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,QAAOT,SAAA,EACzBO,EAAAA,EAAAA,KAAA,UAAAP,SAAQ,gBAAoB,IAAEX,GAAe0G,EAAI4C,cAEnD9I,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,QAAOT,SAAA,EACzBO,EAAAA,EAAAA,KAAA,UAAAP,SAAQ,cAAkB,IAAEX,GAAe0G,EAAI6C,aAEjD/I,EAAAA,EAAAA,MAACW,EAAAA,EAAU,CAACC,QAAQ,QAAOT,SAAA,EACzBO,EAAAA,EAAAA,KAAA,UAAAP,SAAQ,eAAmB,IAAEX,GAAe0G,EAAIpP,sBAM1DkS,eAAiBnJ,IACf5I,QAAQC,IAAI,6CAA6C2I,KACzDtB,IAAc,EAEhB0K,uBAAyBjQ,IACvB/B,QAAQC,IAAI,kDAAmD8B,GAC/DzC,GAAmByC,GAh5BIkQ,MAEjC,MAAM5K,EAAkB,CACtBtK,YACAI,UACAc,WACAZ,sBACAM,uBACG0B,IAGLW,QAAQC,IAAI,kDAAmDoH,GAC/D3F,IAAmB,EAq4BTuQ,EAA4B,EAE9BC,oBAAsBlD,IACpBhP,QAAQC,IAAI,6CAA8C+O,EAAQrO,KAAIwR,GAAOA,EAAI9T,KAAI,EAEvF+T,iBAAmBnU,IACjB+B,QAAQC,IAAI,4CAA6ChC,EAAQ,EAEnEoU,YAAaA,CAACC,EAAeC,KAC3BvS,QAAQC,IAAI,4BAA4BqS,KAASC,EAAW,WAAa,cAAc,EAEzFC,YAAaA,CAACvD,EAAUmC,EAAwBC,EAAwBtP,KAgBtE,GAfA/B,QAAQC,IAAI,wCAAwCmR,QAAqBC,IAAkBtP,GAGvFA,EAAQ9D,SACVC,GAAW6D,EAAQ9D,SAGjB8D,EAAQhF,WACVC,EAAa+E,EAAQhF,WAGnBgF,EAAQ5E,SACVC,EAAW2E,EAAQ5E,SAGjB4E,EAAQwP,aAAc,CAExB,MAAMrP,EAAgBgE,MAAMuM,QAAQ1Q,EAAQwP,cACxCxP,EAAQwP,aAAa5Q,KAAItC,GAAMA,EAAGyN,aAClC,CAAC/J,EAAQwP,aAAazF,YAC1BxO,EAAuB4E,EACzB,CAGAkF,IAAoB,SAKlB,C,kUChtDT,IAAK0J,EAAU,SAAVA,GAAU,OAAVA,EAAU,YAAVA,EAAU,gBAAVA,EAAU,YAAVA,EAAU,kBAAVA,EAAU,gBAAVA,EAAU,cAAVA,CAAU,MA4CtB,MAmSA,EAnSgDpK,IAWzC,IAX0C,MAC/C4I,EAAQ,UAAS,QACjBvN,EAAU,GAAE,OACZ4J,EAAS,CAAC,EAAC,SACXN,EAAQ,QACRqH,EAAO,QACPC,EAAO,aACPC,EACAL,SAAUM,EAAkB,gBAC5BC,GAAkB,EAAI,GACtB1J,GACD1C,EAEC,MAAOqM,EAAkBC,IAAuB/V,EAAAA,EAAAA,UAAkB6V,GAG5DG,OAAsCxN,IAAvBoN,EACfN,EAAWU,EAAeJ,EAAqBE,EAG/CG,EAAgB7Q,OAAOC,KAAKqJ,GAAQ7F,QAAOqN,IAC/C,MAAMtS,EAAQ8K,EAAOwH,GACrB,YAAiB1N,IAAV5E,GAAiC,OAAVA,GAA4B,KAAVA,CAAY,IAWxDuS,EAAqBA,CAAC/U,EAAYwC,KAClCwK,GACFA,EAAShN,EAAIwC,EACf,EAWIwS,EAAqBA,KACrBV,GACFA,GACF,EAWIW,EAAqBxN,IAA+C,IAADyN,EACvE,MAAM1S,OAA8B4E,IAAtBkG,EAAO7F,EAAOzH,IAAoBsN,EAAO7F,EAAOzH,IAAMyH,EAAO0N,cAAgB,GAE3F,OAAQ1N,EAAOiI,MACb,KAAK+C,EAAW2C,OACd,OACE1K,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAACmC,KAAK,QAAO1E,SAAA,EACjCO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAChO,GAAI,UAAUyH,EAAOzH,WAAW6K,SAAEpD,EAAOhF,SACrDiI,EAAAA,EAAAA,MAACuD,EAAAA,EAAM,CACLoH,QAAS,UAAU5N,EAAOzH,WAC1BA,GAAI,UAAUyH,EAAOzH,KACrBwC,MAAOA,EACPC,MAAOgF,EAAOhF,MACduK,SAAWgC,GAA8B+F,EAAmBtN,EAAOzH,GAAIgP,EAAEb,OAAO3L,OAAOqI,SAAA,EAEvFO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,GAAEqI,UAChBO,EAAAA,EAAAA,KAAA,MAAAP,SAAI,UAES,QADJqK,EACVzN,EAAOpF,eAAO,IAAA6S,OAAA,EAAdA,EAAgB5S,KAAK+L,IACpBjD,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAoB9L,MAAO6L,EAAO7L,MAAMqI,SAC9CwD,EAAO5L,OADK4L,EAAO7L,eAQhC,KAAKiQ,EAAW6C,KACd,OACElK,EAAAA,EAAAA,KAACwB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAejC,UAChDO,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACTtK,MAAOgF,EAAOhF,MACdD,MAAOA,GAAS,KAChBwK,SAAWC,GAAa8H,EAAmBtN,EAAOzH,GAAIiN,GACtDC,UAAW,CAAEC,UAAW,CAAEoC,KAAM,QAASnC,WAAW,QAK5D,KAAKqF,EAAW8C,QACd,OACE7K,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CAACX,WAAS,EAACmC,KAAK,QAAO1E,SAAA,EACjCO,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAChO,GAAI,UAAUyH,EAAOzH,WAAW6K,SAAEpD,EAAOhF,SACrDiI,EAAAA,EAAAA,MAACuD,EAAAA,EAAM,CACLoH,QAAS,UAAU5N,EAAOzH,WAC1BA,GAAI,UAAUyH,EAAOzH,KACrBwC,MAAOA,EACPC,MAAOgF,EAAOhF,MACduK,SAAWgC,GAAM+F,EAAmBtN,EAAOzH,GAAIgP,EAAEb,OAAO3L,OAAOqI,SAAA,EAE/DO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,GAAEqI,UAChBO,EAAAA,EAAAA,KAAA,MAAAP,SAAI,WAENO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,OAAMqI,SAAC,SACvBO,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAC9L,MAAM,QAAOqI,SAAC,aAKhC,KAAK4H,EAAWC,OACd,OACEtH,EAAAA,EAAAA,KAAC2D,EAAAA,EAAS,CACR3B,WAAS,EACT3K,MAAOgF,EAAOhF,MACdiN,KAAK,SACLlN,MAAOA,EACPwK,SAAWgC,GAAM+F,EAAmBtN,EAAOzH,GAAIgP,EAAEb,OAAO3L,OACxD+M,KAAK,QACLiG,WAAY,CACV7C,IAAKlL,EAAOkL,IACZ8C,IAAKhO,EAAOgO,IACZC,KAAMjO,EAAOiO,MAAQ,KAK7B,KAAKjD,EAAWkD,MAEd,OACEjL,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQoE,IAAK,GAAIxE,SAAA,EACnCO,EAAAA,EAAAA,KAAC2D,EAAAA,EAAS,CACRtM,MAAO,OAAOgF,EAAOhF,QACrBiN,KAAK,SACLlN,OAAY,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOmQ,MAAO,GACrB3F,SAAWgC,GAAM+F,EAAmBtN,EAAOzH,GAAI,IAAKwC,EAAOmQ,IAAK3D,EAAEb,OAAO3L,QACzE+M,KAAK,QACLxE,GAAI,CAAE6K,KAAM,MAEdxK,EAAAA,EAAAA,KAAC2D,EAAAA,EAAS,CACRtM,MAAO,OAAOgF,EAAOhF,QACrBiN,KAAK,SACLlN,OAAY,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOiT,MAAO,GACrBzI,SAAWgC,GAAM+F,EAAmBtN,EAAOzH,GAAI,IAAKwC,EAAOiT,IAAKzG,EAAEb,OAAO3L,QACzE+M,KAAK,QACLxE,GAAI,CAAE6K,KAAM,QAMpB,QACE,OACExK,EAAAA,EAAAA,KAAC2D,EAAAA,EAAS,CACR3B,WAAS,EACT3K,MAAOgF,EAAOhF,MACdD,MAAOA,EACPwK,SAAWgC,GAAM+F,EAAmBtN,EAAOzH,GAAIgP,EAAEb,OAAO3L,OACxD+M,KAAK,QACL7B,YAAajG,EAAOiG,cAG5B,EAGF,OACEhD,EAAAA,EAAAA,MAACqB,EAAAA,EAAK,CAACT,QAAQ,WAAWP,GAAI,CAAEC,GAAI,KAAMD,GAAKF,SAAA,EAC7CH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEiB,EAAG,EAAGf,QAAS,OAAQE,WAAY,SAAUD,eAAgB,iBAAkBL,SAAA,EACxFH,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEE,QAAS,OAAQE,WAAY,UAAWN,SAAA,EACjDO,EAAAA,EAAAA,KAACU,EAAAA,EAAc,CAACf,GAAI,CAAEkB,GAAI,MAC1Bb,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKI,UAAU,MAAKb,SACrCoG,IAGF4D,EAAcjR,OAAS,IACtBwH,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CACH7M,MAAO,GAAGoS,EAAcjR,gBACxB4H,MAAM,UACN+D,KAAK,QACLxE,GAAI,CAAE8K,GAAI,SAKhBzK,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAAAD,UACFO,EAAAA,EAAAA,KAAC0K,EAAAA,EAAU,CAAC5J,QAzKC6J,KACdnB,GACHD,GAAqBD,EACvB,EAsKyCnF,KAAK,QAAO1E,SAC5CqJ,GAAW9I,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,KAAMjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,YAKtD5B,EAAAA,EAAAA,MAACgE,EAAAA,EAAQ,CAACC,GAAIuF,EAASrJ,SAAA,EACrBO,EAAAA,EAAAA,KAAC0D,EAAAA,EAAO,KAERpE,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEiB,EAAG,GAAInB,SAAA,EAChBO,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE5B,SACxBnH,EAAQpB,KAAKmF,IACZ2D,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACnG,MAAI,EAACsG,GAAI,GAAIwD,GAAI,EAAGvD,GAAI,EAAE9B,SAC7BoK,EAAkBxN,IADiBA,EAAOzH,QAMhD6U,EAAcjR,OAAS,IACtB8G,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEwD,GAAI,EAAGtD,QAAS,OAAQmE,SAAU,OAAQC,IAAK,GAAIxE,SAAA,EAC5DO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,QAAQP,GAAI,CAAEkB,GAAI,GAAIpB,SAAC,oBAI1CgK,EAAcvS,KAAKwS,IAClB,MAAMrN,EAAS/D,EAAQ8K,MAAKwH,GAAKA,EAAEhW,KAAO8U,IAC1C,IAAImB,EAAe3I,EAAOwH,GAE1B,IAAU,OAANrN,QAAM,IAANA,OAAM,EAANA,EAAQiI,QAAS+C,EAAW2C,QAAU3N,EAAOpF,QAAS,CACxD,MAAMgM,EAAS5G,EAAOpF,QAAQmM,MAAK0H,GAAKA,EAAE1T,QAAUyT,IACpDA,EAAe5H,EAASA,EAAO5L,MAAQwT,CACzC,CAUA,OARU,OAANxO,QAAM,IAANA,OAAM,EAANA,EAAQiI,QAAS+C,EAAW8C,UAC9BU,EAAgC,SAAjBA,EAA0B,MAAQ,OAGzC,OAANxO,QAAM,IAANA,OAAM,EAANA,EAAQiI,QAAS+C,EAAW6C,MAAQW,aAAwBpX,OAC9DoX,EAAeA,EAAaE,uBAI5B/K,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CAEH7M,MAAO,IAAS,OAANgF,QAAM,IAANA,OAAM,EAANA,EAAQhF,QAASqS,MAAQmB,IACnCG,SAAUA,IAAMrB,EAAmBD,EAAK,IACxCvF,KAAK,SAHAuF,EAIL,KAIN1J,EAAAA,EAAAA,KAACkE,EAAAA,EAAI,CACH7M,MAAM,YACN2T,SAAUpB,EACVqB,YAAYjL,EAAAA,EAAAA,KAACkL,EAAAA,EAAS,IACtB/G,KAAK,QACL/D,MAAM,qBAMdJ,EAAAA,EAAAA,KAAC0D,EAAAA,EAAO,KAERpE,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAEiB,EAAG,EAAGf,QAAS,OAAQC,eAAgB,WAAYmE,IAAK,GAAIxE,SAAA,EACrEO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CAACH,QAAQ,WAAWY,QAAS8I,EAAoBnJ,WAAWT,EAAAA,EAAAA,KAACkL,EAAAA,EAAS,IAAIzL,SAAC,UAIjF0J,IACCnJ,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAACtF,MAAM,qBAAoBpG,UACjCO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLH,QAAQ,WACRE,MAAM,YACNU,QAvNYsK,KACpBjC,GACFA,GACF,EAqNY1I,WAAWT,EAAAA,EAAAA,KAACqL,EAAAA,EAAQ,IAAI5L,SACzB,YAMLO,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLH,QAAQ,YACRE,MAAM,UACNU,QAhPiBnD,KACrBsL,GACFA,GACF,EA8OQxI,WAAWT,EAAAA,EAAAA,KAACU,EAAAA,EAAc,IAAIjB,SAC/B,0BAKC,C,sBCtWR6L,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACXC,EAAQ,GAAU,EAAIC,EAAe1U,UAAuB,EAAI2U,EAAYC,KAAK,OAAQ,CACtGC,EAAG,wCACD,W,sBCTAN,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACXC,EAAQ,GAAU,EAAIC,EAAe1U,UAAuB,EAAI2U,EAAYC,KAAK,OAAQ,CACtGC,EAAG,2IACD,O","sources":["../node_modules/date-fns/esm/subDays/index.js","pages/showcase/reports/DailyActionsPage.tsx","components/common/FilterPanel.tsx","../node_modules/@mui/icons-material/Download.js","../node_modules/@mui/icons-material/Save.js"],"sourcesContent":["import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip,\n  Collapse\n} from '@mui/material';\nimport { EnhancedTable } from '../../../components/tables/enhanced';\nimport { ColumnDef, ExportFormat } from '../../../components/tables/enhanced/types';\nimport FilterPanel, { FilterDefinition, FilterType } from '../../../components/common/FilterPanel';\nimport MultiSelect, { MultiSelectOption } from '../../../components/common/MultiSelect';\nimport ReportExport from '../../../components/reports/ReportExport';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { format as formatDate, subDays } from 'date-fns';\nimport { FEATURES } from '../../../config/constants';\nimport dailyActionsService from '../../../services/api/dailyActionsService';\n// Import the ReportFilters type from the service file\nimport { ReportFilters } from '../../../services/api/types';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\n\n// Types\ninterface WhiteLabel {\n  id: string;\n  name: string;\n}\n\ninterface DailyAction {\n  id: string;\n  date: string;\n  whiteLabelId: number;\n  whiteLabelName: string;\n  registrations: number;\n  ftd: number;\n  deposits: number;\n  paidCashouts: number;\n  betsCasino?: number;\n  winsCasino?: number;\n  betsSport?: number;\n  winsSport?: number;\n  betsLive?: number;\n  winsLive?: number;\n  betsBingo?: number;\n  winsBingo?: number;\n  ggrCasino: number;\n  ggrSport: number;\n  ggrLive: number;\n  ggrBingo?: number;\n  totalGGR: number;\n  // Additional properties for grouped data\n  groupKey?: string;\n  groupValue?: string;\n  // Additional properties for other grouping dimensions\n  country?: string;\n  tracker?: string;\n  currency?: string;\n  gender?: string;\n  platform?: string;\n  ranking?: string;\n}\n\ninterface Summary {\n  totalRegistrations: number;\n  totalFTD: number;\n  totalDeposits: number;\n  totalCashouts: number;\n  totalGGR: number;\n}\n\ninterface Filters {\n  startDate: string;\n  endDate: string;\n  whiteLabelIds?: number[]; // Changed to match backend's expectation of a list\n  countryIds?: string[]; // Added country IDs for filtering\n  groupBy?: number; // Changed to number to match backend's GroupByOption enum\n\n  // Advanced filters - Date filters\n  registrationDate?: string;\n  firstDepositDate?: string;\n  lastDepositDate?: string;\n  lastLoginDate?: string;\n\n  // Advanced filters - String filters\n  trackers?: string;\n  promotionCode?: string;\n  playerIds?: string[];\n\n  // Advanced filters - Array filters\n  playModes?: string[];\n  platforms?: string[];\n  statuses?: string[];\n  genders?: string[];\n  currencies?: string[];\n\n  // Advanced filters - Boolean filters\n  smsEnabled?: boolean;\n  mailEnabled?: boolean;\n  phoneEnabled?: boolean;\n  postEnabled?: boolean;\n  bonusEnabled?: boolean;\n}\n\ninterface Country {\n  id: string;\n  name: string;\n}\n\nconst DailyActionsPage: React.FC = () => {\n  // State for filters - use yesterday and today as default date range\n  const [startDate, setStartDate] = useState<Date>(subDays(new Date(), 1));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n\n  // White Label filter state\n  const [selectedWhiteLabels, setSelectedWhiteLabels] = useState<string[]>([]);\n  const [whiteLabels, setWhiteLabels] = useState<WhiteLabel[]>([]);\n  const [whiteLabelsOptions, setWhiteLabelsOptions] = useState<MultiSelectOption[]>([]);\n\n  // Country filter state\n  const [selectedCountries, setSelectedCountries] = useState<string[]>([]);\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [countriesOptions, setCountriesOptions] = useState<MultiSelectOption[]>([]);\n\n  const [groupBy, setGroupBy] = useState<string>('Day');\n  // Group By options - when any option is selected,\n  // the table will show only the grouped field and sum all numerical values\n  const [groupByOptions, setGroupByOptions] = useState<{id: string, name: string}[]>([\n    { id: 'Day', name: 'Day' },\n    { id: 'Month', name: 'Month' },\n    { id: 'Year', name: 'Year' },\n    { id: 'Label', name: 'White Label' },\n    { id: 'Player', name: 'Player' },\n    { id: 'Country', name: 'Country' },\n    { id: 'Tracker', name: 'Tracker' },\n    { id: 'Currency', name: 'Currency' },\n    { id: 'Gender', name: 'Gender' },\n    { id: 'Platform', name: 'Platform' },\n    { id: 'Ranking', name: 'Ranking' }\n  ]);\n\n  // State for data\n  const [dailyActions, setDailyActions] = useState<DailyAction[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Removed sorting and pagination state as they'll be handled by UnifiedDataTable\n\n  // State for advanced features\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState<boolean>(false);\n  const [showExportDialog, setShowExportDialog] = useState<boolean>(false);\n  const [showColumnSelector, setShowColumnSelector] = useState<boolean>(false);\n  const [visibleColumns, setVisibleColumns] = useState<string[]>([\n    'groupValue', 'registrations', 'ftd', 'deposits', 'paidCashouts',\n    'ggrCasino', 'ggrSport', 'ggrLive', 'totalGGR'\n  ]);\n  const [advancedFilters, setAdvancedFilters] = useState<Record<string, any>>({});\n\n  // State for summary metrics\n  const [summary, setSummary] = useState<Summary>({\n    totalRegistrations: 0,\n    totalFTD: 0,\n    totalDeposits: 0,\n    totalCashouts: 0,\n    totalGGR: 0\n  });\n\n  // We'll fetch countries from the API instead of using mock data\n\n  // Fetch metadata (white labels and countries) on component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        console.log('[DAILY ACTIONS PAGE] Fetching metadata');\n\n        // Check if mock data is enabled (from constants or localStorage)\n        const useMockData = FEATURES.USE_MOCK_DATA_FOR_UI_TESTING || localStorage.getItem('USE_MOCK_DATA_FOR_UI_TESTING') === 'true';\n\n        if (useMockData) {\n          console.log('[DAILY ACTIONS PAGE] Using mock data for metadata');\n\n          // Import mock data dynamically\n          const mockDataModule = await import('../../../mockData');\n          const mockDataService = mockDataModule.default;\n\n          // Get mock metadata\n          const mockMetadata = mockDataService.getMockData('/reports/daily-actions/metadata');\n\n          if (mockMetadata) {\n            if (mockMetadata.whiteLabels) {\n              console.log('[DAILY ACTIONS PAGE] Got mock white labels:', mockMetadata.whiteLabels);\n              setWhiteLabels(mockMetadata.whiteLabels);\n\n              // Convert white labels to MultiSelect options\n              const options = mockMetadata.whiteLabels.map((wl: WhiteLabel) => ({\n                value: wl.id,\n                label: wl.name\n              }));\n              setWhiteLabelsOptions(options);\n            }\n\n            // Also check for countries in the mock data\n            if (mockMetadata.countries) {\n              console.log('[DAILY ACTIONS PAGE] Got mock countries:', mockMetadata.countries);\n              setCountries(mockMetadata.countries);\n\n              // Convert countries to MultiSelect options\n              const countryOptions = mockMetadata.countries.map((country: Country) => ({\n                value: country.id,\n                label: country.name\n              }));\n              setCountriesOptions(countryOptions);\n            } else {\n              console.log('[DAILY ACTIONS PAGE] No countries found in mock data');\n              // Set default empty countries\n              setCountries([]);\n              setCountriesOptions([]);\n            }\n\n            return;\n          }\n        }\n\n        // Fall back to service if mock data is not available\n        const data = await dailyActionsService.getMetadata();\n        console.log('[DAILY ACTIONS PAGE] Got metadata from service:', data);\n\n        // Handle white labels\n        if (data && data.whiteLabels) {\n          console.log('[DAILY ACTIONS PAGE] Got white labels from service:', data.whiteLabels);\n          const fetchedWhiteLabels = data.whiteLabels || [];\n          setWhiteLabels(fetchedWhiteLabels);\n\n          // Convert white labels to MultiSelect options\n          const options = fetchedWhiteLabels.map((wl: WhiteLabel) => ({\n            value: wl.id,\n            label: wl.name\n          }));\n          setWhiteLabelsOptions(options);\n        } else {\n          console.log('[DAILY ACTIONS PAGE] No white labels found in API response');\n          setWhiteLabels([]);\n          setWhiteLabelsOptions([]);\n        }\n\n        // Handle countries\n        if (data && data.countries) {\n          console.log('[DAILY ACTIONS PAGE] Got countries from service:', data.countries);\n          const fetchedCountries = data.countries || [];\n          setCountries(fetchedCountries);\n\n          // Convert countries to MultiSelect options\n          const countryOptions = fetchedCountries.map((country: Country) => ({\n            value: country.id,\n            label: country.name\n          }));\n          setCountriesOptions(countryOptions);\n        } else {\n          console.log('[DAILY ACTIONS PAGE] No countries found in API response');\n          setCountries([]);\n          setCountriesOptions([]);\n        }\n      } catch (err) {\n        console.error('[DAILY ACTIONS PAGE] Error fetching metadata:', err);\n        setError('Failed to load metadata. Please try again later.');\n      }\n    };\n\n    // We'll fetch countries from the API in the same call that gets white labels\n    // The metadata endpoint should return both white labels and countries\n\n    fetchMetadata();\n  }, []);\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    // Define a function to fetch data on mount to avoid dependency issues\n    const fetchInitialData = async () => {\n      console.log('[DAILY ACTIONS PAGE] Fetching initial data');\n      await fetchDailyActions();\n    };\n\n    // Set a small delay to ensure the component is fully mounted\n    const timer = setTimeout(() => {\n      fetchInitialData();\n    }, 100);\n\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Fetch daily actions data\n  const fetchDailyActions = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Format dates for API\n      const formattedStartDate = formatDate(startDate, 'yyyy-MM-dd');\n      const formattedEndDate = formatDate(endDate, 'yyyy-MM-dd');\n\n      // Create filters object\n      const filters: Filters = {\n        startDate: formattedStartDate,\n        endDate: formattedEndDate,\n        // Convert groupBy string to the numeric value expected by the backend\n        // The backend expects a GroupByOption enum value (Day=0, Month=1, Year=2, Label=3, etc.)\n        groupBy: convertGroupByToBackendValue(groupBy)\n      };\n\n      // Add white label filters if any are selected\n      if (selectedWhiteLabels && selectedWhiteLabels.length > 0) {\n        console.log(`[DAILY ACTIONS PAGE] Filtering by white label IDs:`, selectedWhiteLabels);\n        // The backend expects a list of white label IDs\n        filters.whiteLabelIds = selectedWhiteLabels.map(id => parseInt(id));\n      } else {\n        console.log('[DAILY ACTIONS PAGE] No white label filter applied');\n      }\n\n      // Add country filters if any are selected\n      if (selectedCountries && selectedCountries.length > 0) {\n        console.log(`[DAILY ACTIONS PAGE] Filtering by country IDs:`, selectedCountries);\n        // The backend expects a list of country IDs\n        filters.countryIds = selectedCountries;\n      } else {\n        console.log('[DAILY ACTIONS PAGE] No country filter applied');\n      }\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[DAILY ACTIONS PAGE] Adding advanced filters:', advancedFilters);\n\n        // Process date filters\n        if (advancedFilters.registration) {\n          filters.registrationDate = formatDate(advancedFilters.registration, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.firstTimeDeposit) {\n          filters.firstDepositDate = formatDate(advancedFilters.firstTimeDeposit, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastDepositDate) {\n          filters.lastDepositDate = formatDate(advancedFilters.lastDepositDate, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastLogin) {\n          filters.lastLoginDate = formatDate(advancedFilters.lastLogin, 'yyyy-MM-dd');\n        }\n\n        // Process string filters\n        if (advancedFilters.trackers) {\n          filters.trackers = advancedFilters.trackers;\n        }\n        if (advancedFilters.promotionCode) {\n          filters.promotionCode = advancedFilters.promotionCode;\n        }\n        if (advancedFilters.players) {\n          filters.playerIds = advancedFilters.players.split(',').map((id: string) => id.trim());\n        }\n\n        // Process array filters\n        if (advancedFilters.regPlayMode && advancedFilters.regPlayMode.length > 0) {\n          filters.playModes = advancedFilters.regPlayMode;\n        }\n        if (advancedFilters.platform && advancedFilters.platform.length > 0) {\n          filters.platforms = advancedFilters.platform;\n        }\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          filters.statuses = advancedFilters.status;\n        }\n        if (advancedFilters.gender && advancedFilters.gender.length > 0) {\n          filters.genders = advancedFilters.gender;\n        }\n        if (advancedFilters.currency && advancedFilters.currency.length > 0) {\n          filters.currencies = advancedFilters.currency;\n        }\n\n        // Process boolean filters\n        if (advancedFilters.smsEnabled) {\n          filters.smsEnabled = advancedFilters.smsEnabled === 'Yes';\n        }\n        if (advancedFilters.mailEnabled) {\n          filters.mailEnabled = advancedFilters.mailEnabled === 'Yes';\n        }\n        if (advancedFilters.phoneEnabled) {\n          filters.phoneEnabled = advancedFilters.phoneEnabled === 'Yes';\n        }\n        if (advancedFilters.postEnabled) {\n          filters.postEnabled = advancedFilters.postEnabled === 'Yes';\n        }\n        if (advancedFilters.bonusEnabled) {\n          filters.bonusEnabled = advancedFilters.bonusEnabled === 'Yes';\n        }\n      }\n\n      console.log(`[DAILY ACTIONS PAGE] Grouping by: ${groupBy} (backend value: ${filters.groupBy})`);\n\n      // Log a message about the grouping behavior\n      console.log(`[DAILY ACTIONS PAGE] Using grouped view by ${groupBy} - numerical values will be summed`);\n\n      console.log('[DAILY ACTIONS PAGE] Starting data fetch with filters:', filters);\n\n      // Try to get mock data directly first\n      try {\n        console.log('[DAILY ACTIONS PAGE] Checking if mock data is enabled');\n        // Check both the constant and localStorage\n        const useMockData = FEATURES.USE_MOCK_DATA_FOR_UI_TESTING || localStorage.getItem('USE_MOCK_DATA_FOR_UI_TESTING') === 'true';\n\n        if (useMockData) {\n          console.log('[DAILY ACTIONS PAGE] Mock data is enabled, trying to get mock data directly');\n\n          // Import mock data dynamically\n          const mockDataModule = await import('../../../mockData');\n          const mockDataService = mockDataModule.default;\n\n          // Try to get summary data\n          console.log('[DAILY ACTIONS PAGE] Getting mock summary data directly with filters:', filters);\n          const mockSummaryData = mockDataService.getMockData('/reports/daily-actions/summary', filters);\n\n          if (mockSummaryData && mockSummaryData.dailyActions) {\n            console.log('[DAILY ACTIONS PAGE] Got mock summary data directly:', mockSummaryData);\n            console.log('[DAILY ACTIONS PAGE] Daily actions from mock data:', mockSummaryData.dailyActions);\n\n            // Use the mock data\n            setDailyActions(mockSummaryData.dailyActions || []);\n\n            // Set summary metrics\n            const summaryData: Summary = {\n              totalRegistrations: mockSummaryData.totalRegistrations || 0,\n              totalFTD: mockSummaryData.totalFTD || 0,\n              totalDeposits: mockSummaryData.totalDeposits || 0,\n              totalCashouts: mockSummaryData.totalCashouts || 0,\n              totalGGR: mockSummaryData.totalGGR || 0\n            };\n\n            setSummary(summaryData);\n            setLoading(false);\n            return;\n          } else {\n            console.log('[DAILY ACTIONS PAGE] No mock summary data found or no daily actions in the response, trying regular mock data');\n\n            // Try to get regular data\n            const mockRegularData = mockDataService.getMockData('/reports/daily-actions/data', filters);\n\n            if (mockRegularData) {\n              console.log('[DAILY ACTIONS PAGE] Got mock regular data directly:', mockRegularData);\n\n              // Check if we have dailyActions in the response\n              if (mockRegularData.dailyActions && mockRegularData.dailyActions.length > 0) {\n                console.log('[DAILY ACTIONS PAGE] Using dailyActions from mock data:', mockRegularData.dailyActions);\n                setDailyActions(mockRegularData.dailyActions);\n              } else if (mockRegularData.data && mockRegularData.data.length > 0) {\n                // Fall back to data field\n                console.log('[DAILY ACTIONS PAGE] Using data field from mock data:', mockRegularData.data);\n                setDailyActions(mockRegularData.data);\n              } else {\n                // No data found\n                console.log('[DAILY ACTIONS PAGE] No data found in mock response');\n                setDailyActions([]);\n              }\n\n              // Check if we have summary in the response\n              if (mockRegularData.summary) {\n                setSummary(mockRegularData.summary);\n              } else {\n                // Calculate summary metrics from the data\n                const data = mockRegularData.dailyActions || mockRegularData.data || [];\n                const summaryData: Summary = {\n                  totalRegistrations: mockRegularData.totalRegistrations || data.reduce((sum: number, item: DailyAction) => sum + (item.registrations || 0), 0),\n                  totalFTD: mockRegularData.totalFTD || data.reduce((sum: number, item: DailyAction) => sum + (item.ftd || 0), 0),\n                  totalDeposits: mockRegularData.totalDeposits || data.reduce((sum: number, item: DailyAction) => sum + (item.deposits || 0), 0),\n                  totalCashouts: mockRegularData.totalCashouts || data.reduce((sum: number, item: DailyAction) => sum + (item.paidCashouts || 0), 0),\n                  totalGGR: mockRegularData.totalGGR || data.reduce((sum: number, item: DailyAction) => sum + (item.totalGGR || 0), 0)\n                };\n\n                setSummary(summaryData);\n              }\n\n              setLoading(false);\n              return;\n            }\n          }\n        }\n      } catch (mockError) {\n        console.error('[DAILY ACTIONS PAGE] Error getting mock data directly:', mockError);\n      }\n\n      // Always use the filtered-grouped endpoint for consistent behavior\n      try {\n        console.log('[DAILY ACTIONS PAGE] Fetching data with filters:', filters);\n\n        // Always use the filtered-grouped endpoint for all groupBy options\n        console.log('[DAILY ACTIONS PAGE] Using getGroupedData for groupBy:', groupBy);\n\n        // Add more detailed logging for debugging\n        console.log('[DAILY ACTIONS PAGE] Endpoint URL:', '/reports/daily-actions/filtered-grouped');\n        console.log('[DAILY ACTIONS PAGE] Request payload:', JSON.stringify(filters, null, 2));\n\n        // Make the API call\n        const response = await dailyActionsService.getGroupedData(filters);\n\n        // Log the full response for debugging\n        console.log('[DAILY ACTIONS PAGE] Raw response:', JSON.stringify(response, null, 2));\n\n        // Check if the response has the expected structure\n        if (response && response.data) {\n          console.log('[DAILY ACTIONS PAGE] Response data details:', {\n            count: response.data.length,\n            firstItem: response.data[0],\n            groupBy: groupBy,\n            backendGroupBy: filters.groupBy,\n            hasGroupValue: response.data[0]?.groupValue !== undefined,\n            hasGroupKey: response.data[0]?.groupKey !== undefined,\n            groupValues: response.data.map((item: DailyAction) => item.groupValue).filter(Boolean).slice(0, 5),\n            uniqueWhiteLabelNames: Array.from(new Set(response.data.map((item: DailyAction) => item.whiteLabelName))).slice(0, 10)\n          });\n\n          // If we're grouping by Label, check if we have duplicate white label names\n          if (groupBy === 'Label') {\n            const whiteLabelCounts = response.data.reduce((acc: {[key: string]: number}, item: DailyAction) => {\n              const name = item.whiteLabelName || 'Unknown';\n              acc[name] = (acc[name] || 0) + 1;\n              return acc;\n            }, {});\n\n            const duplicates = Object.entries(whiteLabelCounts)\n              .filter(([_, count]) => (count as number) > 1)\n              .map(([name, count]) => `${name} (${count as number})`);\n\n            if (duplicates.length > 0) {\n              console.log('[DAILY ACTIONS PAGE] Found duplicate white label names:', duplicates);\n            }\n          }\n\n          setDailyActions(response.data);\n\n          // Set summary metrics if available in the response\n          if (response.summary) {\n            setSummary(response.summary);\n          } else {\n            // Calculate summary metrics if not provided by the API\n            const summaryData: Summary = {\n              totalRegistrations: response.data.reduce((sum: number, item: DailyAction) => sum + (item.registrations || 0), 0),\n              totalFTD: response.data.reduce((sum: number, item: DailyAction) => sum + (item.ftd || 0), 0),\n              totalDeposits: response.data.reduce((sum: number, item: DailyAction) => sum + (item.deposits || 0), 0),\n              totalCashouts: response.data.reduce((sum: number, item: DailyAction) => sum + (item.paidCashouts || 0), 0),\n              totalGGR: response.data.reduce((sum: number, item: DailyAction) => sum + (item.totalGGR || 0), 0)\n            };\n\n            setSummary(summaryData);\n          }\n        } else {\n          console.error('[DAILY ACTIONS PAGE] Invalid response format:', response);\n          setError('Invalid response format from the server');\n        }\n      } catch (innerErr) {\n        console.error('[DAILY ACTIONS PAGE] Error in inner try block:', innerErr);\n\n        // Check if it's a network error\n        const errorString = String(innerErr);\n        const isNetworkError = errorString.includes('Network error');\n\n        if (isNetworkError) {\n          console.log('[DAILY ACTIONS PAGE] Network error detected, falling back to mock data');\n\n          try {\n            // Import mock data dynamically\n            const mockDataModule = await import('../../../mockData');\n            const mockDataService = mockDataModule.default;\n\n            // Get mock data based on groupBy\n            const mockData = mockDataService.getMockData('/reports/daily-actions/filtered-grouped');\n\n            if (mockData && mockData.data) {\n              console.log('[DAILY ACTIONS PAGE] Using mock data:', mockData);\n              setDailyActions(mockData.data);\n\n              if (mockData.summary) {\n                setSummary(mockData.summary);\n              } else {\n                // Calculate summary metrics\n                const summaryData: Summary = {\n                  totalRegistrations: mockData.data.reduce((sum: number, item: DailyAction) => sum + (item.registrations || 0), 0),\n                  totalFTD: mockData.data.reduce((sum: number, item: DailyAction) => sum + (item.ftd || 0), 0),\n                  totalDeposits: mockData.data.reduce((sum: number, item: DailyAction) => sum + (item.deposits || 0), 0),\n                  totalCashouts: mockData.data.reduce((sum: number, item: DailyAction) => sum + (item.paidCashouts || 0), 0),\n                  totalGGR: mockData.data.reduce((sum: number, item: DailyAction) => sum + (item.totalGGR || 0), 0)\n                };\n\n                setSummary(summaryData);\n              }\n\n              // Show a warning instead of an error\n              setError('Using mock data: API server is not available');\n              return; // Exit early since we've handled the error\n            }\n          } catch (mockErr) {\n            console.error('[DAILY ACTIONS PAGE] Error loading mock data:', mockErr);\n          }\n        }\n\n        throw innerErr; // Re-throw to be caught by the outer catch block\n      }\n    } catch (err) {\n      console.error('[DAILY ACTIONS PAGE] Error fetching daily actions:', err);\n\n      // Provide a more user-friendly error message\n      const errorString = String(err);\n      const errorMessage = errorString.includes('Network error')\n        ? 'Network error: Unable to connect to the API server. Please check your connection or try again later.'\n        : 'Failed to load daily actions data. Please try again later.';\n\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = (): void => {\n    console.log('[DAILY ACTIONS PAGE] Apply filters button clicked');\n\n    // Combine basic filters with advanced filters if they exist\n    const combinedFilters = {\n      startDate: formatDate(startDate, 'yyyy-MM-dd'),\n      endDate: formatDate(endDate, 'yyyy-MM-dd'),\n      selectedWhiteLabels,\n      selectedCountries,\n      ...advancedFilters\n    };\n\n    console.log('[DAILY ACTIONS PAGE] Current filters:', combinedFilters);\n    fetchDailyActions();\n  };\n\n  // Handle white labels change\n  const handleWhiteLabelsChange = (values: (string | number)[]): void => {\n    console.log(`[DAILY ACTIONS PAGE] White labels changed to:`, values);\n    // Convert all values to strings to ensure consistent handling\n    const stringValues = values.map(v => v.toString());\n    setSelectedWhiteLabels(stringValues);\n\n    // Log the updated state for debugging\n    console.log(`[DAILY ACTIONS PAGE] Updated selectedWhiteLabels:`, stringValues);\n  };\n\n  // Handle countries change\n  const handleCountriesChange = (values: (string | number)[]): void => {\n    console.log(`[DAILY ACTIONS PAGE] Countries changed to:`, values);\n    // Convert all values to strings to ensure consistent handling\n    const stringValues = values.map(v => v.toString());\n    setSelectedCountries(stringValues);\n\n    // Log the updated state for debugging\n    console.log(`[DAILY ACTIONS PAGE] Updated selectedCountries:`, stringValues);\n  };\n\n  // Handle group by change\n  const handleGroupByChange = (event: SelectChangeEvent): void => {\n    console.log(`[DAILY ACTIONS PAGE] Group by changed to: ${event.target.value}`);\n    setGroupBy(event.target.value);\n  };\n\n  // Handle export button click\n  const handleExport = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      console.log('[DAILY ACTIONS PAGE] Exporting data with filters:', {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        selectedWhiteLabels,\n        selectedCountries,\n        groupBy\n      });\n\n      // Create filters object\n      const filters: ReportFilters = {\n        startDate: formatDate(startDate, 'yyyy-MM-dd'),\n        endDate: formatDate(endDate, 'yyyy-MM-dd'),\n        whiteLabelIds: selectedWhiteLabels.length > 0 ? selectedWhiteLabels.map(id => parseInt(id)) : undefined,\n        countryIds: selectedCountries.length > 0 ? selectedCountries : undefined,\n        groupBy: convertGroupByToBackendValue(groupBy)\n      };\n\n      // Add advanced filters if they exist\n      if (Object.keys(advancedFilters).length > 0) {\n        console.log('[DAILY ACTIONS PAGE] Adding advanced filters to export:', advancedFilters);\n\n        // Process date filters\n        if (advancedFilters.registration) {\n          filters.registrationDate = formatDate(advancedFilters.registration, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.firstTimeDeposit) {\n          filters.firstDepositDate = formatDate(advancedFilters.firstTimeDeposit, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastDepositDate) {\n          filters.lastDepositDate = formatDate(advancedFilters.lastDepositDate, 'yyyy-MM-dd');\n        }\n        if (advancedFilters.lastLogin) {\n          filters.lastLoginDate = formatDate(advancedFilters.lastLogin, 'yyyy-MM-dd');\n        }\n\n        // Process string filters\n        if (advancedFilters.trackers) {\n          filters.trackers = advancedFilters.trackers;\n        }\n        if (advancedFilters.promotionCode) {\n          filters.promotionCode = advancedFilters.promotionCode;\n        }\n        if (advancedFilters.players) {\n          filters.playerIds = advancedFilters.players.split(',').map((id: string) => id.trim());\n        }\n\n        // Process array filters\n        if (advancedFilters.regPlayMode && advancedFilters.regPlayMode.length > 0) {\n          filters.playModes = advancedFilters.regPlayMode;\n        }\n        if (advancedFilters.platform && advancedFilters.platform.length > 0) {\n          filters.platforms = advancedFilters.platform;\n        }\n        if (advancedFilters.status && advancedFilters.status.length > 0) {\n          filters.statuses = advancedFilters.status;\n        }\n        if (advancedFilters.gender && advancedFilters.gender.length > 0) {\n          filters.genders = advancedFilters.gender;\n        }\n        if (advancedFilters.currency && advancedFilters.currency.length > 0) {\n          filters.currencies = advancedFilters.currency;\n        }\n\n        // Process boolean filters\n        if (advancedFilters.smsEnabled) {\n          filters.smsEnabled = advancedFilters.smsEnabled === 'Yes';\n        }\n        if (advancedFilters.mailEnabled) {\n          filters.mailEnabled = advancedFilters.mailEnabled === 'Yes';\n        }\n        if (advancedFilters.phoneEnabled) {\n          filters.phoneEnabled = advancedFilters.phoneEnabled === 'Yes';\n        }\n        if (advancedFilters.postEnabled) {\n          filters.postEnabled = advancedFilters.postEnabled === 'Yes';\n        }\n        if (advancedFilters.bonusEnabled) {\n          filters.bonusEnabled = advancedFilters.bonusEnabled === 'Yes';\n        }\n      }\n\n      // Export the data\n      const blob = await dailyActionsService.exportFilteredReport(filters, 'csv');\n\n      // Create a download link\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `DailyActions_${formatDate(startDate, 'yyyyMMdd')}_${formatDate(endDate, 'yyyyMMdd')}_${groupBy}.csv`;\n      document.body.appendChild(a);\n      a.click();\n\n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('[DAILY ACTIONS PAGE] Error exporting data:', error);\n      setError('Failed to export data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format currency values\n  const formatCurrency = (value: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(value);\n  };\n\n  // Removed sorting and pagination handlers as they'll be handled by UnifiedDataTable\n\n  // Removed getSortedData function as sorting will be handled by UnifiedDataTable\n\n  // Handle advanced filter toggle\n  const handleToggleAdvancedFilters = (): void => {\n    setShowAdvancedFilters(!showAdvancedFilters);\n  };\n\n  // Handle advanced filter change\n  const handleAdvancedFilterChange = (id: string, value: any): void => {\n    setAdvancedFilters({\n      ...advancedFilters,\n      [id]: value\n    });\n  };\n\n  // Handle advanced filter apply\n  const handleApplyAdvancedFilters = (): void => {\n    // Combine basic filters from the form with advanced filters\n    const combinedFilters = {\n      startDate,\n      endDate,\n      groupBy,\n      selectedWhiteLabels,\n      selectedCountries,\n      ...advancedFilters\n    };\n\n    console.log('[DAILY ACTIONS PAGE] Applying advanced filters:', combinedFilters);\n    fetchDailyActions();\n  };\n\n  // Handle advanced filter reset\n  const handleResetAdvancedFilters = (): void => {\n    setAdvancedFilters({});\n  };\n\n  // Handle export dialog\n  const handleOpenExportDialog = (): void => {\n    setShowExportDialog(true);\n  };\n\n  // Handle export dialog close\n  const handleCloseExportDialog = (): void => {\n    setShowExportDialog(false);\n  };\n\n  // Handle export\n  const handleExportData = (exportData: any): void => {\n    console.log('[DAILY ACTIONS PAGE] Exporting data with options:', exportData);\n    handleExport();\n    setShowExportDialog(false);\n  };\n\n  // Handle column selector dialog\n  const handleOpenColumnSelector = (): void => {\n    setShowColumnSelector(true);\n  };\n\n  // Handle column selector dialog close\n  const handleCloseColumnSelector = (): void => {\n    setShowColumnSelector(false);\n  };\n\n  // Handle column visibility change\n  const handleColumnVisibilityChange = (columnId: string): void => {\n    const currentVisibleColumns = [...visibleColumns];\n    const columnIndex = currentVisibleColumns.indexOf(columnId);\n\n    if (columnIndex === -1) {\n      // Add column\n      currentVisibleColumns.push(columnId);\n    } else {\n      // Remove column\n      currentVisibleColumns.splice(columnIndex, 1);\n    }\n\n    setVisibleColumns(currentVisibleColumns);\n  };\n\n  // Convert frontend groupBy string to backend GroupByOption enum value\n  const convertGroupByToBackendValue = (groupByString: string): number => {\n    // Import the mapping from the service to ensure consistency\n    // Day=0, Month=1, Year=2, Label=3, Country=4, Tracker=5, Currency=6, Gender=7, Platform=8, Ranking=9, Player=10\n    const groupByMapping: { [key: string]: number } = {\n      'Day': 0,\n      'Month': 1,\n      'Year': 2,\n      'Label': 3,\n      'Country': 4,\n      'Tracker': 5,\n      'Currency': 6,\n      'Gender': 7,\n      'Platform': 8,\n      'Ranking': 9,\n      'Player': 10\n    };\n\n    return groupByMapping[groupByString] || 0; // Default to Day (0) if not found\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom>\n            Daily Actions Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze daily player activities, deposits, and gaming revenue\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={RouterLink}\n          to=\"/reports/daily-actions/advanced\"\n          startIcon={<FilterListIcon />}\n        >\n          Advanced Report\n        </Button>\n      </Box>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <FilterListIcon sx={{ mr: 1 }} />\n            <Typography variant=\"h6\">Filters</Typography>\n          </Box>\n          <Button\n            color=\"primary\"\n            onClick={handleToggleAdvancedFilters}\n            endIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          >\n            {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}\n          </Button>\n        </Box>\n\n        {/* Basic Filters */}\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"White Labels\"\n              options={whiteLabelsOptions}\n              value={selectedWhiteLabels}\n              onChange={handleWhiteLabelsChange}\n              placeholder=\"Select White Labels\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <MultiSelect\n              label=\"Countries\"\n              options={countriesOptions}\n              value={selectedCountries}\n              onChange={handleCountriesChange}\n              placeholder=\"Select Countries\"\n              searchable\n              showSelectAllOption\n              width=\"100%\"\n              sx={{\n                width: '100%',\n                '& .MuiOutlinedInput-root': {\n                  width: '100%',\n                  height: '56px'  // Match the height of other inputs\n                },\n                '& .MuiSelect-select': {\n                  height: '56px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth>\n              <InputLabel>Group By</InputLabel>\n              <Select\n                value={groupBy}\n                onChange={handleGroupByChange}\n                label=\"Group By\"\n                sx={{\n                  fontWeight: 'bold',\n                  '& .MuiSelect-select': {\n                    color: 'primary.main'\n                  }\n                }}\n              >\n                {groupByOptions.map((option) => (\n                  <MenuItem\n                    key={option.id}\n                    value={option.id}\n                    sx={{\n                      fontWeight: 'bold',\n                      color: 'primary.main'\n                    }}\n                  >\n                    {option.name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <Typography variant=\"caption\" color=\"primary\" sx={{ display: 'block', mt: 1 }}>\n              Data is grouped by {groupByOptions.find(option => option.id === groupBy)?.name.toLowerCase() || groupBy.toLowerCase()}, with numerical values summed.\n            </Typography>\n          </Grid>\n        </Grid>\n\n        {/* Advanced Filters */}\n        <Collapse in={showAdvancedFilters} timeout=\"auto\" unmountOnExit>\n          <Box sx={{ mt: 3 }}>\n            <Divider sx={{ mb: 3 }} />\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Advanced Filters\n            </Typography>\n\n            <Grid container spacing={3}>\n              {/* Player Information */}\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Player Information\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Trackers\"\n                  fullWidth\n                  value={advancedFilters.trackers || ''}\n                  onChange={(e) => handleAdvancedFilterChange('trackers', e.target.value)}\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Promotion Code\"\n                  fullWidth\n                  value={advancedFilters.promotionCode || ''}\n                  onChange={(e) => handleAdvancedFilterChange('promotionCode', e.target.value)}\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Reg Play Mode</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.regPlayMode || []}\n                    onChange={(e) => handleAdvancedFilterChange('regPlayMode', e.target.value)}\n                    label=\"Reg Play Mode\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['Casino', 'Sport', 'Live', 'Bingo'].map((mode) => (\n                      <MenuItem key={mode} value={mode}>\n                        {mode}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Platform</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.platform || []}\n                    onChange={(e) => handleAdvancedFilterChange('platform', e.target.value)}\n                    label=\"Platform\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['Mobile', 'Web'].map((platform) => (\n                      <MenuItem key={platform} value={platform}>\n                        {platform}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Player Status */}\n              <Grid item xs={12} sx={{ mt: 2 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Player Status\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Status</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.status || []}\n                    onChange={(e) => handleAdvancedFilterChange('status', e.target.value)}\n                    label=\"Status\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['Active', 'Blocked', 'Inactive'].map((status) => (\n                      <MenuItem key={status} value={status}>\n                        {status}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Gender</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.gender || []}\n                    onChange={(e) => handleAdvancedFilterChange('gender', e.target.value)}\n                    label=\"Gender\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['Male', 'Female'].map((gender) => (\n                      <MenuItem key={gender} value={gender}>\n                        {gender}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Currency</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.currency || []}\n                    onChange={(e) => handleAdvancedFilterChange('currency', e.target.value)}\n                    label=\"Currency\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['AUD', 'CAD', 'EUR', 'GBP', 'NZD'].map((currency) => (\n                      <MenuItem key={currency} value={currency}>\n                        {currency}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <FormControl fullWidth>\n                  <InputLabel>Players Type</InputLabel>\n                  <Select\n                    multiple\n                    value={advancedFilters.playersType || []}\n                    onChange={(e) => handleAdvancedFilterChange('playersType', e.target.value)}\n                    label=\"Players Type\"\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as string[]).map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                  >\n                    {['Real', 'Fun'].map((type) => (\n                      <MenuItem key={type} value={type}>\n                        {type}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Date Filters */}\n              <Grid item xs={12} sx={{ mt: 2 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Date Filters\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Registration Date\"\n                    value={advancedFilters.registration || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('registration', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"First Time Deposit\"\n                    value={advancedFilters.firstTimeDeposit || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('firstTimeDeposit', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Last Deposit Date\"\n                    value={advancedFilters.lastDepositDate || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('lastDepositDate', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    label=\"Last Login\"\n                    value={advancedFilters.lastLogin || null}\n                    onChange={(newValue) => handleAdvancedFilterChange('lastLogin', newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </LocalizationProvider>\n              </Grid>\n\n              {/* Communication Preferences */}\n              <Grid item xs={12} sx={{ mt: 2 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Communication Preferences\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>SMS Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.smsEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('smsEnabled', e.target.value)}\n                    label=\"SMS Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>Mail Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.mailEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('mailEnabled', e.target.value)}\n                    label=\"Mail Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>Phone Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.phoneEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('phoneEnabled', e.target.value)}\n                    label=\"Phone Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>Post Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.postEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('postEnabled', e.target.value)}\n                    label=\"Post Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={2}>\n                <FormControl fullWidth>\n                  <InputLabel>Bonus Enabled</InputLabel>\n                  <Select\n                    value={advancedFilters.bonusEnabled || ''}\n                    onChange={(e) => handleAdvancedFilterChange('bonusEnabled', e.target.value)}\n                    label=\"Bonus Enabled\"\n                  >\n                    <MenuItem value=\"\"><em>Any</em></MenuItem>\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\n                    <MenuItem value=\"No\">No</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {/* Players Input */}\n              <Grid item xs={12} sx={{ mt: 2 }}>\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n                  Specific Players\n                </Typography>\n                <TextField\n                  label=\"Players\"\n                  placeholder=\"Enter player IDs or usernames (comma separated)\"\n                  fullWidth\n                  multiline\n                  rows={3}\n                  value={advancedFilters.players || ''}\n                  onChange={(e) => handleAdvancedFilterChange('players', e.target.value)}\n                  helperText=\"Enter multiple player IDs or usernames separated by commas\"\n                />\n              </Grid>\n            </Grid>\n\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleResetAdvancedFilters}\n                sx={{ mr: 2 }}\n              >\n                Reset Advanced Filters\n              </Button>\n            </Box>\n          </Box>\n        </Collapse>\n\n        {/* Action Buttons */}\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', mt: 3 }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<RefreshIcon />}\n            onClick={handleApplyFilters}\n            sx={{ mr: 2 }}\n          >\n            Apply Filters\n          </Button>\n\n          <span>\n            <Button\n              variant=\"outlined\"\n              startIcon={<DownloadIcon />}\n              disabled={loading || dailyActions.length === 0}\n              onClick={handleExport}\n            >\n              Export\n            </Button>\n          </span>\n        </Box>\n      </Paper>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Registrations\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalRegistrations.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                First Time Depositors\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalFTD.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Deposits\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalDeposits)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Cashouts\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalCashouts)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total GGR\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalGGR)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Data Table */}\n      <Paper sx={{ p: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <TableChartIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Daily Actions Data</Typography>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : dailyActions.length === 0 ? (\n          <Alert severity=\"info\">\n            No data available for the selected filters. Try adjusting your filters or click \"Apply Filters\" to load data.\n          </Alert>\n        ) : (\n          <EnhancedTable\n            data={dailyActions}\n            columns={[\n              {\n                id: 'groupValue',\n                label: groupByOptions.find(option => option.id === groupBy)?.name || groupBy,\n                format: (value: any, row: DailyAction) => {\n                  return row.groupValue ? row.groupValue :\n                    groupBy === 'Day' && row.date ? formatDate(new Date(row.date), 'MMM dd, yyyy') :\n                    groupBy === 'Month' && row.date ? formatDate(new Date(row.date), 'MMMM yyyy') :\n                    groupBy === 'Year' && row.date ? formatDate(new Date(row.date), 'yyyy') :\n                    groupBy === 'Label' ? row.whiteLabelName :\n                    groupBy === 'Country' && row.country ? row.country :\n                    groupBy === 'Tracker' && row.tracker ? row.tracker :\n                    groupBy === 'Currency' && row.currency ? row.currency :\n                    groupBy === 'Gender' && row.gender ? row.gender :\n                    groupBy === 'Platform' && row.platform ? row.platform :\n                    groupBy === 'Ranking' && row.ranking ? row.ranking :\n                    row[groupBy.toLowerCase() as keyof DailyAction] || 'N/A';\n                }\n              },\n              {\n                id: 'registrations',\n                label: 'Registrations',\n                align: 'right',\n                type: 'number'\n              },\n              {\n                id: 'ftd',\n                label: 'FTD',\n                align: 'right',\n                type: 'number'\n              },\n              {\n                id: 'deposits',\n                label: 'Deposits',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'paidCashouts',\n                label: 'Cashouts',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'ggrCasino',\n                label: 'Casino GGR',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'ggrSport',\n                label: 'Sports GGR',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'ggrLive',\n                label: 'Live GGR',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              },\n              {\n                id: 'totalGGR',\n                label: 'Total GGR',\n                align: 'right',\n                type: 'currency',\n                format: (value: number) => formatCurrency(value)\n              }\n            ]}\n            title=\"Daily Actions Data\"\n            loading={loading}\n            onRefresh={handleApplyFilters}\n            onExport={handleExport}\n            features={{\n              sorting: true,\n              filtering: true,\n              pagination: true,\n              export: true\n            }}\n            emptyMessage=\"No data available for the selected filters. Try adjusting your filters or click 'Apply Filters' to load data.\"\n            sx={{ maxHeight: '600px', overflow: 'auto' }}\n            idField=\"id\"\n            // Enhanced features\n            enableColumnSelection={true}\n            enableAdvancedFiltering={true}\n            enableExportOptions={true}\n            enableColumnReordering={true}\n            enableRowGrouping={true}\n            enableSummaryRow={true}\n            enableExpandableRows={true}\n            enableKeyboardNavigation={true}\n            enableStickyColumns={true}\n            enableResponsiveDesign={true}\n            enableDrillDown={true}\n            filterDefinitions={[\n              {\n                id: 'minRegistrations',\n                label: 'Min Registrations',\n                type: FilterType.NUMBER,\n                min: 0\n              },\n              {\n                id: 'maxRegistrations',\n                label: 'Max Registrations',\n                type: FilterType.NUMBER,\n                min: 0\n              },\n              {\n                id: 'minGGR',\n                label: 'Min GGR',\n                type: FilterType.NUMBER,\n                min: 0\n              },\n              {\n                id: 'maxGGR',\n                label: 'Max GGR',\n                type: FilterType.NUMBER,\n                min: 0\n              }\n            ]}\n            groupableColumns={[\n              'whiteLabelName',\n              'country',\n              'tracker',\n              'currency',\n              'gender',\n              'platform',\n              'ranking'\n            ]}\n            stickyColumnIds={['groupValue']}\n            drillDownConfig={[\n              {\n                sourceGrouping: 'Month',\n                targetGrouping: 'Day',\n                label: 'View by Day',\n                transformFilter: (row: any) => ({\n                  startDate: row.date ? formatDate(new Date(row.date), 'yyyy-MM-01') : '',\n                  endDate: row.date ? formatDate(new Date(row.date), 'yyyy-MM-dd') : '',\n                  groupBy: 'Day'\n                })\n              },\n              {\n                sourceGrouping: 'Label',\n                targetGrouping: 'Player',\n                label: 'View Players',\n                transformFilter: (row: any) => ({\n                  whiteLabelId: row.whiteLabelId || '',\n                  groupBy: 'Player'\n                })\n              }\n            ]}\n            aggregations={[\n              { columnId: 'registrations', function: 'sum', label: 'Total Registrations' },\n              { columnId: 'registrations', function: 'avg', label: 'Avg Registrations' },\n              { columnId: 'ftd', function: 'sum', label: 'Total FTD' },\n              { columnId: 'ftd', function: 'avg', label: 'Avg FTD' },\n              { columnId: 'deposits', function: 'sum', label: 'Total Deposits' },\n              { columnId: 'paidCashouts', function: 'sum', label: 'Total Cashouts' },\n              { columnId: 'totalGGR', function: 'sum', label: 'Total GGR' },\n              { columnId: 'totalGGR', function: 'avg', label: 'Avg GGR' }\n            ]}\n            renderRowDetail={(row: DailyAction) => (\n              <Box sx={{ p: 2 }}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Details for {groupBy === 'Day' || groupBy === 'Month' || groupBy === 'Year' ?\n                    formatDate(new Date(row.date), 'MMM dd, yyyy') :\n                    row.groupValue || 'Selected Item'}\n                </Typography>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"body2\">\n                      <strong>Registrations:</strong> {row.registrations}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>FTD:</strong> {row.ftd}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Deposits:</strong> {formatCurrency(row.deposits)}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Cashouts:</strong> {formatCurrency(row.paidCashouts)}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"body2\">\n                      <strong>Casino GGR:</strong> {formatCurrency(row.ggrCasino)}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Sports GGR:</strong> {formatCurrency(row.ggrSport)}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Live GGR:</strong> {formatCurrency(row.ggrLive)}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Total GGR:</strong> {formatCurrency(row.totalGGR)}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            )}\n            onExportFormat={(format: string) => {\n              console.log(`[DAILY ACTIONS PAGE] Exporting in format: ${format}`);\n              handleExport();\n            }}\n            onApplyAdvancedFilters={(filters: Record<string, any>) => {\n              console.log('[DAILY ACTIONS PAGE] Applying advanced filters:', filters);\n              setAdvancedFilters(filters);\n              handleApplyAdvancedFilters();\n            }}\n            onColumnOrderChange={(columns: Array<{id: string}>) => {\n              console.log('[DAILY ACTIONS PAGE] Column order changed:', columns.map(col => col.id));\n            }}\n            onGroupingChange={(groupBy: string | null) => {\n              console.log('[DAILY ACTIONS PAGE] Grouping changed to:', groupBy);\n            }}\n            onRowExpand={(rowId: string, expanded: boolean) => {\n              console.log(`[DAILY ACTIONS PAGE] Row ${rowId} ${expanded ? 'expanded' : 'collapsed'}`);\n            }}\n            onDrillDown={(row: any, sourceGrouping: string, targetGrouping: string, filters: Record<string, any>) => {\n              console.log(`[DAILY ACTIONS PAGE] Drill down from ${sourceGrouping} to ${targetGrouping}`, filters);\n\n              // Update filters based on drill-down\n              if (filters.groupBy) {\n                setGroupBy(filters.groupBy);\n              }\n\n              if (filters.startDate) {\n                setStartDate(filters.startDate);\n              }\n\n              if (filters.endDate) {\n                setEndDate(filters.endDate);\n              }\n\n              if (filters.whiteLabelId) {\n                // Convert to array if it's a single value\n                const whiteLabelIds = Array.isArray(filters.whiteLabelId)\n                  ? filters.whiteLabelId.map(id => id.toString())\n                  : [filters.whiteLabelId.toString()];\n                setSelectedWhiteLabels(whiteLabelIds);\n              }\n\n              // Apply the new filters\n              handleApplyFilters();\n            }}\n          />\n        )}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default DailyActionsPage;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Chip,\n  Divider,\n  FormControl,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Typography,\n  Collapse,\n  Tooltip,\n  Grid,\n  SelectChangeEvent\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport SaveIcon from '@mui/icons-material/Save';\nimport { CommonProps } from '../../types/common';\n\n// Filter type enum\nexport enum FilterType {\n  TEXT = 'text',\n  SELECT = 'select',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  NUMBER = 'number',\n  RANGE = 'range'\n}\n\n// Filter option interface\nexport interface FilterOption {\n  value: string | number;\n  label: string;\n}\n\n// Filter definition interface\nexport interface FilterDefinition {\n  id: string;\n  label: string;\n  type: FilterType | string;\n  options?: FilterOption[];\n  defaultValue?: any;\n  placeholder?: string;\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\n// Component props interface\nexport interface FilterPanelProps extends CommonProps {\n  title?: string;\n  filters: FilterDefinition[];\n  values: Record<string, any>;\n  onChange: (id: string, value: any) => void;\n  onApply?: () => void;\n  onReset?: () => void;\n  onFilterSave?: () => void;\n  expanded?: boolean;\n  defaultExpanded?: boolean;\n}\n\n/**\n * FilterPanel component for filtering data in reports and dashboards\n */\nconst FilterPanel: React.FC<FilterPanelProps> = ({\n  title = 'Filters',\n  filters = [],\n  values = {},\n  onChange,\n  onApply,\n  onReset,\n  onFilterSave,\n  expanded: controlledExpanded,\n  defaultExpanded = true,\n  sx\n}) => {\n  // State for uncontrolled expansion\n  const [internalExpanded, setInternalExpanded] = useState<boolean>(defaultExpanded);\n  \n  // Determine if component is controlled or uncontrolled\n  const isControlled = controlledExpanded !== undefined;\n  const expanded = isControlled ? controlledExpanded : internalExpanded;\n  \n  // Get active filters count\n  const activeFilters = Object.keys(values).filter(key => {\n    const value = values[key];\n    return value !== undefined && value !== null && value !== '';\n  });\n  \n  // Toggle expansion state\n  const toggleExpand = (): void => {\n    if (!isControlled) {\n      setInternalExpanded(!internalExpanded);\n    }\n  };\n  \n  // Handle filter change\n  const handleFilterChange = (id: string, value: any): void => {\n    if (onChange) {\n      onChange(id, value);\n    }\n  };\n  \n  // Handle apply filters\n  const handleApplyFilters = (): void => {\n    if (onApply) {\n      onApply();\n    }\n  };\n  \n  // Handle reset filters\n  const handleResetFilters = (): void => {\n    if (onReset) {\n      onReset();\n    }\n  };\n  \n  // Handle save filters\n  const handleSaveFilters = (): void => {\n    if (onFilterSave) {\n      onFilterSave();\n    }\n  };\n  \n  // Render filter input based on type\n  const renderFilterInput = (filter: FilterDefinition): React.ReactNode => {\n    const value = values[filter.id] !== undefined ? values[filter.id] : filter.defaultValue || '';\n    \n    switch (filter.type) {\n      case FilterType.SELECT:\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel id={`filter-${filter.id}-label`}>{filter.label}</InputLabel>\n            <Select\n              labelId={`filter-${filter.id}-label`}\n              id={`filter-${filter.id}`}\n              value={value}\n              label={filter.label}\n              onChange={(e: SelectChangeEvent<any>) => handleFilterChange(filter.id, e.target.value)}\n            >\n              <MenuItem value=\"\">\n                <em>Any</em>\n              </MenuItem>\n              {filter.options?.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n      \n      case FilterType.DATE:\n        return (\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <DatePicker\n              label={filter.label}\n              value={value || null}\n              onChange={(newValue) => handleFilterChange(filter.id, newValue)}\n              slotProps={{ textField: { size: 'small', fullWidth: true } }}\n            />\n          </LocalizationProvider>\n        );\n      \n      case FilterType.BOOLEAN:\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel id={`filter-${filter.id}-label`}>{filter.label}</InputLabel>\n            <Select\n              labelId={`filter-${filter.id}-label`}\n              id={`filter-${filter.id}`}\n              value={value}\n              label={filter.label}\n              onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            >\n              <MenuItem value=\"\">\n                <em>Any</em>\n              </MenuItem>\n              <MenuItem value=\"true\">Yes</MenuItem>\n              <MenuItem value=\"false\">No</MenuItem>\n            </Select>\n          </FormControl>\n        );\n      \n      case FilterType.NUMBER:\n        return (\n          <TextField\n            fullWidth\n            label={filter.label}\n            type=\"number\"\n            value={value}\n            onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            size=\"small\"\n            inputProps={{\n              min: filter.min,\n              max: filter.max,\n              step: filter.step || 1\n            }}\n          />\n        );\n      \n      case FilterType.RANGE:\n        // Range filter would be implemented here\n        return (\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <TextField\n              label={`Min ${filter.label}`}\n              type=\"number\"\n              value={value?.min || ''}\n              onChange={(e) => handleFilterChange(filter.id, { ...value, min: e.target.value })}\n              size=\"small\"\n              sx={{ flex: 1 }}\n            />\n            <TextField\n              label={`Max ${filter.label}`}\n              type=\"number\"\n              value={value?.max || ''}\n              onChange={(e) => handleFilterChange(filter.id, { ...value, max: e.target.value })}\n              size=\"small\"\n              sx={{ flex: 1 }}\n            />\n          </Box>\n        );\n      \n      // Default to text input\n      default:\n        return (\n          <TextField\n            fullWidth\n            label={filter.label}\n            value={value}\n            onChange={(e) => handleFilterChange(filter.id, e.target.value)}\n            size=\"small\"\n            placeholder={filter.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <Paper variant=\"outlined\" sx={{ mb: 2, ...sx }}>\n      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <FilterListIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\" component=\"div\">\n            {title}\n          </Typography>\n          \n          {activeFilters.length > 0 && (\n            <Chip\n              label={`${activeFilters.length} active`}\n              color=\"primary\"\n              size=\"small\"\n              sx={{ ml: 1 }}\n            />\n          )}\n        </Box>\n        \n        <Box>\n          <IconButton onClick={toggleExpand} size=\"small\">\n            {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          </IconButton>\n        </Box>\n      </Box>\n      \n      <Collapse in={expanded}>\n        <Divider />\n        \n        <Box sx={{ p: 2 }}>\n          <Grid container spacing={2}>\n            {filters.map((filter) => (\n              <Grid item xs={12} sm={6} md={4} key={filter.id}>\n                {renderFilterInput(filter)}\n              </Grid>\n            ))}\n          </Grid>\n          \n          {activeFilters.length > 0 && (\n            <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                Active filters:\n              </Typography>\n              \n              {activeFilters.map((key) => {\n                const filter = filters.find(f => f.id === key);\n                let displayValue = values[key];\n                \n                if (filter?.type === FilterType.SELECT && filter.options) {\n                  const option = filter.options.find(o => o.value === displayValue);\n                  displayValue = option ? option.label : displayValue;\n                }\n                \n                if (filter?.type === FilterType.BOOLEAN) {\n                  displayValue = displayValue === 'true' ? 'Yes' : 'No';\n                }\n                \n                if (filter?.type === FilterType.DATE && displayValue instanceof Date) {\n                  displayValue = displayValue.toLocaleDateString();\n                }\n                \n                return (\n                  <Chip\n                    key={key}\n                    label={`${filter?.label || key}: ${displayValue}`}\n                    onDelete={() => handleFilterChange(key, '')}\n                    size=\"small\"\n                  />\n                );\n              })}\n              \n              <Chip\n                label=\"Clear All\"\n                onDelete={handleResetFilters}\n                deleteIcon={<ClearIcon />}\n                size=\"small\"\n                color=\"secondary\"\n              />\n            </Box>\n          )}\n        </Box>\n        \n        <Divider />\n        \n        <Box sx={{ p: 2, display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\n          <Button variant=\"outlined\" onClick={handleResetFilters} startIcon={<ClearIcon />}>\n            Reset\n          </Button>\n          \n          {onFilterSave && (\n            <Tooltip title=\"Save these filters\">\n              <Button \n                variant=\"outlined\" \n                color=\"secondary\" \n                onClick={handleSaveFilters}\n                startIcon={<SaveIcon />}\n              >\n                Save\n              </Button>\n            </Tooltip>\n          )}\n          \n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onClick={handleApplyFilters}\n            startIcon={<FilterListIcon />}\n          >\n            Apply Filters\n          </Button>\n        </Box>\n      </Collapse>\n    </Paper>\n  );\n};\n\nexport default FilterPanel;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z\"\n}), 'Download');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3m3-10H5V5h10z\"\n}), 'Save');"],"names":["subDays","dirtyDate","dirtyAmount","requiredArgs","arguments","amount","toInteger","addDays","DailyActionsPage","_groupByOptions$find","_groupByOptions$find2","startDate","setStartDate","useState","Date","endDate","setEndDate","selectedWhiteLabels","setSelectedWhiteLabels","whiteLabels","setWhiteLabels","whiteLabelsOptions","setWhiteLabelsOptions","selectedCountries","setSelectedCountries","countries","setCountries","countriesOptions","setCountriesOptions","groupBy","setGroupBy","groupByOptions","setGroupByOptions","id","name","dailyActions","setDailyActions","loading","setLoading","error","setError","showAdvancedFilters","setShowAdvancedFilters","showExportDialog","setShowExportDialog","showColumnSelector","setShowColumnSelector","visibleColumns","setVisibleColumns","advancedFilters","setAdvancedFilters","summary","setSummary","totalRegistrations","totalFTD","totalDeposits","totalCashouts","totalGGR","useEffect","async","console","log","FEATURES","USE_MOCK_DATA_FOR_UI_TESTING","localStorage","getItem","mockDataModule","mockMetadata","default","getMockData","options","map","wl","value","label","countryOptions","country","data","dailyActionsService","getMetadata","fetchedWhiteLabels","fetchedCountries","err","fetchMetadata","timer","setTimeout","fetchDailyActions","fetchInitialData","clearTimeout","formattedStartDate","formatDate","filters","convertGroupByToBackendValue","length","whiteLabelIds","parseInt","countryIds","Object","keys","registration","registrationDate","firstTimeDeposit","firstDepositDate","lastDepositDate","lastLogin","lastLoginDate","trackers","promotionCode","players","playerIds","split","trim","regPlayMode","playModes","platform","platforms","status","statuses","gender","genders","currency","currencies","smsEnabled","mailEnabled","phoneEnabled","postEnabled","bonusEnabled","mockDataService","mockSummaryData","summaryData","mockRegularData","reduce","sum","item","registrations","ftd","deposits","paidCashouts","mockError","JSON","stringify","response","getGroupedData","_response$data$","_response$data$2","count","firstItem","backendGroupBy","hasGroupValue","undefined","groupValue","hasGroupKey","groupKey","groupValues","filter","Boolean","slice","uniqueWhiteLabelNames","Array","from","Set","whiteLabelName","whiteLabelCounts","acc","duplicates","entries","_ref","_","_ref2","innerErr","errorString","String","includes","mockData","mockErr","errorMessage","handleApplyFilters","combinedFilters","handleExport","blob","exportFilteredReport","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","formatCurrency","Intl","NumberFormat","style","minimumFractionDigits","format","handleAdvancedFilterChange","groupByString","_jsxs","Container","maxWidth","children","Box","sx","mb","display","justifyContent","alignItems","_jsx","Typography","variant","gutterBottom","color","Button","component","RouterLink","to","startIcon","FilterListIcon","Paper","p","mr","onClick","handleToggleAdvancedFilters","endIcon","ExpandLessIcon","ExpandMoreIcon","Grid","container","spacing","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","onChange","newValue","slotProps","textField","fullWidth","MultiSelect","values","stringValues","v","toString","placeholder","searchable","showSelectAllOption","width","height","FormControl","InputLabel","Select","event","target","fontWeight","option","MenuItem","mt","find","toLowerCase","Collapse","in","timeout","unmountOnExit","Divider","TextField","e","multiple","renderValue","selected","flexWrap","gap","Chip","size","mode","playersType","type","multiline","rows","helperText","handleResetAdvancedFilters","RefreshIcon","DownloadIcon","disabled","sm","Card","CardContent","toLocaleString","TableChartIcon","Alert","severity","CircularProgress","EnhancedTable","columns","row","date","tracker","ranking","align","title","onRefresh","onExport","features","sorting","filtering","pagination","export","emptyMessage","maxHeight","overflow","idField","enableColumnSelection","enableAdvancedFiltering","enableExportOptions","enableColumnReordering","enableRowGrouping","enableSummaryRow","enableExpandableRows","enableKeyboardNavigation","enableStickyColumns","enableResponsiveDesign","enableDrillDown","filterDefinitions","FilterType","NUMBER","min","groupableColumns","stickyColumnIds","drillDownConfig","sourceGrouping","targetGrouping","transformFilter","whiteLabelId","aggregations","columnId","function","renderRowDetail","ggrCasino","ggrSport","ggrLive","onExportFormat","onApplyAdvancedFilters","handleApplyAdvancedFilters","onColumnOrderChange","col","onGroupingChange","onRowExpand","rowId","expanded","onDrillDown","isArray","onApply","onReset","onFilterSave","controlledExpanded","defaultExpanded","internalExpanded","setInternalExpanded","isControlled","activeFilters","key","handleFilterChange","handleResetFilters","renderFilterInput","_filter$options","defaultValue","SELECT","labelId","DATE","BOOLEAN","inputProps","max","step","RANGE","flex","ml","IconButton","toggleExpand","f","displayValue","o","toLocaleDateString","onDelete","deleteIcon","ClearIcon","Tooltip","handleSaveFilters","SaveIcon","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","jsx","d"],"sourceRoot":""}