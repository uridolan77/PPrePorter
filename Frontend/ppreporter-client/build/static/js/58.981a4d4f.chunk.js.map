{"version":3,"file":"static/js/58.981a4d4f.chunk.js","mappings":"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","sources":["pages/reports/DailyActionsPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Divider,\n  SelectChangeEvent\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { format, subDays } from 'date-fns';\nimport { FEATURES } from '../../config/constants';\nimport dailyActionsService from '../../services/api/dailyActionsService';\n\n// Import icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport TableChartIcon from '@mui/icons-material/TableChart';\n\n// Types\ninterface WhiteLabel {\n  id: string;\n  name: string;\n}\n\ninterface DailyAction {\n  id: string;\n  date: string;\n  whiteLabelName: string;\n  registrations: number;\n  ftd: number;\n  deposits: number;\n  paidCashouts: number;\n  ggrCasino: number;\n  ggrSport: number;\n  ggrLive: number;\n  totalGGR: number;\n}\n\ninterface Summary {\n  totalRegistrations: number;\n  totalFTD: number;\n  totalDeposits: number;\n  totalCashouts: number;\n  totalGGR: number;\n}\n\ninterface Filters {\n  startDate: string;\n  endDate: string;\n  whiteLabelId?: string;\n}\n\nconst DailyActionsPage: React.FC = () => {\n  // State for filters - use dates that match our mock data (May 2023)\n  const [startDate, setStartDate] = useState<Date>(new Date('2023-05-01'));\n  const [endDate, setEndDate] = useState<Date>(new Date('2023-05-05'));\n  const [whiteLabelId, setWhiteLabelId] = useState<string>('');\n  const [whiteLabels, setWhiteLabels] = useState<WhiteLabel[]>([]);\n\n  // State for data\n  const [dailyActions, setDailyActions] = useState<DailyAction[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // State for summary metrics\n  const [summary, setSummary] = useState<Summary>({\n    totalRegistrations: 0,\n    totalFTD: 0,\n    totalDeposits: 0,\n    totalCashouts: 0,\n    totalGGR: 0\n  });\n\n  // Fetch metadata (white labels) on component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        console.log('[DAILY ACTIONS PAGE] Fetching metadata');\n\n        // Check if mock data is enabled (from constants or localStorage)\n        const useMockData = FEATURES.USE_MOCK_DATA_FOR_UI_TESTING || localStorage.getItem('USE_MOCK_DATA_FOR_UI_TESTING') === 'true';\n\n        if (useMockData) {\n          console.log('[DAILY ACTIONS PAGE] Using mock data for metadata');\n\n          // Import mock data dynamically\n          const mockDataModule = await import('../../mockData');\n          const mockDataService = mockDataModule.default;\n\n          // Get mock metadata\n          const mockMetadata = mockDataService.getMockData('/reports/daily-actions/metadata');\n\n          if (mockMetadata && mockMetadata.whiteLabels) {\n            console.log('[DAILY ACTIONS PAGE] Got mock white labels:', mockMetadata.whiteLabels);\n            setWhiteLabels(mockMetadata.whiteLabels);\n            return;\n          }\n        }\n\n        // Fall back to service if mock data is not available\n        const data = await dailyActionsService.getMetadata();\n        console.log('[DAILY ACTIONS PAGE] Got white labels from service:', (data as any).whiteLabels);\n        setWhiteLabels((data as any).whiteLabels || []);\n      } catch (err) {\n        console.error('[DAILY ACTIONS PAGE] Error fetching metadata:', err);\n        setError('Failed to load metadata. Please try again later.');\n      }\n    };\n\n    fetchMetadata();\n  }, []);\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    // Define a function to fetch data on mount to avoid dependency issues\n    const fetchInitialData = async () => {\n      console.log('[DAILY ACTIONS PAGE] Fetching initial data');\n      await fetchDailyActions();\n    };\n\n    // Set a small delay to ensure the component is fully mounted\n    const timer = setTimeout(() => {\n      fetchInitialData();\n    }, 100);\n\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Fetch daily actions data\n  const fetchDailyActions = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Format dates for API\n      const formattedStartDate = format(startDate, 'yyyy-MM-dd');\n      const formattedEndDate = format(endDate, 'yyyy-MM-dd');\n\n      // Create filters object\n      const filters: Filters = {\n        startDate: formattedStartDate,\n        endDate: formattedEndDate\n      };\n\n      if (whiteLabelId && whiteLabelId !== '') {\n        console.log(`[DAILY ACTIONS PAGE] Filtering by white label ID: ${whiteLabelId}`);\n        filters.whiteLabelId = whiteLabelId;\n      } else {\n        console.log('[DAILY ACTIONS PAGE] No white label filter applied');\n      }\n\n      console.log('[DAILY ACTIONS PAGE] Starting data fetch with filters:', filters);\n\n      // Try to get mock data directly first\n      try {\n        console.log('[DAILY ACTIONS PAGE] Checking if mock data is enabled');\n        // Check both the constant and localStorage\n        const useMockData = FEATURES.USE_MOCK_DATA_FOR_UI_TESTING || localStorage.getItem('USE_MOCK_DATA_FOR_UI_TESTING') === 'true';\n\n        if (useMockData) {\n          console.log('[DAILY ACTIONS PAGE] Mock data is enabled, trying to get mock data directly');\n\n          // Import mock data dynamically\n          const mockDataModule = await import('../../mockData');\n          const mockDataService = mockDataModule.default;\n\n          // Try to get summary data\n          console.log('[DAILY ACTIONS PAGE] Getting mock summary data directly with filters:', filters);\n          const mockSummaryData = mockDataService.getMockData('/reports/daily-actions/summary', filters);\n\n          if (mockSummaryData && mockSummaryData.dailyActions) {\n            console.log('[DAILY ACTIONS PAGE] Got mock summary data directly:', mockSummaryData);\n            console.log('[DAILY ACTIONS PAGE] Daily actions from mock data:', mockSummaryData.dailyActions);\n\n            // Use the mock data\n            setDailyActions(mockSummaryData.dailyActions || []);\n\n            // Set summary metrics\n            const summaryData: Summary = {\n              totalRegistrations: mockSummaryData.totalRegistrations || 0,\n              totalFTD: mockSummaryData.totalFTD || 0,\n              totalDeposits: mockSummaryData.totalDeposits || 0,\n              totalCashouts: mockSummaryData.totalCashouts || 0,\n              totalGGR: mockSummaryData.totalGGR || 0\n            };\n\n            setSummary(summaryData);\n            setLoading(false);\n            return;\n          } else {\n            console.log('[DAILY ACTIONS PAGE] No mock summary data found or no daily actions in the response, trying regular mock data');\n\n            // Try to get regular data\n            const mockRegularData = mockDataService.getMockData('/reports/daily-actions/data', filters);\n\n            if (mockRegularData) {\n              console.log('[DAILY ACTIONS PAGE] Got mock regular data directly:', mockRegularData);\n\n              // Check if we have dailyActions in the response\n              if (mockRegularData.dailyActions && mockRegularData.dailyActions.length > 0) {\n                console.log('[DAILY ACTIONS PAGE] Using dailyActions from mock data:', mockRegularData.dailyActions);\n                setDailyActions(mockRegularData.dailyActions);\n              } else if (mockRegularData.data && mockRegularData.data.length > 0) {\n                // Fall back to data field\n                console.log('[DAILY ACTIONS PAGE] Using data field from mock data:', mockRegularData.data);\n                setDailyActions(mockRegularData.data);\n              } else {\n                // No data found\n                console.log('[DAILY ACTIONS PAGE] No data found in mock response');\n                setDailyActions([]);\n              }\n\n              // Check if we have summary in the response\n              if (mockRegularData.summary) {\n                setSummary(mockRegularData.summary);\n              } else {\n                // Calculate summary metrics from the data\n                const data = mockRegularData.dailyActions || mockRegularData.data || [];\n                const summaryData: Summary = {\n                  totalRegistrations: mockRegularData.totalRegistrations || data.reduce((sum: number, item: any) => sum + (item.registrations || 0), 0),\n                  totalFTD: mockRegularData.totalFTD || data.reduce((sum: number, item: any) => sum + (item.ftd || 0), 0),\n                  totalDeposits: mockRegularData.totalDeposits || data.reduce((sum: number, item: any) => sum + (item.deposits || 0), 0),\n                  totalCashouts: mockRegularData.totalCashouts || data.reduce((sum: number, item: any) => sum + (item.paidCashouts || 0), 0),\n                  totalGGR: mockRegularData.totalGGR || data.reduce((sum: number, item: any) => sum + (item.totalGGR || 0), 0)\n                };\n\n                setSummary(summaryData);\n              }\n\n              setLoading(false);\n              return;\n            }\n          }\n        }\n      } catch (mockError) {\n        console.error('[DAILY ACTIONS PAGE] Error getting mock data directly:', mockError);\n      }\n\n      // Fetch summary data first\n      try {\n        console.log('[DAILY ACTIONS PAGE] Fetching summary data with filters:', filters);\n        const summaryResponse = await dailyActionsService.getSummaryData(filters);\n        console.log('[DAILY ACTIONS PAGE] Summary response:', summaryResponse);\n\n        if (summaryResponse && summaryResponse.dailyActions) {\n          setDailyActions(summaryResponse.dailyActions);\n\n          // Set summary metrics\n          const summaryData: Summary = {\n            totalRegistrations: summaryResponse.totalRegistrations || 0,\n            totalFTD: summaryResponse.totalFTD || 0,\n            totalDeposits: summaryResponse.totalDeposits || 0,\n            totalCashouts: summaryResponse.totalCashouts || 0,\n            totalGGR: summaryResponse.totalGGR || 0\n          };\n\n          setSummary(summaryData);\n        } else {\n          throw new Error('Invalid summary data format');\n        }\n      } catch (summaryError) {\n        console.error('[DAILY ACTIONS PAGE] Error fetching summary data:', summaryError);\n\n        // Fall back to regular data fetch if summary fails\n        console.log('[DAILY ACTIONS PAGE] Falling back to regular data fetch');\n        const response = await dailyActionsService.getData(filters);\n        console.log('[DAILY ACTIONS PAGE] Regular data response:', response);\n\n        const data = (response as any).data || [];\n\n        setDailyActions(data);\n\n        // Set summary metrics if available in the response\n        if ((response as any).summary) {\n          setSummary((response as any).summary);\n        } else {\n          // Calculate summary metrics if not provided by the API\n          const summaryData: Summary = {\n            totalRegistrations: data.reduce((sum: number, item: any) => sum + (item.registrations || 0), 0),\n            totalFTD: data.reduce((sum: number, item: any) => sum + (item.ftd || 0), 0),\n            totalDeposits: data.reduce((sum: number, item: any) => sum + (item.deposits || 0), 0),\n            totalCashouts: data.reduce((sum: number, item: any) => sum + (item.paidCashouts || 0), 0),\n            totalGGR: data.reduce((sum: number, item: any) => sum + (item.totalGGR || 0), 0)\n          };\n\n          setSummary(summaryData);\n        }\n      }\n    } catch (err) {\n      console.error('[DAILY ACTIONS PAGE] Error fetching daily actions:', err);\n      setError('Failed to load daily actions data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleApplyFilters = (): void => {\n    console.log('[DAILY ACTIONS PAGE] Apply filters button clicked');\n    console.log('[DAILY ACTIONS PAGE] Current filters:', {\n      startDate: format(startDate, 'yyyy-MM-dd'),\n      endDate: format(endDate, 'yyyy-MM-dd'),\n      whiteLabelId\n    });\n    fetchDailyActions();\n  };\n\n  // Handle white label change\n  const handleWhiteLabelChange = (event: SelectChangeEvent): void => {\n    console.log(`[DAILY ACTIONS PAGE] White label changed to: ${event.target.value}`);\n    setWhiteLabelId(event.target.value);\n  };\n\n  // Format currency values\n  const formatCurrency = (value: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(value);\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom>\n            Daily Actions Report\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and analyze daily player activities, deposits, and gaming revenue\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component={RouterLink}\n          to=\"/reports/daily-actions/advanced\"\n          startIcon={<FilterListIcon />}\n        >\n          Advanced Report\n        </Button>\n      </Box>\n\n      {/* Filters */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <FilterListIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Filters</Typography>\n        </Box>\n\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => newValue && setStartDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => newValue && setEndDate(newValue)}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </LocalizationProvider>\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth>\n              <InputLabel>White Label</InputLabel>\n              <Select\n                value={whiteLabelId}\n                onChange={handleWhiteLabelChange}\n                label=\"White Label\"\n              >\n                <MenuItem value=\"\">All White Labels</MenuItem>\n                {whiteLabels && whiteLabels.length > 0 ?\n                  whiteLabels.map((wl) => (\n                    <MenuItem key={wl.id} value={wl.id}>{wl.name}</MenuItem>\n                  ))\n                : [\n                  // Default white labels if none are loaded - use array instead of Fragment\n                  <MenuItem key=\"casino-royale\" value=\"casino-royale\">Casino Royale</MenuItem>,\n                  <MenuItem key=\"lucky-spin\" value=\"lucky-spin\">Lucky Spin</MenuItem>,\n                  <MenuItem key=\"golden-bet\" value=\"golden-bet\">Golden Bet</MenuItem>\n                ]}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} md={3} sx={{ display: 'flex', alignItems: 'center' }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<RefreshIcon />}\n              onClick={handleApplyFilters}\n              sx={{ mr: 2 }}\n            >\n              Apply Filters\n            </Button>\n\n            <span>\n              <Button\n                variant=\"outlined\"\n                startIcon={<DownloadIcon />}\n                disabled={loading || dailyActions.length === 0}\n              >\n                Export\n              </Button>\n            </span>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Registrations\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalRegistrations.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                First Time Depositors\n              </Typography>\n              <Typography variant=\"h5\">\n                {summary.totalFTD.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Deposits\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalDeposits)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Cashouts\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalCashouts)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Total GGR\n              </Typography>\n              <Typography variant=\"h5\">\n                {formatCurrency(summary.totalGGR)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Data Table */}\n      <Paper sx={{ p: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <TableChartIcon sx={{ mr: 1 }} />\n          <Typography variant=\"h6\">Daily Actions Data</Typography>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : dailyActions.length === 0 ? (\n          <Alert severity=\"info\">\n            No data available for the selected filters. Try adjusting your filters or click \"Apply Filters\" to load data.\n          </Alert>\n        ) : (\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Date</TableCell>\n                  <TableCell>White Label</TableCell>\n                  <TableCell align=\"right\">Registrations</TableCell>\n                  <TableCell align=\"right\">FTD</TableCell>\n                  <TableCell align=\"right\">Deposits</TableCell>\n                  <TableCell align=\"right\">Cashouts</TableCell>\n                  <TableCell align=\"right\">Casino GGR</TableCell>\n                  <TableCell align=\"right\">Sports GGR</TableCell>\n                  <TableCell align=\"right\">Live GGR</TableCell>\n                  <TableCell align=\"right\">Total GGR</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {dailyActions.map((row) => (\n                  <TableRow key={row.id}>\n                    <TableCell>{format(new Date(row.date), 'MMM dd, yyyy')}</TableCell>\n                    <TableCell>{row.whiteLabelName}</TableCell>\n                    <TableCell align=\"right\">{row.registrations}</TableCell>\n                    <TableCell align=\"right\">{row.ftd}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.deposits)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.paidCashouts)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.ggrCasino)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.ggrSport)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.ggrLive)}</TableCell>\n                    <TableCell align=\"right\">{formatCurrency(row.totalGGR)}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default DailyActionsPage;\n"],"names":["DailyActionsPage","startDate","setStartDate","useState","Date","endDate","setEndDate","whiteLabelId","setWhiteLabelId","whiteLabels","setWhiteLabels","dailyActions","setDailyActions","loading","setLoading","error","setError","summary","setSummary","totalRegistrations","totalFTD","totalDeposits","totalCashouts","totalGGR","useEffect","async","console","log","FEATURES","USE_MOCK_DATA_FOR_UI_TESTING","localStorage","getItem","mockDataModule","mockMetadata","default","getMockData","data","dailyActionsService","getMetadata","err","fetchMetadata","timer","setTimeout","fetchDailyActions","fetchInitialData","clearTimeout","formattedStartDate","format","filters","mockDataService","mockSummaryData","summaryData","mockRegularData","length","reduce","sum","item","registrations","ftd","deposits","paidCashouts","mockError","summaryResponse","getSummaryData","Error","summaryError","response","getData","formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","_jsxs","Container","maxWidth","children","Box","sx","mb","display","justifyContent","alignItems","_jsx","Typography","variant","gutterBottom","color","Button","component","RouterLink","to","startIcon","FilterListIcon","Paper","p","mr","Grid","container","spacing","xs","md","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","label","onChange","newValue","slotProps","textField","fullWidth","FormControl","InputLabel","Select","event","target","MenuItem","map","wl","id","name","RefreshIcon","onClick","handleApplyFilters","DownloadIcon","disabled","sm","Card","CardContent","toLocaleString","TableChartIcon","Alert","severity","CircularProgress","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","date","whiteLabelName","ggrCasino","ggrSport","ggrLive"],"sourceRoot":""}